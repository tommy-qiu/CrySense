
LastHope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004434  08004434  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800443c  0800443c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000070  080044b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080044b4  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076d0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196a  00000000  00000000  00027770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  000290e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  000297d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c41  00000000  00000000  00029df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ddf  00000000  00000000  0004ba39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8a94  00000000  00000000  00054818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d2ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002258  00000000  00000000  0011d2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004368 	.word	0x08004368

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004368 	.word	0x08004368

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b8:	f000 fae0 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f810 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f8c8 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c4:	f000 f8a6 	bl	8000714 <MX_DMA_Init>
  MX_I2S1_Init();
 80005c8:	f000 f876 	bl	80006b8 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s1, (uint8_t *)data_i2s, sizeof(data_i2s)/2);
 80005cc:	2264      	movs	r2, #100	; 0x64
 80005ce:	4902      	ldr	r1, [pc, #8]	; (80005d8 <main+0x24>)
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <main+0x28>)
 80005d2:	f001 fa53 	bl	8001a7c <HAL_I2S_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x22>
 80005d8:	20000134 	.word	0x20000134
 80005dc:	2000008c 	.word	0x2000008c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 ff24 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SystemClock_Config+0xd4>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fc1f 	bl	8002eac <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f8a2 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2105      	movs	r1, #5
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fc06 	bl	8001ea8 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f88b 	bl	80007bc <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_I2S1_Init+0x54>)
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <MX_I2S1_Init+0x58>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2S1_Init+0x54>)
 80006c4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006c8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_I2S1_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2S1_Init+0x54>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_I2S1_Init+0x54>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_I2S1_Init+0x54>)
 80006de:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80006e2:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2S1_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_I2S1_Init+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2S1_Init+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_I2S1_Init+0x54>)
 80006f8:	f001 f8c8 	bl	800188c <HAL_I2S_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 8000702:	f000 f85b 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000008c 	.word	0x2000008c
 8000710:	40013000 	.word	0x40013000

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <MX_DMA_Init+0x3c>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2038      	movs	r0, #56	; 0x38
 800073c:	f000 fb6b 	bl	8000e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000740:	2038      	movs	r0, #56	; 0x38
 8000742:	f000 fb84 	bl	8000e4e <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_GPIO_Init+0x30>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <MX_GPIO_Init+0x30>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_GPIO_Init+0x30>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_I2S_RxCpltCallback+0x28>)
 8000792:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <HAL_I2S_RxCpltCallback+0x2c>)
 8000798:	801a      	strh	r2, [r3, #0]
	printf("%d\n", data_i2s[0]);
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_I2S_RxCpltCallback+0x28>)
 800079c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <HAL_I2S_RxCpltCallback+0x30>)
 80007a4:	f002 fe52 	bl	800344c <iprintf>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000134 	.word	0x20000134
 80007b4:	200001fc 	.word	0x200001fc
 80007b8:	08004380 	.word	0x08004380

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0a0      	sub	sp, #128	; 0x80
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	225c      	movs	r2, #92	; 0x5c
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fdff 	bl	800343c <memset>
  if(hi2s->Instance==SPI1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a3f      	ldr	r2, [pc, #252]	; (8000940 <HAL_I2S_MspInit+0x128>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d176      	bne.n	8000936 <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800084c:	2332      	movs	r3, #50	; 0x32
 800084e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000854:	2308      	movs	r3, #8
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000864:	2300      	movs	r3, #0
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fc01 	bl	8002074 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8000878:	f7ff ffa0 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <HAL_I2S_MspInit+0x12c>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <HAL_I2S_MspInit+0x12c>)
 8000886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088a:	6453      	str	r3, [r2, #68]	; 0x44
 800088c:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <HAL_I2S_MspInit+0x12c>)
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <HAL_I2S_MspInit+0x12c>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	4a28      	ldr	r2, [pc, #160]	; (8000944 <HAL_I2S_MspInit+0x12c>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6313      	str	r3, [r2, #48]	; 0x30
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <HAL_I2S_MspInit+0x12c>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80008b4:	23b0      	movs	r3, #176	; 0xb0
 80008b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c4:	2305      	movs	r3, #5
 80008c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008cc:	4619      	mov	r1, r3
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <HAL_I2S_MspInit+0x130>)
 80008d0:	f000 fe48 	bl	8001564 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_I2S_MspInit+0x134>)
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <HAL_I2S_MspInit+0x138>)
 80008d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <HAL_I2S_MspInit+0x134>)
 80008dc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80008e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <HAL_I2S_MspInit+0x134>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_I2S_MspInit+0x134>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_I2S_MspInit+0x134>)
 80008f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_I2S_MspInit+0x134>)
 80008f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_I2S_MspInit+0x134>)
 8000900:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000904:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_I2S_MspInit+0x134>)
 8000908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_I2S_MspInit+0x134>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_I2S_MspInit+0x134>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <HAL_I2S_MspInit+0x134>)
 800091c:	f000 fab2 	bl	8000e84 <HAL_DMA_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 8000926:	f7ff ff49 	bl	80007bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_I2S_MspInit+0x134>)
 800092e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_I2S_MspInit+0x134>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3780      	adds	r7, #128	; 0x80
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013000 	.word	0x40013000
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	200000d4 	.word	0x200000d4
 8000950:	40026410 	.word	0x40026410

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f93e 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <DMA2_Stream0_IRQHandler+0x10>)
 80009ae:	f000 fb6f 	bl	8001090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000d4 	.word	0x200000d4

080009bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e00a      	b.n	80009e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ce:	f3af 8000 	nop.w
 80009d2:	4601      	mov	r1, r0
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	b2ca      	uxtb	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbf0      	blt.n	80009ce <_read+0x12>
  }

  return len;
 80009ec:	687b      	ldr	r3, [r7, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e009      	b.n	8000a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf1      	blt.n	8000a08 <_write+0x12>
  }
  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_close>:

int _close(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a56:	605a      	str	r2, [r3, #4]
  return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f002 fc8e 	bl	80033e8 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20020000 	.word	0x20020000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	20000200 	.word	0x20000200
 8000b00:	20000218 	.word	0x20000218

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b44:	4c0b      	ldr	r4, [pc, #44]	; (8000b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd7 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fc4d 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd2b 	bl	80005b4 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b6c:	08004444 	.word	0x08004444
  ldr r2, =_sbss
 8000b70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b74:	20000218 	.word	0x20000218

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f92b 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe0a 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f943 	bl	8000e6a <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f90b 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000204 	.word	0x20000204

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000204 	.word	0x20000204

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff feda 	bl	8000c48 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e099      	b.n	8000fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ec0:	e00f      	b.n	8000ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ec2:	f7ff fec1 	bl	8000c48 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d908      	bls.n	8000ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e078      	b.n	8000fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e8      	bne.n	8000ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <HAL_DMA_Init+0x158>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d107      	bne.n	8000f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4313      	orrs	r3, r2
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f023 0307 	bic.w	r3, r3, #7
 8000f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d117      	bne.n	8000fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00e      	beq.n	8000fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fa6f 	bl	800146c <DMA_CheckFifoParam>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d008      	beq.n	8000fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2240      	movs	r2, #64	; 0x40
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e016      	b.n	8000fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fa26 	bl	8001400 <DMA_CalcBaseAndBitshift>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fbc:	223f      	movs	r2, #63	; 0x3f
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	f010803f 	.word	0xf010803f

08000fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_DMA_Start_IT+0x26>
 8001002:	2302      	movs	r3, #2
 8001004:	e040      	b.n	8001088 <HAL_DMA_Start_IT+0xa8>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d12f      	bne.n	800107a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2202      	movs	r2, #2
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f9b8 	bl	80013a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001038:	223f      	movs	r2, #63	; 0x3f
 800103a:	409a      	lsls	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0216 	orr.w	r2, r2, #22
 800104e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2b00      	cmp	r3, #0
 8001056:	d007      	beq.n	8001068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0208 	orr.w	r2, r2, #8
 8001066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e005      	b.n	8001086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001082:	2302      	movs	r3, #2
 8001084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001086:	7dfb      	ldrb	r3, [r7, #23]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800109c:	4b8e      	ldr	r3, [pc, #568]	; (80012d8 <HAL_DMA_IRQHandler+0x248>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a8e      	ldr	r2, [pc, #568]	; (80012dc <HAL_DMA_IRQHandler+0x24c>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0a9b      	lsrs	r3, r3, #10
 80010a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ba:	2208      	movs	r2, #8
 80010bc:	409a      	lsls	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d01a      	beq.n	80010fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d013      	beq.n	80010fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0204 	bic.w	r2, r2, #4
 80010e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e8:	2208      	movs	r2, #8
 80010ea:	409a      	lsls	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001100:	2201      	movs	r2, #1
 8001102:	409a      	lsls	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d012      	beq.n	8001132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111e:	2201      	movs	r2, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	f043 0202 	orr.w	r2, r3, #2
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2204      	movs	r2, #4
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d012      	beq.n	8001168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00b      	beq.n	8001168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	2204      	movs	r2, #4
 8001156:	409a      	lsls	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001160:	f043 0204 	orr.w	r2, r3, #4
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116c:	2210      	movs	r2, #16
 800116e:	409a      	lsls	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d043      	beq.n	8001200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d03c      	beq.n	8001200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	2210      	movs	r2, #16
 800118c:	409a      	lsls	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d018      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d024      	beq.n	8001200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	4798      	blx	r3
 80011be:	e01f      	b.n	8001200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d01b      	beq.n	8001200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	4798      	blx	r3
 80011d0:	e016      	b.n	8001200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0208 	bic.w	r2, r2, #8
 80011ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001204:	2220      	movs	r2, #32
 8001206:	409a      	lsls	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 808f 	beq.w	8001330 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8087 	beq.w	8001330 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2220      	movs	r2, #32
 8001228:	409a      	lsls	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b05      	cmp	r3, #5
 8001238:	d136      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0216 	bic.w	r2, r2, #22
 8001248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695a      	ldr	r2, [r3, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <HAL_DMA_IRQHandler+0x1da>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0208 	bic.w	r2, r2, #8
 8001278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	223f      	movs	r2, #63	; 0x3f
 8001280:	409a      	lsls	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129a:	2b00      	cmp	r3, #0
 800129c:	d07e      	beq.n	800139c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	4798      	blx	r3
        }
        return;
 80012a6:	e079      	b.n	800139c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d01d      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10d      	bne.n	80012e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d031      	beq.n	8001330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
 80012d4:	e02c      	b.n	8001330 <HAL_DMA_IRQHandler+0x2a0>
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000
 80012dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d023      	beq.n	8001330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
 80012f0:	e01e      	b.n	8001330 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10f      	bne.n	8001320 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0210 	bic.w	r2, r2, #16
 800130e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001334:	2b00      	cmp	r3, #0
 8001336:	d032      	beq.n	800139e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d022      	beq.n	800138a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2205      	movs	r2, #5
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3301      	adds	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	d307      	bcc.n	8001378 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f2      	bne.n	800135c <HAL_DMA_IRQHandler+0x2cc>
 8001376:	e000      	b.n	800137a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001378:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	4798      	blx	r3
 800139a:	e000      	b.n	800139e <HAL_DMA_IRQHandler+0x30e>
        return;
 800139c:	bf00      	nop
    }
  }
}
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b40      	cmp	r3, #64	; 0x40
 80013d0:	d108      	bne.n	80013e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013e2:	e007      	b.n	80013f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	60da      	str	r2, [r3, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	3b10      	subs	r3, #16
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <DMA_CalcBaseAndBitshift+0x64>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <DMA_CalcBaseAndBitshift+0x68>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d909      	bls.n	8001442 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	1d1a      	adds	r2, r3, #4
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	659a      	str	r2, [r3, #88]	; 0x58
 8001440:	e007      	b.n	8001452 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	aaaaaaab 	.word	0xaaaaaaab
 8001468:	08004394 	.word	0x08004394

0800146c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d11f      	bne.n	80014c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d856      	bhi.n	800153a <DMA_CheckFifoParam+0xce>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <DMA_CheckFifoParam+0x28>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014b7 	.word	0x080014b7
 800149c:	080014a5 	.word	0x080014a5
 80014a0:	0800153b 	.word	0x0800153b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d046      	beq.n	800153e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b4:	e043      	b.n	800153e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014be:	d140      	bne.n	8001542 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014c4:	e03d      	b.n	8001542 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ce:	d121      	bne.n	8001514 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d837      	bhi.n	8001546 <DMA_CheckFifoParam+0xda>
 80014d6:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <DMA_CheckFifoParam+0x70>)
 80014d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	080014f3 	.word	0x080014f3
 80014e4:	080014ed 	.word	0x080014ed
 80014e8:	08001505 	.word	0x08001505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
      break;
 80014f0:	e030      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d025      	beq.n	800154a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001502:	e022      	b.n	800154a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800150c:	d11f      	bne.n	800154e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001512:	e01c      	b.n	800154e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d903      	bls.n	8001522 <DMA_CheckFifoParam+0xb6>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d003      	beq.n	8001528 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001520:	e018      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
      break;
 8001526:	e015      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00e      	beq.n	8001552 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
      break;
 8001538:	e00b      	b.n	8001552 <DMA_CheckFifoParam+0xe6>
      break;
 800153a:	bf00      	nop
 800153c:	e00a      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 800153e:	bf00      	nop
 8001540:	e008      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 8001542:	bf00      	nop
 8001544:	e006      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 8001546:	bf00      	nop
 8001548:	e004      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 800154a:	bf00      	nop
 800154c:	e002      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;   
 800154e:	bf00      	nop
 8001550:	e000      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 8001552:	bf00      	nop
    }
  } 
  
  return status; 
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e165      	b.n	800184c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8154 	bne.w	8001846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80ae 	beq.w	8001846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_GPIO_Init+0x300>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <HAL_GPIO_Init+0x300>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <HAL_GPIO_Init+0x300>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001706:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_GPIO_Init+0x304>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_GPIO_Init+0x308>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d025      	beq.n	800177e <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x30c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01f      	beq.n	800177a <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x310>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x314>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_GPIO_Init+0x318>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x20a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_GPIO_Init+0x31c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x206>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a49      	ldr	r2, [pc, #292]	; (8001884 <HAL_GPIO_Init+0x320>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x202>
 8001762:	2306      	movs	r3, #6
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001766:	2307      	movs	r3, #7
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800177e:	2300      	movs	r3, #0
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	; (8001868 <HAL_GPIO_Init+0x304>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a31      	ldr	r2, [pc, #196]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a26      	ldr	r2, [pc, #152]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_GPIO_Init+0x324>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_GPIO_Init+0x324>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_GPIO_Init+0x324>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_GPIO_Init+0x324>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	f67f ae96 	bls.w	8001580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40013800 	.word	0x40013800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40021400 	.word	0x40021400
 8001884:	40021800 	.word	0x40021800
 8001888:	40013c00 	.word	0x40013c00

0800188c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0e1      	b.n	8001a62 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a6d      	ldr	r2, [pc, #436]	; (8001a6c <HAL_I2S_Init+0x1e0>)
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7fe ffad 	bl	8000818 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2202      	movs	r2, #2
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018d4:	f023 030f 	bic.w	r3, r3, #15
 80018d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2202      	movs	r2, #2
 80018e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d06f      	beq.n	80019ca <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018f2:	2310      	movs	r3, #16
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e001      	b.n	80018fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b20      	cmp	r3, #32
 8001902:	d802      	bhi.n	800190a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <HAL_I2S_Init+0x1e4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_I2S_Init+0x92>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <HAL_I2S_Init+0x1e8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d104      	bne.n	8001928 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800191e:	2001      	movs	r0, #1
 8001920:	f000 fed2 	bl	80026c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	e003      	b.n	8001930 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001928:	2002      	movs	r0, #2
 800192a:	f000 fecd 	bl	80026c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800192e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001938:	d125      	bne.n	8001986 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	fbb2 f2f3 	udiv	r2, r2, r3
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	3305      	adds	r3, #5
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e01f      	b.n	80019a4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	fbb2 f2f3 	udiv	r2, r2, r3
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	3305      	adds	r3, #5
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e00e      	b.n	80019a4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fbb2 f2f3 	udiv	r2, r2, r3
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	3305      	adds	r3, #5
 80019a2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4a34      	ldr	r2, [pc, #208]	; (8001a78 <HAL_I2S_Init+0x1ec>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	085b      	lsrs	r3, r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	e003      	b.n	80019d2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d902      	bls.n	80019de <HAL_I2S_Init+0x152>
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d907      	bls.n	80019ee <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f043 0210 	orr.w	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e039      	b.n	8001a62 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	ea42 0103 	orr.w	r1, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a0c:	f023 030f 	bic.w	r3, r3, #15
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6851      	ldr	r1, [r2, #4]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6892      	ldr	r2, [r2, #8]
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68d2      	ldr	r2, [r2, #12]
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6992      	ldr	r2, [r2, #24]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a30:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b30      	cmp	r3, #48	; 0x30
 8001a38:	d003      	beq.n	8001a42 <HAL_I2S_Init+0x1b6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2bb0      	cmp	r3, #176	; 0xb0
 8001a40:	d107      	bne.n	8001a52 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a50:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08001d95 	.word	0x08001d95
 8001a70:	40003800 	.word	0x40003800
 8001a74:	40003c00 	.word	0x40003c00
 8001a78:	cccccccd 	.word	0xcccccccd

08001a7c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_I2S_Receive_DMA+0x1a>
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0a1      	b.n	8001bde <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2S_Receive_DMA+0x2e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e099      	b.n	8001bde <HAL_I2S_Receive_DMA+0x162>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e089      	b.n	8001bde <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2204      	movs	r2, #4
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d002      	beq.n	8001af6 <HAL_I2S_Receive_DMA+0x7a>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d10a      	bne.n	8001b0c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	865a      	strh	r2, [r3, #50]	; 0x32
 8001b0a:	e005      	b.n	8001b18 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	88fa      	ldrh	r2, [r7, #6]
 8001b10:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	88fa      	ldrh	r2, [r7, #6]
 8001b16:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <HAL_I2S_Receive_DMA+0x16c>)
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	4a31      	ldr	r2, [pc, #196]	; (8001bec <HAL_I2S_Receive_DMA+0x170>)
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	4a30      	ldr	r2, [pc, #192]	; (8001bf0 <HAL_I2S_Receive_DMA+0x174>)
 8001b2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b3e:	d10a      	bne.n	8001b56 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	330c      	adds	r3, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001b6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001b6e:	f7ff fa37 	bl	8000fe0 <HAL_DMA_Start_IT>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00f      	beq.n	8001b98 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	f043 0208 	orr.w	r2, r3, #8
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e022      	b.n	8001bde <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bb4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	08001c73 	.word	0x08001c73
 8001bec:	08001c31 	.word	0x08001c31
 8001bf0:	08001c8f 	.word	0x08001c8f

08001bf4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10e      	bne.n	8001c64 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7fe fd8f 	bl	8000788 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff ffc1 	bl	8001c08 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0203 	bic.w	r2, r2, #3
 8001caa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f043 0208 	orr.w	r2, r3, #8
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff ffa5 	bl	8001c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	881a      	ldrh	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	1c9a      	adds	r2, r3, #2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10e      	bne.n	8001d2e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff63 	bl	8001bf4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	1c9a      	adds	r2, r3, #2
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fcfe 	bl	8000788 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d13a      	bne.n	8001e26 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d109      	bne.n	8001dce <I2S_IRQHandler+0x3a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d102      	bne.n	8001dce <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffb4 	bl	8001d36 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d126      	bne.n	8001e26 <I2S_IRQHandler+0x92>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d11f      	bne.n	8001e26 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001df4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f043 0202 	orr.w	r2, r3, #2
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fefb 	bl	8001c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d136      	bne.n	8001ea0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d109      	bne.n	8001e50 <I2S_IRQHandler+0xbc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d102      	bne.n	8001e50 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff45 	bl	8001cda <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d122      	bne.n	8001ea0 <I2S_IRQHandler+0x10c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d11b      	bne.n	8001ea0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e76:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff febe 	bl	8001c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0cc      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d90c      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b8      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001efc:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a52      	ldr	r2, [pc, #328]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	494d      	ldr	r1, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d044      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e067      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4934      	ldr	r1, [pc, #208]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fe56 	bl	8000c48 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe fe52 	bl	8000c48 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e04f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d20c      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e032      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4916      	ldr	r1, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202e:	f000 fd93 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002032:	4602      	mov	r2, r0
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	490a      	ldr	r1, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	5ccb      	ldrb	r3, [r1, r3]
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fdb6 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00
 8002064:	40023800 	.word	0x40023800
 8002068:	08004384 	.word	0x08004384
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d010      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80020ac:	4b6f      	ldr	r3, [pc, #444]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	496c      	ldr	r1, [pc, #432]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80020ca:	2301      	movs	r3, #1
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d010      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80020da:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	4960      	ldr	r1, [pc, #384]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80020f8:	2301      	movs	r3, #1
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d017      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002108:	4b58      	ldr	r3, [pc, #352]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800210a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4955      	ldr	r1, [pc, #340]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002126:	d101      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002128:	2301      	movs	r3, #1
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002134:	2301      	movs	r3, #1
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002152:	4946      	ldr	r1, [pc, #280]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002162:	d101      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002164:	2301      	movs	r3, #1
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002170:	2301      	movs	r3, #1
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 808a 	beq.w	8002296 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a38      	ldr	r2, [pc, #224]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a33      	ldr	r2, [pc, #204]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021aa:	f7fe fd4d 	bl	8000c48 <HAL_GetTick>
 80021ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7fe fd49 	bl	8000c48 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e278      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02f      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d028      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d114      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fd17 	bl	8000c48 <HAL_GetTick>
 800221a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe fd13 	bl	8000c48 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e240      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ee      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800224c:	d114      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002262:	4902      	ldr	r1, [pc, #8]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
 8002268:	e00c      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
 8002274:	42470e40 	.word	0x42470e40
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800227e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002282:	6093      	str	r3, [r2, #8]
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	4944      	ldr	r1, [pc, #272]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002292:	4313      	orrs	r3, r2
 8002294:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80022a8:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80022aa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4937      	ldr	r1, [pc, #220]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022da:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e8:	492e      	ldr	r1, [pc, #184]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d011      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002302:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	4926      	ldr	r1, [pc, #152]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800231a:	d101      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800231c:	2301      	movs	r3, #1
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002332:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	491a      	ldr	r1, [pc, #104]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234a:	2b00      	cmp	r3, #0
 800234c:	d011      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002354:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235c:	4911      	ldr	r1, [pc, #68]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236c:	d101      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800236e:	2301      	movs	r3, #1
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d005      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002380:	f040 80ff 	bne.w	8002582 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800238a:	f7fe fc5d 	bl	8000c48 <HAL_GetTick>
 800238e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002390:	e00e      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002392:	f7fe fc59 	bl	8000c48 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d907      	bls.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e188      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	424711e0 	.word	0x424711e0
 80023ac:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023b0:	4b7e      	ldr	r3, [pc, #504]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ea      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d028      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d124      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023e4:	4b71      	ldr	r3, [pc, #452]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	3301      	adds	r3, #1
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023f6:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fc:	0e1b      	lsrs	r3, r3, #24
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	431a      	orrs	r2, r3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	3b01      	subs	r3, #1
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	431a      	orrs	r2, r3
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	071b      	lsls	r3, r3, #28
 8002426:	4961      	ldr	r1, [pc, #388]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800244c:	2b00      	cmp	r3, #0
 800244e:	d035      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002458:	d130      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800245a:	4b54      	ldr	r3, [pc, #336]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800245c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800246c:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800246e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002472:	0f1b      	lsrs	r3, r3, #28
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	431a      	orrs	r2, r3
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	3b01      	subs	r3, #1
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	431a      	orrs	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	071b      	lsls	r3, r3, #28
 800249c:	4943      	ldr	r1, [pc, #268]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024a4:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024aa:	f023 021f 	bic.w	r2, r3, #31
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	3b01      	subs	r3, #1
 80024b4:	493d      	ldr	r1, [pc, #244]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d029      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d0:	d124      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ea:	0f1b      	lsrs	r3, r3, #28
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	019b      	lsls	r3, r3, #6
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	3b01      	subs	r3, #1
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	431a      	orrs	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	071b      	lsls	r3, r3, #28
 8002514:	4925      	ldr	r1, [pc, #148]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	071b      	lsls	r3, r3, #28
 800254e:	4917      	ldr	r1, [pc, #92]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fb74 	bl	8000c48 <HAL_GetTick>
 8002560:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002564:	f7fe fb70 	bl	8000c48 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e09f      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	2b01      	cmp	r3, #1
 8002586:	f040 8095 	bne.w	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002590:	f7fe fb5a 	bl	8000c48 <HAL_GetTick>
 8002594:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002596:	e00f      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002598:	f7fe fb56 	bl	8000c48 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d908      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e085      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	42470068 	.word	0x42470068
 80025b4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025b8:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c4:	d0e8      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x566>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d02b      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d127      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80025ee:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	3b01      	subs	r3, #1
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	4928      	ldr	r1, [pc, #160]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	3b01      	subs	r3, #1
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	4922      	ldr	r1, [pc, #136]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01d      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002652:	d118      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	0e1b      	lsrs	r3, r3, #24
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	019b      	lsls	r3, r3, #6
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	3b01      	subs	r3, #1
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	431a      	orrs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	4910      	ldr	r1, [pc, #64]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800268c:	f7fe fadc 	bl	8000c48 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002694:	f7fe fad8 	bl	8000c48 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e007      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b2:	d1ef      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3730      	adds	r7, #48	; 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470070 	.word	0x42470070

080026c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	2b07      	cmp	r3, #7
 80026ee:	f200 8224 	bhi.w	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	080028fb 	.word	0x080028fb
 80026fc:	08002a25 	.word	0x08002a25
 8002700:	08002b3b 	.word	0x08002b3b
 8002704:	08002719 	.word	0x08002719
 8002708:	08002b3b 	.word	0x08002b3b
 800270c:	08002b3b 	.word	0x08002b3b
 8002710:	08002b3b 	.word	0x08002b3b
 8002714:	08002719 	.word	0x08002719
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8002718:	4ba8      	ldr	r3, [pc, #672]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800271a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800271e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800272e:	f000 80d6 	beq.w	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002738:	f200 80dd 	bhi.w	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002742:	f000 809f 	beq.w	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800274c:	f200 80d3 	bhi.w	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002756:	d05b      	beq.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275e:	f200 80ca 	bhi.w	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002768:	f000 80b6 	beq.w	80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002772:	f200 80c0 	bhi.w	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800277c:	f000 8082 	beq.w	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002786:	f200 80b6 	bhi.w	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002796:	d03b      	beq.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002798:	e0ad      	b.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b0:	4a83      	ldr	r2, [pc, #524]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e008      	b.n	80027cc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80027ba:	4b80      	ldr	r3, [pc, #512]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c4:	4a7f      	ldr	r2, [pc, #508]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80027cc:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	0e1b      	lsrs	r3, r3, #24
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80027da:	4b78      	ldr	r3, [pc, #480]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	fb03 f202 	mul.w	r2, r3, r2
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80027f4:	4b71      	ldr	r3, [pc, #452]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	61fb      	str	r3, [r7, #28]
          break;
 800280e:	e073      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800281c:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002826:	4a66      	ldr	r2, [pc, #408]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8002830:	4b62      	ldr	r3, [pc, #392]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800283a:	4a62      	ldr	r2, [pc, #392]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8002842:	4b5e      	ldr	r3, [pc, #376]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002850:	4b5a      	ldr	r3, [pc, #360]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	fb03 f202 	mul.w	r2, r3, r2
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	61fb      	str	r3, [r7, #28]
          break;
 8002882:	e039      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002884:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002890:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002898:	4a49      	ldr	r2, [pc, #292]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80028a2:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028aa:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80028b2:	4b42      	ldr	r3, [pc, #264]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0f1b      	lsrs	r3, r3, #28
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	fb03 f202 	mul.w	r2, r3, r2
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	61fb      	str	r3, [r7, #28]
          break;
 80028d6:	e00f      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80028da:	61fb      	str	r3, [r7, #28]
          break;
 80028dc:	e00c      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80028ea:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80028ec:	61fb      	str	r3, [r7, #28]
          break;
 80028ee:	e003      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80028f0:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80028f2:	61fb      	str	r3, [r7, #28]
          break;
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80028f6:	bf00      	nop
        }
      }
      break;
 80028f8:	e11f      	b.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800290c:	d079      	beq.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002914:	f200 8082 	bhi.w	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800291e:	d03c      	beq.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002926:	d879      	bhi.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002934:	d172      	bne.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002938:	61fb      	str	r3, [r7, #28]
          break;
 800293a:	e072      	b.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002948:	d109      	bne.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800294c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002954:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e008      	b.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298a:	0f1b      	lsrs	r3, r3, #28
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	61fb      	str	r3, [r7, #28]
          break;
 8002998:	e043      	b.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a6:	d111      	bne.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	e010      	b.n	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	017d7840 	.word	0x017d7840
 80029c8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029cc:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	4a5d      	ldr	r2, [pc, #372]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029da:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80029dc:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0f1b      	lsrs	r3, r3, #28
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	61fb      	str	r3, [r7, #28]
          break;
 8002a00:	e00f      	b.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8002a10:	4b4f      	ldr	r3, [pc, #316]	; (8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002a12:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002a14:	e005      	b.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8002a16:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002a18:	61fb      	str	r3, [r7, #28]
          break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
          break;
 8002a20:	bf00      	nop
        }
      }
      break;
 8002a22:	e08a      	b.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a36:	d06f      	beq.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a3e:	d878      	bhi.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a46:	d03c      	beq.n	8002ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a4e:	d870      	bhi.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5c:	d169      	bne.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002a60:	61fb      	str	r3, [r7, #28]
          break;
 8002a62:	e069      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a64:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a70:	d109      	bne.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002a72:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a7c:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	e008      	b.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002a86:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab2:	0f1b      	lsrs	r3, r3, #28
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	61fb      	str	r3, [r7, #28]
          break;
 8002ac0:	e03a      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ace:	d108      	bne.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	e007      	b.n	8002af2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aea:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0f1b      	lsrs	r3, r3, #28
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	61fb      	str	r3, [r7, #28]
          break;
 8002b16:	e00f      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b24:	d102      	bne.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002b28:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002b2a:	e005      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002b2e:	61fb      	str	r3, [r7, #28]
          break;
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
          break;
 8002b36:	bf00      	nop
        }
      }
      break;
 8002b38:	bf00      	nop
    }
  }
  return frequency;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3724      	adds	r7, #36	; 0x24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	017d7840 	.word	0x017d7840
 8002b54:	00bb8000 	.word	0x00bb8000

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b0a6      	sub	sp, #152	; 0x98
 8002b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7e:	4bc8      	ldr	r3, [pc, #800]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	f200 817e 	bhi.w	8002e88 <HAL_RCC_GetSysClockFreq+0x330>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002bc9 	.word	0x08002bc9
 8002b98:	08002e89 	.word	0x08002e89
 8002b9c:	08002e89 	.word	0x08002e89
 8002ba0:	08002e89 	.word	0x08002e89
 8002ba4:	08002bd1 	.word	0x08002bd1
 8002ba8:	08002e89 	.word	0x08002e89
 8002bac:	08002e89 	.word	0x08002e89
 8002bb0:	08002e89 	.word	0x08002e89
 8002bb4:	08002bd9 	.word	0x08002bd9
 8002bb8:	08002e89 	.word	0x08002e89
 8002bbc:	08002e89 	.word	0x08002e89
 8002bc0:	08002e89 	.word	0x08002e89
 8002bc4:	08002d43 	.word	0x08002d43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4bb6      	ldr	r3, [pc, #728]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002bce:	e15f      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd0:	4bb5      	ldr	r3, [pc, #724]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002bd6:	e15b      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd8:	4bb1      	ldr	r3, [pc, #708]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be4:	4bae      	ldr	r3, [pc, #696]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d031      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf0:	4bab      	ldr	r3, [pc, #684]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c02:	663b      	str	r3, [r7, #96]	; 0x60
 8002c04:	2300      	movs	r3, #0
 8002c06:	667b      	str	r3, [r7, #100]	; 0x64
 8002c08:	4ba7      	ldr	r3, [pc, #668]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c0a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c0e:	462a      	mov	r2, r5
 8002c10:	fb03 f202 	mul.w	r2, r3, r2
 8002c14:	2300      	movs	r3, #0
 8002c16:	4621      	mov	r1, r4
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4aa2      	ldr	r2, [pc, #648]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c20:	4621      	mov	r1, r4
 8002c22:	fba1 1202 	umull	r1, r2, r1, r2
 8002c26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c28:	460a      	mov	r2, r1
 8002c2a:	67ba      	str	r2, [r7, #120]	; 0x78
 8002c2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c2e:	4413      	add	r3, r2
 8002c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c36:	2200      	movs	r2, #0
 8002c38:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c40:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002c44:	f7fd fb34 	bl	80002b0 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c52:	e064      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c54:	4b92      	ldr	r3, [pc, #584]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8002c5e:	657a      	str	r2, [r7, #84]	; 0x54
 8002c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c6c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002c70:	4622      	mov	r2, r4
 8002c72:	462b      	mov	r3, r5
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	0159      	lsls	r1, r3, #5
 8002c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c82:	0150      	lsls	r0, r2, #5
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4621      	mov	r1, r4
 8002c8a:	1a51      	subs	r1, r2, r1
 8002c8c:	6139      	str	r1, [r7, #16]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	eb63 0301 	sbc.w	r3, r3, r1
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	018b      	lsls	r3, r1, #6
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cac:	4651      	mov	r1, sl
 8002cae:	018a      	lsls	r2, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ccc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	4699      	mov	r9, r3
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	eb18 0303 	adds.w	r3, r8, r3
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	462b      	mov	r3, r5
 8002cde:	eb49 0303 	adc.w	r3, r9, r3
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	028b      	lsls	r3, r1, #10
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	028a      	lsls	r2, r1, #10
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d06:	2200      	movs	r2, #0
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d10:	f7fd face 	bl	80002b0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002d30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d40:	e0a6      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d42:	4b57      	ldr	r3, [pc, #348]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d4e:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d02a      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	2200      	movs	r2, #0
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d70:	fb03 f201 	mul.w	r2, r3, r1
 8002d74:	2300      	movs	r3, #0
 8002d76:	fb00 f303 	mul.w	r3, r0, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d82:	677a      	str	r2, [r7, #116]	; 0x74
 8002d84:	460a      	mov	r2, r1
 8002d86:	673a      	str	r2, [r7, #112]	; 0x70
 8002d88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d8a:	4413      	add	r3, r2
 8002d8c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d92:	2200      	movs	r2, #0
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
 8002d96:	637a      	str	r2, [r7, #52]	; 0x34
 8002d98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002da0:	f7fd fa86 	bl	80002b0 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dae:	e05b      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	2200      	movs	r2, #0
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	f04f 0000 	mov.w	r0, #0
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	0159      	lsls	r1, r3, #5
 8002dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dde:	0150      	lsls	r0, r2, #5
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4641      	mov	r1, r8
 8002de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dea:	4649      	mov	r1, r9
 8002dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e04:	ebb2 040a 	subs.w	r4, r2, sl
 8002e08:	eb63 050b 	sbc.w	r5, r3, fp
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	00eb      	lsls	r3, r5, #3
 8002e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1a:	00e2      	lsls	r2, r4, #3
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4643      	mov	r3, r8
 8002e22:	18e3      	adds	r3, r4, r3
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	464b      	mov	r3, r9
 8002e28:	eb45 0303 	adc.w	r3, r5, r3
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	028b      	lsls	r3, r1, #10
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e44:	4621      	mov	r1, r4
 8002e46:	028a      	lsls	r2, r1, #10
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e50:	2200      	movs	r2, #0
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	61fa      	str	r2, [r7, #28]
 8002e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5a:	f7fd fa29 	bl	80002b0 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4613      	mov	r3, r2
 8002e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0f1b      	lsrs	r3, r3, #28
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e86:	e003      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3798      	adds	r7, #152	; 0x98
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	017d7840 	.word	0x017d7840

08002eac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e28d      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8083 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ecc:	4b94      	ldr	r3, [pc, #592]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ed8:	4b91      	ldr	r3, [pc, #580]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ee4:	4b8e      	ldr	r3, [pc, #568]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef0:	d00c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d112      	bne.n	8002f24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05b      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x124>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d157      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e25a      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x90>
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7b      	ldr	r2, [pc, #492]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xcc>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0xb4>
 8002f46:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a75      	ldr	r2, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b73      	ldr	r3, [pc, #460]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a72      	ldr	r2, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xcc>
 8002f60:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6e      	ldr	r2, [pc, #440]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6b      	ldr	r2, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fd fe62 	bl	8000c48 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fd fe5e 	bl	8000c48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e21f      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xdc>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fe4e 	bl	8000c48 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fd fe4a 	bl	8000c48 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e20b      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b57      	ldr	r3, [pc, #348]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x104>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d06f      	beq.n	80030be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d017      	beq.n	800301a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fea:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d105      	bne.n	8003002 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x186>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1d3      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4937      	ldr	r1, [pc, #220]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x278>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd fdf7 	bl	8000c48 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fd fdf3 	bl	8000c48 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e1b4      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4925      	ldr	r1, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x278>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fd fdd6 	bl	8000c48 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fd fdd2 	bl	8000c48 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e193      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d036      	beq.n	8003138 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fd fdb6 	bl	8000c48 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fd fdb2 	bl	8000c48 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e173      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x234>
 80030fe:	e01b      	b.n	8003138 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_OscConfig+0x27c>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fd fd9f 	bl	8000c48 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e00e      	b.n	800312c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fd fd9b 	bl	8000c48 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d907      	bls.n	800312c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e15c      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
 8003120:	40023800 	.word	0x40023800
 8003124:	42470000 	.word	0x42470000
 8003128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b8a      	ldr	r3, [pc, #552]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ea      	bne.n	800310e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8097 	beq.w	8003274 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b83      	ldr	r3, [pc, #524]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a7e      	ldr	r2, [pc, #504]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b79      	ldr	r3, [pc, #484]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d118      	bne.n	80031b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a75      	ldr	r2, [pc, #468]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fd fd5b 	bl	8000c48 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003196:	f7fd fd57 	bl	8000c48 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e118      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b6c      	ldr	r3, [pc, #432]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x31e>
 80031bc:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a65      	ldr	r2, [pc, #404]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	e01c      	b.n	8003204 <HAL_RCC_OscConfig+0x358>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x340>
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a60      	ldr	r2, [pc, #384]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
 80031de:	4b5e      	ldr	r3, [pc, #376]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a5d      	ldr	r2, [pc, #372]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0x358>
 80031ec:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	4a59      	ldr	r2, [pc, #356]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	; 0x70
 80031f8:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a56      	ldr	r2, [pc, #344]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fd fd1c 	bl	8000c48 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fd fd18 	bl	8000c48 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0d7      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0ee      	beq.n	8003214 <HAL_RCC_OscConfig+0x368>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fd fd06 	bl	8000c48 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fd fd02 	bl	8000c48 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0c1      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	4b40      	ldr	r3, [pc, #256]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ee      	bne.n	8003240 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800326e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80ad 	beq.w	80033d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b08      	cmp	r3, #8
 8003288:	d060      	beq.n	800334c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d145      	bne.n	800331e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b33      	ldr	r3, [pc, #204]	; (8003360 <HAL_RCC_OscConfig+0x4b4>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fcd6 	bl	8000c48 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fd fcd2 	bl	8000c48 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e093      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	019b      	lsls	r3, r3, #6
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	3b01      	subs	r3, #1
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	071b      	lsls	r3, r3, #28
 80032ea:	491b      	ldr	r1, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x4b4>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fd fca7 	bl	8000c48 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fd fca3 	bl	8000c48 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e064      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x452>
 800331c:	e05c      	b.n	80033d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_RCC_OscConfig+0x4b4>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd fc90 	bl	8000c48 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332c:	f7fd fc8c 	bl	8000c48 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04d      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x480>
 800334a:	e045      	b.n	80033d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d107      	bne.n	8003364 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e040      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
 8003358:	40023800 	.word	0x40023800
 800335c:	40007000 	.word	0x40007000
 8003360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <HAL_RCC_OscConfig+0x538>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d030      	beq.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d129      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d122      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800339c:	4293      	cmp	r3, r2
 800339e:	d119      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	3b01      	subs	r3, #1
 80033ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d10f      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800

080033e8 <__errno>:
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <__errno+0x8>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4d0d      	ldr	r5, [pc, #52]	; (800342c <__libc_init_array+0x38>)
 80033f8:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	2600      	movs	r6, #0
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	4d0b      	ldr	r5, [pc, #44]	; (8003434 <__libc_init_array+0x40>)
 8003406:	4c0c      	ldr	r4, [pc, #48]	; (8003438 <__libc_init_array+0x44>)
 8003408:	f000 ffae 	bl	8004368 <_init>
 800340c:	1b64      	subs	r4, r4, r5
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	2600      	movs	r6, #0
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f855 3b04 	ldr.w	r3, [r5], #4
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f855 3b04 	ldr.w	r3, [r5], #4
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	0800443c 	.word	0x0800443c
 8003430:	0800443c 	.word	0x0800443c
 8003434:	0800443c 	.word	0x0800443c
 8003438:	08004440 	.word	0x08004440

0800343c <memset>:
 800343c:	4402      	add	r2, r0
 800343e:	4603      	mov	r3, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	f803 1b01 	strb.w	r1, [r3], #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <iprintf>:
 800344c:	b40f      	push	{r0, r1, r2, r3}
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <iprintf+0x2c>)
 8003450:	b513      	push	{r0, r1, r4, lr}
 8003452:	681c      	ldr	r4, [r3, #0]
 8003454:	b124      	cbz	r4, 8003460 <iprintf+0x14>
 8003456:	69a3      	ldr	r3, [r4, #24]
 8003458:	b913      	cbnz	r3, 8003460 <iprintf+0x14>
 800345a:	4620      	mov	r0, r4
 800345c:	f000 f866 	bl	800352c <__sinit>
 8003460:	ab05      	add	r3, sp, #20
 8003462:	9a04      	ldr	r2, [sp, #16]
 8003464:	68a1      	ldr	r1, [r4, #8]
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	4620      	mov	r0, r4
 800346a:	f000 f9bd 	bl	80037e8 <_vfiprintf_r>
 800346e:	b002      	add	sp, #8
 8003470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003474:	b004      	add	sp, #16
 8003476:	4770      	bx	lr
 8003478:	2000000c 	.word	0x2000000c

0800347c <std>:
 800347c:	2300      	movs	r3, #0
 800347e:	b510      	push	{r4, lr}
 8003480:	4604      	mov	r4, r0
 8003482:	e9c0 3300 	strd	r3, r3, [r0]
 8003486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800348a:	6083      	str	r3, [r0, #8]
 800348c:	8181      	strh	r1, [r0, #12]
 800348e:	6643      	str	r3, [r0, #100]	; 0x64
 8003490:	81c2      	strh	r2, [r0, #14]
 8003492:	6183      	str	r3, [r0, #24]
 8003494:	4619      	mov	r1, r3
 8003496:	2208      	movs	r2, #8
 8003498:	305c      	adds	r0, #92	; 0x5c
 800349a:	f7ff ffcf 	bl	800343c <memset>
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <std+0x38>)
 80034a0:	6263      	str	r3, [r4, #36]	; 0x24
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <std+0x3c>)
 80034a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <std+0x40>)
 80034a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <std+0x44>)
 80034ac:	6224      	str	r4, [r4, #32]
 80034ae:	6323      	str	r3, [r4, #48]	; 0x30
 80034b0:	bd10      	pop	{r4, pc}
 80034b2:	bf00      	nop
 80034b4:	08003d91 	.word	0x08003d91
 80034b8:	08003db3 	.word	0x08003db3
 80034bc:	08003deb 	.word	0x08003deb
 80034c0:	08003e0f 	.word	0x08003e0f

080034c4 <_cleanup_r>:
 80034c4:	4901      	ldr	r1, [pc, #4]	; (80034cc <_cleanup_r+0x8>)
 80034c6:	f000 b8af 	b.w	8003628 <_fwalk_reent>
 80034ca:	bf00      	nop
 80034cc:	080040e9 	.word	0x080040e9

080034d0 <__sfmoreglue>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	2268      	movs	r2, #104	; 0x68
 80034d4:	1e4d      	subs	r5, r1, #1
 80034d6:	4355      	muls	r5, r2
 80034d8:	460e      	mov	r6, r1
 80034da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034de:	f000 f8e5 	bl	80036ac <_malloc_r>
 80034e2:	4604      	mov	r4, r0
 80034e4:	b140      	cbz	r0, 80034f8 <__sfmoreglue+0x28>
 80034e6:	2100      	movs	r1, #0
 80034e8:	e9c0 1600 	strd	r1, r6, [r0]
 80034ec:	300c      	adds	r0, #12
 80034ee:	60a0      	str	r0, [r4, #8]
 80034f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034f4:	f7ff ffa2 	bl	800343c <memset>
 80034f8:	4620      	mov	r0, r4
 80034fa:	bd70      	pop	{r4, r5, r6, pc}

080034fc <__sfp_lock_acquire>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__sfp_lock_acquire+0x8>)
 80034fe:	f000 b8b3 	b.w	8003668 <__retarget_lock_acquire_recursive>
 8003502:	bf00      	nop
 8003504:	20000209 	.word	0x20000209

08003508 <__sfp_lock_release>:
 8003508:	4801      	ldr	r0, [pc, #4]	; (8003510 <__sfp_lock_release+0x8>)
 800350a:	f000 b8ae 	b.w	800366a <__retarget_lock_release_recursive>
 800350e:	bf00      	nop
 8003510:	20000209 	.word	0x20000209

08003514 <__sinit_lock_acquire>:
 8003514:	4801      	ldr	r0, [pc, #4]	; (800351c <__sinit_lock_acquire+0x8>)
 8003516:	f000 b8a7 	b.w	8003668 <__retarget_lock_acquire_recursive>
 800351a:	bf00      	nop
 800351c:	2000020a 	.word	0x2000020a

08003520 <__sinit_lock_release>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__sinit_lock_release+0x8>)
 8003522:	f000 b8a2 	b.w	800366a <__retarget_lock_release_recursive>
 8003526:	bf00      	nop
 8003528:	2000020a 	.word	0x2000020a

0800352c <__sinit>:
 800352c:	b510      	push	{r4, lr}
 800352e:	4604      	mov	r4, r0
 8003530:	f7ff fff0 	bl	8003514 <__sinit_lock_acquire>
 8003534:	69a3      	ldr	r3, [r4, #24]
 8003536:	b11b      	cbz	r3, 8003540 <__sinit+0x14>
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800353c:	f7ff bff0 	b.w	8003520 <__sinit_lock_release>
 8003540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003544:	6523      	str	r3, [r4, #80]	; 0x50
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <__sinit+0x68>)
 8003548:	4a13      	ldr	r2, [pc, #76]	; (8003598 <__sinit+0x6c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	62a2      	str	r2, [r4, #40]	; 0x28
 800354e:	42a3      	cmp	r3, r4
 8003550:	bf04      	itt	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	61a3      	streq	r3, [r4, #24]
 8003556:	4620      	mov	r0, r4
 8003558:	f000 f820 	bl	800359c <__sfp>
 800355c:	6060      	str	r0, [r4, #4]
 800355e:	4620      	mov	r0, r4
 8003560:	f000 f81c 	bl	800359c <__sfp>
 8003564:	60a0      	str	r0, [r4, #8]
 8003566:	4620      	mov	r0, r4
 8003568:	f000 f818 	bl	800359c <__sfp>
 800356c:	2200      	movs	r2, #0
 800356e:	60e0      	str	r0, [r4, #12]
 8003570:	2104      	movs	r1, #4
 8003572:	6860      	ldr	r0, [r4, #4]
 8003574:	f7ff ff82 	bl	800347c <std>
 8003578:	68a0      	ldr	r0, [r4, #8]
 800357a:	2201      	movs	r2, #1
 800357c:	2109      	movs	r1, #9
 800357e:	f7ff ff7d 	bl	800347c <std>
 8003582:	68e0      	ldr	r0, [r4, #12]
 8003584:	2202      	movs	r2, #2
 8003586:	2112      	movs	r1, #18
 8003588:	f7ff ff78 	bl	800347c <std>
 800358c:	2301      	movs	r3, #1
 800358e:	61a3      	str	r3, [r4, #24]
 8003590:	e7d2      	b.n	8003538 <__sinit+0xc>
 8003592:	bf00      	nop
 8003594:	0800439c 	.word	0x0800439c
 8003598:	080034c5 	.word	0x080034c5

0800359c <__sfp>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	4607      	mov	r7, r0
 80035a0:	f7ff ffac 	bl	80034fc <__sfp_lock_acquire>
 80035a4:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <__sfp+0x84>)
 80035a6:	681e      	ldr	r6, [r3, #0]
 80035a8:	69b3      	ldr	r3, [r6, #24]
 80035aa:	b913      	cbnz	r3, 80035b2 <__sfp+0x16>
 80035ac:	4630      	mov	r0, r6
 80035ae:	f7ff ffbd 	bl	800352c <__sinit>
 80035b2:	3648      	adds	r6, #72	; 0x48
 80035b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	d503      	bpl.n	80035c4 <__sfp+0x28>
 80035bc:	6833      	ldr	r3, [r6, #0]
 80035be:	b30b      	cbz	r3, 8003604 <__sfp+0x68>
 80035c0:	6836      	ldr	r6, [r6, #0]
 80035c2:	e7f7      	b.n	80035b4 <__sfp+0x18>
 80035c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035c8:	b9d5      	cbnz	r5, 8003600 <__sfp+0x64>
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <__sfp+0x88>)
 80035cc:	60e3      	str	r3, [r4, #12]
 80035ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035d2:	6665      	str	r5, [r4, #100]	; 0x64
 80035d4:	f000 f847 	bl	8003666 <__retarget_lock_init_recursive>
 80035d8:	f7ff ff96 	bl	8003508 <__sfp_lock_release>
 80035dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035e4:	6025      	str	r5, [r4, #0]
 80035e6:	61a5      	str	r5, [r4, #24]
 80035e8:	2208      	movs	r2, #8
 80035ea:	4629      	mov	r1, r5
 80035ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035f0:	f7ff ff24 	bl	800343c <memset>
 80035f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035fc:	4620      	mov	r0, r4
 80035fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003600:	3468      	adds	r4, #104	; 0x68
 8003602:	e7d9      	b.n	80035b8 <__sfp+0x1c>
 8003604:	2104      	movs	r1, #4
 8003606:	4638      	mov	r0, r7
 8003608:	f7ff ff62 	bl	80034d0 <__sfmoreglue>
 800360c:	4604      	mov	r4, r0
 800360e:	6030      	str	r0, [r6, #0]
 8003610:	2800      	cmp	r0, #0
 8003612:	d1d5      	bne.n	80035c0 <__sfp+0x24>
 8003614:	f7ff ff78 	bl	8003508 <__sfp_lock_release>
 8003618:	230c      	movs	r3, #12
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	e7ee      	b.n	80035fc <__sfp+0x60>
 800361e:	bf00      	nop
 8003620:	0800439c 	.word	0x0800439c
 8003624:	ffff0001 	.word	0xffff0001

08003628 <_fwalk_reent>:
 8003628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800362c:	4606      	mov	r6, r0
 800362e:	4688      	mov	r8, r1
 8003630:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003634:	2700      	movs	r7, #0
 8003636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800363a:	f1b9 0901 	subs.w	r9, r9, #1
 800363e:	d505      	bpl.n	800364c <_fwalk_reent+0x24>
 8003640:	6824      	ldr	r4, [r4, #0]
 8003642:	2c00      	cmp	r4, #0
 8003644:	d1f7      	bne.n	8003636 <_fwalk_reent+0xe>
 8003646:	4638      	mov	r0, r7
 8003648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800364c:	89ab      	ldrh	r3, [r5, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d907      	bls.n	8003662 <_fwalk_reent+0x3a>
 8003652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003656:	3301      	adds	r3, #1
 8003658:	d003      	beq.n	8003662 <_fwalk_reent+0x3a>
 800365a:	4629      	mov	r1, r5
 800365c:	4630      	mov	r0, r6
 800365e:	47c0      	blx	r8
 8003660:	4307      	orrs	r7, r0
 8003662:	3568      	adds	r5, #104	; 0x68
 8003664:	e7e9      	b.n	800363a <_fwalk_reent+0x12>

08003666 <__retarget_lock_init_recursive>:
 8003666:	4770      	bx	lr

08003668 <__retarget_lock_acquire_recursive>:
 8003668:	4770      	bx	lr

0800366a <__retarget_lock_release_recursive>:
 800366a:	4770      	bx	lr

0800366c <sbrk_aligned>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4e0e      	ldr	r6, [pc, #56]	; (80036a8 <sbrk_aligned+0x3c>)
 8003670:	460c      	mov	r4, r1
 8003672:	6831      	ldr	r1, [r6, #0]
 8003674:	4605      	mov	r5, r0
 8003676:	b911      	cbnz	r1, 800367e <sbrk_aligned+0x12>
 8003678:	f000 fb7a 	bl	8003d70 <_sbrk_r>
 800367c:	6030      	str	r0, [r6, #0]
 800367e:	4621      	mov	r1, r4
 8003680:	4628      	mov	r0, r5
 8003682:	f000 fb75 	bl	8003d70 <_sbrk_r>
 8003686:	1c43      	adds	r3, r0, #1
 8003688:	d00a      	beq.n	80036a0 <sbrk_aligned+0x34>
 800368a:	1cc4      	adds	r4, r0, #3
 800368c:	f024 0403 	bic.w	r4, r4, #3
 8003690:	42a0      	cmp	r0, r4
 8003692:	d007      	beq.n	80036a4 <sbrk_aligned+0x38>
 8003694:	1a21      	subs	r1, r4, r0
 8003696:	4628      	mov	r0, r5
 8003698:	f000 fb6a 	bl	8003d70 <_sbrk_r>
 800369c:	3001      	adds	r0, #1
 800369e:	d101      	bne.n	80036a4 <sbrk_aligned+0x38>
 80036a0:	f04f 34ff 	mov.w	r4, #4294967295
 80036a4:	4620      	mov	r0, r4
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	20000210 	.word	0x20000210

080036ac <_malloc_r>:
 80036ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b0:	1ccd      	adds	r5, r1, #3
 80036b2:	f025 0503 	bic.w	r5, r5, #3
 80036b6:	3508      	adds	r5, #8
 80036b8:	2d0c      	cmp	r5, #12
 80036ba:	bf38      	it	cc
 80036bc:	250c      	movcc	r5, #12
 80036be:	2d00      	cmp	r5, #0
 80036c0:	4607      	mov	r7, r0
 80036c2:	db01      	blt.n	80036c8 <_malloc_r+0x1c>
 80036c4:	42a9      	cmp	r1, r5
 80036c6:	d905      	bls.n	80036d4 <_malloc_r+0x28>
 80036c8:	230c      	movs	r3, #12
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	2600      	movs	r6, #0
 80036ce:	4630      	mov	r0, r6
 80036d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d4:	4e2e      	ldr	r6, [pc, #184]	; (8003790 <_malloc_r+0xe4>)
 80036d6:	f000 fdbb 	bl	8004250 <__malloc_lock>
 80036da:	6833      	ldr	r3, [r6, #0]
 80036dc:	461c      	mov	r4, r3
 80036de:	bb34      	cbnz	r4, 800372e <_malloc_r+0x82>
 80036e0:	4629      	mov	r1, r5
 80036e2:	4638      	mov	r0, r7
 80036e4:	f7ff ffc2 	bl	800366c <sbrk_aligned>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	4604      	mov	r4, r0
 80036ec:	d14d      	bne.n	800378a <_malloc_r+0xde>
 80036ee:	6834      	ldr	r4, [r6, #0]
 80036f0:	4626      	mov	r6, r4
 80036f2:	2e00      	cmp	r6, #0
 80036f4:	d140      	bne.n	8003778 <_malloc_r+0xcc>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	4631      	mov	r1, r6
 80036fa:	4638      	mov	r0, r7
 80036fc:	eb04 0803 	add.w	r8, r4, r3
 8003700:	f000 fb36 	bl	8003d70 <_sbrk_r>
 8003704:	4580      	cmp	r8, r0
 8003706:	d13a      	bne.n	800377e <_malloc_r+0xd2>
 8003708:	6821      	ldr	r1, [r4, #0]
 800370a:	3503      	adds	r5, #3
 800370c:	1a6d      	subs	r5, r5, r1
 800370e:	f025 0503 	bic.w	r5, r5, #3
 8003712:	3508      	adds	r5, #8
 8003714:	2d0c      	cmp	r5, #12
 8003716:	bf38      	it	cc
 8003718:	250c      	movcc	r5, #12
 800371a:	4629      	mov	r1, r5
 800371c:	4638      	mov	r0, r7
 800371e:	f7ff ffa5 	bl	800366c <sbrk_aligned>
 8003722:	3001      	adds	r0, #1
 8003724:	d02b      	beq.n	800377e <_malloc_r+0xd2>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	442b      	add	r3, r5
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	e00e      	b.n	800374c <_malloc_r+0xa0>
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	1b52      	subs	r2, r2, r5
 8003732:	d41e      	bmi.n	8003772 <_malloc_r+0xc6>
 8003734:	2a0b      	cmp	r2, #11
 8003736:	d916      	bls.n	8003766 <_malloc_r+0xba>
 8003738:	1961      	adds	r1, r4, r5
 800373a:	42a3      	cmp	r3, r4
 800373c:	6025      	str	r5, [r4, #0]
 800373e:	bf18      	it	ne
 8003740:	6059      	strne	r1, [r3, #4]
 8003742:	6863      	ldr	r3, [r4, #4]
 8003744:	bf08      	it	eq
 8003746:	6031      	streq	r1, [r6, #0]
 8003748:	5162      	str	r2, [r4, r5]
 800374a:	604b      	str	r3, [r1, #4]
 800374c:	4638      	mov	r0, r7
 800374e:	f104 060b 	add.w	r6, r4, #11
 8003752:	f000 fd83 	bl	800425c <__malloc_unlock>
 8003756:	f026 0607 	bic.w	r6, r6, #7
 800375a:	1d23      	adds	r3, r4, #4
 800375c:	1af2      	subs	r2, r6, r3
 800375e:	d0b6      	beq.n	80036ce <_malloc_r+0x22>
 8003760:	1b9b      	subs	r3, r3, r6
 8003762:	50a3      	str	r3, [r4, r2]
 8003764:	e7b3      	b.n	80036ce <_malloc_r+0x22>
 8003766:	6862      	ldr	r2, [r4, #4]
 8003768:	42a3      	cmp	r3, r4
 800376a:	bf0c      	ite	eq
 800376c:	6032      	streq	r2, [r6, #0]
 800376e:	605a      	strne	r2, [r3, #4]
 8003770:	e7ec      	b.n	800374c <_malloc_r+0xa0>
 8003772:	4623      	mov	r3, r4
 8003774:	6864      	ldr	r4, [r4, #4]
 8003776:	e7b2      	b.n	80036de <_malloc_r+0x32>
 8003778:	4634      	mov	r4, r6
 800377a:	6876      	ldr	r6, [r6, #4]
 800377c:	e7b9      	b.n	80036f2 <_malloc_r+0x46>
 800377e:	230c      	movs	r3, #12
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4638      	mov	r0, r7
 8003784:	f000 fd6a 	bl	800425c <__malloc_unlock>
 8003788:	e7a1      	b.n	80036ce <_malloc_r+0x22>
 800378a:	6025      	str	r5, [r4, #0]
 800378c:	e7de      	b.n	800374c <_malloc_r+0xa0>
 800378e:	bf00      	nop
 8003790:	2000020c 	.word	0x2000020c

08003794 <__sfputc_r>:
 8003794:	6893      	ldr	r3, [r2, #8]
 8003796:	3b01      	subs	r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	b410      	push	{r4}
 800379c:	6093      	str	r3, [r2, #8]
 800379e:	da08      	bge.n	80037b2 <__sfputc_r+0x1e>
 80037a0:	6994      	ldr	r4, [r2, #24]
 80037a2:	42a3      	cmp	r3, r4
 80037a4:	db01      	blt.n	80037aa <__sfputc_r+0x16>
 80037a6:	290a      	cmp	r1, #10
 80037a8:	d103      	bne.n	80037b2 <__sfputc_r+0x1e>
 80037aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ae:	f000 bb33 	b.w	8003e18 <__swbuf_r>
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	1c58      	adds	r0, r3, #1
 80037b6:	6010      	str	r0, [r2, #0]
 80037b8:	7019      	strb	r1, [r3, #0]
 80037ba:	4608      	mov	r0, r1
 80037bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <__sfputs_r>:
 80037c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c4:	4606      	mov	r6, r0
 80037c6:	460f      	mov	r7, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	18d5      	adds	r5, r2, r3
 80037cc:	42ac      	cmp	r4, r5
 80037ce:	d101      	bne.n	80037d4 <__sfputs_r+0x12>
 80037d0:	2000      	movs	r0, #0
 80037d2:	e007      	b.n	80037e4 <__sfputs_r+0x22>
 80037d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d8:	463a      	mov	r2, r7
 80037da:	4630      	mov	r0, r6
 80037dc:	f7ff ffda 	bl	8003794 <__sfputc_r>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d1f3      	bne.n	80037cc <__sfputs_r+0xa>
 80037e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037e8 <_vfiprintf_r>:
 80037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ec:	460d      	mov	r5, r1
 80037ee:	b09d      	sub	sp, #116	; 0x74
 80037f0:	4614      	mov	r4, r2
 80037f2:	4698      	mov	r8, r3
 80037f4:	4606      	mov	r6, r0
 80037f6:	b118      	cbz	r0, 8003800 <_vfiprintf_r+0x18>
 80037f8:	6983      	ldr	r3, [r0, #24]
 80037fa:	b90b      	cbnz	r3, 8003800 <_vfiprintf_r+0x18>
 80037fc:	f7ff fe96 	bl	800352c <__sinit>
 8003800:	4b89      	ldr	r3, [pc, #548]	; (8003a28 <_vfiprintf_r+0x240>)
 8003802:	429d      	cmp	r5, r3
 8003804:	d11b      	bne.n	800383e <_vfiprintf_r+0x56>
 8003806:	6875      	ldr	r5, [r6, #4]
 8003808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800380a:	07d9      	lsls	r1, r3, #31
 800380c:	d405      	bmi.n	800381a <_vfiprintf_r+0x32>
 800380e:	89ab      	ldrh	r3, [r5, #12]
 8003810:	059a      	lsls	r2, r3, #22
 8003812:	d402      	bmi.n	800381a <_vfiprintf_r+0x32>
 8003814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003816:	f7ff ff27 	bl	8003668 <__retarget_lock_acquire_recursive>
 800381a:	89ab      	ldrh	r3, [r5, #12]
 800381c:	071b      	lsls	r3, r3, #28
 800381e:	d501      	bpl.n	8003824 <_vfiprintf_r+0x3c>
 8003820:	692b      	ldr	r3, [r5, #16]
 8003822:	b9eb      	cbnz	r3, 8003860 <_vfiprintf_r+0x78>
 8003824:	4629      	mov	r1, r5
 8003826:	4630      	mov	r0, r6
 8003828:	f000 fb5a 	bl	8003ee0 <__swsetup_r>
 800382c:	b1c0      	cbz	r0, 8003860 <_vfiprintf_r+0x78>
 800382e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003830:	07dc      	lsls	r4, r3, #31
 8003832:	d50e      	bpl.n	8003852 <_vfiprintf_r+0x6a>
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	b01d      	add	sp, #116	; 0x74
 800383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383e:	4b7b      	ldr	r3, [pc, #492]	; (8003a2c <_vfiprintf_r+0x244>)
 8003840:	429d      	cmp	r5, r3
 8003842:	d101      	bne.n	8003848 <_vfiprintf_r+0x60>
 8003844:	68b5      	ldr	r5, [r6, #8]
 8003846:	e7df      	b.n	8003808 <_vfiprintf_r+0x20>
 8003848:	4b79      	ldr	r3, [pc, #484]	; (8003a30 <_vfiprintf_r+0x248>)
 800384a:	429d      	cmp	r5, r3
 800384c:	bf08      	it	eq
 800384e:	68f5      	ldreq	r5, [r6, #12]
 8003850:	e7da      	b.n	8003808 <_vfiprintf_r+0x20>
 8003852:	89ab      	ldrh	r3, [r5, #12]
 8003854:	0598      	lsls	r0, r3, #22
 8003856:	d4ed      	bmi.n	8003834 <_vfiprintf_r+0x4c>
 8003858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800385a:	f7ff ff06 	bl	800366a <__retarget_lock_release_recursive>
 800385e:	e7e9      	b.n	8003834 <_vfiprintf_r+0x4c>
 8003860:	2300      	movs	r3, #0
 8003862:	9309      	str	r3, [sp, #36]	; 0x24
 8003864:	2320      	movs	r3, #32
 8003866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800386a:	f8cd 800c 	str.w	r8, [sp, #12]
 800386e:	2330      	movs	r3, #48	; 0x30
 8003870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003a34 <_vfiprintf_r+0x24c>
 8003874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003878:	f04f 0901 	mov.w	r9, #1
 800387c:	4623      	mov	r3, r4
 800387e:	469a      	mov	sl, r3
 8003880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003884:	b10a      	cbz	r2, 800388a <_vfiprintf_r+0xa2>
 8003886:	2a25      	cmp	r2, #37	; 0x25
 8003888:	d1f9      	bne.n	800387e <_vfiprintf_r+0x96>
 800388a:	ebba 0b04 	subs.w	fp, sl, r4
 800388e:	d00b      	beq.n	80038a8 <_vfiprintf_r+0xc0>
 8003890:	465b      	mov	r3, fp
 8003892:	4622      	mov	r2, r4
 8003894:	4629      	mov	r1, r5
 8003896:	4630      	mov	r0, r6
 8003898:	f7ff ff93 	bl	80037c2 <__sfputs_r>
 800389c:	3001      	adds	r0, #1
 800389e:	f000 80aa 	beq.w	80039f6 <_vfiprintf_r+0x20e>
 80038a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038a4:	445a      	add	r2, fp
 80038a6:	9209      	str	r2, [sp, #36]	; 0x24
 80038a8:	f89a 3000 	ldrb.w	r3, [sl]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a2 	beq.w	80039f6 <_vfiprintf_r+0x20e>
 80038b2:	2300      	movs	r3, #0
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295
 80038b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038bc:	f10a 0a01 	add.w	sl, sl, #1
 80038c0:	9304      	str	r3, [sp, #16]
 80038c2:	9307      	str	r3, [sp, #28]
 80038c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038c8:	931a      	str	r3, [sp, #104]	; 0x68
 80038ca:	4654      	mov	r4, sl
 80038cc:	2205      	movs	r2, #5
 80038ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d2:	4858      	ldr	r0, [pc, #352]	; (8003a34 <_vfiprintf_r+0x24c>)
 80038d4:	f7fc fc9c 	bl	8000210 <memchr>
 80038d8:	9a04      	ldr	r2, [sp, #16]
 80038da:	b9d8      	cbnz	r0, 8003914 <_vfiprintf_r+0x12c>
 80038dc:	06d1      	lsls	r1, r2, #27
 80038de:	bf44      	itt	mi
 80038e0:	2320      	movmi	r3, #32
 80038e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038e6:	0713      	lsls	r3, r2, #28
 80038e8:	bf44      	itt	mi
 80038ea:	232b      	movmi	r3, #43	; 0x2b
 80038ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038f0:	f89a 3000 	ldrb.w	r3, [sl]
 80038f4:	2b2a      	cmp	r3, #42	; 0x2a
 80038f6:	d015      	beq.n	8003924 <_vfiprintf_r+0x13c>
 80038f8:	9a07      	ldr	r2, [sp, #28]
 80038fa:	4654      	mov	r4, sl
 80038fc:	2000      	movs	r0, #0
 80038fe:	f04f 0c0a 	mov.w	ip, #10
 8003902:	4621      	mov	r1, r4
 8003904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003908:	3b30      	subs	r3, #48	; 0x30
 800390a:	2b09      	cmp	r3, #9
 800390c:	d94e      	bls.n	80039ac <_vfiprintf_r+0x1c4>
 800390e:	b1b0      	cbz	r0, 800393e <_vfiprintf_r+0x156>
 8003910:	9207      	str	r2, [sp, #28]
 8003912:	e014      	b.n	800393e <_vfiprintf_r+0x156>
 8003914:	eba0 0308 	sub.w	r3, r0, r8
 8003918:	fa09 f303 	lsl.w	r3, r9, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	9304      	str	r3, [sp, #16]
 8003920:	46a2      	mov	sl, r4
 8003922:	e7d2      	b.n	80038ca <_vfiprintf_r+0xe2>
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	1d19      	adds	r1, r3, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	9103      	str	r1, [sp, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	bfbb      	ittet	lt
 8003930:	425b      	neglt	r3, r3
 8003932:	f042 0202 	orrlt.w	r2, r2, #2
 8003936:	9307      	strge	r3, [sp, #28]
 8003938:	9307      	strlt	r3, [sp, #28]
 800393a:	bfb8      	it	lt
 800393c:	9204      	strlt	r2, [sp, #16]
 800393e:	7823      	ldrb	r3, [r4, #0]
 8003940:	2b2e      	cmp	r3, #46	; 0x2e
 8003942:	d10c      	bne.n	800395e <_vfiprintf_r+0x176>
 8003944:	7863      	ldrb	r3, [r4, #1]
 8003946:	2b2a      	cmp	r3, #42	; 0x2a
 8003948:	d135      	bne.n	80039b6 <_vfiprintf_r+0x1ce>
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	1d1a      	adds	r2, r3, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	9203      	str	r2, [sp, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	bfb8      	it	lt
 8003956:	f04f 33ff 	movlt.w	r3, #4294967295
 800395a:	3402      	adds	r4, #2
 800395c:	9305      	str	r3, [sp, #20]
 800395e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a44 <_vfiprintf_r+0x25c>
 8003962:	7821      	ldrb	r1, [r4, #0]
 8003964:	2203      	movs	r2, #3
 8003966:	4650      	mov	r0, sl
 8003968:	f7fc fc52 	bl	8000210 <memchr>
 800396c:	b140      	cbz	r0, 8003980 <_vfiprintf_r+0x198>
 800396e:	2340      	movs	r3, #64	; 0x40
 8003970:	eba0 000a 	sub.w	r0, r0, sl
 8003974:	fa03 f000 	lsl.w	r0, r3, r0
 8003978:	9b04      	ldr	r3, [sp, #16]
 800397a:	4303      	orrs	r3, r0
 800397c:	3401      	adds	r4, #1
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003984:	482c      	ldr	r0, [pc, #176]	; (8003a38 <_vfiprintf_r+0x250>)
 8003986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800398a:	2206      	movs	r2, #6
 800398c:	f7fc fc40 	bl	8000210 <memchr>
 8003990:	2800      	cmp	r0, #0
 8003992:	d03f      	beq.n	8003a14 <_vfiprintf_r+0x22c>
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <_vfiprintf_r+0x254>)
 8003996:	bb1b      	cbnz	r3, 80039e0 <_vfiprintf_r+0x1f8>
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	3307      	adds	r3, #7
 800399c:	f023 0307 	bic.w	r3, r3, #7
 80039a0:	3308      	adds	r3, #8
 80039a2:	9303      	str	r3, [sp, #12]
 80039a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a6:	443b      	add	r3, r7
 80039a8:	9309      	str	r3, [sp, #36]	; 0x24
 80039aa:	e767      	b.n	800387c <_vfiprintf_r+0x94>
 80039ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80039b0:	460c      	mov	r4, r1
 80039b2:	2001      	movs	r0, #1
 80039b4:	e7a5      	b.n	8003902 <_vfiprintf_r+0x11a>
 80039b6:	2300      	movs	r3, #0
 80039b8:	3401      	adds	r4, #1
 80039ba:	9305      	str	r3, [sp, #20]
 80039bc:	4619      	mov	r1, r3
 80039be:	f04f 0c0a 	mov.w	ip, #10
 80039c2:	4620      	mov	r0, r4
 80039c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039c8:	3a30      	subs	r2, #48	; 0x30
 80039ca:	2a09      	cmp	r2, #9
 80039cc:	d903      	bls.n	80039d6 <_vfiprintf_r+0x1ee>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0c5      	beq.n	800395e <_vfiprintf_r+0x176>
 80039d2:	9105      	str	r1, [sp, #20]
 80039d4:	e7c3      	b.n	800395e <_vfiprintf_r+0x176>
 80039d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80039da:	4604      	mov	r4, r0
 80039dc:	2301      	movs	r3, #1
 80039de:	e7f0      	b.n	80039c2 <_vfiprintf_r+0x1da>
 80039e0:	ab03      	add	r3, sp, #12
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	462a      	mov	r2, r5
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <_vfiprintf_r+0x258>)
 80039e8:	a904      	add	r1, sp, #16
 80039ea:	4630      	mov	r0, r6
 80039ec:	f3af 8000 	nop.w
 80039f0:	4607      	mov	r7, r0
 80039f2:	1c78      	adds	r0, r7, #1
 80039f4:	d1d6      	bne.n	80039a4 <_vfiprintf_r+0x1bc>
 80039f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039f8:	07d9      	lsls	r1, r3, #31
 80039fa:	d405      	bmi.n	8003a08 <_vfiprintf_r+0x220>
 80039fc:	89ab      	ldrh	r3, [r5, #12]
 80039fe:	059a      	lsls	r2, r3, #22
 8003a00:	d402      	bmi.n	8003a08 <_vfiprintf_r+0x220>
 8003a02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a04:	f7ff fe31 	bl	800366a <__retarget_lock_release_recursive>
 8003a08:	89ab      	ldrh	r3, [r5, #12]
 8003a0a:	065b      	lsls	r3, r3, #25
 8003a0c:	f53f af12 	bmi.w	8003834 <_vfiprintf_r+0x4c>
 8003a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a12:	e711      	b.n	8003838 <_vfiprintf_r+0x50>
 8003a14:	ab03      	add	r3, sp, #12
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	462a      	mov	r2, r5
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <_vfiprintf_r+0x258>)
 8003a1c:	a904      	add	r1, sp, #16
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f000 f880 	bl	8003b24 <_printf_i>
 8003a24:	e7e4      	b.n	80039f0 <_vfiprintf_r+0x208>
 8003a26:	bf00      	nop
 8003a28:	080043c0 	.word	0x080043c0
 8003a2c:	080043e0 	.word	0x080043e0
 8003a30:	080043a0 	.word	0x080043a0
 8003a34:	08004400 	.word	0x08004400
 8003a38:	0800440a 	.word	0x0800440a
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	080037c3 	.word	0x080037c3
 8003a44:	08004406 	.word	0x08004406

08003a48 <_printf_common>:
 8003a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	4699      	mov	r9, r3
 8003a50:	688a      	ldr	r2, [r1, #8]
 8003a52:	690b      	ldr	r3, [r1, #16]
 8003a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	bfb8      	it	lt
 8003a5c:	4613      	movlt	r3, r2
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a64:	4607      	mov	r7, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	b10a      	cbz	r2, 8003a6e <_printf_common+0x26>
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	0699      	lsls	r1, r3, #26
 8003a72:	bf42      	ittt	mi
 8003a74:	6833      	ldrmi	r3, [r6, #0]
 8003a76:	3302      	addmi	r3, #2
 8003a78:	6033      	strmi	r3, [r6, #0]
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	f015 0506 	ands.w	r5, r5, #6
 8003a80:	d106      	bne.n	8003a90 <_printf_common+0x48>
 8003a82:	f104 0a19 	add.w	sl, r4, #25
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	6832      	ldr	r2, [r6, #0]
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dc26      	bgt.n	8003ade <_printf_common+0x96>
 8003a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a94:	1e13      	subs	r3, r2, #0
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	0692      	lsls	r2, r2, #26
 8003a9e:	d42b      	bmi.n	8003af8 <_printf_common+0xb0>
 8003aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d01e      	beq.n	8003aec <_printf_common+0xa4>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	68e5      	ldr	r5, [r4, #12]
 8003ab2:	6832      	ldr	r2, [r6, #0]
 8003ab4:	f003 0306 	and.w	r3, r3, #6
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	bf08      	it	eq
 8003abc:	1aad      	subeq	r5, r5, r2
 8003abe:	68a3      	ldr	r3, [r4, #8]
 8003ac0:	6922      	ldr	r2, [r4, #16]
 8003ac2:	bf0c      	ite	eq
 8003ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ac8:	2500      	movne	r5, #0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	bfc4      	itt	gt
 8003ace:	1a9b      	subgt	r3, r3, r2
 8003ad0:	18ed      	addgt	r5, r5, r3
 8003ad2:	2600      	movs	r6, #0
 8003ad4:	341a      	adds	r4, #26
 8003ad6:	42b5      	cmp	r5, r6
 8003ad8:	d11a      	bne.n	8003b10 <_printf_common+0xc8>
 8003ada:	2000      	movs	r0, #0
 8003adc:	e008      	b.n	8003af0 <_printf_common+0xa8>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4652      	mov	r2, sl
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	47c0      	blx	r8
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d103      	bne.n	8003af4 <_printf_common+0xac>
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af4:	3501      	adds	r5, #1
 8003af6:	e7c6      	b.n	8003a86 <_printf_common+0x3e>
 8003af8:	18e1      	adds	r1, r4, r3
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	2030      	movs	r0, #48	; 0x30
 8003afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b02:	4422      	add	r2, r4
 8003b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	e7c7      	b.n	8003aa0 <_printf_common+0x58>
 8003b10:	2301      	movs	r3, #1
 8003b12:	4622      	mov	r2, r4
 8003b14:	4649      	mov	r1, r9
 8003b16:	4638      	mov	r0, r7
 8003b18:	47c0      	blx	r8
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d0e6      	beq.n	8003aec <_printf_common+0xa4>
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7d9      	b.n	8003ad6 <_printf_common+0x8e>
	...

08003b24 <_printf_i>:
 8003b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b28:	7e0f      	ldrb	r7, [r1, #24]
 8003b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b2c:	2f78      	cmp	r7, #120	; 0x78
 8003b2e:	4691      	mov	r9, r2
 8003b30:	4680      	mov	r8, r0
 8003b32:	460c      	mov	r4, r1
 8003b34:	469a      	mov	sl, r3
 8003b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b3a:	d807      	bhi.n	8003b4c <_printf_i+0x28>
 8003b3c:	2f62      	cmp	r7, #98	; 0x62
 8003b3e:	d80a      	bhi.n	8003b56 <_printf_i+0x32>
 8003b40:	2f00      	cmp	r7, #0
 8003b42:	f000 80d8 	beq.w	8003cf6 <_printf_i+0x1d2>
 8003b46:	2f58      	cmp	r7, #88	; 0x58
 8003b48:	f000 80a3 	beq.w	8003c92 <_printf_i+0x16e>
 8003b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b54:	e03a      	b.n	8003bcc <_printf_i+0xa8>
 8003b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b5a:	2b15      	cmp	r3, #21
 8003b5c:	d8f6      	bhi.n	8003b4c <_printf_i+0x28>
 8003b5e:	a101      	add	r1, pc, #4	; (adr r1, 8003b64 <_printf_i+0x40>)
 8003b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b64:	08003bbd 	.word	0x08003bbd
 8003b68:	08003bd1 	.word	0x08003bd1
 8003b6c:	08003b4d 	.word	0x08003b4d
 8003b70:	08003b4d 	.word	0x08003b4d
 8003b74:	08003b4d 	.word	0x08003b4d
 8003b78:	08003b4d 	.word	0x08003b4d
 8003b7c:	08003bd1 	.word	0x08003bd1
 8003b80:	08003b4d 	.word	0x08003b4d
 8003b84:	08003b4d 	.word	0x08003b4d
 8003b88:	08003b4d 	.word	0x08003b4d
 8003b8c:	08003b4d 	.word	0x08003b4d
 8003b90:	08003cdd 	.word	0x08003cdd
 8003b94:	08003c01 	.word	0x08003c01
 8003b98:	08003cbf 	.word	0x08003cbf
 8003b9c:	08003b4d 	.word	0x08003b4d
 8003ba0:	08003b4d 	.word	0x08003b4d
 8003ba4:	08003cff 	.word	0x08003cff
 8003ba8:	08003b4d 	.word	0x08003b4d
 8003bac:	08003c01 	.word	0x08003c01
 8003bb0:	08003b4d 	.word	0x08003b4d
 8003bb4:	08003b4d 	.word	0x08003b4d
 8003bb8:	08003cc7 	.word	0x08003cc7
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	1d1a      	adds	r2, r3, #4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	602a      	str	r2, [r5, #0]
 8003bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0a3      	b.n	8003d18 <_printf_i+0x1f4>
 8003bd0:	6820      	ldr	r0, [r4, #0]
 8003bd2:	6829      	ldr	r1, [r5, #0]
 8003bd4:	0606      	lsls	r6, r0, #24
 8003bd6:	f101 0304 	add.w	r3, r1, #4
 8003bda:	d50a      	bpl.n	8003bf2 <_printf_i+0xce>
 8003bdc:	680e      	ldr	r6, [r1, #0]
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	2e00      	cmp	r6, #0
 8003be2:	da03      	bge.n	8003bec <_printf_i+0xc8>
 8003be4:	232d      	movs	r3, #45	; 0x2d
 8003be6:	4276      	negs	r6, r6
 8003be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bec:	485e      	ldr	r0, [pc, #376]	; (8003d68 <_printf_i+0x244>)
 8003bee:	230a      	movs	r3, #10
 8003bf0:	e019      	b.n	8003c26 <_printf_i+0x102>
 8003bf2:	680e      	ldr	r6, [r1, #0]
 8003bf4:	602b      	str	r3, [r5, #0]
 8003bf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bfa:	bf18      	it	ne
 8003bfc:	b236      	sxthne	r6, r6
 8003bfe:	e7ef      	b.n	8003be0 <_printf_i+0xbc>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	6820      	ldr	r0, [r4, #0]
 8003c04:	1d19      	adds	r1, r3, #4
 8003c06:	6029      	str	r1, [r5, #0]
 8003c08:	0601      	lsls	r1, r0, #24
 8003c0a:	d501      	bpl.n	8003c10 <_printf_i+0xec>
 8003c0c:	681e      	ldr	r6, [r3, #0]
 8003c0e:	e002      	b.n	8003c16 <_printf_i+0xf2>
 8003c10:	0646      	lsls	r6, r0, #25
 8003c12:	d5fb      	bpl.n	8003c0c <_printf_i+0xe8>
 8003c14:	881e      	ldrh	r6, [r3, #0]
 8003c16:	4854      	ldr	r0, [pc, #336]	; (8003d68 <_printf_i+0x244>)
 8003c18:	2f6f      	cmp	r7, #111	; 0x6f
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2308      	moveq	r3, #8
 8003c1e:	230a      	movne	r3, #10
 8003c20:	2100      	movs	r1, #0
 8003c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c26:	6865      	ldr	r5, [r4, #4]
 8003c28:	60a5      	str	r5, [r4, #8]
 8003c2a:	2d00      	cmp	r5, #0
 8003c2c:	bfa2      	ittt	ge
 8003c2e:	6821      	ldrge	r1, [r4, #0]
 8003c30:	f021 0104 	bicge.w	r1, r1, #4
 8003c34:	6021      	strge	r1, [r4, #0]
 8003c36:	b90e      	cbnz	r6, 8003c3c <_printf_i+0x118>
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	d04d      	beq.n	8003cd8 <_printf_i+0x1b4>
 8003c3c:	4615      	mov	r5, r2
 8003c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c42:	fb03 6711 	mls	r7, r3, r1, r6
 8003c46:	5dc7      	ldrb	r7, [r0, r7]
 8003c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c4c:	4637      	mov	r7, r6
 8003c4e:	42bb      	cmp	r3, r7
 8003c50:	460e      	mov	r6, r1
 8003c52:	d9f4      	bls.n	8003c3e <_printf_i+0x11a>
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d10b      	bne.n	8003c70 <_printf_i+0x14c>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	07de      	lsls	r6, r3, #31
 8003c5c:	d508      	bpl.n	8003c70 <_printf_i+0x14c>
 8003c5e:	6923      	ldr	r3, [r4, #16]
 8003c60:	6861      	ldr	r1, [r4, #4]
 8003c62:	4299      	cmp	r1, r3
 8003c64:	bfde      	ittt	le
 8003c66:	2330      	movle	r3, #48	; 0x30
 8003c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c70:	1b52      	subs	r2, r2, r5
 8003c72:	6122      	str	r2, [r4, #16]
 8003c74:	f8cd a000 	str.w	sl, [sp]
 8003c78:	464b      	mov	r3, r9
 8003c7a:	aa03      	add	r2, sp, #12
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f7ff fee2 	bl	8003a48 <_printf_common>
 8003c84:	3001      	adds	r0, #1
 8003c86:	d14c      	bne.n	8003d22 <_printf_i+0x1fe>
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	b004      	add	sp, #16
 8003c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c92:	4835      	ldr	r0, [pc, #212]	; (8003d68 <_printf_i+0x244>)
 8003c94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c98:	6829      	ldr	r1, [r5, #0]
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ca0:	6029      	str	r1, [r5, #0]
 8003ca2:	061d      	lsls	r5, r3, #24
 8003ca4:	d514      	bpl.n	8003cd0 <_printf_i+0x1ac>
 8003ca6:	07df      	lsls	r7, r3, #31
 8003ca8:	bf44      	itt	mi
 8003caa:	f043 0320 	orrmi.w	r3, r3, #32
 8003cae:	6023      	strmi	r3, [r4, #0]
 8003cb0:	b91e      	cbnz	r6, 8003cba <_printf_i+0x196>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	f023 0320 	bic.w	r3, r3, #32
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	2310      	movs	r3, #16
 8003cbc:	e7b0      	b.n	8003c20 <_printf_i+0xfc>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	2378      	movs	r3, #120	; 0x78
 8003cc8:	4828      	ldr	r0, [pc, #160]	; (8003d6c <_printf_i+0x248>)
 8003cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cce:	e7e3      	b.n	8003c98 <_printf_i+0x174>
 8003cd0:	0659      	lsls	r1, r3, #25
 8003cd2:	bf48      	it	mi
 8003cd4:	b2b6      	uxthmi	r6, r6
 8003cd6:	e7e6      	b.n	8003ca6 <_printf_i+0x182>
 8003cd8:	4615      	mov	r5, r2
 8003cda:	e7bb      	b.n	8003c54 <_printf_i+0x130>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	6826      	ldr	r6, [r4, #0]
 8003ce0:	6961      	ldr	r1, [r4, #20]
 8003ce2:	1d18      	adds	r0, r3, #4
 8003ce4:	6028      	str	r0, [r5, #0]
 8003ce6:	0635      	lsls	r5, r6, #24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	d501      	bpl.n	8003cf0 <_printf_i+0x1cc>
 8003cec:	6019      	str	r1, [r3, #0]
 8003cee:	e002      	b.n	8003cf6 <_printf_i+0x1d2>
 8003cf0:	0670      	lsls	r0, r6, #25
 8003cf2:	d5fb      	bpl.n	8003cec <_printf_i+0x1c8>
 8003cf4:	8019      	strh	r1, [r3, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6123      	str	r3, [r4, #16]
 8003cfa:	4615      	mov	r5, r2
 8003cfc:	e7ba      	b.n	8003c74 <_printf_i+0x150>
 8003cfe:	682b      	ldr	r3, [r5, #0]
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	602a      	str	r2, [r5, #0]
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	6862      	ldr	r2, [r4, #4]
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f7fc fa80 	bl	8000210 <memchr>
 8003d10:	b108      	cbz	r0, 8003d16 <_printf_i+0x1f2>
 8003d12:	1b40      	subs	r0, r0, r5
 8003d14:	6060      	str	r0, [r4, #4]
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	6123      	str	r3, [r4, #16]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d20:	e7a8      	b.n	8003c74 <_printf_i+0x150>
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	462a      	mov	r2, r5
 8003d26:	4649      	mov	r1, r9
 8003d28:	4640      	mov	r0, r8
 8003d2a:	47d0      	blx	sl
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d0ab      	beq.n	8003c88 <_printf_i+0x164>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	079b      	lsls	r3, r3, #30
 8003d34:	d413      	bmi.n	8003d5e <_printf_i+0x23a>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	4298      	cmp	r0, r3
 8003d3c:	bfb8      	it	lt
 8003d3e:	4618      	movlt	r0, r3
 8003d40:	e7a4      	b.n	8003c8c <_printf_i+0x168>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4632      	mov	r2, r6
 8003d46:	4649      	mov	r1, r9
 8003d48:	4640      	mov	r0, r8
 8003d4a:	47d0      	blx	sl
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d09b      	beq.n	8003c88 <_printf_i+0x164>
 8003d50:	3501      	adds	r5, #1
 8003d52:	68e3      	ldr	r3, [r4, #12]
 8003d54:	9903      	ldr	r1, [sp, #12]
 8003d56:	1a5b      	subs	r3, r3, r1
 8003d58:	42ab      	cmp	r3, r5
 8003d5a:	dcf2      	bgt.n	8003d42 <_printf_i+0x21e>
 8003d5c:	e7eb      	b.n	8003d36 <_printf_i+0x212>
 8003d5e:	2500      	movs	r5, #0
 8003d60:	f104 0619 	add.w	r6, r4, #25
 8003d64:	e7f5      	b.n	8003d52 <_printf_i+0x22e>
 8003d66:	bf00      	nop
 8003d68:	08004411 	.word	0x08004411
 8003d6c:	08004422 	.word	0x08004422

08003d70 <_sbrk_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d06      	ldr	r5, [pc, #24]	; (8003d8c <_sbrk_r+0x1c>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	f7fc fe8c 	bl	8000a98 <_sbrk>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_sbrk_r+0x1a>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_sbrk_r+0x1a>
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	20000214 	.word	0x20000214

08003d90 <__sread>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	460c      	mov	r4, r1
 8003d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d98:	f000 fab2 	bl	8004300 <_read_r>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	bfab      	itete	ge
 8003da0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003da2:	89a3      	ldrhlt	r3, [r4, #12]
 8003da4:	181b      	addge	r3, r3, r0
 8003da6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003daa:	bfac      	ite	ge
 8003dac:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dae:	81a3      	strhlt	r3, [r4, #12]
 8003db0:	bd10      	pop	{r4, pc}

08003db2 <__swrite>:
 8003db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db6:	461f      	mov	r7, r3
 8003db8:	898b      	ldrh	r3, [r1, #12]
 8003dba:	05db      	lsls	r3, r3, #23
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	d505      	bpl.n	8003dd0 <__swrite+0x1e>
 8003dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc8:	2302      	movs	r3, #2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f000 f9c8 	bl	8004160 <_lseek_r>
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	4632      	mov	r2, r6
 8003dde:	463b      	mov	r3, r7
 8003de0:	4628      	mov	r0, r5
 8003de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003de6:	f000 b869 	b.w	8003ebc <_write_r>

08003dea <__sseek>:
 8003dea:	b510      	push	{r4, lr}
 8003dec:	460c      	mov	r4, r1
 8003dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df2:	f000 f9b5 	bl	8004160 <_lseek_r>
 8003df6:	1c43      	adds	r3, r0, #1
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	bf15      	itete	ne
 8003dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e06:	81a3      	strheq	r3, [r4, #12]
 8003e08:	bf18      	it	ne
 8003e0a:	81a3      	strhne	r3, [r4, #12]
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <__sclose>:
 8003e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e12:	f000 b8d3 	b.w	8003fbc <_close_r>
	...

08003e18 <__swbuf_r>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	460e      	mov	r6, r1
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	4605      	mov	r5, r0
 8003e20:	b118      	cbz	r0, 8003e2a <__swbuf_r+0x12>
 8003e22:	6983      	ldr	r3, [r0, #24]
 8003e24:	b90b      	cbnz	r3, 8003e2a <__swbuf_r+0x12>
 8003e26:	f7ff fb81 	bl	800352c <__sinit>
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <__swbuf_r+0x98>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	d12b      	bne.n	8003e88 <__swbuf_r+0x70>
 8003e30:	686c      	ldr	r4, [r5, #4]
 8003e32:	69a3      	ldr	r3, [r4, #24]
 8003e34:	60a3      	str	r3, [r4, #8]
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	071a      	lsls	r2, r3, #28
 8003e3a:	d52f      	bpl.n	8003e9c <__swbuf_r+0x84>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	b36b      	cbz	r3, 8003e9c <__swbuf_r+0x84>
 8003e40:	6923      	ldr	r3, [r4, #16]
 8003e42:	6820      	ldr	r0, [r4, #0]
 8003e44:	1ac0      	subs	r0, r0, r3
 8003e46:	6963      	ldr	r3, [r4, #20]
 8003e48:	b2f6      	uxtb	r6, r6
 8003e4a:	4283      	cmp	r3, r0
 8003e4c:	4637      	mov	r7, r6
 8003e4e:	dc04      	bgt.n	8003e5a <__swbuf_r+0x42>
 8003e50:	4621      	mov	r1, r4
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 f948 	bl	80040e8 <_fflush_r>
 8003e58:	bb30      	cbnz	r0, 8003ea8 <__swbuf_r+0x90>
 8003e5a:	68a3      	ldr	r3, [r4, #8]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	60a3      	str	r3, [r4, #8]
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	6022      	str	r2, [r4, #0]
 8003e66:	701e      	strb	r6, [r3, #0]
 8003e68:	6963      	ldr	r3, [r4, #20]
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	4283      	cmp	r3, r0
 8003e6e:	d004      	beq.n	8003e7a <__swbuf_r+0x62>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	07db      	lsls	r3, r3, #31
 8003e74:	d506      	bpl.n	8003e84 <__swbuf_r+0x6c>
 8003e76:	2e0a      	cmp	r6, #10
 8003e78:	d104      	bne.n	8003e84 <__swbuf_r+0x6c>
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f000 f933 	bl	80040e8 <_fflush_r>
 8003e82:	b988      	cbnz	r0, 8003ea8 <__swbuf_r+0x90>
 8003e84:	4638      	mov	r0, r7
 8003e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <__swbuf_r+0x9c>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	d101      	bne.n	8003e92 <__swbuf_r+0x7a>
 8003e8e:	68ac      	ldr	r4, [r5, #8]
 8003e90:	e7cf      	b.n	8003e32 <__swbuf_r+0x1a>
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <__swbuf_r+0xa0>)
 8003e94:	429c      	cmp	r4, r3
 8003e96:	bf08      	it	eq
 8003e98:	68ec      	ldreq	r4, [r5, #12]
 8003e9a:	e7ca      	b.n	8003e32 <__swbuf_r+0x1a>
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 f81e 	bl	8003ee0 <__swsetup_r>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d0cb      	beq.n	8003e40 <__swbuf_r+0x28>
 8003ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8003eac:	e7ea      	b.n	8003e84 <__swbuf_r+0x6c>
 8003eae:	bf00      	nop
 8003eb0:	080043c0 	.word	0x080043c0
 8003eb4:	080043e0 	.word	0x080043e0
 8003eb8:	080043a0 	.word	0x080043a0

08003ebc <_write_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4d07      	ldr	r5, [pc, #28]	; (8003edc <_write_r+0x20>)
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	602a      	str	r2, [r5, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f7fc fd93 	bl	80009f6 <_write>
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d102      	bne.n	8003eda <_write_r+0x1e>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	b103      	cbz	r3, 8003eda <_write_r+0x1e>
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	bd38      	pop	{r3, r4, r5, pc}
 8003edc:	20000214 	.word	0x20000214

08003ee0 <__swsetup_r>:
 8003ee0:	4b32      	ldr	r3, [pc, #200]	; (8003fac <__swsetup_r+0xcc>)
 8003ee2:	b570      	push	{r4, r5, r6, lr}
 8003ee4:	681d      	ldr	r5, [r3, #0]
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	460c      	mov	r4, r1
 8003eea:	b125      	cbz	r5, 8003ef6 <__swsetup_r+0x16>
 8003eec:	69ab      	ldr	r3, [r5, #24]
 8003eee:	b913      	cbnz	r3, 8003ef6 <__swsetup_r+0x16>
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f7ff fb1b 	bl	800352c <__sinit>
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <__swsetup_r+0xd0>)
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	d10f      	bne.n	8003f1c <__swsetup_r+0x3c>
 8003efc:	686c      	ldr	r4, [r5, #4]
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f04:	0719      	lsls	r1, r3, #28
 8003f06:	d42c      	bmi.n	8003f62 <__swsetup_r+0x82>
 8003f08:	06dd      	lsls	r5, r3, #27
 8003f0a:	d411      	bmi.n	8003f30 <__swsetup_r+0x50>
 8003f0c:	2309      	movs	r3, #9
 8003f0e:	6033      	str	r3, [r6, #0]
 8003f10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1a:	e03e      	b.n	8003f9a <__swsetup_r+0xba>
 8003f1c:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <__swsetup_r+0xd4>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d101      	bne.n	8003f26 <__swsetup_r+0x46>
 8003f22:	68ac      	ldr	r4, [r5, #8]
 8003f24:	e7eb      	b.n	8003efe <__swsetup_r+0x1e>
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <__swsetup_r+0xd8>)
 8003f28:	429c      	cmp	r4, r3
 8003f2a:	bf08      	it	eq
 8003f2c:	68ec      	ldreq	r4, [r5, #12]
 8003f2e:	e7e6      	b.n	8003efe <__swsetup_r+0x1e>
 8003f30:	0758      	lsls	r0, r3, #29
 8003f32:	d512      	bpl.n	8003f5a <__swsetup_r+0x7a>
 8003f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f36:	b141      	cbz	r1, 8003f4a <__swsetup_r+0x6a>
 8003f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	d002      	beq.n	8003f46 <__swsetup_r+0x66>
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 f991 	bl	8004268 <_free_r>
 8003f46:	2300      	movs	r3, #0
 8003f48:	6363      	str	r3, [r4, #52]	; 0x34
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	2300      	movs	r3, #0
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f043 0308 	orr.w	r3, r3, #8
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	b94b      	cbnz	r3, 8003f7a <__swsetup_r+0x9a>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d003      	beq.n	8003f7a <__swsetup_r+0x9a>
 8003f72:	4621      	mov	r1, r4
 8003f74:	4630      	mov	r0, r6
 8003f76:	f000 f92b 	bl	80041d0 <__smakebuf_r>
 8003f7a:	89a0      	ldrh	r0, [r4, #12]
 8003f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f80:	f010 0301 	ands.w	r3, r0, #1
 8003f84:	d00a      	beq.n	8003f9c <__swsetup_r+0xbc>
 8003f86:	2300      	movs	r3, #0
 8003f88:	60a3      	str	r3, [r4, #8]
 8003f8a:	6963      	ldr	r3, [r4, #20]
 8003f8c:	425b      	negs	r3, r3
 8003f8e:	61a3      	str	r3, [r4, #24]
 8003f90:	6923      	ldr	r3, [r4, #16]
 8003f92:	b943      	cbnz	r3, 8003fa6 <__swsetup_r+0xc6>
 8003f94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f98:	d1ba      	bne.n	8003f10 <__swsetup_r+0x30>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	0781      	lsls	r1, r0, #30
 8003f9e:	bf58      	it	pl
 8003fa0:	6963      	ldrpl	r3, [r4, #20]
 8003fa2:	60a3      	str	r3, [r4, #8]
 8003fa4:	e7f4      	b.n	8003f90 <__swsetup_r+0xb0>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e7f7      	b.n	8003f9a <__swsetup_r+0xba>
 8003faa:	bf00      	nop
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	080043c0 	.word	0x080043c0
 8003fb4:	080043e0 	.word	0x080043e0
 8003fb8:	080043a0 	.word	0x080043a0

08003fbc <_close_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d06      	ldr	r5, [pc, #24]	; (8003fd8 <_close_r+0x1c>)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fc fd31 	bl	8000a2e <_close>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_close_r+0x1a>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_close_r+0x1a>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	20000214 	.word	0x20000214

08003fdc <__sflush_r>:
 8003fdc:	898a      	ldrh	r2, [r1, #12]
 8003fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	0710      	lsls	r0, r2, #28
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	d458      	bmi.n	800409c <__sflush_r+0xc0>
 8003fea:	684b      	ldr	r3, [r1, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	dc05      	bgt.n	8003ffc <__sflush_r+0x20>
 8003ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	dc02      	bgt.n	8003ffc <__sflush_r+0x20>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ffe:	2e00      	cmp	r6, #0
 8004000:	d0f9      	beq.n	8003ff6 <__sflush_r+0x1a>
 8004002:	2300      	movs	r3, #0
 8004004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004008:	682f      	ldr	r7, [r5, #0]
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	d032      	beq.n	8004074 <__sflush_r+0x98>
 800400e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	075a      	lsls	r2, r3, #29
 8004014:	d505      	bpl.n	8004022 <__sflush_r+0x46>
 8004016:	6863      	ldr	r3, [r4, #4]
 8004018:	1ac0      	subs	r0, r0, r3
 800401a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800401c:	b10b      	cbz	r3, 8004022 <__sflush_r+0x46>
 800401e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004020:	1ac0      	subs	r0, r0, r3
 8004022:	2300      	movs	r3, #0
 8004024:	4602      	mov	r2, r0
 8004026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004028:	6a21      	ldr	r1, [r4, #32]
 800402a:	4628      	mov	r0, r5
 800402c:	47b0      	blx	r6
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	d106      	bne.n	8004042 <__sflush_r+0x66>
 8004034:	6829      	ldr	r1, [r5, #0]
 8004036:	291d      	cmp	r1, #29
 8004038:	d82c      	bhi.n	8004094 <__sflush_r+0xb8>
 800403a:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <__sflush_r+0x108>)
 800403c:	40ca      	lsrs	r2, r1
 800403e:	07d6      	lsls	r6, r2, #31
 8004040:	d528      	bpl.n	8004094 <__sflush_r+0xb8>
 8004042:	2200      	movs	r2, #0
 8004044:	6062      	str	r2, [r4, #4]
 8004046:	04d9      	lsls	r1, r3, #19
 8004048:	6922      	ldr	r2, [r4, #16]
 800404a:	6022      	str	r2, [r4, #0]
 800404c:	d504      	bpl.n	8004058 <__sflush_r+0x7c>
 800404e:	1c42      	adds	r2, r0, #1
 8004050:	d101      	bne.n	8004056 <__sflush_r+0x7a>
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	b903      	cbnz	r3, 8004058 <__sflush_r+0x7c>
 8004056:	6560      	str	r0, [r4, #84]	; 0x54
 8004058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800405a:	602f      	str	r7, [r5, #0]
 800405c:	2900      	cmp	r1, #0
 800405e:	d0ca      	beq.n	8003ff6 <__sflush_r+0x1a>
 8004060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004064:	4299      	cmp	r1, r3
 8004066:	d002      	beq.n	800406e <__sflush_r+0x92>
 8004068:	4628      	mov	r0, r5
 800406a:	f000 f8fd 	bl	8004268 <_free_r>
 800406e:	2000      	movs	r0, #0
 8004070:	6360      	str	r0, [r4, #52]	; 0x34
 8004072:	e7c1      	b.n	8003ff8 <__sflush_r+0x1c>
 8004074:	6a21      	ldr	r1, [r4, #32]
 8004076:	2301      	movs	r3, #1
 8004078:	4628      	mov	r0, r5
 800407a:	47b0      	blx	r6
 800407c:	1c41      	adds	r1, r0, #1
 800407e:	d1c7      	bne.n	8004010 <__sflush_r+0x34>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0c4      	beq.n	8004010 <__sflush_r+0x34>
 8004086:	2b1d      	cmp	r3, #29
 8004088:	d001      	beq.n	800408e <__sflush_r+0xb2>
 800408a:	2b16      	cmp	r3, #22
 800408c:	d101      	bne.n	8004092 <__sflush_r+0xb6>
 800408e:	602f      	str	r7, [r5, #0]
 8004090:	e7b1      	b.n	8003ff6 <__sflush_r+0x1a>
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	e7ad      	b.n	8003ff8 <__sflush_r+0x1c>
 800409c:	690f      	ldr	r7, [r1, #16]
 800409e:	2f00      	cmp	r7, #0
 80040a0:	d0a9      	beq.n	8003ff6 <__sflush_r+0x1a>
 80040a2:	0793      	lsls	r3, r2, #30
 80040a4:	680e      	ldr	r6, [r1, #0]
 80040a6:	bf08      	it	eq
 80040a8:	694b      	ldreq	r3, [r1, #20]
 80040aa:	600f      	str	r7, [r1, #0]
 80040ac:	bf18      	it	ne
 80040ae:	2300      	movne	r3, #0
 80040b0:	eba6 0807 	sub.w	r8, r6, r7
 80040b4:	608b      	str	r3, [r1, #8]
 80040b6:	f1b8 0f00 	cmp.w	r8, #0
 80040ba:	dd9c      	ble.n	8003ff6 <__sflush_r+0x1a>
 80040bc:	6a21      	ldr	r1, [r4, #32]
 80040be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040c0:	4643      	mov	r3, r8
 80040c2:	463a      	mov	r2, r7
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b0      	blx	r6
 80040c8:	2800      	cmp	r0, #0
 80040ca:	dc06      	bgt.n	80040da <__sflush_r+0xfe>
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	e78e      	b.n	8003ff8 <__sflush_r+0x1c>
 80040da:	4407      	add	r7, r0
 80040dc:	eba8 0800 	sub.w	r8, r8, r0
 80040e0:	e7e9      	b.n	80040b6 <__sflush_r+0xda>
 80040e2:	bf00      	nop
 80040e4:	20400001 	.word	0x20400001

080040e8 <_fflush_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	4605      	mov	r5, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	b913      	cbnz	r3, 80040f8 <_fflush_r+0x10>
 80040f2:	2500      	movs	r5, #0
 80040f4:	4628      	mov	r0, r5
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	b118      	cbz	r0, 8004102 <_fflush_r+0x1a>
 80040fa:	6983      	ldr	r3, [r0, #24]
 80040fc:	b90b      	cbnz	r3, 8004102 <_fflush_r+0x1a>
 80040fe:	f7ff fa15 	bl	800352c <__sinit>
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <_fflush_r+0x6c>)
 8004104:	429c      	cmp	r4, r3
 8004106:	d11b      	bne.n	8004140 <_fflush_r+0x58>
 8004108:	686c      	ldr	r4, [r5, #4]
 800410a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ef      	beq.n	80040f2 <_fflush_r+0xa>
 8004112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004114:	07d0      	lsls	r0, r2, #31
 8004116:	d404      	bmi.n	8004122 <_fflush_r+0x3a>
 8004118:	0599      	lsls	r1, r3, #22
 800411a:	d402      	bmi.n	8004122 <_fflush_r+0x3a>
 800411c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800411e:	f7ff faa3 	bl	8003668 <__retarget_lock_acquire_recursive>
 8004122:	4628      	mov	r0, r5
 8004124:	4621      	mov	r1, r4
 8004126:	f7ff ff59 	bl	8003fdc <__sflush_r>
 800412a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800412c:	07da      	lsls	r2, r3, #31
 800412e:	4605      	mov	r5, r0
 8004130:	d4e0      	bmi.n	80040f4 <_fflush_r+0xc>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	059b      	lsls	r3, r3, #22
 8004136:	d4dd      	bmi.n	80040f4 <_fflush_r+0xc>
 8004138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413a:	f7ff fa96 	bl	800366a <__retarget_lock_release_recursive>
 800413e:	e7d9      	b.n	80040f4 <_fflush_r+0xc>
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <_fflush_r+0x70>)
 8004142:	429c      	cmp	r4, r3
 8004144:	d101      	bne.n	800414a <_fflush_r+0x62>
 8004146:	68ac      	ldr	r4, [r5, #8]
 8004148:	e7df      	b.n	800410a <_fflush_r+0x22>
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <_fflush_r+0x74>)
 800414c:	429c      	cmp	r4, r3
 800414e:	bf08      	it	eq
 8004150:	68ec      	ldreq	r4, [r5, #12]
 8004152:	e7da      	b.n	800410a <_fflush_r+0x22>
 8004154:	080043c0 	.word	0x080043c0
 8004158:	080043e0 	.word	0x080043e0
 800415c:	080043a0 	.word	0x080043a0

08004160 <_lseek_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d07      	ldr	r5, [pc, #28]	; (8004180 <_lseek_r+0x20>)
 8004164:	4604      	mov	r4, r0
 8004166:	4608      	mov	r0, r1
 8004168:	4611      	mov	r1, r2
 800416a:	2200      	movs	r2, #0
 800416c:	602a      	str	r2, [r5, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	f7fc fc84 	bl	8000a7c <_lseek>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_lseek_r+0x1e>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_lseek_r+0x1e>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	20000214 	.word	0x20000214

08004184 <__swhatbuf_r>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	460e      	mov	r6, r1
 8004188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418c:	2900      	cmp	r1, #0
 800418e:	b096      	sub	sp, #88	; 0x58
 8004190:	4614      	mov	r4, r2
 8004192:	461d      	mov	r5, r3
 8004194:	da08      	bge.n	80041a8 <__swhatbuf_r+0x24>
 8004196:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	602a      	str	r2, [r5, #0]
 800419e:	061a      	lsls	r2, r3, #24
 80041a0:	d410      	bmi.n	80041c4 <__swhatbuf_r+0x40>
 80041a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a6:	e00e      	b.n	80041c6 <__swhatbuf_r+0x42>
 80041a8:	466a      	mov	r2, sp
 80041aa:	f000 f8bb 	bl	8004324 <_fstat_r>
 80041ae:	2800      	cmp	r0, #0
 80041b0:	dbf1      	blt.n	8004196 <__swhatbuf_r+0x12>
 80041b2:	9a01      	ldr	r2, [sp, #4]
 80041b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041bc:	425a      	negs	r2, r3
 80041be:	415a      	adcs	r2, r3
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	e7ee      	b.n	80041a2 <__swhatbuf_r+0x1e>
 80041c4:	2340      	movs	r3, #64	; 0x40
 80041c6:	2000      	movs	r0, #0
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	b016      	add	sp, #88	; 0x58
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080041d0 <__smakebuf_r>:
 80041d0:	898b      	ldrh	r3, [r1, #12]
 80041d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041d4:	079d      	lsls	r5, r3, #30
 80041d6:	4606      	mov	r6, r0
 80041d8:	460c      	mov	r4, r1
 80041da:	d507      	bpl.n	80041ec <__smakebuf_r+0x1c>
 80041dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	2301      	movs	r3, #1
 80041e6:	6163      	str	r3, [r4, #20]
 80041e8:	b002      	add	sp, #8
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	ab01      	add	r3, sp, #4
 80041ee:	466a      	mov	r2, sp
 80041f0:	f7ff ffc8 	bl	8004184 <__swhatbuf_r>
 80041f4:	9900      	ldr	r1, [sp, #0]
 80041f6:	4605      	mov	r5, r0
 80041f8:	4630      	mov	r0, r6
 80041fa:	f7ff fa57 	bl	80036ac <_malloc_r>
 80041fe:	b948      	cbnz	r0, 8004214 <__smakebuf_r+0x44>
 8004200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004204:	059a      	lsls	r2, r3, #22
 8004206:	d4ef      	bmi.n	80041e8 <__smakebuf_r+0x18>
 8004208:	f023 0303 	bic.w	r3, r3, #3
 800420c:	f043 0302 	orr.w	r3, r3, #2
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	e7e3      	b.n	80041dc <__smakebuf_r+0xc>
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <__smakebuf_r+0x7c>)
 8004216:	62b3      	str	r3, [r6, #40]	; 0x28
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	6020      	str	r0, [r4, #0]
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	9b00      	ldr	r3, [sp, #0]
 8004224:	6163      	str	r3, [r4, #20]
 8004226:	9b01      	ldr	r3, [sp, #4]
 8004228:	6120      	str	r0, [r4, #16]
 800422a:	b15b      	cbz	r3, 8004244 <__smakebuf_r+0x74>
 800422c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004230:	4630      	mov	r0, r6
 8004232:	f000 f889 	bl	8004348 <_isatty_r>
 8004236:	b128      	cbz	r0, 8004244 <__smakebuf_r+0x74>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	89a0      	ldrh	r0, [r4, #12]
 8004246:	4305      	orrs	r5, r0
 8004248:	81a5      	strh	r5, [r4, #12]
 800424a:	e7cd      	b.n	80041e8 <__smakebuf_r+0x18>
 800424c:	080034c5 	.word	0x080034c5

08004250 <__malloc_lock>:
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <__malloc_lock+0x8>)
 8004252:	f7ff ba09 	b.w	8003668 <__retarget_lock_acquire_recursive>
 8004256:	bf00      	nop
 8004258:	20000208 	.word	0x20000208

0800425c <__malloc_unlock>:
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <__malloc_unlock+0x8>)
 800425e:	f7ff ba04 	b.w	800366a <__retarget_lock_release_recursive>
 8004262:	bf00      	nop
 8004264:	20000208 	.word	0x20000208

08004268 <_free_r>:
 8004268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800426a:	2900      	cmp	r1, #0
 800426c:	d044      	beq.n	80042f8 <_free_r+0x90>
 800426e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004272:	9001      	str	r0, [sp, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f1a1 0404 	sub.w	r4, r1, #4
 800427a:	bfb8      	it	lt
 800427c:	18e4      	addlt	r4, r4, r3
 800427e:	f7ff ffe7 	bl	8004250 <__malloc_lock>
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <_free_r+0x94>)
 8004284:	9801      	ldr	r0, [sp, #4]
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	b933      	cbnz	r3, 8004298 <_free_r+0x30>
 800428a:	6063      	str	r3, [r4, #4]
 800428c:	6014      	str	r4, [r2, #0]
 800428e:	b003      	add	sp, #12
 8004290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004294:	f7ff bfe2 	b.w	800425c <__malloc_unlock>
 8004298:	42a3      	cmp	r3, r4
 800429a:	d908      	bls.n	80042ae <_free_r+0x46>
 800429c:	6825      	ldr	r5, [r4, #0]
 800429e:	1961      	adds	r1, r4, r5
 80042a0:	428b      	cmp	r3, r1
 80042a2:	bf01      	itttt	eq
 80042a4:	6819      	ldreq	r1, [r3, #0]
 80042a6:	685b      	ldreq	r3, [r3, #4]
 80042a8:	1949      	addeq	r1, r1, r5
 80042aa:	6021      	streq	r1, [r4, #0]
 80042ac:	e7ed      	b.n	800428a <_free_r+0x22>
 80042ae:	461a      	mov	r2, r3
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	b10b      	cbz	r3, 80042b8 <_free_r+0x50>
 80042b4:	42a3      	cmp	r3, r4
 80042b6:	d9fa      	bls.n	80042ae <_free_r+0x46>
 80042b8:	6811      	ldr	r1, [r2, #0]
 80042ba:	1855      	adds	r5, r2, r1
 80042bc:	42a5      	cmp	r5, r4
 80042be:	d10b      	bne.n	80042d8 <_free_r+0x70>
 80042c0:	6824      	ldr	r4, [r4, #0]
 80042c2:	4421      	add	r1, r4
 80042c4:	1854      	adds	r4, r2, r1
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	d1e0      	bne.n	800428e <_free_r+0x26>
 80042cc:	681c      	ldr	r4, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	6053      	str	r3, [r2, #4]
 80042d2:	4421      	add	r1, r4
 80042d4:	6011      	str	r1, [r2, #0]
 80042d6:	e7da      	b.n	800428e <_free_r+0x26>
 80042d8:	d902      	bls.n	80042e0 <_free_r+0x78>
 80042da:	230c      	movs	r3, #12
 80042dc:	6003      	str	r3, [r0, #0]
 80042de:	e7d6      	b.n	800428e <_free_r+0x26>
 80042e0:	6825      	ldr	r5, [r4, #0]
 80042e2:	1961      	adds	r1, r4, r5
 80042e4:	428b      	cmp	r3, r1
 80042e6:	bf04      	itt	eq
 80042e8:	6819      	ldreq	r1, [r3, #0]
 80042ea:	685b      	ldreq	r3, [r3, #4]
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	bf04      	itt	eq
 80042f0:	1949      	addeq	r1, r1, r5
 80042f2:	6021      	streq	r1, [r4, #0]
 80042f4:	6054      	str	r4, [r2, #4]
 80042f6:	e7ca      	b.n	800428e <_free_r+0x26>
 80042f8:	b003      	add	sp, #12
 80042fa:	bd30      	pop	{r4, r5, pc}
 80042fc:	2000020c 	.word	0x2000020c

08004300 <_read_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4d07      	ldr	r5, [pc, #28]	; (8004320 <_read_r+0x20>)
 8004304:	4604      	mov	r4, r0
 8004306:	4608      	mov	r0, r1
 8004308:	4611      	mov	r1, r2
 800430a:	2200      	movs	r2, #0
 800430c:	602a      	str	r2, [r5, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	f7fc fb54 	bl	80009bc <_read>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d102      	bne.n	800431e <_read_r+0x1e>
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	b103      	cbz	r3, 800431e <_read_r+0x1e>
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	bd38      	pop	{r3, r4, r5, pc}
 8004320:	20000214 	.word	0x20000214

08004324 <_fstat_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4d07      	ldr	r5, [pc, #28]	; (8004344 <_fstat_r+0x20>)
 8004328:	2300      	movs	r3, #0
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	f7fc fb88 	bl	8000a46 <_fstat>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	d102      	bne.n	8004340 <_fstat_r+0x1c>
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	b103      	cbz	r3, 8004340 <_fstat_r+0x1c>
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	bd38      	pop	{r3, r4, r5, pc}
 8004342:	bf00      	nop
 8004344:	20000214 	.word	0x20000214

08004348 <_isatty_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d06      	ldr	r5, [pc, #24]	; (8004364 <_isatty_r+0x1c>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f7fc fb87 	bl	8000a66 <_isatty>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_isatty_r+0x1a>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_isatty_r+0x1a>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	20000214 	.word	0x20000214

08004368 <_init>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr

08004374 <_fini>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr
