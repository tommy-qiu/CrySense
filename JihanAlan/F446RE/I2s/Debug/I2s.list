
I2s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f8  080060f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006100  08006100  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae8  20000010  08006118  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004af8  08006118  00024af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bf5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3d  00000000  00000000  00031c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00034a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cb1  00000000  00000000  000366a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001103a  00000000  00000000  0003a351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d26cd  00000000  00000000  0004b38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011da58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  0011daa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006080 	.word	0x08006080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006080 	.word	0x08006080

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fade 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f826 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8e4 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f8c2 	bl	80006ac <MX_DMA_Init>
  MX_I2S2_Init();
 8000528:	f000 f892 	bl	8000650 <MX_I2S2_Init>
  MX_MBEDTLS_Init();
 800052c:	f002 ffe0 	bl	80034f0 <MX_MBEDTLS_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8000530:	f002 ffde 	bl	80034f0 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s2, (uint8_t *)data_i2s, sizeof(data_i2s)/2);
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	4908      	ldr	r1, [pc, #32]	; (8000558 <main+0x44>)
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <main+0x48>)
 800053a:	f001 fa4d 	bl	80019d8 <HAL_I2S_Receive_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053e:	f003 f813 	bl	8003568 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000542:	4a07      	ldr	r2, [pc, #28]	; (8000560 <main+0x4c>)
 8000544:	2100      	movs	r1, #0
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <main+0x50>)
 8000548:	f003 f858 	bl	80035fc <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <main+0x54>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f003 f82d 	bl	80035b0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x42>
 8000558:	200000d8 	.word	0x200000d8
 800055c:	2000002c 	.word	0x2000002c
 8000560:	080060bc 	.word	0x080060bc
 8000564:	0800080d 	.word	0x0800080d
 8000568:	200000d4 	.word	0x200000d4

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fd78 	bl	8006070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <SystemClock_Config+0xdc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <SystemClock_Config+0xdc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xdc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <SystemClock_Config+0xe0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a25      	ldr	r2, [pc, #148]	; (800064c <SystemClock_Config+0xe0>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xe0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005e0:	23b4      	movs	r3, #180	; 0xb4
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fcdd 	bl	8002fb4 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000600:	f000 f90c 	bl	800081c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000604:	f001 fbfe 	bl	8001e04 <HAL_PWREx_EnableOverDrive>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060e:	f000 f905 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2105      	movs	r1, #5
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fc37 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800063c:	f000 f8ee 	bl	800081c <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_I2S2_Init+0x54>)
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <MX_I2S2_Init+0x58>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2S2_Init+0x54>)
 800065c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000660:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_I2S2_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2S2_Init+0x54>)
 800066a:	2201      	movs	r2, #1
 800066c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_I2S2_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_I2S2_Init+0x54>)
 8000676:	f64a 4244 	movw	r2, #44100	; 0xac44
 800067a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2S2_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_I2S2_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2S2_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_I2S2_Init+0x54>)
 8000690:	f001 f8aa 	bl	80017e8 <HAL_I2S_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800069a:	f000 f8bf 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	40003800 	.word	0x40003800

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_DMA_Init+0x3c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <MX_DMA_Init+0x3c>)
 80006bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_DMA_Init+0x3c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2105      	movs	r1, #5
 80006d2:	200e      	movs	r0, #14
 80006d4:	f000 fb4d 	bl	8000d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006d8:	200e      	movs	r0, #14
 80006da:	f000 fb66 	bl	8000daa <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a33      	ldr	r2, [pc, #204]	; (80007d8 <MX_GPIO_Init+0xec>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_GPIO_Init+0xec>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xec>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_GPIO_Init+0xec>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000778:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4814      	ldr	r0, [pc, #80]	; (80007dc <MX_GPIO_Init+0xf0>)
 800078a:	f000 fe99 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800078e:	230c      	movs	r3, #12
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079e:	2307      	movs	r3, #7
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_GPIO_Init+0xf4>)
 80007aa:	f000 fe89 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007ae:	2330      	movs	r3, #48	; 0x30
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007be:	2305      	movs	r3, #5
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_GPIO_Init+0xf4>)
 80007ca:	f000 fe79 	bl	80014c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020000 	.word	0x40020000

080007e4 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_I2S_RxCpltCallback+0x20>)
 80007ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_I2S_RxCpltCallback+0x24>)
 80007f4:	801a      	strh	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200000d8 	.word	0x200000d8
 8000808:	200001a0 	.word	0x200001a0

0800080c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f002 ff83 	bl	8003720 <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartDefaultTask+0x8>

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_MspInit+0x54>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x54>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 fa80 	bl	8000d72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a2      	sub	sp, #136	; 0x88
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	225c      	movs	r2, #92	; 0x5c
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f005 fbe5 	bl	8006070 <memset>
  if(hi2s->Instance==SPI2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a50      	ldr	r2, [pc, #320]	; (80009ec <HAL_I2S_MspInit+0x16c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	f040 8099 	bne.w	80009e4 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008b6:	23c0      	movs	r3, #192	; 0xc0
 80008b8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80008be:	2310      	movs	r3, #16
 80008c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80008ce:	2300      	movs	r3, #0
 80008d0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fbca 	bl	8002070 <HAL_RCCEx_PeriphCLKConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 80008e2:	f7ff ff9b 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	4b41      	ldr	r3, [pc, #260]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a40      	ldr	r2, [pc, #256]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a39      	ldr	r2, [pc, #228]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_I2S_MspInit+0x170>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800093a:	2302      	movs	r3, #2
 800093c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800094c:	2307      	movs	r3, #7
 800094e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000956:	4619      	mov	r1, r3
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <HAL_I2S_MspInit+0x174>)
 800095a:	f000 fdb1 	bl	80014c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800095e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000962:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000972:	2305      	movs	r3, #5
 8000974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800097c:	4619      	mov	r1, r3
 800097e:	481e      	ldr	r0, [pc, #120]	; (80009f8 <HAL_I2S_MspInit+0x178>)
 8000980:	f000 fd9e 	bl	80014c0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 8000986:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <HAL_I2S_MspInit+0x180>)
 8000988:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 800099e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009ca:	f000 fa09 	bl	8000de0 <HAL_DMA_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_I2S_MspInit+0x158>
    {
      Error_Handler();
 80009d4:	f7ff ff22 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_I2S_MspInit+0x17c>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3788      	adds	r7, #136	; 0x88
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40003800 	.word	0x40003800
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020400 	.word	0x40020400
 80009fc:	20000074 	.word	0x20000074
 8000a00:	40026058 	.word	0x40026058

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f8a2 	bl	8000b7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a38:	f004 fa80 	bl	8004f3c <xTaskGetSchedulerState>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d001      	beq.n	8000a46 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a42:	f005 f869 	bl	8005b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <DMA1_Stream3_IRQHandler+0x10>)
 8000a52:	f000 facb 	bl	8000fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000074 	.word	0x20000074

08000a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f005 faab 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd2d 	bl	8000514 <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ac8:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 8000acc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ad0:	20004af8 	.word	0x20004af8

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f92b 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f000 f808 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fe8c 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f943 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f90b 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200001a4 	.word	0x200001a4

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200001a4 	.word	0x200001a4

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff29 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff3e 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff31 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff feda 	bl	8000ba4 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e099      	b.n	8000f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2202      	movs	r2, #2
 8000e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0201 	bic.w	r2, r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e1c:	e00f      	b.n	8000e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e1e:	f7ff fec1 	bl	8000ba4 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d908      	bls.n	8000e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2220      	movs	r2, #32
 8000e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2203      	movs	r2, #3
 8000e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e078      	b.n	8000f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1e8      	bne.n	8000e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <HAL_DMA_Init+0x158>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d107      	bne.n	8000ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f023 0307 	bic.w	r3, r3, #7
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d117      	bne.n	8000f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00e      	beq.n	8000f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fa6f 	bl	80013c8 <DMA_CheckFifoParam>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d008      	beq.n	8000f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2240      	movs	r2, #64	; 0x40
 8000ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000efe:	2301      	movs	r3, #1
 8000f00:	e016      	b.n	8000f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 fa26 	bl	800135c <DMA_CalcBaseAndBitshift>
 8000f10:	4603      	mov	r3, r0
 8000f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f18:	223f      	movs	r2, #63	; 0x3f
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	f010803f 	.word	0xf010803f

08000f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d101      	bne.n	8000f62 <HAL_DMA_Start_IT+0x26>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e040      	b.n	8000fe4 <HAL_DMA_Start_IT+0xa8>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d12f      	bne.n	8000fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f9b8 	bl	8001300 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	223f      	movs	r2, #63	; 0x3f
 8000f96:	409a      	lsls	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0216 	orr.w	r2, r2, #22
 8000faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d007      	beq.n	8000fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0208 	orr.w	r2, r2, #8
 8000fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e005      	b.n	8000fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ff8:	4b8e      	ldr	r3, [pc, #568]	; (8001234 <HAL_DMA_IRQHandler+0x248>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a8e      	ldr	r2, [pc, #568]	; (8001238 <HAL_DMA_IRQHandler+0x24c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0a9b      	lsrs	r3, r3, #10
 8001004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001016:	2208      	movs	r2, #8
 8001018:	409a      	lsls	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d01a      	beq.n	8001058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0204 	bic.w	r2, r2, #4
 800103e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	2208      	movs	r2, #8
 8001046:	409a      	lsls	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	f043 0201 	orr.w	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105c:	2201      	movs	r2, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d012      	beq.n	800108e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	2201      	movs	r2, #1
 800107c:	409a      	lsls	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001092:	2204      	movs	r2, #4
 8001094:	409a      	lsls	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d012      	beq.n	80010c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	2204      	movs	r2, #4
 80010b2:	409a      	lsls	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010bc:	f043 0204 	orr.w	r2, r3, #4
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	2210      	movs	r2, #16
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d043      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d03c      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	2210      	movs	r2, #16
 80010e8:	409a      	lsls	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d018      	beq.n	800112e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d108      	bne.n	800111c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2b00      	cmp	r3, #0
 8001110:	d024      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
 800111a:	e01f      	b.n	800115c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01b      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
 800112c:	e016      	b.n	800115c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d107      	bne.n	800114c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0208 	bic.w	r2, r2, #8
 800114a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	2220      	movs	r2, #32
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 808f 	beq.w	800128c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 8087 	beq.w	800128c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2220      	movs	r2, #32
 8001184:	409a      	lsls	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b05      	cmp	r3, #5
 8001194:	d136      	bne.n	8001204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0216 	bic.w	r2, r2, #22
 80011a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <HAL_DMA_IRQHandler+0x1da>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0208 	bic.w	r2, r2, #8
 80011d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	223f      	movs	r2, #63	; 0x3f
 80011dc:	409a      	lsls	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d07e      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
        }
        return;
 8001202:	e079      	b.n	80012f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01d      	beq.n	800124e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10d      	bne.n	800123c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	2b00      	cmp	r3, #0
 8001226:	d031      	beq.n	800128c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
 8001230:	e02c      	b.n	800128c <HAL_DMA_IRQHandler+0x2a0>
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000
 8001238:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	2b00      	cmp	r3, #0
 8001242:	d023      	beq.n	800128c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
 800124c:	e01e      	b.n	800128c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10f      	bne.n	800127c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0210 	bic.w	r2, r2, #16
 800126a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	2b00      	cmp	r3, #0
 8001292:	d032      	beq.n	80012fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d022      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2205      	movs	r2, #5
 80012a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d307      	bcc.n	80012d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f2      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x2cc>
 80012d2:	e000      	b.n	80012d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	4798      	blx	r3
 80012f6:	e000      	b.n	80012fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80012f8:	bf00      	nop
    }
  }
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800131c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b40      	cmp	r3, #64	; 0x40
 800132c:	d108      	bne.n	8001340 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800133e:	e007      	b.n	8001350 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3b10      	subs	r3, #16
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <DMA_CalcBaseAndBitshift+0x64>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d909      	bls.n	800139e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001392:	f023 0303 	bic.w	r3, r3, #3
 8001396:	1d1a      	adds	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	659a      	str	r2, [r3, #88]	; 0x58
 800139c:	e007      	b.n	80013ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	aaaaaaab 	.word	0xaaaaaaab
 80013c4:	080060f0 	.word	0x080060f0

080013c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d11f      	bne.n	8001422 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d856      	bhi.n	8001496 <DMA_CheckFifoParam+0xce>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <DMA_CheckFifoParam+0x28>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001401 	.word	0x08001401
 80013f4:	08001413 	.word	0x08001413
 80013f8:	08001401 	.word	0x08001401
 80013fc:	08001497 	.word	0x08001497
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d046      	beq.n	800149a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001410:	e043      	b.n	800149a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800141a:	d140      	bne.n	800149e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001420:	e03d      	b.n	800149e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800142a:	d121      	bne.n	8001470 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d837      	bhi.n	80014a2 <DMA_CheckFifoParam+0xda>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <DMA_CheckFifoParam+0x70>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800144f 	.word	0x0800144f
 8001440:	08001449 	.word	0x08001449
 8001444:	08001461 	.word	0x08001461
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
      break;
 800144c:	e030      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d025      	beq.n	80014a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800145e:	e022      	b.n	80014a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001468:	d11f      	bne.n	80014aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800146e:	e01c      	b.n	80014aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d903      	bls.n	800147e <DMA_CheckFifoParam+0xb6>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d003      	beq.n	8001484 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800147c:	e018      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
      break;
 8001482:	e015      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00e      	beq.n	80014ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
      break;
 8001494:	e00b      	b.n	80014ae <DMA_CheckFifoParam+0xe6>
      break;
 8001496:	bf00      	nop
 8001498:	e00a      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      break;
 800149a:	bf00      	nop
 800149c:	e008      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      break;
 800149e:	bf00      	nop
 80014a0:	e006      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      break;
 80014a2:	bf00      	nop
 80014a4:	e004      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      break;
 80014a6:	bf00      	nop
 80014a8:	e002      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80014aa:	bf00      	nop
 80014ac:	e000      	b.n	80014b0 <DMA_CheckFifoParam+0xe8>
      break;
 80014ae:	bf00      	nop
    }
  } 
  
  return status; 
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e165      	b.n	80017a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 8154 	bne.w	80017a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d005      	beq.n	8001512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	2b02      	cmp	r3, #2
 8001510:	d130      	bne.n	8001574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b03      	cmp	r3, #3
 800157e:	d017      	beq.n	80015b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d123      	bne.n	8001604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	69b9      	ldr	r1, [r7, #24]
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80ae 	beq.w	80017a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_GPIO_Init+0x300>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a5c      	ldr	r2, [pc, #368]	; (80017c0 <HAL_GPIO_Init+0x300>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <HAL_GPIO_Init+0x300>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001662:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_GPIO_Init+0x304>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4f      	ldr	r2, [pc, #316]	; (80017c8 <HAL_GPIO_Init+0x308>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d025      	beq.n	80016da <HAL_GPIO_Init+0x21a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4e      	ldr	r2, [pc, #312]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01f      	beq.n	80016d6 <HAL_GPIO_Init+0x216>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <HAL_GPIO_Init+0x310>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x212>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4c      	ldr	r2, [pc, #304]	; (80017d4 <HAL_GPIO_Init+0x314>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x20e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4b      	ldr	r2, [pc, #300]	; (80017d8 <HAL_GPIO_Init+0x318>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x20a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <HAL_GPIO_Init+0x31c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <HAL_GPIO_Init+0x320>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x202>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x21c>
 80016da:	2300      	movs	r3, #0
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ec:	4935      	ldr	r1, [pc, #212]	; (80017c4 <HAL_GPIO_Init+0x304>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171e:	4a31      	ldr	r2, [pc, #196]	; (80017e4 <HAL_GPIO_Init+0x324>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <HAL_GPIO_Init+0x324>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001748:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <HAL_GPIO_Init+0x324>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_GPIO_Init+0x324>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_GPIO_Init+0x324>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_GPIO_Init+0x324>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800179c:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <HAL_GPIO_Init+0x324>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f67f ae96 	bls.w	80014dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40021400 	.word	0x40021400
 80017e0:	40021800 	.word	0x40021800
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0e1      	b.n	80019be <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a6d      	ldr	r2, [pc, #436]	; (80019c8 <HAL_I2S_Init+0x1e0>)
 8001812:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff f833 	bl	8000880 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2202      	movs	r2, #2
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001830:	f023 030f 	bic.w	r3, r3, #15
 8001834:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2202      	movs	r2, #2
 800183c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d06f      	beq.n	8001926 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800184e:	2310      	movs	r3, #16
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e001      	b.n	8001858 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001854:	2320      	movs	r3, #32
 8001856:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b20      	cmp	r3, #32
 800185e:	d802      	bhi.n	8001866 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_I2S_Init+0x1e4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d004      	beq.n	800187a <HAL_I2S_Init+0x92>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a56      	ldr	r2, [pc, #344]	; (80019d0 <HAL_I2S_Init+0x1e8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d104      	bne.n	8001884 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800187a:	2001      	movs	r0, #1
 800187c:	f000 ff22 	bl	80026c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	e003      	b.n	800188c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001884:	2002      	movs	r0, #2
 8001886:	f000 ff1d 	bl	80026c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800188a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001894:	d125      	bne.n	80018e2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	3305      	adds	r3, #5
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	e01f      	b.n	8001900 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	3305      	adds	r3, #5
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	e00e      	b.n	8001900 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	3305      	adds	r3, #5
 80018fe:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <HAL_I2S_Init+0x1ec>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	e003      	b.n	800192e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001926:	2302      	movs	r3, #2
 8001928:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d902      	bls.n	800193a <HAL_I2S_Init+0x152>
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d907      	bls.n	800194a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f043 0210 	orr.w	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e039      	b.n	80019be <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	ea42 0103 	orr.w	r1, r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	430a      	orrs	r2, r1
 800195c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001968:	f023 030f 	bic.w	r3, r3, #15
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6851      	ldr	r1, [r2, #4]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6892      	ldr	r2, [r2, #8]
 8001974:	4311      	orrs	r1, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6992      	ldr	r2, [r2, #24]
 8001980:	430a      	orrs	r2, r1
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b30      	cmp	r3, #48	; 0x30
 8001994:	d003      	beq.n	800199e <HAL_I2S_Init+0x1b6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2bb0      	cmp	r3, #176	; 0xb0
 800199c:	d107      	bne.n	80019ae <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019ac:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08001cf1 	.word	0x08001cf1
 80019cc:	40003800 	.word	0x40003800
 80019d0:	40003c00 	.word	0x40003c00
 80019d4:	cccccccd 	.word	0xcccccccd

080019d8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_I2S_Receive_DMA+0x1a>
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0a1      	b.n	8001b3a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_I2S_Receive_DMA+0x2e>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e099      	b.n	8001b3a <HAL_I2S_Receive_DMA+0x162>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d005      	beq.n	8001a26 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001a22:	2302      	movs	r3, #2
 8001a24:	e089      	b.n	8001b3a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d002      	beq.n	8001a52 <HAL_I2S_Receive_DMA+0x7a>
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d10a      	bne.n	8001a68 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	865a      	strh	r2, [r3, #50]	; 0x32
 8001a66:	e005      	b.n	8001a74 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <HAL_I2S_Receive_DMA+0x16c>)
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_I2S_Receive_DMA+0x170>)
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	4a30      	ldr	r2, [pc, #192]	; (8001b4c <HAL_I2S_Receive_DMA+0x174>)
 8001a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a9a:	d10a      	bne.n	8001ab2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	330c      	adds	r3, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ac8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001aca:	f7ff fa37 	bl	8000f3c <HAL_DMA_Start_IT>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00f      	beq.n	8001af4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f043 0208 	orr.w	r2, r3, #8
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e022      	b.n	8001b3a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b10:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	08001bcf 	.word	0x08001bcf
 8001b48:	08001b8d 	.word	0x08001b8d
 8001b4c:	08001beb 	.word	0x08001beb

08001b50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10e      	bne.n	8001bc0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7fe fe0f 	bl	80007e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7ff ffc1 	bl	8001b64 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0203 	bic.w	r2, r2, #3
 8001c06:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f043 0208 	orr.w	r2, r3, #8
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff ffa5 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	1c9a      	adds	r2, r3, #2
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10e      	bne.n	8001c8a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff63 	bl	8001b50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	1c9a      	adds	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10e      	bne.n	8001ce8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fd7e 	bl	80007e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d13a      	bne.n	8001d82 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d109      	bne.n	8001d2a <I2S_IRQHandler+0x3a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d102      	bne.n	8001d2a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ffb4 	bl	8001c92 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b40      	cmp	r3, #64	; 0x40
 8001d32:	d126      	bne.n	8001d82 <I2S_IRQHandler+0x92>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d11f      	bne.n	8001d82 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d50:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f043 0202 	orr.w	r2, r3, #2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fefb 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d136      	bne.n	8001dfc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d109      	bne.n	8001dac <I2S_IRQHandler+0xbc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d102      	bne.n	8001dac <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff45 	bl	8001c36 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d122      	bne.n	8001dfc <I2S_IRQHandler+0x10c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d11b      	bne.n	8001dfc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dd2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f043 0204 	orr.w	r2, r3, #4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff febe 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e30:	f7fe feb8 	bl	8000ba4 <HAL_GetTick>
 8001e34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e36:	e009      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e38:	f7fe feb4 	bl	8000ba4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e46:	d901      	bls.n	8001e4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e01f      	b.n	8001e8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e58:	d1ee      	bne.n	8001e38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e60:	f7fe fea0 	bl	8000ba4 <HAL_GetTick>
 8001e64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e66:	e009      	b.n	8001e7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e68:	f7fe fe9c 	bl	8000ba4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e76:	d901      	bls.n	8001e7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e007      	b.n	8001e8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e88:	d1ee      	bne.n	8001e68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	420e0040 	.word	0x420e0040
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	420e0044 	.word	0x420e0044

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0cc      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d90c      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b65      	ldr	r3, [pc, #404]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d044      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d119      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d003      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e06f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e067      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4934      	ldr	r1, [pc, #208]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fe06 	bl	8000ba4 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7fe fe02 	bl	8000ba4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e04f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d20c      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202a:	f000 fd93 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fd66 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00
 8002060:	40023800 	.word	0x40023800
 8002064:	080060e0 	.word	0x080060e0
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80020a8:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	496c      	ldr	r1, [pc, #432]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80020c6:	2301      	movs	r3, #1
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80020d6:	4b64      	ldr	r3, [pc, #400]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020dc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	4960      	ldr	r1, [pc, #384]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d017      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4955      	ldr	r1, [pc, #340]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002122:	d101      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002124:	2301      	movs	r3, #1
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002130:	2301      	movs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d017      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002140:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	4946      	ldr	r1, [pc, #280]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215e:	d101      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002160:	2301      	movs	r3, #1
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800216c:	2301      	movs	r3, #1
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 808a 	beq.w	8002292 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a38      	ldr	r2, [pc, #224]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a33      	ldr	r2, [pc, #204]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021a6:	f7fe fcfd 	bl	8000ba4 <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7fe fcf9 	bl	8000ba4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e278      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021c0:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02f      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d028      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ea:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d114      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fcc7 	bl	8000ba4 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe fcc3 	bl	8000ba4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e240      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002248:	d114      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800225a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225e:	4902      	ldr	r1, [pc, #8]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	e00c      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000
 8002270:	42470e40 	.word	0x42470e40
 8002274:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a49      	ldr	r2, [pc, #292]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800227a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800227e:	6093      	str	r3, [r2, #8]
 8002280:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	4944      	ldr	r1, [pc, #272]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800228e:	4313      	orrs	r3, r2
 8002290:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80022a6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	4937      	ldr	r1, [pc, #220]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022d6:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	492e      	ldr	r1, [pc, #184]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d011      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	4926      	ldr	r1, [pc, #152]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002316:	d101      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002318:	2301      	movs	r3, #1
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800232a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	491a      	ldr	r1, [pc, #104]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	2b00      	cmp	r3, #0
 8002348:	d011      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002350:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	4911      	ldr	r1, [pc, #68]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002368:	d101      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800236a:	2301      	movs	r3, #1
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	2b01      	cmp	r3, #1
 8002372:	d005      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237c:	f040 80ff 	bne.w	800257e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002386:	f7fe fc0d 	bl	8000ba4 <HAL_GetTick>
 800238a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800238c:	e00e      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800238e:	f7fe fc09 	bl	8000ba4 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d907      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e188      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	424711e0 	.word	0x424711e0
 80023a8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ac:	4b7e      	ldr	r3, [pc, #504]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ea      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d028      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d124      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023e0:	4b71      	ldr	r3, [pc, #452]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	3301      	adds	r3, #1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f8:	0e1b      	lsrs	r3, r3, #24
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	431a      	orrs	r2, r3
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	3b01      	subs	r3, #1
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	431a      	orrs	r2, r3
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	071b      	lsls	r3, r3, #28
 8002422:	4961      	ldr	r1, [pc, #388]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002448:	2b00      	cmp	r3, #0
 800244a:	d035      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002454:	d130      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002456:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800246a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800246e:	0f1b      	lsrs	r3, r3, #28
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	019b      	lsls	r3, r3, #6
 8002480:	431a      	orrs	r2, r3
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	3b01      	subs	r3, #1
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	431a      	orrs	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	071b      	lsls	r3, r3, #28
 8002498:	4943      	ldr	r1, [pc, #268]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024a0:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a6:	f023 021f 	bic.w	r2, r3, #31
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	493d      	ldr	r1, [pc, #244]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d029      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024cc:	d124      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	3301      	adds	r3, #1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e6:	0f1b      	lsrs	r3, r3, #28
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	019b      	lsls	r3, r3, #6
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	431a      	orrs	r2, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	431a      	orrs	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	071b      	lsls	r3, r3, #28
 8002510:	4925      	ldr	r1, [pc, #148]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	4917      	ldr	r1, [pc, #92]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002558:	f7fe fb24 	bl	8000ba4 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002560:	f7fe fb20 	bl	8000ba4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e09f      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	2b01      	cmp	r3, #1
 8002582:	f040 8095 	bne.w	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe fb0a 	bl	8000ba4 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002592:	e00f      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002594:	f7fe fb06 	bl	8000ba4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d908      	bls.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e085      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470068 	.word	0x42470068
 80025b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c0:	d0e8      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d02b      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d127      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	3301      	adds	r3, #1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	431a      	orrs	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	3b01      	subs	r3, #1
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	4928      	ldr	r1, [pc, #160]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002620:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002626:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	3b01      	subs	r3, #1
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01d      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264e:	d118      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	0e1b      	lsrs	r3, r3, #24
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	019b      	lsls	r3, r3, #6
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	3b01      	subs	r3, #1
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	4910      	ldr	r1, [pc, #64]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002688:	f7fe fa8c 	bl	8000ba4 <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002690:	f7fe fa88 	bl	8000ba4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e007      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ae:	d1ef      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3730      	adds	r7, #48	; 0x30
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	42470070 	.word	0x42470070

080026c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	2b07      	cmp	r3, #7
 80026ea:	f200 8224 	bhi.w	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	080028f7 	.word	0x080028f7
 80026f8:	08002a21 	.word	0x08002a21
 80026fc:	08002b37 	.word	0x08002b37
 8002700:	08002715 	.word	0x08002715
 8002704:	08002b37 	.word	0x08002b37
 8002708:	08002b37 	.word	0x08002b37
 800270c:	08002b37 	.word	0x08002b37
 8002710:	08002715 	.word	0x08002715
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8002714:	4ba8      	ldr	r3, [pc, #672]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800271a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800272a:	f000 80d6 	beq.w	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002734:	f200 80dd 	bhi.w	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800273e:	f000 809f 	beq.w	8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002748:	f200 80d3 	bhi.w	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002752:	d05b      	beq.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	f200 80ca 	bhi.w	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002764:	f000 80b6 	beq.w	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800276e:	f200 80c0 	bhi.w	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002778:	f000 8082 	beq.w	8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002782:	f200 80b6 	bhi.w	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002792:	d03b      	beq.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002794:	e0ad      	b.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002796:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80027a2:	4b85      	ldr	r3, [pc, #532]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ac:	4a83      	ldr	r2, [pc, #524]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e008      	b.n	80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80027b6:	4b80      	ldr	r3, [pc, #512]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c0:	4a7f      	ldr	r2, [pc, #508]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80027c8:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	0e1b      	lsrs	r3, r3, #24
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80027d6:	4b78      	ldr	r3, [pc, #480]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	fb03 f202 	mul.w	r2, r3, r2
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80027f0:	4b71      	ldr	r3, [pc, #452]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80027f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	61fb      	str	r3, [r7, #28]
          break;
 800280a:	e073      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002818:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800281a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002822:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e008      	b.n	800283e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002836:	4a62      	ldr	r2, [pc, #392]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800283e:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800284c:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	fb03 f202 	mul.w	r2, r3, r2
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002866:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	61fb      	str	r3, [r7, #28]
          break;
 800287e:	e039      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002880:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800288c:	4b4a      	ldr	r3, [pc, #296]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002894:	4a49      	ldr	r2, [pc, #292]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e007      	b.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a6:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80028ae:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	0f1b      	lsrs	r3, r3, #28
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	fb03 f202 	mul.w	r2, r3, r2
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	61fb      	str	r3, [r7, #28]
          break;
 80028d2:	e00f      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80028d6:	61fb      	str	r3, [r7, #28]
          break;
 80028d8:	e00c      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80028e8:	61fb      	str	r3, [r7, #28]
          break;
 80028ea:	e003      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80028ee:	61fb      	str	r3, [r7, #28]
          break;
 80028f0:	e000      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80028f2:	bf00      	nop
        }
      }
      break;
 80028f4:	e11f      	b.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80028f6:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80028f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028fc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002908:	d079      	beq.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002910:	f200 8082 	bhi.w	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800291a:	d03c      	beq.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002922:	d879      	bhi.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002930:	d172      	bne.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002934:	61fb      	str	r3, [r7, #28]
          break;
 8002936:	e072      	b.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002944:	d109      	bne.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	e008      	b.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800295c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	099b      	lsrs	r3, r3, #6
 8002974:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	0f1b      	lsrs	r3, r3, #28
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	61fb      	str	r3, [r7, #28]
          break;
 8002994:	e043      	b.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a2:	d111      	bne.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e010      	b.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	007a1200 	.word	0x007a1200
 80029c4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029c8:	4b5e      	ldr	r3, [pc, #376]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d0:	4a5d      	ldr	r2, [pc, #372]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80029d8:	4b5a      	ldr	r3, [pc, #360]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80029ea:	4b56      	ldr	r3, [pc, #344]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0f1b      	lsrs	r3, r3, #28
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	61fb      	str	r3, [r7, #28]
          break;
 80029fc:	e00f      	b.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029fe:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0a:	d102      	bne.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002a0e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002a10:	e005      	b.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8002a12:	4b4d      	ldr	r3, [pc, #308]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002a14:	61fb      	str	r3, [r7, #28]
          break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
          break;
 8002a1c:	bf00      	nop
        }
      }
      break;
 8002a1e:	e08a      	b.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002a20:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a26:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a32:	d06f      	beq.n	8002b14 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a3a:	d878      	bhi.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a42:	d03c      	beq.n	8002abe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a4a:	d870      	bhi.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a58:	d169      	bne.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002a5c:	61fb      	str	r3, [r7, #28]
          break;
 8002a5e:	e069      	b.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002a6e:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	4a34      	ldr	r2, [pc, #208]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e008      	b.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002a82:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002a94:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002aa8:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	0f1b      	lsrs	r3, r3, #28
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	61fb      	str	r3, [r7, #28]
          break;
 8002abc:	e03a      	b.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aca:	d108      	bne.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	e007      	b.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	0f1b      	lsrs	r3, r3, #28
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	61fb      	str	r3, [r7, #28]
          break;
 8002b12:	e00f      	b.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b20:	d102      	bne.n	8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002b24:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002b26:	e005      	b.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002b2a:	61fb      	str	r3, [r7, #28]
          break;
 8002b2c:	e002      	b.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
          break;
 8002b32:	bf00      	nop
        }
      }
      break;
 8002b34:	bf00      	nop
    }
  }
  return frequency;
 8002b36:	69fb      	ldr	r3, [r7, #28]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3724      	adds	r7, #36	; 0x24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	00bb8000 	.word	0x00bb8000

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b0ae      	sub	sp, #184	; 0xb8
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7a:	4bcb      	ldr	r3, [pc, #812]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	f200 8206 	bhi.w	8002f94 <HAL_RCC_GetSysClockFreq+0x440>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bc5 	.word	0x08002bc5
 8002b94:	08002f95 	.word	0x08002f95
 8002b98:	08002f95 	.word	0x08002f95
 8002b9c:	08002f95 	.word	0x08002f95
 8002ba0:	08002bcd 	.word	0x08002bcd
 8002ba4:	08002f95 	.word	0x08002f95
 8002ba8:	08002f95 	.word	0x08002f95
 8002bac:	08002f95 	.word	0x08002f95
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002f95 	.word	0x08002f95
 8002bb8:	08002f95 	.word	0x08002f95
 8002bbc:	08002f95 	.word	0x08002f95
 8002bc0:	08002dc5 	.word	0x08002dc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4bb9      	ldr	r3, [pc, #740]	; (8002eac <HAL_RCC_GetSysClockFreq+0x358>)
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002bca:	e1e7      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bcc:	4bb8      	ldr	r3, [pc, #736]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bd2:	e1e3      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd4:	4bb4      	ldr	r3, [pc, #720]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be0:	4bb1      	ldr	r3, [pc, #708]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d071      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bec:	4bae      	ldr	r3, [pc, #696]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c12:	4622      	mov	r2, r4
 8002c14:	462b      	mov	r3, r5
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	0159      	lsls	r1, r3, #5
 8002c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c24:	0150      	lsls	r0, r2, #5
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	1a51      	subs	r1, r2, r1
 8002c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8002c30:	4629      	mov	r1, r5
 8002c32:	eb63 0301 	sbc.w	r3, r3, r1
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002c44:	4649      	mov	r1, r9
 8002c46:	018b      	lsls	r3, r1, #6
 8002c48:	4641      	mov	r1, r8
 8002c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4e:	4641      	mov	r1, r8
 8002c50:	018a      	lsls	r2, r1, #6
 8002c52:	4641      	mov	r1, r8
 8002c54:	1a51      	subs	r1, r2, r1
 8002c56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c58:	4649      	mov	r1, r9
 8002c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	00cb      	lsls	r3, r1, #3
 8002c70:	4641      	mov	r1, r8
 8002c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c76:	4641      	mov	r1, r8
 8002c78:	00ca      	lsls	r2, r1, #3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4622      	mov	r2, r4
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 8002c86:	462b      	mov	r3, r5
 8002c88:	460a      	mov	r2, r1
 8002c8a:	eb42 0303 	adc.w	r3, r2, r3
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	024b      	lsls	r3, r1, #9
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	024a      	lsls	r2, r1, #9
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002cc0:	f7fd faa6 	bl	8000210 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cce:	e067      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd0:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cdc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cea:	2300      	movs	r3, #0
 8002cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d04:	0150      	lsls	r0, r2, #5
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	1a51      	subs	r1, r2, r1
 8002d0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d10:	4629      	mov	r1, r5
 8002d12:	eb63 0301 	sbc.w	r3, r3, r1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002d24:	4649      	mov	r1, r9
 8002d26:	018b      	lsls	r3, r1, #6
 8002d28:	4641      	mov	r1, r8
 8002d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2e:	4641      	mov	r1, r8
 8002d30:	018a      	lsls	r2, r1, #6
 8002d32:	4641      	mov	r1, r8
 8002d34:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d38:	4649      	mov	r1, r9
 8002d3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d52:	4692      	mov	sl, r2
 8002d54:	469b      	mov	fp, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	eb1a 0303 	adds.w	r3, sl, r3
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	eb4b 0303 	adc.w	r3, fp, r3
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d72:	4629      	mov	r1, r5
 8002d74:	028b      	lsls	r3, r1, #10
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	028a      	lsls	r2, r1, #10
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d88:	2200      	movs	r2, #0
 8002d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d8c:	677a      	str	r2, [r7, #116]	; 0x74
 8002d8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d92:	f7fd fa3d 	bl	8000210 <__aeabi_uldivmod>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	3301      	adds	r3, #1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dc2:	e0eb      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d06b      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dee:	663b      	str	r3, [r7, #96]	; 0x60
 8002df0:	2300      	movs	r3, #0
 8002df2:	667b      	str	r3, [r7, #100]	; 0x64
 8002df4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002df8:	4622      	mov	r2, r4
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	f04f 0000 	mov.w	r0, #0
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	0159      	lsls	r1, r3, #5
 8002e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0a:	0150      	lsls	r0, r2, #5
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4621      	mov	r1, r4
 8002e12:	1a51      	subs	r1, r2, r1
 8002e14:	61b9      	str	r1, [r7, #24]
 8002e16:	4629      	mov	r1, r5
 8002e18:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e2a:	4659      	mov	r1, fp
 8002e2c:	018b      	lsls	r3, r1, #6
 8002e2e:	4651      	mov	r1, sl
 8002e30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e34:	4651      	mov	r1, sl
 8002e36:	018a      	lsls	r2, r1, #6
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ebb2 0801 	subs.w	r8, r2, r1
 8002e3e:	4659      	mov	r1, fp
 8002e40:	eb63 0901 	sbc.w	r9, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e58:	4690      	mov	r8, r2
 8002e5a:	4699      	mov	r9, r3
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	eb18 0303 	adds.w	r3, r8, r3
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	462b      	mov	r3, r5
 8002e66:	eb49 0303 	adc.w	r3, r9, r3
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e78:	4629      	mov	r1, r5
 8002e7a:	024b      	lsls	r3, r1, #9
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e82:	4621      	mov	r1, r4
 8002e84:	024a      	lsls	r2, r1, #9
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e8e:	2200      	movs	r2, #0
 8002e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e98:	f7fd f9ba 	bl	8000210 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea6:	e065      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x420>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_RCC_GetSysClockFreq+0x458>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8002eca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ece:	4642      	mov	r2, r8
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	0159      	lsls	r1, r3, #5
 8002edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee0:	0150      	lsls	r0, r2, #5
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	1a51      	subs	r1, r2, r1
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	4649      	mov	r1, r9
 8002eee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f00:	4659      	mov	r1, fp
 8002f02:	018b      	lsls	r3, r1, #6
 8002f04:	4651      	mov	r1, sl
 8002f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	018a      	lsls	r2, r1, #6
 8002f0e:	4651      	mov	r1, sl
 8002f10:	1a54      	subs	r4, r2, r1
 8002f12:	4659      	mov	r1, fp
 8002f14:	eb63 0501 	sbc.w	r5, r3, r1
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	00eb      	lsls	r3, r5, #3
 8002f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	4614      	mov	r4, r2
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	18e3      	adds	r3, r4, r3
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	464b      	mov	r3, r9
 8002f34:	eb45 0303 	adc.w	r3, r5, r3
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f66:	f7fd f953 	bl	8000210 <__aeabi_uldivmod>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4613      	mov	r3, r2
 8002f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCC_GetSysClockFreq+0x458>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0f1b      	lsrs	r3, r3, #28
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f92:	e003      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	37b8      	adds	r7, #184	; 0xb8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	00f42400 	.word	0x00f42400

08002fb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e28d      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8083 	beq.w	80030da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fd4:	4b94      	ldr	r3, [pc, #592]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d019      	beq.n	8003014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fe0:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fec:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff8:	d00c      	beq.n	8003014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d112      	bne.n	800302c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003012:	d10b      	bne.n	800302c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	4b84      	ldr	r3, [pc, #528]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d05b      	beq.n	80030d8 <HAL_RCC_OscConfig+0x124>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d157      	bne.n	80030d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e25a      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x90>
 8003036:	4b7c      	ldr	r3, [pc, #496]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7b      	ldr	r2, [pc, #492]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e01d      	b.n	8003080 <HAL_RCC_OscConfig+0xcc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0xb4>
 800304e:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a75      	ldr	r2, [pc, #468]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b73      	ldr	r3, [pc, #460]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a72      	ldr	r2, [pc, #456]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xcc>
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6b      	ldr	r2, [pc, #428]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd fd8c 	bl	8000ba4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7fd fd88 	bl	8000ba4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e21f      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b61      	ldr	r3, [pc, #388]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0xdc>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd fd78 	bl	8000ba4 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fd fd74 	bl	8000ba4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e20b      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	4b57      	ldr	r3, [pc, #348]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x104>
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d06f      	beq.n	80031c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030e6:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030f2:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030fe:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x186>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1d3      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4937      	ldr	r1, [pc, #220]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b34      	ldr	r3, [pc, #208]	; (800322c <HAL_RCC_OscConfig+0x278>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fd fd21 	bl	8000ba4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003166:	f7fd fd1d 	bl	8000ba4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1b4      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b28      	ldr	r3, [pc, #160]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4925      	ldr	r1, [pc, #148]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_OscConfig+0x278>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd fd00 	bl	8000ba4 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fd fcfc 	bl	8000ba4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e193      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d036      	beq.n	8003240 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fd fce0 	bl	8000ba4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fd fcdc 	bl	8000ba4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e173      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x234>
 8003206:	e01b      	b.n	8003240 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_OscConfig+0x27c>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fd fcc9 	bl	8000ba4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	e00e      	b.n	8003234 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003216:	f7fd fcc5 	bl	8000ba4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d907      	bls.n	8003234 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e15c      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
 8003228:	40023800 	.word	0x40023800
 800322c:	42470000 	.word	0x42470000
 8003230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b8a      	ldr	r3, [pc, #552]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ea      	bne.n	8003216 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8097 	beq.w	800337c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b83      	ldr	r3, [pc, #524]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a7e      	ldr	r2, [pc, #504]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b7c      	ldr	r3, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b79      	ldr	r3, [pc, #484]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a75      	ldr	r2, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fd fc85 	bl	8000ba4 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fd fc81 	bl	8000ba4 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e118      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x31e>
 80032c4:	4b66      	ldr	r3, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a65      	ldr	r2, [pc, #404]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	e01c      	b.n	800330c <HAL_RCC_OscConfig+0x358>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x340>
 80032da:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a60      	ldr	r2, [pc, #384]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
 80032e6:	4b5e      	ldr	r3, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0x358>
 80032f4:	4b5a      	ldr	r3, [pc, #360]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	4a59      	ldr	r2, [pc, #356]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003300:	4b57      	ldr	r3, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	4a56      	ldr	r2, [pc, #344]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003306:	f023 0304 	bic.w	r3, r3, #4
 800330a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fd fc46 	bl	8000ba4 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fd fc42 	bl	8000ba4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0d7      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0ee      	beq.n	800331c <HAL_RCC_OscConfig+0x368>
 800333e:	e014      	b.n	800336a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fd fc30 	bl	8000ba4 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003346:	e00a      	b.n	800335e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f7fd fc2c 	bl	8000ba4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0c1      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335e:	4b40      	ldr	r3, [pc, #256]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ee      	bne.n	8003348 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80ad 	beq.w	80034e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b08      	cmp	r3, #8
 8003390:	d060      	beq.n	8003454 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d145      	bne.n	8003426 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_RCC_OscConfig+0x4b4>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd fc00 	bl	8000ba4 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd fbfc 	bl	8000ba4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e093      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	071b      	lsls	r3, r3, #28
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x4b4>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd fbd1 	bl	8000ba4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd fbcd 	bl	8000ba4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e064      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x452>
 8003424:	e05c      	b.n	80034e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x4b4>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fd fbba 	bl	8000ba4 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fbb6 	bl	8000ba4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e04d      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x480>
 8003452:	e045      	b.n	80034e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e040      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
 8003468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346c:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <HAL_RCC_OscConfig+0x538>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d030      	beq.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d129      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d122      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d119      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	3b01      	subs	r3, #1
 80034b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d10f      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800

080034f0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <__NVIC_SetPriority>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db0a      	blt.n	800352a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	490c      	ldr	r1, [pc, #48]	; (800354c <__NVIC_SetPriority+0x4c>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	440b      	add	r3, r1
 8003524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003528:	e00a      	b.n	8003540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4908      	ldr	r1, [pc, #32]	; (8003550 <__NVIC_SetPriority+0x50>)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3b04      	subs	r3, #4
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	440b      	add	r3, r1
 800353e:	761a      	strb	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003558:	2100      	movs	r1, #0
 800355a:	f06f 0004 	mvn.w	r0, #4
 800355e:	f7ff ffcf 	bl	8003500 <__NVIC_SetPriority>
#endif
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800356e:	f3ef 8305 	mrs	r3, IPSR
 8003572:	603b      	str	r3, [r7, #0]
  return(result);
 8003574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800357a:	f06f 0305 	mvn.w	r3, #5
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	e00c      	b.n	800359c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <osKernelInitialize+0x44>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <osKernelInitialize+0x44>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003590:	2300      	movs	r3, #0
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	e002      	b.n	800359c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800359c:	687b      	ldr	r3, [r7, #4]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	200001a8 	.word	0x200001a8

080035b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035b6:	f3ef 8305 	mrs	r3, IPSR
 80035ba:	603b      	str	r3, [r7, #0]
  return(result);
 80035bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80035c2:	f06f 0305 	mvn.w	r3, #5
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	e010      	b.n	80035ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <osKernelStart+0x48>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d109      	bne.n	80035e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035d2:	f7ff ffbf 	bl	8003554 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <osKernelStart+0x48>)
 80035d8:	2202      	movs	r2, #2
 80035da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035dc:	f001 f866 	bl	80046ac <vTaskStartScheduler>
      stat = osOK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	e002      	b.n	80035ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035ec:	687b      	ldr	r3, [r7, #4]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200001a8 	.word	0x200001a8

080035fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	; 0x38
 8003600:	af04      	add	r7, sp, #16
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800360c:	f3ef 8305 	mrs	r3, IPSR
 8003610:	617b      	str	r3, [r7, #20]
  return(result);
 8003612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003614:	2b00      	cmp	r3, #0
 8003616:	d17e      	bne.n	8003716 <osThreadNew+0x11a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d07b      	beq.n	8003716 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003622:	2318      	movs	r3, #24
 8003624:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d045      	beq.n	80036c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <osThreadNew+0x48>
        name = attr->name;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <osThreadNew+0x6e>
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b38      	cmp	r3, #56	; 0x38
 800365c:	d805      	bhi.n	800366a <osThreadNew+0x6e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <osThreadNew+0x72>
        return (NULL);
 800366a:	2300      	movs	r3, #0
 800366c:	e054      	b.n	8003718 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00e      	beq.n	80036a4 <osThreadNew+0xa8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b5b      	cmp	r3, #91	; 0x5b
 800368c:	d90a      	bls.n	80036a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <osThreadNew+0xa8>
        mem = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e010      	b.n	80036c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10c      	bne.n	80036c6 <osThreadNew+0xca>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d108      	bne.n	80036c6 <osThreadNew+0xca>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <osThreadNew+0xca>
          mem = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e001      	b.n	80036c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d110      	bne.n	80036ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036d4:	9202      	str	r2, [sp, #8]
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6a3a      	ldr	r2, [r7, #32]
 80036e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fe0c 	bl	8004300 <xTaskCreateStatic>
 80036e8:	4603      	mov	r3, r0
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	e013      	b.n	8003716 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d110      	bne.n	8003716 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fe57 	bl	80043ba <xTaskCreate>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d001      	beq.n	8003716 <osThreadNew+0x11a>
            hTask = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003716:	693b      	ldr	r3, [r7, #16]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003728:	f3ef 8305 	mrs	r3, IPSR
 800372c:	60bb      	str	r3, [r7, #8]
  return(result);
 800372e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <osDelay+0x1c>
    stat = osErrorISR;
 8003734:	f06f 0305 	mvn.w	r3, #5
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	e007      	b.n	800374c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 ff7c 	bl	8004644 <vTaskDelay>
    }
  }

  return (stat);
 800374c:	68fb      	ldr	r3, [r7, #12]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a07      	ldr	r2, [pc, #28]	; (8003784 <vApplicationGetIdleTaskMemory+0x2c>)
 8003768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a06      	ldr	r2, [pc, #24]	; (8003788 <vApplicationGetIdleTaskMemory+0x30>)
 800376e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	200001ac 	.word	0x200001ac
 8003788:	20000208 	.word	0x20000208

0800378c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800379c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a06      	ldr	r2, [pc, #24]	; (80037bc <vApplicationGetTimerTaskMemory+0x30>)
 80037a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037aa:	601a      	str	r2, [r3, #0]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	20000408 	.word	0x20000408
 80037bc:	20000464 	.word	0x20000464

080037c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 0208 	add.w	r2, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f103 0208 	add.w	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0208 	add.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d103      	bne.n	8003882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e00c      	b.n	800389c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3308      	adds	r3, #8
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e002      	b.n	8003890 <vListInsert+0x2e>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d2f6      	bcs.n	800388a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6852      	ldr	r2, [r2, #4]
 80038f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d103      	bne.n	8003908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1e5a      	subs	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003952:	f002 f84f 	bl	80059f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	3b01      	subs	r3, #1
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	22ff      	movs	r2, #255	; 0xff
 800399e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d114      	bne.n	80039d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01a      	beq.n	80039e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3310      	adds	r3, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f903 	bl	8004bc0 <xTaskRemoveFromEventList>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <xQueueGenericReset+0xcc>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	e009      	b.n	80039e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3310      	adds	r3, #16
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fef2 	bl	80037c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff feed 	bl	80037c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039e6:	f002 f835 	bl	8005a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <xQueueGenericCreateStatic+0x52>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <xQueueGenericCreateStatic+0x56>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericCreateStatic+0x58>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <xQueueGenericCreateStatic+0x7e>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <xQueueGenericCreateStatic+0x82>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <xQueueGenericCreateStatic+0x84>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	61fb      	str	r3, [r7, #28]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a96:	2350      	movs	r3, #80	; 0x50
 8003a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b50      	cmp	r3, #80	; 0x50
 8003a9e:	d00a      	beq.n	8003ab6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	61bb      	str	r3, [r7, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f805 	bl	8003ae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3730      	adds	r7, #48	; 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e002      	b.n	8003b0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b16:	2101      	movs	r1, #1
 8003b18:	69b8      	ldr	r0, [r7, #24]
 8003b1a:	f7ff ff05 	bl	8003928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08e      	sub	sp, #56	; 0x38
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <xQueueGenericSend+0x32>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <xQueueGenericSend+0x40>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <xQueueGenericSend+0x44>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <xQueueGenericSend+0x46>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <xQueueGenericSend+0x60>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d103      	bne.n	8003b9e <xQueueGenericSend+0x6e>
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <xQueueGenericSend+0x72>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <xQueueGenericSend+0x74>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <xQueueGenericSend+0x8e>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	623b      	str	r3, [r7, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bbe:	f001 f9bd 	bl	8004f3c <xTaskGetSchedulerState>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <xQueueGenericSend+0x9e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <xQueueGenericSend+0xa2>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <xQueueGenericSend+0xa4>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xQueueGenericSend+0xbe>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	61fb      	str	r3, [r7, #28]
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bee:	f001 ff01 	bl	80059f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <xQueueGenericSend+0xd4>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d129      	bne.n	8003c58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c0a:	f000 fa0b 	bl	8004024 <prvCopyDataToQueue>
 8003c0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	3324      	adds	r3, #36	; 0x24
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 ffcf 	bl	8004bc0 <xTaskRemoveFromEventList>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c28:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <xQueueGenericSend+0x1f8>)
 8003c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	e00a      	b.n	8003c50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c40:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <xQueueGenericSend+0x1f8>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c50:	f001 ff00 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e063      	b.n	8003d20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c5e:	f001 fef9 	bl	8005a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e05c      	b.n	8003d20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 f809 	bl	8004c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c76:	2301      	movs	r3, #1
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c7a:	f001 feeb 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c7e:	f000 fd7b 	bl	8004778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c82:	f001 feb7 	bl	80059f4 <vPortEnterCritical>
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d103      	bne.n	8003c9c <xQueueGenericSend+0x16c>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca2:	b25b      	sxtb	r3, r3
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d103      	bne.n	8003cb2 <xQueueGenericSend+0x182>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb2:	f001 fecf 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cb6:	1d3a      	adds	r2, r7, #4
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fff8 	bl	8004cb4 <xTaskCheckForTimeOut>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d124      	bne.n	8003d14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ccc:	f000 faa2 	bl	8004214 <prvIsQueueFull>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	3310      	adds	r3, #16
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 ff1e 	bl	8004b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce6:	f000 fa2d 	bl	8004144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cea:	f000 fd53 	bl	8004794 <xTaskResumeAll>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f af7c 	bne.w	8003bee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <xQueueGenericSend+0x1f8>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	e772      	b.n	8003bee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d0a:	f000 fa1b 	bl	8004144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d0e:	f000 fd41 	bl	8004794 <xTaskResumeAll>
 8003d12:	e76c      	b.n	8003bee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d16:	f000 fa15 	bl	8004144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d1a:	f000 fd3b 	bl	8004794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3738      	adds	r7, #56	; 0x38
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b090      	sub	sp, #64	; 0x40
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <xQueueGenericSendFromISR+0x3c>
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <xQueueGenericSendFromISR+0x40>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <xQueueGenericSendFromISR+0x42>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d103      	bne.n	8003d96 <xQueueGenericSendFromISR+0x6a>
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <xQueueGenericSendFromISR+0x6e>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <xQueueGenericSendFromISR+0x70>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	623b      	str	r3, [r7, #32]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003db6:	f001 feff 	bl	8005bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003dba:	f3ef 8211 	mrs	r2, BASEPRI
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	61fa      	str	r2, [r7, #28]
 8003dd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <xQueueGenericSendFromISR+0xbc>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d12f      	bne.n	8003e48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dfe:	f000 f911 	bl	8004024 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d112      	bne.n	8003e32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fed1 	bl	8004bc0 <xTaskRemoveFromEventList>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e007      	b.n	8003e42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e36:	3301      	adds	r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	b25a      	sxtb	r2, r3
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e42:	2301      	movs	r3, #1
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003e46:	e001      	b.n	8003e4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3740      	adds	r7, #64	; 0x40
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	; 0x30
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <xQueueReceive+0x30>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	623b      	str	r3, [r7, #32]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <xQueueReceive+0x3e>
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <xQueueReceive+0x42>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <xQueueReceive+0x44>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xQueueReceive+0x5e>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	61fb      	str	r3, [r7, #28]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec2:	f001 f83b 	bl	8004f3c <xTaskGetSchedulerState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <xQueueReceive+0x6e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueReceive+0x72>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueReceive+0x74>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xQueueReceive+0x8e>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61bb      	str	r3, [r7, #24]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ef2:	f001 fd7f 	bl	80059f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01f      	beq.n	8003f42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f06:	f000 f8f7 	bl	80040f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	3310      	adds	r3, #16
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fe4e 	bl	8004bc0 <xTaskRemoveFromEventList>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <xQueueReceive+0x1bc>)
 8003f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f3a:	f001 fd8b 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e069      	b.n	8004016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f48:	f001 fd84 	bl	8005a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e062      	b.n	8004016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f56:	f107 0310 	add.w	r3, r7, #16
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fe94 	bl	8004c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f64:	f001 fd76 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f68:	f000 fc06 	bl	8004778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f6c:	f001 fd42 	bl	80059f4 <vPortEnterCritical>
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d103      	bne.n	8003f86 <xQueueReceive+0x122>
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d103      	bne.n	8003f9c <xQueueReceive+0x138>
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f9c:	f001 fd5a 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fa0:	1d3a      	adds	r2, r7, #4
 8003fa2:	f107 0310 	add.w	r3, r7, #16
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fe83 	bl	8004cb4 <xTaskCheckForTimeOut>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d123      	bne.n	8003ffc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb6:	f000 f917 	bl	80041e8 <prvIsQueueEmpty>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fda9 	bl	8004b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fd0:	f000 f8b8 	bl	8004144 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fd4:	f000 fbde 	bl	8004794 <xTaskResumeAll>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d189      	bne.n	8003ef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <xQueueReceive+0x1bc>)
 8003fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	e780      	b.n	8003ef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff2:	f000 f8a7 	bl	8004144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ff6:	f000 fbcd 	bl	8004794 <xTaskResumeAll>
 8003ffa:	e77a      	b.n	8003ef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffe:	f000 f8a1 	bl	8004144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004002:	f000 fbc7 	bl	8004794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004008:	f000 f8ee 	bl	80041e8 <prvIsQueueEmpty>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f43f af6f 	beq.w	8003ef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004016:	4618      	mov	r0, r3
 8004018:	3730      	adds	r7, #48	; 0x30
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d14d      	bne.n	80040e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 ff92 	bl	8004f78 <xTaskPriorityDisinherit>
 8004054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	e043      	b.n	80040e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d119      	bne.n	8004098 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6858      	ldr	r0, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	461a      	mov	r2, r3
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	f001 fff0 	bl	8006054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	441a      	add	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d32b      	bcc.n	80040e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	e026      	b.n	80040e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68d8      	ldr	r0, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	461a      	mov	r2, r3
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	f001 ffd6 	bl	8006054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	425b      	negs	r3, r3
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d207      	bcs.n	80040d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	425b      	negs	r3, r3
 80040ce:	441a      	add	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d105      	bne.n	80040e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040ee:	697b      	ldr	r3, [r7, #20]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d018      	beq.n	800413c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	441a      	add	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d303      	bcc.n	800412c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68d9      	ldr	r1, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	461a      	mov	r2, r3
 8004136:	6838      	ldr	r0, [r7, #0]
 8004138:	f001 ff8c 	bl	8006054 <memcpy>
	}
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800414c:	f001 fc52 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004158:	e011      	b.n	800417e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d012      	beq.n	8004188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3324      	adds	r3, #36	; 0x24
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fd2a 	bl	8004bc0 <xTaskRemoveFromEventList>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004172:	f000 fe01 	bl	8004d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	3b01      	subs	r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800417e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004182:	2b00      	cmp	r3, #0
 8004184:	dce9      	bgt.n	800415a <prvUnlockQueue+0x16>
 8004186:	e000      	b.n	800418a <prvUnlockQueue+0x46>
					break;
 8004188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	22ff      	movs	r2, #255	; 0xff
 800418e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004192:	f001 fc5f 	bl	8005a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004196:	f001 fc2d 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041a2:	e011      	b.n	80041c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3310      	adds	r3, #16
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fd05 	bl	8004bc0 <xTaskRemoveFromEventList>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041bc:	f000 fddc 	bl	8004d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041c0:	7bbb      	ldrb	r3, [r7, #14]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	dce9      	bgt.n	80041a4 <prvUnlockQueue+0x60>
 80041d0:	e000      	b.n	80041d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	22ff      	movs	r2, #255	; 0xff
 80041d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041dc:	f001 fc3a 	bl	8005a54 <vPortExitCritical>
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041f0:	f001 fc00 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e001      	b.n	8004206 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004206:	f001 fc25 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800421c:	f001 fbea 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	429a      	cmp	r2, r3
 800422a:	d102      	bne.n	8004232 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e001      	b.n	8004236 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004236:	f001 fc0d 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 800423a:	68fb      	ldr	r3, [r7, #12]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e014      	b.n	800427e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <vQueueAddToRegistry+0x50>)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10b      	bne.n	8004278 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004260:	490c      	ldr	r1, [pc, #48]	; (8004294 <vQueueAddToRegistry+0x50>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <vQueueAddToRegistry+0x50>)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004276:	e006      	b.n	8004286 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b07      	cmp	r3, #7
 8004282:	d9e7      	bls.n	8004254 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000864 	.word	0x20000864

08004298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042a8:	f001 fba4 	bl	80059f4 <vPortEnterCritical>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d103      	bne.n	80042c2 <vQueueWaitForMessageRestricted+0x2a>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d103      	bne.n	80042d8 <vQueueWaitForMessageRestricted+0x40>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d8:	f001 fbbc 	bl	8005a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3324      	adds	r3, #36	; 0x24
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fc3b 	bl	8004b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f7ff ff26 	bl	8004144 <prvUnlockQueue>
	}
 80042f8:	bf00      	nop
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	; 0x38
 8004304:	af04      	add	r7, sp, #16
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	623b      	str	r3, [r7, #32]
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <xTaskCreateStatic+0x46>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	61fb      	str	r3, [r7, #28]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004346:	235c      	movs	r3, #92	; 0x5c
 8004348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b5c      	cmp	r3, #92	; 0x5c
 800434e:	d00a      	beq.n	8004366 <xTaskCreateStatic+0x66>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	61bb      	str	r3, [r7, #24]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004366:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01e      	beq.n	80043ac <xTaskCreateStatic+0xac>
 800436e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	2202      	movs	r2, #2
 8004382:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004386:	2300      	movs	r3, #0
 8004388:	9303      	str	r3, [sp, #12]
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	9302      	str	r3, [sp, #8]
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f850 	bl	8004444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043a6:	f000 f8dd 	bl	8004564 <prvAddNewTaskToReadyList>
 80043aa:	e001      	b.n	80043b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043b0:	697b      	ldr	r3, [r7, #20]
	}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3728      	adds	r7, #40	; 0x28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08c      	sub	sp, #48	; 0x30
 80043be:	af04      	add	r7, sp, #16
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fc32 	bl	8005c38 <pvPortMalloc>
 80043d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043dc:	205c      	movs	r0, #92	; 0x5c
 80043de:	f001 fc2b 	bl	8005c38 <pvPortMalloc>
 80043e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
 80043f0:	e005      	b.n	80043fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f001 fcec 	bl	8005dd0 <vPortFree>
 80043f8:	e001      	b.n	80043fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	2300      	movs	r3, #0
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	9302      	str	r3, [sp, #8]
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f80e 	bl	8004444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004428:	69f8      	ldr	r0, [r7, #28]
 800442a:	f000 f89b 	bl	8004564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800442e:	2301      	movs	r3, #1
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e002      	b.n	800443a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800443a:	69bb      	ldr	r3, [r7, #24]
	}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	461a      	mov	r2, r3
 800445c:	21a5      	movs	r1, #165	; 0xa5
 800445e:	f001 fe07 	bl	8006070 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800446c:	3b01      	subs	r3, #1
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	617b      	str	r3, [r7, #20]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01f      	beq.n	80044e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e012      	b.n	80044ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	7819      	ldrb	r1, [r3, #0]
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	3334      	adds	r3, #52	; 0x34
 80044b8:	460a      	mov	r2, r1
 80044ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d9e9      	bls.n	80044a8 <prvInitialiseNewTask+0x64>
 80044d4:	e000      	b.n	80044d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80044d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e0:	e003      	b.n	80044ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	2b37      	cmp	r3, #55	; 0x37
 80044ee:	d901      	bls.n	80044f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044f0:	2337      	movs	r3, #55	; 0x37
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f978 	bl	8003800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	3318      	adds	r3, #24
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff f973 	bl	8003800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	69b8      	ldr	r0, [r7, #24]
 8004544:	f001 f928 	bl	8005798 <pxPortInitialiseStack>
 8004548:	4602      	mov	r2, r0
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800456c:	f001 fa42 	bl	80059f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004570:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <prvAddNewTaskToReadyList+0xc4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <prvAddNewTaskToReadyList+0xc4>)
 8004578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800457a:	4b2c      	ldr	r3, [pc, #176]	; (800462c <prvAddNewTaskToReadyList+0xc8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004582:	4a2a      	ldr	r2, [pc, #168]	; (800462c <prvAddNewTaskToReadyList+0xc8>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004588:	4b27      	ldr	r3, [pc, #156]	; (8004628 <prvAddNewTaskToReadyList+0xc4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d110      	bne.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004590:	f000 fc16 	bl	8004dc0 <prvInitialiseTaskLists>
 8004594:	e00d      	b.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <prvAddNewTaskToReadyList+0xcc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800459e:	4b23      	ldr	r3, [pc, #140]	; (800462c <prvAddNewTaskToReadyList+0xc8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d802      	bhi.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <prvAddNewTaskToReadyList+0xc8>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045b2:	4b20      	ldr	r3, [pc, #128]	; (8004634 <prvAddNewTaskToReadyList+0xd0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <prvAddNewTaskToReadyList+0xd0>)
 80045ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045bc:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <prvAddNewTaskToReadyList+0xd0>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <prvAddNewTaskToReadyList+0xd4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d903      	bls.n	80045d8 <prvAddNewTaskToReadyList+0x74>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	4a18      	ldr	r2, [pc, #96]	; (8004638 <prvAddNewTaskToReadyList+0xd4>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4a15      	ldr	r2, [pc, #84]	; (800463c <prvAddNewTaskToReadyList+0xd8>)
 80045e6:	441a      	add	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7ff f913 	bl	800381a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045f4:	f001 fa2e 	bl	8005a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <prvAddNewTaskToReadyList+0xcc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <prvAddNewTaskToReadyList+0xc8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d207      	bcs.n	800461e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <prvAddNewTaskToReadyList+0xdc>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000d78 	.word	0x20000d78
 800462c:	200008a4 	.word	0x200008a4
 8004630:	20000d84 	.word	0x20000d84
 8004634:	20000d94 	.word	0x20000d94
 8004638:	20000d80 	.word	0x20000d80
 800463c:	200008a8 	.word	0x200008a8
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <vTaskDelay+0x60>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <vTaskDelay+0x30>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60bb      	str	r3, [r7, #8]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004674:	f000 f880 	bl	8004778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004678:	2100      	movs	r1, #0
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fcea 	bl	8005054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004680:	f000 f888 	bl	8004794 <xTaskResumeAll>
 8004684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <vTaskDelay+0x64>)
 800468e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000da0 	.word	0x20000da0
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046ba:	463a      	mov	r2, r7
 80046bc:	1d39      	adds	r1, r7, #4
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff f848 	bl	8003758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	9202      	str	r2, [sp, #8]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	2300      	movs	r3, #0
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	2300      	movs	r3, #0
 80046d8:	460a      	mov	r2, r1
 80046da:	4921      	ldr	r1, [pc, #132]	; (8004760 <vTaskStartScheduler+0xb4>)
 80046dc:	4821      	ldr	r0, [pc, #132]	; (8004764 <vTaskStartScheduler+0xb8>)
 80046de:	f7ff fe0f 	bl	8004300 <xTaskCreateStatic>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4a20      	ldr	r2, [pc, #128]	; (8004768 <vTaskStartScheduler+0xbc>)
 80046e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046e8:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <vTaskStartScheduler+0xbc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046f0:	2301      	movs	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e001      	b.n	80046fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d102      	bne.n	8004706 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004700:	f000 fcfc 	bl	80050fc <xTimerCreateTimerTask>
 8004704:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d116      	bne.n	800473a <vTaskStartScheduler+0x8e>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	613b      	str	r3, [r7, #16]
}
 800471e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <vTaskStartScheduler+0xc0>)
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <vTaskStartScheduler+0xc4>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <vTaskStartScheduler+0xc8>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004734:	f001 f8bc 	bl	80058b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004738:	e00e      	b.n	8004758 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d10a      	bne.n	8004758 <vTaskStartScheduler+0xac>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60fb      	str	r3, [r7, #12]
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <vTaskStartScheduler+0xaa>
}
 8004758:	bf00      	nop
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	080060a4 	.word	0x080060a4
 8004764:	08004d91 	.word	0x08004d91
 8004768:	20000d9c 	.word	0x20000d9c
 800476c:	20000d98 	.word	0x20000d98
 8004770:	20000d84 	.word	0x20000d84
 8004774:	20000d7c 	.word	0x20000d7c

08004778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vTaskSuspendAll+0x18>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a03      	ldr	r2, [pc, #12]	; (8004790 <vTaskSuspendAll+0x18>)
 8004784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000da0 	.word	0x20000da0

08004794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047a2:	4b42      	ldr	r3, [pc, #264]	; (80048ac <xTaskResumeAll+0x118>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	603b      	str	r3, [r7, #0]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047c0:	f001 f918 	bl	80059f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047c4:	4b39      	ldr	r3, [pc, #228]	; (80048ac <xTaskResumeAll+0x118>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	4a38      	ldr	r2, [pc, #224]	; (80048ac <xTaskResumeAll+0x118>)
 80047cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <xTaskResumeAll+0x118>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d162      	bne.n	800489c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047d6:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <xTaskResumeAll+0x11c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d05e      	beq.n	800489c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047de:	e02f      	b.n	8004840 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e0:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <xTaskResumeAll+0x120>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3318      	adds	r3, #24
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff f871 	bl	80038d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3304      	adds	r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff f86c 	bl	80038d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <xTaskResumeAll+0x124>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d903      	bls.n	8004810 <xTaskResumeAll+0x7c>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <xTaskResumeAll+0x124>)
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4a27      	ldr	r2, [pc, #156]	; (80048bc <xTaskResumeAll+0x128>)
 800481e:	441a      	add	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fe fff7 	bl	800381a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <xTaskResumeAll+0x12c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800483a:	4b22      	ldr	r3, [pc, #136]	; (80048c4 <xTaskResumeAll+0x130>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <xTaskResumeAll+0x120>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1cb      	bne.n	80047e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800484e:	f000 fb55 	bl	8004efc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <xTaskResumeAll+0x134>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d010      	beq.n	8004880 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800485e:	f000 f847 	bl	80048f0 <xTaskIncrementTick>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <xTaskResumeAll+0x130>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f1      	bne.n	800485e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <xTaskResumeAll+0x134>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004880:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <xTaskResumeAll+0x130>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004888:	2301      	movs	r3, #1
 800488a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <xTaskResumeAll+0x138>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800489c:	f001 f8da 	bl	8005a54 <vPortExitCritical>

	return xAlreadyYielded;
 80048a0:	68bb      	ldr	r3, [r7, #8]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000da0 	.word	0x20000da0
 80048b0:	20000d78 	.word	0x20000d78
 80048b4:	20000d38 	.word	0x20000d38
 80048b8:	20000d80 	.word	0x20000d80
 80048bc:	200008a8 	.word	0x200008a8
 80048c0:	200008a4 	.word	0x200008a4
 80048c4:	20000d8c 	.word	0x20000d8c
 80048c8:	20000d88 	.word	0x20000d88
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <xTaskGetTickCount+0x1c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048dc:	687b      	ldr	r3, [r7, #4]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000d7c 	.word	0x20000d7c

080048f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fa:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <xTaskIncrementTick+0x148>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 808f 	bne.w	8004a22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <xTaskIncrementTick+0x14c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800490c:	4a4b      	ldr	r2, [pc, #300]	; (8004a3c <xTaskIncrementTick+0x14c>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d120      	bne.n	800495a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004918:	4b49      	ldr	r3, [pc, #292]	; (8004a40 <xTaskIncrementTick+0x150>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <xTaskIncrementTick+0x48>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	603b      	str	r3, [r7, #0]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <xTaskIncrementTick+0x46>
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <xTaskIncrementTick+0x150>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <xTaskIncrementTick+0x154>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a3f      	ldr	r2, [pc, #252]	; (8004a40 <xTaskIncrementTick+0x150>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4a3f      	ldr	r2, [pc, #252]	; (8004a44 <xTaskIncrementTick+0x154>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b3e      	ldr	r3, [pc, #248]	; (8004a48 <xTaskIncrementTick+0x158>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <xTaskIncrementTick+0x158>)
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	f000 fad1 	bl	8004efc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800495a:	4b3c      	ldr	r3, [pc, #240]	; (8004a4c <xTaskIncrementTick+0x15c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	d349      	bcc.n	80049f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004964:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <xTaskIncrementTick+0x150>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800496e:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <xTaskIncrementTick+0x15c>)
 8004970:	f04f 32ff 	mov.w	r2, #4294967295
 8004974:	601a      	str	r2, [r3, #0]
					break;
 8004976:	e03f      	b.n	80049f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <xTaskIncrementTick+0x150>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d203      	bcs.n	8004998 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004990:	4a2e      	ldr	r2, [pc, #184]	; (8004a4c <xTaskIncrementTick+0x15c>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004996:	e02f      	b.n	80049f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3304      	adds	r3, #4
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe ff99 	bl	80038d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3318      	adds	r3, #24
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe ff90 	bl	80038d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <xTaskIncrementTick+0x160>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d903      	bls.n	80049c8 <xTaskIncrementTick+0xd8>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <xTaskIncrementTick+0x160>)
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4a1f      	ldr	r2, [pc, #124]	; (8004a54 <xTaskIncrementTick+0x164>)
 80049d6:	441a      	add	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7fe ff1b 	bl	800381a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <xTaskIncrementTick+0x168>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d3b8      	bcc.n	8004964 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049f2:	2301      	movs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f6:	e7b5      	b.n	8004964 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049f8:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <xTaskIncrementTick+0x168>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4915      	ldr	r1, [pc, #84]	; (8004a54 <xTaskIncrementTick+0x164>)
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d901      	bls.n	8004a14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <xTaskIncrementTick+0x16c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e004      	b.n	8004a2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <xTaskIncrementTick+0x170>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <xTaskIncrementTick+0x170>)
 8004a2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a2c:	697b      	ldr	r3, [r7, #20]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000da0 	.word	0x20000da0
 8004a3c:	20000d7c 	.word	0x20000d7c
 8004a40:	20000d30 	.word	0x20000d30
 8004a44:	20000d34 	.word	0x20000d34
 8004a48:	20000d90 	.word	0x20000d90
 8004a4c:	20000d98 	.word	0x20000d98
 8004a50:	20000d80 	.word	0x20000d80
 8004a54:	200008a8 	.word	0x200008a8
 8004a58:	200008a4 	.word	0x200008a4
 8004a5c:	20000d8c 	.word	0x20000d8c
 8004a60:	20000d88 	.word	0x20000d88

08004a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a6a:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <vTaskSwitchContext+0xa8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <vTaskSwitchContext+0xac>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a78:	e041      	b.n	8004afe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a7a:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <vTaskSwitchContext+0xac>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <vTaskSwitchContext+0xb0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e010      	b.n	8004aaa <vTaskSwitchContext+0x46>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <vTaskSwitchContext+0x3e>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	491b      	ldr	r1, [pc, #108]	; (8004b18 <vTaskSwitchContext+0xb4>)
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0e4      	beq.n	8004a88 <vTaskSwitchContext+0x24>
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <vTaskSwitchContext+0xb4>)
 8004aca:	4413      	add	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	605a      	str	r2, [r3, #4]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d104      	bne.n	8004aee <vTaskSwitchContext+0x8a>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <vTaskSwitchContext+0xb8>)
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4a06      	ldr	r2, [pc, #24]	; (8004b14 <vTaskSwitchContext+0xb0>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6013      	str	r3, [r2, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000da0 	.word	0x20000da0
 8004b10:	20000d8c 	.word	0x20000d8c
 8004b14:	20000d80 	.word	0x20000d80
 8004b18:	200008a8 	.word	0x200008a8
 8004b1c:	200008a4 	.word	0x200008a4

08004b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <vTaskPlaceOnEventList+0x44>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fe fe87 	bl	8003862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b54:	2101      	movs	r1, #1
 8004b56:	6838      	ldr	r0, [r7, #0]
 8004b58:	f000 fa7c 	bl	8005054 <prvAddCurrentTaskToDelayedList>
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200008a4 	.word	0x200008a4

08004b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	617b      	str	r3, [r7, #20]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3318      	adds	r3, #24
 8004b96:	4619      	mov	r1, r3
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7fe fe3e 	bl	800381a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	68b8      	ldr	r0, [r7, #8]
 8004bae:	f000 fa51 	bl	8005054 <prvAddCurrentTaskToDelayedList>
	}
 8004bb2:	bf00      	nop
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	200008a4 	.word	0x200008a4

08004bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	3318      	adds	r3, #24
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fe6f 	bl	80038d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <xTaskRemoveFromEventList+0xb0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11d      	bne.n	8004c3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fe66 	bl	80038d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <xTaskRemoveFromEventList+0xb4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d903      	bls.n	8004c1c <xTaskRemoveFromEventList+0x5c>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <xTaskRemoveFromEventList+0xb4>)
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <xTaskRemoveFromEventList+0xb8>)
 8004c2a:	441a      	add	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7fe fdf1 	bl	800381a <vListInsertEnd>
 8004c38:	e005      	b.n	8004c46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3318      	adds	r3, #24
 8004c3e:	4619      	mov	r1, r3
 8004c40:	480e      	ldr	r0, [pc, #56]	; (8004c7c <xTaskRemoveFromEventList+0xbc>)
 8004c42:	f7fe fdea 	bl	800381a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <xTaskRemoveFromEventList+0xc0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d905      	bls.n	8004c60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <xTaskRemoveFromEventList+0xc4>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e001      	b.n	8004c64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c64:	697b      	ldr	r3, [r7, #20]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000da0 	.word	0x20000da0
 8004c74:	20000d80 	.word	0x20000d80
 8004c78:	200008a8 	.word	0x200008a8
 8004c7c:	20000d38 	.word	0x20000d38
 8004c80:	200008a4 	.word	0x200008a4
 8004c84:	20000d8c 	.word	0x20000d8c

08004c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <vTaskInternalSetTimeOutState+0x24>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <vTaskInternalSetTimeOutState+0x28>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	605a      	str	r2, [r3, #4]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000d90 	.word	0x20000d90
 8004cb0:	20000d7c 	.word	0x20000d7c

08004cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	613b      	str	r3, [r7, #16]
}
 8004cd6:	bf00      	nop
 8004cd8:	e7fe      	b.n	8004cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004cf6:	f000 fe7d 	bl	80059f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <xTaskCheckForTimeOut+0xbc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d102      	bne.n	8004d1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	e023      	b.n	8004d62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <xTaskCheckForTimeOut+0xc0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d007      	beq.n	8004d36 <xTaskCheckForTimeOut+0x82>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e015      	b.n	8004d62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d20b      	bcs.n	8004d58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad2      	subs	r2, r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff9b 	bl	8004c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e004      	b.n	8004d62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d62:	f000 fe77 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004d66:	69fb      	ldr	r3, [r7, #28]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000d7c 	.word	0x20000d7c
 8004d74:	20000d90 	.word	0x20000d90

08004d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <vTaskMissedYield+0x14>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20000d8c 	.word	0x20000d8c

08004d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d98:	f000 f852 	bl	8004e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <prvIdleTask+0x28>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d9f9      	bls.n	8004d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <prvIdleTask+0x2c>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004db4:	e7f0      	b.n	8004d98 <prvIdleTask+0x8>
 8004db6:	bf00      	nop
 8004db8:	200008a8 	.word	0x200008a8
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	e00c      	b.n	8004de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <prvInitialiseTaskLists+0x60>)
 8004dd8:	4413      	add	r3, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fcf0 	bl	80037c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3301      	adds	r3, #1
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b37      	cmp	r3, #55	; 0x37
 8004dea:	d9ef      	bls.n	8004dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dec:	480d      	ldr	r0, [pc, #52]	; (8004e24 <prvInitialiseTaskLists+0x64>)
 8004dee:	f7fe fce7 	bl	80037c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004df2:	480d      	ldr	r0, [pc, #52]	; (8004e28 <prvInitialiseTaskLists+0x68>)
 8004df4:	f7fe fce4 	bl	80037c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004df8:	480c      	ldr	r0, [pc, #48]	; (8004e2c <prvInitialiseTaskLists+0x6c>)
 8004dfa:	f7fe fce1 	bl	80037c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dfe:	480c      	ldr	r0, [pc, #48]	; (8004e30 <prvInitialiseTaskLists+0x70>)
 8004e00:	f7fe fcde 	bl	80037c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e04:	480b      	ldr	r0, [pc, #44]	; (8004e34 <prvInitialiseTaskLists+0x74>)
 8004e06:	f7fe fcdb 	bl	80037c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <prvInitialiseTaskLists+0x78>)
 8004e0c:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <prvInitialiseTaskLists+0x64>)
 8004e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <prvInitialiseTaskLists+0x7c>)
 8004e12:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <prvInitialiseTaskLists+0x68>)
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	200008a8 	.word	0x200008a8
 8004e24:	20000d08 	.word	0x20000d08
 8004e28:	20000d1c 	.word	0x20000d1c
 8004e2c:	20000d38 	.word	0x20000d38
 8004e30:	20000d4c 	.word	0x20000d4c
 8004e34:	20000d64 	.word	0x20000d64
 8004e38:	20000d30 	.word	0x20000d30
 8004e3c:	20000d34 	.word	0x20000d34

08004e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e46:	e019      	b.n	8004e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e48:	f000 fdd4 	bl	80059f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <prvCheckTasksWaitingTermination+0x50>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fd3b 	bl	80038d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <prvCheckTasksWaitingTermination+0x54>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <prvCheckTasksWaitingTermination+0x54>)
 8004e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <prvCheckTasksWaitingTermination+0x58>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <prvCheckTasksWaitingTermination+0x58>)
 8004e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e72:	f000 fdef 	bl	8005a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f810 	bl	8004e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <prvCheckTasksWaitingTermination+0x58>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e1      	bne.n	8004e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000d4c 	.word	0x20000d4c
 8004e94:	20000d78 	.word	0x20000d78
 8004e98:	20000d60 	.word	0x20000d60

08004e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d108      	bne.n	8004ec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 ff8c 	bl	8005dd0 <vPortFree>
				vPortFree( pxTCB );
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 ff89 	bl	8005dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ebe:	e018      	b.n	8004ef2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d103      	bne.n	8004ed2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 ff80 	bl	8005dd0 <vPortFree>
	}
 8004ed0:	e00f      	b.n	8004ef2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d00a      	beq.n	8004ef2 <prvDeleteTCB+0x56>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <prvDeleteTCB+0x54>
	}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <prvResetNextTaskUnblockTime+0x38>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <prvResetNextTaskUnblockTime+0x3c>)
 8004f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f14:	e008      	b.n	8004f28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <prvResetNextTaskUnblockTime+0x38>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4a04      	ldr	r2, [pc, #16]	; (8004f38 <prvResetNextTaskUnblockTime+0x3c>)
 8004f26:	6013      	str	r3, [r2, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000d30 	.word	0x20000d30
 8004f38:	20000d98 	.word	0x20000d98

08004f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <xTaskGetSchedulerState+0x34>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d102      	bne.n	8004f50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	e008      	b.n	8004f62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f50:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <xTaskGetSchedulerState+0x38>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	e001      	b.n	8004f62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f62:	687b      	ldr	r3, [r7, #4]
	}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000d84 	.word	0x20000d84
 8004f74:	20000da0 	.word	0x20000da0

08004f78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d056      	beq.n	800503c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f8e:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <xTaskPriorityDisinherit+0xd0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d00a      	beq.n	8004fae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60bb      	str	r3, [r7, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	1e5a      	subs	r2, r3, #1
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d02c      	beq.n	800503c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d128      	bne.n	800503c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fc70 	bl	80038d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <xTaskPriorityDisinherit+0xd4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <xTaskPriorityDisinherit+0xa4>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a0c      	ldr	r2, [pc, #48]	; (800504c <xTaskPriorityDisinherit+0xd4>)
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <xTaskPriorityDisinherit+0xd8>)
 800502a:	441a      	add	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fe fbf1 	bl	800381a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800503c:	697b      	ldr	r3, [r7, #20]
	}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	200008a4 	.word	0x200008a4
 800504c:	20000d80 	.word	0x20000d80
 8005050:	200008a8 	.word	0x200008a8

08005054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800505e:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005064:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3304      	adds	r3, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fc32 	bl	80038d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d10a      	bne.n	800508e <prvAddCurrentTaskToDelayedList+0x3a>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800507e:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4819      	ldr	r0, [pc, #100]	; (80050ec <prvAddCurrentTaskToDelayedList+0x98>)
 8005088:	f7fe fbc7 	bl	800381a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800508c:	e026      	b.n	80050dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4413      	add	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d209      	bcs.n	80050ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f7fe fbd5 	bl	8003862 <vListInsert>
}
 80050b8:	e010      	b.n	80050dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7fe fbcb 	bl	8003862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d202      	bcs.n	80050dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050d6:	4a08      	ldr	r2, [pc, #32]	; (80050f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6013      	str	r3, [r2, #0]
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000d7c 	.word	0x20000d7c
 80050e8:	200008a4 	.word	0x200008a4
 80050ec:	20000d64 	.word	0x20000d64
 80050f0:	20000d34 	.word	0x20000d34
 80050f4:	20000d30 	.word	0x20000d30
 80050f8:	20000d98 	.word	0x20000d98

080050fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005106:	f000 fb07 	bl	8005718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <xTimerCreateTimerTask+0x80>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d021      	beq.n	8005156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800511a:	1d3a      	adds	r2, r7, #4
 800511c:	f107 0108 	add.w	r1, r7, #8
 8005120:	f107 030c 	add.w	r3, r7, #12
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fb31 	bl	800378c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	9202      	str	r2, [sp, #8]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	2302      	movs	r3, #2
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2300      	movs	r3, #0
 800513a:	460a      	mov	r2, r1
 800513c:	4910      	ldr	r1, [pc, #64]	; (8005180 <xTimerCreateTimerTask+0x84>)
 800513e:	4811      	ldr	r0, [pc, #68]	; (8005184 <xTimerCreateTimerTask+0x88>)
 8005140:	f7ff f8de 	bl	8004300 <xTaskCreateStatic>
 8005144:	4603      	mov	r3, r0
 8005146:	4a10      	ldr	r2, [pc, #64]	; (8005188 <xTimerCreateTimerTask+0x8c>)
 8005148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <xTimerCreateTimerTask+0x8c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005152:	2301      	movs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	613b      	str	r3, [r7, #16]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005172:	697b      	ldr	r3, [r7, #20]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20000dd4 	.word	0x20000dd4
 8005180:	080060ac 	.word	0x080060ac
 8005184:	080052c1 	.word	0x080052c1
 8005188:	20000dd8 	.word	0x20000dd8

0800518c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800519a:	2300      	movs	r3, #0
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	623b      	str	r3, [r7, #32]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051ba:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <xTimerGenericCommand+0x98>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d02a      	beq.n	8005218 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	dc18      	bgt.n	8005206 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051d4:	f7ff feb2 	bl	8004f3c <xTaskGetSchedulerState>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d109      	bne.n	80051f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <xTimerGenericCommand+0x98>)
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	f107 0110 	add.w	r1, r7, #16
 80051e6:	2300      	movs	r3, #0
 80051e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ea:	f7fe fca1 	bl	8003b30 <xQueueGenericSend>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24
 80051f0:	e012      	b.n	8005218 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <xTimerGenericCommand+0x98>)
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	f107 0110 	add.w	r1, r7, #16
 80051fa:	2300      	movs	r3, #0
 80051fc:	2200      	movs	r2, #0
 80051fe:	f7fe fc97 	bl	8003b30 <xQueueGenericSend>
 8005202:	6278      	str	r0, [r7, #36]	; 0x24
 8005204:	e008      	b.n	8005218 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005206:	4b07      	ldr	r3, [pc, #28]	; (8005224 <xTimerGenericCommand+0x98>)
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f107 0110 	add.w	r1, r7, #16
 800520e:	2300      	movs	r3, #0
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	f7fe fd8b 	bl	8003d2c <xQueueGenericSendFromISR>
 8005216:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800521a:	4618      	mov	r0, r3
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000dd4 	.word	0x20000dd4

08005228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af02      	add	r7, sp, #8
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005232:	4b22      	ldr	r3, [pc, #136]	; (80052bc <prvProcessExpiredTimer+0x94>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	3304      	adds	r3, #4
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe fb47 	bl	80038d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d022      	beq.n	800529a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	699a      	ldr	r2, [r3, #24]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	18d1      	adds	r1, r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	6978      	ldr	r0, [r7, #20]
 8005262:	f000 f8d1 	bl	8005408 <prvInsertTimerInActiveList>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01f      	beq.n	80052ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800526c:	2300      	movs	r3, #0
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	2300      	movs	r3, #0
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	2100      	movs	r1, #0
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f7ff ff88 	bl	800518c <xTimerGenericCommand>
 800527c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d113      	bne.n	80052ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60fb      	str	r3, [r7, #12]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	6978      	ldr	r0, [r7, #20]
 80052b2:	4798      	blx	r3
}
 80052b4:	bf00      	nop
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000dcc 	.word	0x20000dcc

080052c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f857 	bl	8005380 <prvGetNextExpireTime>
 80052d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4619      	mov	r1, r3
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f803 	bl	80052e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052de:	f000 f8d5 	bl	800548c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e2:	e7f1      	b.n	80052c8 <prvTimerTask+0x8>

080052e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052ee:	f7ff fa43 	bl	8004778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f2:	f107 0308 	add.w	r3, r7, #8
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f866 	bl	80053c8 <prvSampleTimeNow>
 80052fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d130      	bne.n	8005366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <prvProcessTimerOrBlockTask+0x3c>
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	429a      	cmp	r2, r3
 8005310:	d806      	bhi.n	8005320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005312:	f7ff fa3f 	bl	8004794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff ff85 	bl	8005228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800531e:	e024      	b.n	800536a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005326:	4b13      	ldr	r3, [pc, #76]	; (8005374 <prvProcessTimerOrBlockTask+0x90>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <prvProcessTimerOrBlockTask+0x50>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <prvProcessTimerOrBlockTask+0x52>
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <prvProcessTimerOrBlockTask+0x94>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	4619      	mov	r1, r3
 8005346:	f7fe ffa7 	bl	8004298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800534a:	f7ff fa23 	bl	8004794 <xTaskResumeAll>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005354:	4b09      	ldr	r3, [pc, #36]	; (800537c <prvProcessTimerOrBlockTask+0x98>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
}
 8005364:	e001      	b.n	800536a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005366:	f7ff fa15 	bl	8004794 <xTaskResumeAll>
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000dd0 	.word	0x20000dd0
 8005378:	20000dd4 	.word	0x20000dd4
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <prvGetNextExpireTime+0x44>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <prvGetNextExpireTime+0x16>
 8005392:	2201      	movs	r2, #1
 8005394:	e000      	b.n	8005398 <prvGetNextExpireTime+0x18>
 8005396:	2200      	movs	r2, #0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <prvGetNextExpireTime+0x44>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e001      	b.n	80053b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053b4:	68fb      	ldr	r3, [r7, #12]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000dcc 	.word	0x20000dcc

080053c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d0:	f7ff fa7e 	bl	80048d0 <xTaskGetTickCount>
 80053d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <prvSampleTimeNow+0x3c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d205      	bcs.n	80053ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e0:	f000 f936 	bl	8005650 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e002      	b.n	80053f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <prvSampleTimeNow+0x3c>)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053f8:	68fb      	ldr	r3, [r7, #12]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000ddc 	.word	0x20000ddc

08005408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d812      	bhi.n	8005454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e01b      	b.n	800547a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <prvInsertTimerInActiveList+0x7c>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f7fe fa08 	bl	8003862 <vListInsert>
 8005452:	e012      	b.n	800547a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d206      	bcs.n	800546a <prvInsertTimerInActiveList+0x62>
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e007      	b.n	800547a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <prvInsertTimerInActiveList+0x80>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3304      	adds	r3, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7fe f9f4 	bl	8003862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800547a:	697b      	ldr	r3, [r7, #20]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000dd0 	.word	0x20000dd0
 8005488:	20000dcc 	.word	0x20000dcc

0800548c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08e      	sub	sp, #56	; 0x38
 8005490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005492:	e0ca      	b.n	800562a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	da18      	bge.n	80054cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	3304      	adds	r3, #4
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	61fb      	str	r3, [r7, #28]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c2:	6850      	ldr	r0, [r2, #4]
 80054c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c6:	6892      	ldr	r2, [r2, #8]
 80054c8:	4611      	mov	r1, r2
 80054ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f2c0 80aa 	blt.w	8005628 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe f9f5 	bl	80038d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ea:	463b      	mov	r3, r7
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff ff6b 	bl	80053c8 <prvSampleTimeNow>
 80054f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b09      	cmp	r3, #9
 80054f8:	f200 8097 	bhi.w	800562a <prvProcessReceivedCommands+0x19e>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <prvProcessReceivedCommands+0x78>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	0800552d 	.word	0x0800552d
 8005508:	0800552d 	.word	0x0800552d
 800550c:	0800552d 	.word	0x0800552d
 8005510:	080055a1 	.word	0x080055a1
 8005514:	080055b5 	.word	0x080055b5
 8005518:	080055ff 	.word	0x080055ff
 800551c:	0800552d 	.word	0x0800552d
 8005520:	0800552d 	.word	0x0800552d
 8005524:	080055a1 	.word	0x080055a1
 8005528:	080055b5 	.word	0x080055b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	b2da      	uxtb	r2, r3
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	18d1      	adds	r1, r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800554c:	f7ff ff5c 	bl	8005408 <prvInsertTimerInActiveList>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d069      	beq.n	800562a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d05e      	beq.n	800562a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	441a      	add	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	2100      	movs	r1, #0
 800557c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800557e:	f7ff fe05 	bl	800518c <xTimerGenericCommand>
 8005582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d14f      	bne.n	800562a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	61bb      	str	r3, [r7, #24]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a6:	f023 0301 	bic.w	r3, r3, #1
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055b2:	e03a      	b.n	800562a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	617b      	str	r3, [r7, #20]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	18d1      	adds	r1, r2, r3
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f8:	f7ff ff06 	bl	8005408 <prvInsertTimerInActiveList>
					break;
 80055fc:	e015      	b.n	800562a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d103      	bne.n	8005614 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800560c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800560e:	f000 fbdf 	bl	8005dd0 <vPortFree>
 8005612:	e00a      	b.n	800562a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	b2da      	uxtb	r2, r3
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005626:	e000      	b.n	800562a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005628:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800562a:	4b08      	ldr	r3, [pc, #32]	; (800564c <prvProcessReceivedCommands+0x1c0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	1d39      	adds	r1, r7, #4
 8005630:	2200      	movs	r2, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe fc16 	bl	8003e64 <xQueueReceive>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	f47f af2a 	bne.w	8005494 <prvProcessReceivedCommands+0x8>
	}
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3730      	adds	r7, #48	; 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000dd4 	.word	0x20000dd4

08005650 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005656:	e048      	b.n	80056ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005658:	4b2d      	ldr	r3, [pc, #180]	; (8005710 <prvSwitchTimerLists+0xc0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005662:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <prvSwitchTimerLists+0xc0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3304      	adds	r3, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe f92f 	bl	80038d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02e      	beq.n	80056ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	429a      	cmp	r2, r3
 800569c:	d90e      	bls.n	80056bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056aa:	4b19      	ldr	r3, [pc, #100]	; (8005710 <prvSwitchTimerLists+0xc0>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f7fe f8d4 	bl	8003862 <vListInsert>
 80056ba:	e016      	b.n	80056ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056bc:	2300      	movs	r3, #0
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	2300      	movs	r3, #0
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	2100      	movs	r1, #0
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff fd60 	bl	800518c <xTimerGenericCommand>
 80056cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	603b      	str	r3, [r7, #0]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <prvSwitchTimerLists+0xc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1b1      	bne.n	8005658 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <prvSwitchTimerLists+0xc0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <prvSwitchTimerLists+0xc4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a04      	ldr	r2, [pc, #16]	; (8005710 <prvSwitchTimerLists+0xc0>)
 8005700:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005702:	4a04      	ldr	r2, [pc, #16]	; (8005714 <prvSwitchTimerLists+0xc4>)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	6013      	str	r3, [r2, #0]
}
 8005708:	bf00      	nop
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000dcc 	.word	0x20000dcc
 8005714:	20000dd0 	.word	0x20000dd0

08005718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800571e:	f000 f969 	bl	80059f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <prvCheckForValidListAndQueue+0x60>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d120      	bne.n	800576c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800572a:	4814      	ldr	r0, [pc, #80]	; (800577c <prvCheckForValidListAndQueue+0x64>)
 800572c:	f7fe f848 	bl	80037c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005730:	4813      	ldr	r0, [pc, #76]	; (8005780 <prvCheckForValidListAndQueue+0x68>)
 8005732:	f7fe f845 	bl	80037c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <prvCheckForValidListAndQueue+0x6c>)
 8005738:	4a10      	ldr	r2, [pc, #64]	; (800577c <prvCheckForValidListAndQueue+0x64>)
 800573a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <prvCheckForValidListAndQueue+0x70>)
 800573e:	4a10      	ldr	r2, [pc, #64]	; (8005780 <prvCheckForValidListAndQueue+0x68>)
 8005740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005742:	2300      	movs	r3, #0
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	4b11      	ldr	r3, [pc, #68]	; (800578c <prvCheckForValidListAndQueue+0x74>)
 8005748:	4a11      	ldr	r2, [pc, #68]	; (8005790 <prvCheckForValidListAndQueue+0x78>)
 800574a:	2110      	movs	r1, #16
 800574c:	200a      	movs	r0, #10
 800574e:	f7fe f953 	bl	80039f8 <xQueueGenericCreateStatic>
 8005752:	4603      	mov	r3, r0
 8005754:	4a08      	ldr	r2, [pc, #32]	; (8005778 <prvCheckForValidListAndQueue+0x60>)
 8005756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005758:	4b07      	ldr	r3, [pc, #28]	; (8005778 <prvCheckForValidListAndQueue+0x60>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <prvCheckForValidListAndQueue+0x60>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	490b      	ldr	r1, [pc, #44]	; (8005794 <prvCheckForValidListAndQueue+0x7c>)
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fd6c 	bl	8004244 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800576c:	f000 f972 	bl	8005a54 <vPortExitCritical>
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000dd4 	.word	0x20000dd4
 800577c:	20000da4 	.word	0x20000da4
 8005780:	20000db8 	.word	0x20000db8
 8005784:	20000dcc 	.word	0x20000dcc
 8005788:	20000dd0 	.word	0x20000dd0
 800578c:	20000e80 	.word	0x20000e80
 8005790:	20000de0 	.word	0x20000de0
 8005794:	080060b4 	.word	0x080060b4

08005798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b04      	subs	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b04      	subs	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b04      	subs	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057c8:	4a0c      	ldr	r2, [pc, #48]	; (80057fc <pxPortInitialiseStack+0x64>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3b14      	subs	r3, #20
 80057d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3b04      	subs	r3, #4
 80057de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f06f 0202 	mvn.w	r2, #2
 80057e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3b20      	subs	r3, #32
 80057ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	08005801 	.word	0x08005801

08005800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <prvTaskExitError+0x54>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d00a      	beq.n	800582a <prvTaskExitError+0x2a>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60fb      	str	r3, [r7, #12]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <prvTaskExitError+0x28>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	60bb      	str	r3, [r7, #8]
}
 800583c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800583e:	bf00      	nop
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0fc      	beq.n	8005840 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	2000000c 	.word	0x2000000c
	...

08005860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005888:	4808      	ldr	r0, [pc, #32]	; (80058ac <prvPortStartFirstTask+0x24>)
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f380 8808 	msr	MSP, r0
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8814 	msr	CONTROL, r0
 800589a:	b662      	cpsie	i
 800589c:	b661      	cpsie	f
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	df00      	svc	0
 80058a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058aa:	bf00      	nop
 80058ac:	e000ed08 	.word	0xe000ed08

080058b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <xPortStartScheduler+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a46      	ldr	r2, [pc, #280]	; (80059d4 <xPortStartScheduler+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10a      	bne.n	80058d6 <xPortStartScheduler+0x26>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058d6:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <xPortStartScheduler+0x120>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3f      	ldr	r2, [pc, #252]	; (80059d8 <xPortStartScheduler+0x128>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10a      	bne.n	80058f6 <xPortStartScheduler+0x46>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <xPortStartScheduler+0x12c>)
 80058f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <xPortStartScheduler+0x130>)
 800591c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <xPortStartScheduler+0x134>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005924:	e009      	b.n	800593a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3b01      	subs	r3, #1
 800592c:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <xPortStartScheduler+0x134>)
 800592e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d0ef      	beq.n	8005926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005946:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <xPortStartScheduler+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1c3 0307 	rsb	r3, r3, #7
 800594e:	2b04      	cmp	r3, #4
 8005950:	d00a      	beq.n	8005968 <xPortStartScheduler+0xb8>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60bb      	str	r3, [r7, #8]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <xPortStartScheduler+0x134>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <xPortStartScheduler+0x134>)
 8005970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <xPortStartScheduler+0x134>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <xPortStartScheduler+0x134>)
 800597c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <xPortStartScheduler+0x138>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <xPortStartScheduler+0x138>)
 800598c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <xPortStartScheduler+0x138>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <xPortStartScheduler+0x138>)
 8005998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800599e:	f000 f8dd 	bl	8005b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <xPortStartScheduler+0x13c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059a8:	f000 f8fc 	bl	8005ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <xPortStartScheduler+0x140>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <xPortStartScheduler+0x140>)
 80059b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059b8:	f7ff ff66 	bl	8005888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059bc:	f7ff f852 	bl	8004a64 <vTaskSwitchContext>
	prvTaskExitError();
 80059c0:	f7ff ff1e 	bl	8005800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000ed00 	.word	0xe000ed00
 80059d4:	410fc271 	.word	0x410fc271
 80059d8:	410fc270 	.word	0x410fc270
 80059dc:	e000e400 	.word	0xe000e400
 80059e0:	20000ed0 	.word	0x20000ed0
 80059e4:	20000ed4 	.word	0x20000ed4
 80059e8:	e000ed20 	.word	0xe000ed20
 80059ec:	2000000c 	.word	0x2000000c
 80059f0:	e000ef34 	.word	0xe000ef34

080059f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
}
 8005a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10f      	bne.n	8005a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortEnterCritical+0x5c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	603b      	str	r3, [r7, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vPortEnterCritical+0x4a>
	}
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <vPortExitCritical+0x24>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <vPortExitCritical+0x42>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	f383 8811 	msr	BASEPRI, r3
}
 8005a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
	...

08005ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ab0:	f3ef 8009 	mrs	r0, PSP
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <pxCurrentTCBConst>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f01e 0f10 	tst.w	lr, #16
 8005ac0:	bf08      	it	eq
 8005ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ad4:	f380 8811 	msr	BASEPRI, r0
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f7fe ffc0 	bl	8004a64 <vTaskSwitchContext>
 8005ae4:	f04f 0000 	mov.w	r0, #0
 8005ae8:	f380 8811 	msr	BASEPRI, r0
 8005aec:	bc09      	pop	{r0, r3}
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af6:	f01e 0f10 	tst.w	lr, #16
 8005afa:	bf08      	it	eq
 8005afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b00:	f380 8809 	msr	PSP, r0
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst>:
 8005b10:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b32:	f7fe fedd 	bl	80048f0 <xTaskIncrementTick>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <xPortSysTickHandler+0x40>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
}
 8005b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <vPortSetupTimerInterrupt+0x38>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <vPortSetupTimerInterrupt+0x3c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <vPortSetupTimerInterrupt+0x40>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <vPortSetupTimerInterrupt+0x44>)
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b7e:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b80:	2207      	movs	r2, #7
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	e000e010 	.word	0xe000e010
 8005b94:	e000e018 	.word	0xe000e018
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	10624dd3 	.word	0x10624dd3
 8005ba0:	e000e014 	.word	0xe000e014

08005ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bb4 <vPortEnableVFP+0x10>
 8005ba8:	6801      	ldr	r1, [r0, #0]
 8005baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bae:	6001      	str	r1, [r0, #0]
 8005bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bb2:	bf00      	nop
 8005bb4:	e000ed88 	.word	0xe000ed88

08005bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bbe:	f3ef 8305 	mrs	r3, IPSR
 8005bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d914      	bls.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <vPortValidateInterruptPriority+0x70>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <vPortValidateInterruptPriority+0x74>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	7afa      	ldrb	r2, [r7, #11]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d20a      	bcs.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <vPortValidateInterruptPriority+0x78>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <vPortValidateInterruptPriority+0x7c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d90a      	bls.n	8005c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	603b      	str	r3, [r7, #0]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <vPortValidateInterruptPriority+0x60>
	}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	e000e3f0 	.word	0xe000e3f0
 8005c2c:	20000ed0 	.word	0x20000ed0
 8005c30:	e000ed0c 	.word	0xe000ed0c
 8005c34:	20000ed4 	.word	0x20000ed4

08005c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c44:	f7fe fd98 	bl	8004778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c48:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <pvPortMalloc+0x180>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c50:	f000 f920 	bl	8005e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <pvPortMalloc+0x184>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8093 	bne.w	8005d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01d      	beq.n	8005ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c68:	2208      	movs	r2, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	617b      	str	r3, [r7, #20]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d06e      	beq.n	8005d88 <pvPortMalloc+0x150>
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <pvPortMalloc+0x188>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d869      	bhi.n	8005d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cbe:	e004      	b.n	8005cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d903      	bls.n	8005cdc <pvPortMalloc+0xa4>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f1      	bne.n	8005cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <pvPortMalloc+0x180>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d050      	beq.n	8005d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2208      	movs	r2, #8
 8005cec:	4413      	add	r3, r2
 8005cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	2308      	movs	r3, #8
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d91f      	bls.n	8005d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <pvPortMalloc+0xf8>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	613b      	str	r3, [r7, #16]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f000 f908 	bl	8005f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d203      	bcs.n	8005d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x184>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <pvPortMalloc+0x194>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <pvPortMalloc+0x194>)
 8005d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d88:	f7fe fd04 	bl	8004794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <pvPortMalloc+0x174>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <pvPortMalloc+0x172>
	return pvReturn;
 8005dac:	69fb      	ldr	r3, [r7, #28]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20004ae0 	.word	0x20004ae0
 8005dbc:	20004af4 	.word	0x20004af4
 8005dc0:	20004ae4 	.word	0x20004ae4
 8005dc4:	20004ad8 	.word	0x20004ad8
 8005dc8:	20004ae8 	.word	0x20004ae8
 8005dcc:	20004aec 	.word	0x20004aec

08005dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d04d      	beq.n	8005e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005de2:	2308      	movs	r3, #8
 8005de4:	425b      	negs	r3, r3
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <vPortFree+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <vPortFree+0x44>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60fb      	str	r3, [r7, #12]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <vPortFree+0x62>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60bb      	str	r3, [r7, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <vPortFree+0xb8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11a      	bne.n	8005e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <vPortFree+0xb8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e58:	f7fe fc8e 	bl	8004778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <vPortFree+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <vPortFree+0xbc>)
 8005e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 f874 	bl	8005f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <vPortFree+0xc0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <vPortFree+0xc0>)
 8005e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e7a:	f7fe fc8b 	bl	8004794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20004af4 	.word	0x20004af4
 8005e8c:	20004ae4 	.word	0x20004ae4
 8005e90:	20004af0 	.word	0x20004af0

08005e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <prvHeapInit+0xac>)
 8005ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3307      	adds	r3, #7
 8005eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <prvHeapInit+0xac>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <prvHeapInit+0xb0>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <prvHeapInit+0xb0>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <prvHeapInit+0xb4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvHeapInit+0xb4>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <prvHeapInit+0xb8>)
 8005f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <prvHeapInit+0xbc>)
 8005f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <prvHeapInit+0xc0>)
 8005f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000ed8 	.word	0x20000ed8
 8005f44:	20004ad8 	.word	0x20004ad8
 8005f48:	20004ae0 	.word	0x20004ae0
 8005f4c:	20004ae8 	.word	0x20004ae8
 8005f50:	20004ae4 	.word	0x20004ae4
 8005f54:	20004af4 	.word	0x20004af4

08005f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <prvInsertBlockIntoFreeList+0xac>)
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <prvInsertBlockIntoFreeList+0x14>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d8f7      	bhi.n	8005f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d108      	bne.n	8005f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d118      	bne.n	8005fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d00d      	beq.n	8005fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e008      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e003      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d002      	beq.n	8005ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20004ad8 	.word	0x20004ad8
 8006008:	20004ae0 	.word	0x20004ae0

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	; (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	; (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	; (8006050 <__libc_init_array+0x44>)
 8006020:	f000 f82e 	bl	8006080 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08006100 	.word	0x08006100
 8006048:	08006100 	.word	0x08006100
 800604c:	08006100 	.word	0x08006100
 8006050:	08006104 	.word	0x08006104

08006054 <memcpy>:
 8006054:	440a      	add	r2, r1
 8006056:	4291      	cmp	r1, r2
 8006058:	f100 33ff 	add.w	r3, r0, #4294967295
 800605c:	d100      	bne.n	8006060 <memcpy+0xc>
 800605e:	4770      	bx	lr
 8006060:	b510      	push	{r4, lr}
 8006062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606a:	4291      	cmp	r1, r2
 800606c:	d1f9      	bne.n	8006062 <memcpy+0xe>
 800606e:	bd10      	pop	{r4, pc}

08006070 <memset>:
 8006070:	4402      	add	r2, r0
 8006072:	4603      	mov	r3, r0
 8006074:	4293      	cmp	r3, r2
 8006076:	d100      	bne.n	800607a <memset+0xa>
 8006078:	4770      	bx	lr
 800607a:	f803 1b01 	strb.w	r1, [r3], #1
 800607e:	e7f9      	b.n	8006074 <memset+0x4>

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
