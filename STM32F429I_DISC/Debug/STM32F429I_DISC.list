
STM32F429I_DISC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800cbe8  0800cbe8  0001cbe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0d4  0800d0d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0d4  0800d0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0dc  0800d0dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0dc  0800d0dc  0001d0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0e0  0800d0e0  0001d0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000900  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ae4  20000ae4  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002130f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a8c  00000000  00000000  00041523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00045fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019f8  00000000  00000000  00047b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002983c  00000000  00000000  00049578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020f01  00000000  00000000  00072db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef80d  00000000  00000000  00093cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001834c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ba0  00000000  00000000  00183514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cbd0 	.word	0x0800cbd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800cbd0 	.word	0x0800cbd0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001038:	1d39      	adds	r1, r7, #4
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2201      	movs	r2, #1
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <__io_putchar+0x20>)
 8001042:	f005 f816 	bl	8006072 <HAL_UART_Transmit>
  return ch;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002f8 	.word	0x200002f8

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f000 ff63 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 f837 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001062:	f000 f9cd 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 8001066:	f000 f95b 	bl	8001320 <MX_DMA_Init>
  MX_CRC_Init();
 800106a:	f000 f89b 	bl	80011a4 <MX_CRC_Init>
  MX_FMC_Init();
 800106e:	f000 f977 	bl	8001360 <MX_FMC_Init>
  MX_TIM1_Init();
 8001072:	f000 f8d9 	bl	8001228 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001076:	f000 f927 	bl	80012c8 <MX_USART1_UART_Init>
  MX_I2S3_Init();
 800107a:	f000 f8a7 	bl	80011cc <MX_I2S3_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_I2S_Receive(&hi2s3,(uint16_t *) audio_buffer,BUFFER_SIZE,100)!= HAL_OK){
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001084:	490e      	ldr	r1, [pc, #56]	; (80010c0 <main+0x6c>)
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <main+0x70>)
 8001088:	f002 ffa6 	bl	8003fd8 <HAL_I2S_Receive>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <main+0x44>
		  printf("HAL_I2S_Receive Failed\n\r");
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <main+0x74>)
 8001094:	f008 f884 	bl	80091a0 <iprintf>
	  }

	  for(int i=0;i<BUFFER_SIZE;i++){
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	e00a      	b.n	80010b4 <main+0x60>
		  printf("%u\n",audio_buffer[i]);
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <main+0x6c>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <main+0x78>)
 80010aa:	f008 f879 	bl	80091a0 <iprintf>
	  for(int i=0;i<BUFFER_SIZE;i++){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3301      	adds	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010ba:	dbf0      	blt.n	800109e <main+0x4a>
	  if (HAL_I2S_Receive(&hi2s3,(uint16_t *) audio_buffer,BUFFER_SIZE,100)!= HAL_OK){
 80010bc:	e7df      	b.n	800107e <main+0x2a>
 80010be:	bf00      	nop
 80010c0:	20000370 	.word	0x20000370
 80010c4:	20000208 	.word	0x20000208
 80010c8:	0800cbe8 	.word	0x0800cbe8
 80010cc:	0800cc04 	.word	0x0800cc04

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	2230      	movs	r2, #48	; 0x30
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f007 f8fc 	bl	80082dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <SystemClock_Config+0xcc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <SystemClock_Config+0xcc>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <SystemClock_Config+0xcc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <SystemClock_Config+0xd0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <SystemClock_Config+0xd0>)
 800111e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <SystemClock_Config+0xd0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001148:	2348      	movs	r3, #72	; 0x48
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001150:	2303      	movs	r3, #3
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fb9f 	bl	800489c <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001164:	f000 fb1c 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116c:	2302      	movs	r3, #2
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2102      	movs	r1, #2
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fe01 	bl	8004d8c <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001190:	f000 fb06 	bl	80017a0 <Error_Handler>
  }
}
 8001194:	bf00      	nop
 8001196:	3750      	adds	r7, #80	; 0x50
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_CRC_Init+0x20>)
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <MX_CRC_Init+0x24>)
 80011ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_CRC_Init+0x20>)
 80011b0:	f000 ffdc 	bl	800216c <HAL_CRC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011ba:	f000 faf1 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000200 	.word	0x20000200
 80011c8:	40023000 	.word	0x40023000

080011cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_I2S3_Init+0x54>)
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <MX_I2S3_Init+0x58>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2S3_Init+0x54>)
 80011d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_I2S3_Init+0x54>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_I2S3_Init+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MX_I2S3_Init+0x54>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_I2S3_Init+0x54>)
 80011f2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80011f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_I2S3_Init+0x54>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_I2S3_Init+0x54>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_I2S3_Init+0x54>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2S3_Init+0x54>)
 800120c:	f002 fda4 	bl	8003d58 <HAL_I2S_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001216:	f000 fac3 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000208 	.word	0x20000208
 8001224:	40003c00 	.word	0x40003c00

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001246:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <MX_TIM1_Init+0x9c>)
 8001248:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM1_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM1_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001272:	f004 fa2f 	bl	80056d4 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800127c:	f000 fa90 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_TIM1_Init+0x98>)
 800128e:	f004 fbe9 	bl	8005a64 <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001298:	f000 fa82 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM1_Init+0x98>)
 80012aa:	f004 fe05 	bl	8005eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012b4:	f000 fa74 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002b0 	.word	0x200002b0
 80012c4:	40010000 	.word	0x40010000

080012c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_USART1_UART_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART1_UART_Init+0x50>)
 8001304:	f004 fe68 	bl	8005fd8 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800130e:	f000 fa47 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200002f8 	.word	0x200002f8
 800131c:	40011000 	.word	0x40011000

08001320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_DMA_Init+0x3c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <MX_DMA_Init+0x3c>)
 8001330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_DMA_Init+0x3c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2105      	movs	r1, #5
 8001346:	200b      	movs	r0, #11
 8001348:	f000 fee6 	bl	8002118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800134c:	200b      	movs	r0, #11
 800134e:	f000 feff 	bl	8002150 <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	615a      	str	r2, [r3, #20]
 8001376:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <MX_FMC_Init+0x98>)
 800137a:	4a20      	ldr	r2, [pc, #128]	; (80013fc <MX_FMC_Init+0x9c>)
 800137c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_FMC_Init+0x98>)
 8001380:	2201      	movs	r2, #1
 8001382:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_FMC_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_FMC_Init+0x98>)
 800138c:	2204      	movs	r2, #4
 800138e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_FMC_Init+0x98>)
 8001392:	2210      	movs	r2, #16
 8001394:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_FMC_Init+0x98>)
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_FMC_Init+0x98>)
 800139e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_FMC_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_FMC_Init+0x98>)
 80013ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_FMC_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_FMC_Init+0x98>)
 80013ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80013c4:	2307      	movs	r3, #7
 80013c6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80013cc:	2307      	movs	r3, #7
 80013ce:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80013d0:	2303      	movs	r3, #3
 80013d2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_FMC_Init+0x98>)
 80013e2:	f004 f943 	bl	800566c <HAL_SDRAM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80013ec:	f000 f9d8 	bl	80017a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000033c 	.word	0x2000033c
 80013fc:	a0000140 	.word	0xa0000140

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08e      	sub	sp, #56	; 0x38
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	4bb2      	ldr	r3, [pc, #712]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4ab1      	ldr	r2, [pc, #708]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4baf      	ldr	r3, [pc, #700]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	623b      	str	r3, [r7, #32]
 8001430:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4aaa      	ldr	r2, [pc, #680]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4ba8      	ldr	r3, [pc, #672]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	4ba4      	ldr	r3, [pc, #656]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4aa3      	ldr	r2, [pc, #652]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4ba1      	ldr	r3, [pc, #644]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b9d      	ldr	r3, [pc, #628]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a9c      	ldr	r2, [pc, #624]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b9a      	ldr	r3, [pc, #616]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a95      	ldr	r2, [pc, #596]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a8e      	ldr	r2, [pc, #568]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b8c      	ldr	r3, [pc, #560]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a87      	ldr	r2, [pc, #540]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a80      	ldr	r2, [pc, #512]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <MX_GPIO_Init+0x2e4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2116      	movs	r1, #22
 80014fa:	487b      	ldr	r0, [pc, #492]	; (80016e8 <MX_GPIO_Init+0x2e8>)
 80014fc:	f001 fae8 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4879      	ldr	r0, [pc, #484]	; (80016ec <MX_GPIO_Init+0x2ec>)
 8001506:	f001 fae3 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001510:	4877      	ldr	r0, [pc, #476]	; (80016f0 <MX_GPIO_Init+0x2f0>)
 8001512:	f001 fadd 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800151c:	4875      	ldr	r0, [pc, #468]	; (80016f4 <MX_GPIO_Init+0x2f4>)
 800151e:	f001 fad7 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001522:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001534:	2305      	movs	r3, #5
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	486e      	ldr	r0, [pc, #440]	; (80016f8 <MX_GPIO_Init+0x2f8>)
 8001540:	f001 f91a 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001556:	230e      	movs	r3, #14
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	4865      	ldr	r0, [pc, #404]	; (80016f8 <MX_GPIO_Init+0x2f8>)
 8001562:	f001 f909 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001566:	2316      	movs	r3, #22
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	485a      	ldr	r0, [pc, #360]	; (80016e8 <MX_GPIO_Init+0x2e8>)
 800157e:	f001 f8fb 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8001582:	2307      	movs	r3, #7
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001586:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4855      	ldr	r0, [pc, #340]	; (80016ec <MX_GPIO_Init+0x2ec>)
 8001598:	f001 f8ee 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 800159c:	2358      	movs	r3, #88	; 0x58
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ac:	230e      	movs	r3, #14
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	484d      	ldr	r0, [pc, #308]	; (80016ec <MX_GPIO_Init+0x2ec>)
 80015b8:	f001 f8de 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4846      	ldr	r0, [pc, #280]	; (80016ec <MX_GPIO_Init+0x2ec>)
 80015d4:	f001 f8d0 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80015d8:	2320      	movs	r3, #32
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	483e      	ldr	r0, [pc, #248]	; (80016e8 <MX_GPIO_Init+0x2e8>)
 80015ee:	f001 f8c3 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80015f2:	2303      	movs	r3, #3
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001602:	2309      	movs	r3, #9
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	483b      	ldr	r0, [pc, #236]	; (80016fc <MX_GPIO_Init+0x2fc>)
 800160e:	f001 f8b3 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001612:	2304      	movs	r3, #4
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	4835      	ldr	r0, [pc, #212]	; (80016fc <MX_GPIO_Init+0x2fc>)
 8001626:	f001 f8a7 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800162a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800163c:	230e      	movs	r3, #14
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	482d      	ldr	r0, [pc, #180]	; (80016fc <MX_GPIO_Init+0x2fc>)
 8001648:	f001 f896 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800164c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	4823      	ldr	r0, [pc, #140]	; (80016f0 <MX_GPIO_Init+0x2f0>)
 8001662:	f001 f889 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001666:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <MX_GPIO_Init+0x2f0>)
 8001680:	f001 f87a 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001684:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001696:	230e      	movs	r3, #14
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_GPIO_Init+0x2f4>)
 80016a2:	f001 f869 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 80016a6:	23c0      	movs	r3, #192	; 0xc0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016b6:	230e      	movs	r3, #14
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4809      	ldr	r0, [pc, #36]	; (80016e8 <MX_GPIO_Init+0x2e8>)
 80016c2:	f001 f859 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80016c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016cc:	2312      	movs	r3, #18
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016d8:	2304      	movs	r3, #4
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	e00e      	b.n	8001700 <MX_GPIO_Init+0x300>
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40021400 	.word	0x40021400
 80016fc:	40020400 	.word	0x40020400
 8001700:	4619      	mov	r1, r3
 8001702:	481b      	ldr	r0, [pc, #108]	; (8001770 <MX_GPIO_Init+0x370>)
 8001704:	f001 f838 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001708:	2348      	movs	r3, #72	; 0x48
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001718:	230e      	movs	r3, #14
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <MX_GPIO_Init+0x374>)
 8001724:	f001 f828 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800173a:	2309      	movs	r3, #9
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_GPIO_Init+0x378>)
 8001746:	f001 f817 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800174a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_GPIO_Init+0x378>)
 8001764:	f001 f808 	bl	8002778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001768:	bf00      	nop
 800176a:	3738      	adds	r7, #56	; 0x38
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40021800 	.word	0x40021800

0800177c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800178e:	f000 fbeb 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40001000 	.word	0x40001000

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>
	...

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_MspInit+0x54>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_MspInit+0x54>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_MspInit+0x54>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_MspInit+0x54>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_MspInit+0x54>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_MspInit+0x54>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	210f      	movs	r1, #15
 80017ee:	f06f 0001 	mvn.w	r0, #1
 80017f2:	f000 fc91 	bl	8002118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_CRC_MspInit+0x3c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10d      	bne.n	8001832 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_CRC_MspInit+0x40>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_CRC_MspInit+0x40>)
 8001820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_CRC_MspInit+0x40>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023000 	.word	0x40023000
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b096      	sub	sp, #88	; 0x58
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2230      	movs	r2, #48	; 0x30
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f006 fd37 	bl	80082dc <memset>
  if(hi2s->Instance==SPI3)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_I2S_MspInit+0x154>)
 8001874:	4293      	cmp	r3, r2
 8001876:	f040 808c 	bne.w	8001992 <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800187a:	2301      	movs	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fcd0 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001896:	f7ff ff83 	bl	80017a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a38      	ldr	r2, [pc, #224]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_I2S_MspInit+0x158>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001900:	2306      	movs	r3, #6
 8001902:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001908:	4619      	mov	r1, r3
 800190a:	4826      	ldr	r0, [pc, #152]	; (80019a4 <HAL_I2S_MspInit+0x15c>)
 800190c:	f000 ff34 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001922:	2306      	movs	r3, #6
 8001924:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001926:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800192a:	4619      	mov	r1, r3
 800192c:	481e      	ldr	r0, [pc, #120]	; (80019a8 <HAL_I2S_MspInit+0x160>)
 800192e:	f000 ff23 	bl	8002778 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_I2S_MspInit+0x164>)
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_I2S_MspInit+0x168>)
 8001936:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_I2S_MspInit+0x164>)
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_I2S_MspInit+0x164>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_I2S_MspInit+0x164>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_I2S_MspInit+0x164>)
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_I2S_MspInit+0x164>)
 8001954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001958:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_I2S_MspInit+0x164>)
 800195c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001960:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_I2S_MspInit+0x164>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_I2S_MspInit+0x164>)
 800196a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800196e:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_I2S_MspInit+0x164>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <HAL_I2S_MspInit+0x164>)
 8001978:	f000 fc14 	bl	80021a4 <HAL_DMA_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001982:	f7ff ff0d 	bl	80017a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_I2S_MspInit+0x164>)
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_I2S_MspInit+0x164>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3758      	adds	r7, #88	; 0x58
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40003c00 	.word	0x40003c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020800 	.word	0x40020800
 80019ac:	20000250 	.word	0x20000250
 80019b0:	40026010 	.word	0x40026010

080019b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <HAL_TIM_Base_MspInit+0x3c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10d      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_TIM_Base_MspInit+0x40>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_TIM_Base_MspInit+0x40>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_TIM_Base_MspInit+0x40>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_UART_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a52:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a56:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a64:	2307      	movs	r3, #7
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a70:	f000 fe82 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_FMC_MspInit+0x104>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d16f      	bne.n	8001b84 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001aa4:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_FMC_MspInit+0x104>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_FMC_MspInit+0x108>)
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	4a37      	ldr	r2, [pc, #220]	; (8001b90 <HAL_FMC_MspInit+0x108>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6393      	str	r3, [r2, #56]	; 0x38
 8001aba:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <HAL_FMC_MspInit+0x108>)
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001ac6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001aca:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	482c      	ldr	r0, [pc, #176]	; (8001b94 <HAL_FMC_MspInit+0x10c>)
 8001ae2:	f000 fe49 	bl	8002778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001af6:	230c      	movs	r3, #12
 8001af8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4826      	ldr	r0, [pc, #152]	; (8001b98 <HAL_FMC_MspInit+0x110>)
 8001b00:	f000 fe3a 	bl	8002778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001b04:	f248 1333 	movw	r3, #33075	; 0x8133
 8001b08:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b16:	230c      	movs	r3, #12
 8001b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	481f      	ldr	r0, [pc, #124]	; (8001b9c <HAL_FMC_MspInit+0x114>)
 8001b20:	f000 fe2a 	bl	8002778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001b24:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b28:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b36:	230c      	movs	r3, #12
 8001b38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4818      	ldr	r0, [pc, #96]	; (8001ba0 <HAL_FMC_MspInit+0x118>)
 8001b40:	f000 fe1a 	bl	8002778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001b44:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b48:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b56:	230c      	movs	r3, #12
 8001b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <HAL_FMC_MspInit+0x11c>)
 8001b60:	f000 fe0a 	bl	8002778 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001b64:	2360      	movs	r3, #96	; 0x60
 8001b66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b74:	230c      	movs	r3, #12
 8001b76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <HAL_FMC_MspInit+0x120>)
 8001b7e:	f000 fdfb 	bl	8002778 <HAL_GPIO_Init>
 8001b82:	e000      	b.n	8001b86 <HAL_FMC_MspInit+0xfe>
    return;
 8001b84:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000690 	.word	0x20000690
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40020400 	.word	0x40020400

08001bac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001bb4:	f7ff ff68 	bl	8001a88 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	; 0x38
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_InitTick+0xe4>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_InitTick+0xe4>)
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_InitTick+0xe4>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bec:	f107 0210 	add.w	r2, r7, #16
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fae8 	bl	80051cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c06:	f003 fab9 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8001c0a:	6378      	str	r0, [r7, #52]	; 0x34
 8001c0c:	e004      	b.n	8001c18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c0e:	f003 fab5 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8001c12:	4603      	mov	r3, r0
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	4a23      	ldr	r2, [pc, #140]	; (8001ca8 <HAL_InitTick+0xe8>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	0c9b      	lsrs	r3, r3, #18
 8001c22:	3b01      	subs	r3, #1
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_InitTick+0xec>)
 8001c28:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <HAL_InitTick+0xf0>)
 8001c2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_InitTick+0xec>)
 8001c2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_InitTick+0xec>)
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_InitTick+0xec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_InitTick+0xec>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_InitTick+0xec>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c4c:	4817      	ldr	r0, [pc, #92]	; (8001cac <HAL_InitTick+0xec>)
 8001c4e:	f003 fd41 	bl	80056d4 <HAL_TIM_Base_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d11b      	bne.n	8001c98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c60:	4812      	ldr	r0, [pc, #72]	; (8001cac <HAL_InitTick+0xec>)
 8001c62:	f003 fd87 	bl	8005774 <HAL_TIM_Base_Start_IT>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d111      	bne.n	8001c98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c74:	2036      	movs	r0, #54	; 0x36
 8001c76:	f000 fa6b 	bl	8002150 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d808      	bhi.n	8001c92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	2036      	movs	r0, #54	; 0x36
 8001c86:	f000 fa47 	bl	8002118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_InitTick+0xf4>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e002      	b.n	8001c98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3738      	adds	r7, #56	; 0x38
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	20000694 	.word	0x20000694
 8001cb0:	40001000 	.word	0x40001000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <NMI_Handler+0x4>

08001cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler+0x4>

08001cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA1_Stream0_IRQHandler+0x10>)
 8001cea:	f000 fb09 	bl	8002300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000250 	.word	0x20000250

08001cf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM6_DAC_IRQHandler+0x10>)
 8001cfe:	f003 fda9 	bl	8005854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000694 	.word	0x20000694

08001d0c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <OTG_HS_IRQHandler+0x10>)
 8001d12:	f000 fef6 	bl	8002b02 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200007d0 	.word	0x200007d0

08001d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_kill>:

int _kill(int pid, int sig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d3a:	f006 fa8f 	bl	800825c <__errno>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2216      	movs	r2, #22
 8001d42:	601a      	str	r2, [r3, #0]
  return -1;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_exit>:

void _exit (int status)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffe7 	bl	8001d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d62:	e7fe      	b.n	8001d62 <_exit+0x12>

08001d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e00a      	b.n	8001d8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d76:	f3af 8000 	nop.w
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	b2ca      	uxtb	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dbf0      	blt.n	8001d76 <_read+0x12>
  }

  return len;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e009      	b.n	8001dc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f939 	bl	8001030 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf1      	blt.n	8001db0 <_write+0x12>
  }
  return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_close>:

int _close(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f006 f9f4 	bl	800825c <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20030000 	.word	0x20030000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	200006dc 	.word	0x200006dc
 8001ea8:	20000ae8 	.word	0x20000ae8

08001eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001efa:	f7ff ffd7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f006 f9b3 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff f8a7 	bl	8001054 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f14:	0800d0e4 	.word	0x0800d0e4
  ldr r2, =_sbss
 8001f18:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f1c:	20000ae4 	.word	0x20000ae4

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f8d8 	bl	8002102 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fe34 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fc28 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	200006e0 	.word	0x200006e0

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	200006e0 	.word	0x200006e0

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff4c 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212a:	f7ff ff61 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 800212e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	6978      	ldr	r0, [r7, #20]
 8002136:	f7ff ffb1 	bl	800209c <NVIC_EncodePriority>
 800213a:	4602      	mov	r2, r0
 800213c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff80 	bl	8002048 <__NVIC_SetPriority>
}
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff54 	bl	800200c <__NVIC_EnableIRQ>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00e      	b.n	800219c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	795b      	ldrb	r3, [r3, #5]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fb38 	bl	8001804 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff feee 	bl	8001f90 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e099      	b.n	80022f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e0:	e00f      	b.n	8002202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021e2:	f7ff fed5 	bl	8001f90 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d908      	bls.n	8002202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e078      	b.n	80022f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e8      	bne.n	80021e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4b38      	ldr	r3, [pc, #224]	; (80022fc <HAL_DMA_Init+0x158>)
 800221c:	4013      	ands	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2b04      	cmp	r3, #4
 800225a:	d107      	bne.n	800226c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4313      	orrs	r3, r2
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f023 0307 	bic.w	r3, r3, #7
 8002282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	2b04      	cmp	r3, #4
 8002294:	d117      	bne.n	80022c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f9e9 	bl	8002680 <DMA_CheckFifoParam>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2240      	movs	r2, #64	; 0x40
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022c2:	2301      	movs	r3, #1
 80022c4:	e016      	b.n	80022f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f9a0 	bl	8002614 <DMA_CalcBaseAndBitshift>
 80022d4:	4603      	mov	r3, r0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	223f      	movs	r2, #63	; 0x3f
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	f010803f 	.word	0xf010803f

08002300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800230c:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_DMA_IRQHandler+0x248>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a8e      	ldr	r2, [pc, #568]	; (800254c <HAL_DMA_IRQHandler+0x24c>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0a9b      	lsrs	r3, r3, #10
 8002318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2208      	movs	r2, #8
 800232c:	409a      	lsls	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01a      	beq.n	800236c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0204 	bic.w	r2, r2, #4
 8002352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	2208      	movs	r2, #8
 800235a:	409a      	lsls	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2201      	movs	r2, #1
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d012      	beq.n	80023a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	2201      	movs	r2, #1
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f043 0202 	orr.w	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2204      	movs	r2, #4
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d012      	beq.n	80023d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	2204      	movs	r2, #4
 80023c6:	409a      	lsls	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f043 0204 	orr.w	r2, r3, #4
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2210      	movs	r2, #16
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d043      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d03c      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2210      	movs	r2, #16
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d018      	beq.n	8002442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d108      	bne.n	8002430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d024      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
 800242e:	e01f      	b.n	8002470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e016      	b.n	8002470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0208 	bic.w	r2, r2, #8
 800245e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2220      	movs	r2, #32
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 808f 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8087 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2220      	movs	r2, #32
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d136      	bne.n	8002518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0216 	bic.w	r2, r2, #22
 80024b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <HAL_DMA_IRQHandler+0x1da>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	223f      	movs	r2, #63	; 0x3f
 80024f0:	409a      	lsls	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250a:	2b00      	cmp	r3, #0
 800250c:	d07e      	beq.n	800260c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
        }
        return;
 8002516:	e079      	b.n	800260c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01d      	beq.n	8002562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	2b00      	cmp	r3, #0
 800253a:	d031      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
 8002544:	e02c      	b.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
 8002546:	bf00      	nop
 8002548:	20000000 	.word	0x20000000
 800254c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	e01e      	b.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10f      	bne.n	8002590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0210 	bic.w	r2, r2, #16
 800257e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d032      	beq.n	800260e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d022      	beq.n	80025fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2205      	movs	r2, #5
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3301      	adds	r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d307      	bcc.n	80025e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f2      	bne.n	80025cc <HAL_DMA_IRQHandler+0x2cc>
 80025e6:	e000      	b.n	80025ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
 800260a:	e000      	b.n	800260e <HAL_DMA_IRQHandler+0x30e>
        return;
 800260c:	bf00      	nop
    }
  }
}
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3b10      	subs	r3, #16
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <DMA_CalcBaseAndBitshift+0x64>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <DMA_CalcBaseAndBitshift+0x68>)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d909      	bls.n	8002656 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	1d1a      	adds	r2, r3, #4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	; 0x58
 8002654:	e007      	b.n	8002666 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	aaaaaaab 	.word	0xaaaaaaab
 800267c:	0800cc20 	.word	0x0800cc20

08002680 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d11f      	bne.n	80026da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d856      	bhi.n	800274e <DMA_CheckFifoParam+0xce>
 80026a0:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <DMA_CheckFifoParam+0x28>)
 80026a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a6:	bf00      	nop
 80026a8:	080026b9 	.word	0x080026b9
 80026ac:	080026cb 	.word	0x080026cb
 80026b0:	080026b9 	.word	0x080026b9
 80026b4:	0800274f 	.word	0x0800274f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d046      	beq.n	8002752 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c8:	e043      	b.n	8002752 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d2:	d140      	bne.n	8002756 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d8:	e03d      	b.n	8002756 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e2:	d121      	bne.n	8002728 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d837      	bhi.n	800275a <DMA_CheckFifoParam+0xda>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <DMA_CheckFifoParam+0x70>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002707 	.word	0x08002707
 80026f8:	08002701 	.word	0x08002701
 80026fc:	08002719 	.word	0x08002719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      break;
 8002704:	e030      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d025      	beq.n	800275e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002716:	e022      	b.n	800275e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002720:	d11f      	bne.n	8002762 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002726:	e01c      	b.n	8002762 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d903      	bls.n	8002736 <DMA_CheckFifoParam+0xb6>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d003      	beq.n	800273c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002734:	e018      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
      break;
 800273a:	e015      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      break;
 800274c:	e00b      	b.n	8002766 <DMA_CheckFifoParam+0xe6>
      break;
 800274e:	bf00      	nop
 8002750:	e00a      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e008      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
 8002758:	e006      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
 800275c:	e004      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e002      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      break;   
 8002762:	bf00      	nop
 8002764:	e000      	b.n	8002768 <DMA_CheckFifoParam+0xe8>
      break;
 8002766:	bf00      	nop
    }
  } 
  
  return status; 
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e177      	b.n	8002a84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8166 	bne.w	8002a7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d130      	bne.n	800282c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0201 	and.w	r2, r3, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d017      	beq.n	8002868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80c0 	beq.w	8002a7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <HAL_GPIO_Init+0x324>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a65      	ldr	r2, [pc, #404]	; (8002a9c <HAL_GPIO_Init+0x324>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_GPIO_Init+0x324>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a61      	ldr	r2, [pc, #388]	; (8002aa0 <HAL_GPIO_Init+0x328>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_GPIO_Init+0x32c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d037      	beq.n	80029b6 <HAL_GPIO_Init+0x23e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a57      	ldr	r2, [pc, #348]	; (8002aa8 <HAL_GPIO_Init+0x330>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d031      	beq.n	80029b2 <HAL_GPIO_Init+0x23a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a56      	ldr	r2, [pc, #344]	; (8002aac <HAL_GPIO_Init+0x334>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d02b      	beq.n	80029ae <HAL_GPIO_Init+0x236>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a55      	ldr	r2, [pc, #340]	; (8002ab0 <HAL_GPIO_Init+0x338>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d025      	beq.n	80029aa <HAL_GPIO_Init+0x232>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a54      	ldr	r2, [pc, #336]	; (8002ab4 <HAL_GPIO_Init+0x33c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01f      	beq.n	80029a6 <HAL_GPIO_Init+0x22e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a53      	ldr	r2, [pc, #332]	; (8002ab8 <HAL_GPIO_Init+0x340>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x22a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a52      	ldr	r2, [pc, #328]	; (8002abc <HAL_GPIO_Init+0x344>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x226>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a51      	ldr	r2, [pc, #324]	; (8002ac0 <HAL_GPIO_Init+0x348>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x222>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a50      	ldr	r2, [pc, #320]	; (8002ac4 <HAL_GPIO_Init+0x34c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x21e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4f      	ldr	r2, [pc, #316]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x21a>
 800298e:	2309      	movs	r3, #9
 8002990:	e012      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 8002992:	230a      	movs	r3, #10
 8002994:	e010      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 8002996:	2308      	movs	r3, #8
 8002998:	e00e      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 800299a:	2307      	movs	r3, #7
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x240>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	; (8002aa0 <HAL_GPIO_Init+0x328>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <HAL_GPIO_Init+0x354>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a34      	ldr	r2, [pc, #208]	; (8002acc <HAL_GPIO_Init+0x354>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b32      	ldr	r3, [pc, #200]	; (8002acc <HAL_GPIO_Init+0x354>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a29      	ldr	r2, [pc, #164]	; (8002acc <HAL_GPIO_Init+0x354>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_GPIO_Init+0x354>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_GPIO_Init+0x354>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_GPIO_Init+0x354>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_GPIO_Init+0x354>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f ae84 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40022400 	.word	0x40022400
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 ffd6 	bl	8006aca <USB_GetMode>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f040 80f6 	bne.w	8002d12 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 ffba 	bl	8006aa4 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80ec 	beq.w	8002d10 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 ffb1 	bl	8006aa4 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b4c:	d104      	bne.n	8002b58 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 ffa1 	bl	8006aa4 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b6c:	d104      	bne.n	8002b78 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b76:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 ff91 	bl	8006aa4 <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b8c:	d104      	bne.n	8002b98 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 ff81 	bl	8006aa4 <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d103      	bne.n	8002bb4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 ff73 	bl	8006aa4 <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc8:	d11c      	bne.n	8002c04 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bd2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002be4:	2110      	movs	r1, #16
 8002be6:	6938      	ldr	r0, [r7, #16]
 8002be8:	f003 fea0 	bl	800692c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002bec:	6938      	ldr	r0, [r7, #16]
 8002bee:	f003 fed1 	bl	8006994 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 ff74 	bl	8006ae6 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f005 faa8 	bl	8008154 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 ff4b 	bl	8006aa4 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c18:	d102      	bne.n	8002c20 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 f829 	bl	8003c72 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 ff3d 	bl	8006aa4 <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d106      	bne.n	8002c42 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f005 fa71 	bl	800811c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2208      	movs	r2, #8
 8002c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 ff2c 	bl	8006aa4 <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d101      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x158>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_HCD_IRQHandler+0x15a>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0210 	bic.w	r2, r2, #16
 8002c6e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 ff2c 	bl	8003ace <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0210 	orr.w	r2, r2, #16
 8002c84:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 ff0a 	bl	8006aa4 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c9a:	d13a      	bne.n	8002d12 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 ff5a 	bl	8006b5a <USB_HC_ReadInterrupt>
 8002ca6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e025      	b.n	8002cfa <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd8:	d106      	bne.n	8002ce8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f836 	bl	8002d52 <HCD_HC_IN_IRQHandler>
 8002ce6:	e005      	b.n	8002cf4 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fb84 	bl	80033fc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3d4      	bcc.n	8002cae <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	e000      	b.n	8002d12 <HAL_HCD_IRQHandler+0x210>
      return;
 8002d10:	bf00      	nop
    }
  }
}
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_HCD_Stop+0x16>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e00d      	b.n	8002d4a <HAL_HCD_Stop+0x32>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 f81a 	bl	8006d74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d11a      	bne.n	8002db8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2304      	movs	r3, #4
 8002d92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3361      	adds	r3, #97	; 0x61
 8002da2:	2206      	movs	r2, #6
 8002da4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fee3 	bl	8006b7c <USB_HC_Halt>
 8002db6:	e0af      	b.n	8002f18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dce:	d11b      	bne.n	8002e08 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3361      	adds	r3, #97	; 0x61
 8002df2:	2207      	movs	r2, #7
 8002df4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 febb 	bl	8006b7c <USB_HC_Halt>
 8002e06:	e087      	b.n	8002f18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d109      	bne.n	8002e32 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	6093      	str	r3, [r2, #8]
 8002e30:	e072      	b.n	8002f18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d11a      	bne.n	8002e7e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	461a      	mov	r2, r3
 8002e56:	2308      	movs	r3, #8
 8002e58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3361      	adds	r3, #97	; 0x61
 8002e68:	2205      	movs	r2, #5
 8002e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fe80 	bl	8006b7c <USB_HC_Halt>
 8002e7c:	e04c      	b.n	8002f18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e94:	d11b      	bne.n	8002ece <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	; 0x61
 8002eb8:	2208      	movs	r2, #8
 8002eba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fe58 	bl	8006b7c <USB_HC_Halt>
 8002ecc:	e024      	b.n	8002f18 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d119      	bne.n	8002f18 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3361      	adds	r3, #97	; 0x61
 8002f04:	2206      	movs	r2, #6
 8002f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fe32 	bl	8006b7c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2e:	d112      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fe1e 	bl	8006b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f52:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f54:	e24e      	b.n	80033f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 80df 	bne.w	800312c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d019      	beq.n	8002faa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3348      	adds	r3, #72	; 0x48
 8002f84:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0159      	lsls	r1, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	202c      	movs	r0, #44	; 0x2c
 8002fa0:	fb00 f303 	mul.w	r3, r0, r3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3350      	adds	r3, #80	; 0x50
 8002fa8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3361      	adds	r3, #97	; 0x61
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	335c      	adds	r3, #92	; 0x5c
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2301      	movs	r3, #1
 8002fde:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	333f      	adds	r3, #63	; 0x3f
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	333f      	adds	r3, #63	; 0x3f
 8003002:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003004:	2b02      	cmp	r3, #2
 8003006:	d111      	bne.n	800302c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f003 fdb2 	bl	8006b7c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	461a      	mov	r2, r3
 8003026:	2310      	movs	r3, #16
 8003028:	6093      	str	r3, [r2, #8]
 800302a:	e03a      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	333f      	adds	r3, #63	; 0x3f
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d009      	beq.n	8003054 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	333f      	adds	r3, #63	; 0x3f
 800304e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003050:	2b01      	cmp	r3, #1
 8003052:	d126      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	440a      	add	r2, r1
 800306a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003072:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3360      	adds	r3, #96	; 0x60
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	b2d9      	uxtb	r1, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	202c      	movs	r0, #44	; 0x2c
 8003090:	fb00 f303 	mul.w	r3, r0, r3
 8003094:	4413      	add	r3, r2
 8003096:	3360      	adds	r3, #96	; 0x60
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f005 f867 	bl	8008170 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d12b      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3348      	adds	r3, #72	; 0x48
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	202c      	movs	r0, #44	; 0x2c
 80030c0:	fb00 f202 	mul.w	r2, r0, r2
 80030c4:	440a      	add	r2, r1
 80030c6:	3240      	adds	r2, #64	; 0x40
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 818e 	beq.w	80033f4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3354      	adds	r3, #84	; 0x54
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2d8      	uxtb	r0, r3
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3354      	adds	r3, #84	; 0x54
 80030fc:	4602      	mov	r2, r0
 80030fe:	701a      	strb	r2, [r3, #0]
}
 8003100:	e178      	b.n	80033f4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3354      	adds	r3, #84	; 0x54
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	f083 0301 	eor.w	r3, r3, #1
 8003116:	b2d8      	uxtb	r0, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3354      	adds	r3, #84	; 0x54
 8003126:	4602      	mov	r2, r0
 8003128:	701a      	strb	r2, [r3, #0]
}
 800312a:	e163      	b.n	80033f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	f040 80f6 	bne.w	8003330 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3361      	adds	r3, #97	; 0x61
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d109      	bne.n	800316c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3360      	adds	r3, #96	; 0x60
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e0c9      	b.n	8003300 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3361      	adds	r3, #97	; 0x61
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d109      	bne.n	8003194 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3360      	adds	r3, #96	; 0x60
 800318e:	2205      	movs	r2, #5
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e0b5      	b.n	8003300 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3361      	adds	r3, #97	; 0x61
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b06      	cmp	r3, #6
 80031a6:	d009      	beq.n	80031bc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3361      	adds	r3, #97	; 0x61
 80031b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d150      	bne.n	800325e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	335c      	adds	r3, #92	; 0x5c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	202c      	movs	r0, #44	; 0x2c
 80031d4:	fb00 f303 	mul.w	r3, r0, r3
 80031d8:	440b      	add	r3, r1
 80031da:	335c      	adds	r3, #92	; 0x5c
 80031dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	335c      	adds	r3, #92	; 0x5c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d912      	bls.n	8003218 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	335c      	adds	r3, #92	; 0x5c
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3360      	adds	r3, #96	; 0x60
 8003212:	2204      	movs	r2, #4
 8003214:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003216:	e073      	b.n	8003300 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3360      	adds	r3, #96	; 0x60
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003240:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003248:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800325c:	e050      	b.n	8003300 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	3361      	adds	r3, #97	; 0x61
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d122      	bne.n	80032b8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3360      	adds	r3, #96	; 0x60
 8003280:	2202      	movs	r2, #2
 8003282:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800329a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e023      	b.n	8003300 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	3361      	adds	r3, #97	; 0x61
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b07      	cmp	r3, #7
 80032ca:	d119      	bne.n	8003300 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	335c      	adds	r3, #92	; 0x5c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	202c      	movs	r0, #44	; 0x2c
 80032e4:	fb00 f303 	mul.w	r3, r0, r3
 80032e8:	440b      	add	r3, r1
 80032ea:	335c      	adds	r3, #92	; 0x5c
 80032ec:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3360      	adds	r3, #96	; 0x60
 80032fc:	2204      	movs	r2, #4
 80032fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4413      	add	r3, r2
 8003308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330c:	461a      	mov	r2, r3
 800330e:	2302      	movs	r3, #2
 8003310:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	b2d9      	uxtb	r1, r3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	202c      	movs	r0, #44	; 0x2c
 800331c:	fb00 f303 	mul.w	r3, r0, r3
 8003320:	4413      	add	r3, r2
 8003322:	3360      	adds	r3, #96	; 0x60
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f004 ff21 	bl	8008170 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800332e:	e061      	b.n	80033f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b10      	cmp	r3, #16
 8003344:	d156      	bne.n	80033f4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	333f      	adds	r3, #63	; 0x3f
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d111      	bne.n	800337e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	335c      	adds	r3, #92	; 0x5c
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fc00 	bl	8006b7c <USB_HC_Halt>
 800337c:	e031      	b.n	80033e2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	333f      	adds	r3, #63	; 0x3f
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	333f      	adds	r3, #63	; 0x3f
 80033a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d11d      	bne.n	80033e2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	335c      	adds	r3, #92	; 0x5c
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d110      	bne.n	80033e2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3361      	adds	r3, #97	; 0x61
 80033ce:	2203      	movs	r2, #3
 80033d0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 fbcd 	bl	8006b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	461a      	mov	r2, r3
 80033f0:	2310      	movs	r3, #16
 80033f2:	6093      	str	r3, [r2, #8]
}
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d11a      	bne.n	8003462 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	461a      	mov	r2, r3
 800343a:	2304      	movs	r3, #4
 800343c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3361      	adds	r3, #97	; 0x61
 800344c:	2206      	movs	r2, #6
 800344e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fb8e 	bl	8006b7c <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003460:	e331      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b20      	cmp	r3, #32
 8003476:	d12e      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	461a      	mov	r2, r3
 8003486:	2320      	movs	r3, #32
 8003488:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	333d      	adds	r3, #61	; 0x3d
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 8313 	bne.w	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	333d      	adds	r3, #61	; 0x3d
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3360      	adds	r3, #96	; 0x60
 80034c0:	2202      	movs	r2, #2
 80034c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 fb54 	bl	8006b7c <USB_HC_Halt>
}
 80034d4:	e2f7      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ec:	d112      	bne.n	8003514 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	461a      	mov	r2, r3
 80034fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003500:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f003 fb35 	bl	8006b7c <USB_HC_Halt>
}
 8003512:	e2d8      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d140      	bne.n	80035ac <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	335c      	adds	r3, #92	; 0x5c
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d111      	bne.n	8003576 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	333d      	adds	r3, #61	; 0x3d
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	461a      	mov	r2, r3
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	461a      	mov	r2, r3
 8003584:	2301      	movs	r3, #1
 8003586:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3361      	adds	r3, #97	; 0x61
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 fae9 	bl	8006b7c <USB_HC_Halt>
}
 80035aa:	e28c      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d12c      	bne.n	800361c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	212c      	movs	r1, #44	; 0x2c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	3361      	adds	r3, #97	; 0x61
 80035d0:	2204      	movs	r2, #4
 80035d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	333d      	adds	r3, #61	; 0x3d
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f003 faba 	bl	8006b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	461a      	mov	r2, r3
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	6093      	str	r3, [r2, #8]
}
 800361a:	e254      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b08      	cmp	r3, #8
 8003630:	d11a      	bne.n	8003668 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	2308      	movs	r3, #8
 8003642:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3361      	adds	r3, #97	; 0x61
 8003652:	2205      	movs	r2, #5
 8003654:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f003 fa8b 	bl	8006b7c <USB_HC_Halt>
}
 8003666:	e22e      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b10      	cmp	r3, #16
 800367c:	d140      	bne.n	8003700 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	335c      	adds	r3, #92	; 0x5c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3361      	adds	r3, #97	; 0x61
 800369e:	2203      	movs	r2, #3
 80036a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	333d      	adds	r3, #61	; 0x3d
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d112      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	333c      	adds	r3, #60	; 0x3c
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	333d      	adds	r3, #61	; 0x3d
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fa48 	bl	8006b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	461a      	mov	r2, r3
 80036fa:	2310      	movs	r3, #16
 80036fc:	6093      	str	r3, [r2, #8]
}
 80036fe:	e1e2      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d164      	bne.n	80037e0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d111      	bne.n	8003742 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3361      	adds	r3, #97	; 0x61
 800372c:	2206      	movs	r2, #6
 800372e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f003 fa1e 	bl	8006b7c <USB_HC_Halt>
 8003740:	e044      	b.n	80037cc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	202c      	movs	r0, #44	; 0x2c
 800375a:	fb00 f303 	mul.w	r3, r0, r3
 800375e:	440b      	add	r3, r1
 8003760:	335c      	adds	r3, #92	; 0x5c
 8003762:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	335c      	adds	r3, #92	; 0x5c
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d920      	bls.n	80037ba <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	335c      	adds	r3, #92	; 0x5c
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3360      	adds	r3, #96	; 0x60
 8003798:	2204      	movs	r2, #4
 800379a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	b2d9      	uxtb	r1, r3
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	202c      	movs	r0, #44	; 0x2c
 80037a6:	fb00 f303 	mul.w	r3, r0, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3360      	adds	r3, #96	; 0x60
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f004 fcdc 	bl	8008170 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037b8:	e008      	b.n	80037cc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	3360      	adds	r3, #96	; 0x60
 80037c8:	2202      	movs	r2, #2
 80037ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	6093      	str	r3, [r2, #8]
}
 80037de:	e172      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d11b      	bne.n	8003830 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	3361      	adds	r3, #97	; 0x61
 8003806:	2208      	movs	r2, #8
 8003808:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f003 f9b1 	bl	8006b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	461a      	mov	r2, r3
 8003828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800382c:	6093      	str	r3, [r2, #8]
}
 800382e:	e14a      	b.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	f040 813f 	bne.w	8003ac6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3361      	adds	r3, #97	; 0x61
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d17d      	bne.n	8003958 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3360      	adds	r3, #96	; 0x60
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	333f      	adds	r3, #63	; 0x3f
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d00a      	beq.n	8003898 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	333f      	adds	r3, #63	; 0x3f
 8003890:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003892:	2b03      	cmp	r3, #3
 8003894:	f040 8100 	bne.w	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	3355      	adds	r3, #85	; 0x55
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f083 0301 	eor.w	r3, r3, #1
 80038b4:	b2d8      	uxtb	r0, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3355      	adds	r3, #85	; 0x55
 80038c4:	4602      	mov	r2, r0
 80038c6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 80e3 	bne.w	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	334c      	adds	r3, #76	; 0x4c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80d8 	beq.w	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	334c      	adds	r3, #76	; 0x4c
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	202c      	movs	r0, #44	; 0x2c
 80038fe:	fb00 f202 	mul.w	r2, r0, r2
 8003902:	440a      	add	r2, r1
 8003904:	3240      	adds	r2, #64	; 0x40
 8003906:	8812      	ldrh	r2, [r2, #0]
 8003908:	4413      	add	r3, r2
 800390a:	3b01      	subs	r3, #1
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	202c      	movs	r0, #44	; 0x2c
 8003912:	fb00 f202 	mul.w	r2, r0, r2
 8003916:	440a      	add	r2, r1
 8003918:	3240      	adds	r2, #64	; 0x40
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80b5 	beq.w	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3355      	adds	r3, #85	; 0x55
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	f083 0301 	eor.w	r3, r3, #1
 8003942:	b2d8      	uxtb	r0, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3355      	adds	r3, #85	; 0x55
 8003952:	4602      	mov	r2, r0
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e09f      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	3361      	adds	r3, #97	; 0x61
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d109      	bne.n	8003980 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3360      	adds	r3, #96	; 0x60
 800397a:	2202      	movs	r2, #2
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e08b      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3361      	adds	r3, #97	; 0x61
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d109      	bne.n	80039a8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3360      	adds	r3, #96	; 0x60
 80039a2:	2202      	movs	r2, #2
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e077      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3361      	adds	r3, #97	; 0x61
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d109      	bne.n	80039d0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3360      	adds	r3, #96	; 0x60
 80039ca:	2205      	movs	r2, #5
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e063      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3361      	adds	r3, #97	; 0x61
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d009      	beq.n	80039f8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3361      	adds	r3, #97	; 0x61
 80039f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d14f      	bne.n	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	335c      	adds	r3, #92	; 0x5c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	202c      	movs	r0, #44	; 0x2c
 8003a10:	fb00 f303 	mul.w	r3, r0, r3
 8003a14:	440b      	add	r3, r1
 8003a16:	335c      	adds	r3, #92	; 0x5c
 8003a18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	335c      	adds	r3, #92	; 0x5c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d912      	bls.n	8003a54 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	335c      	adds	r3, #92	; 0x5c
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3360      	adds	r3, #96	; 0x60
 8003a4e:	2204      	movs	r2, #4
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e021      	b.n	8003a98 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	3360      	adds	r3, #96	; 0x60
 8003a62:	2202      	movs	r2, #2
 8003a64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a7c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a84:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	b2d9      	uxtb	r1, r3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	202c      	movs	r0, #44	; 0x2c
 8003ab4:	fb00 f303 	mul.w	r3, r0, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3360      	adds	r3, #96	; 0x60
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f004 fb55 	bl	8008170 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ac6:	bf00      	nop
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08a      	sub	sp, #40	; 0x28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	0c5b      	lsrs	r3, r3, #17
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b02:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d004      	beq.n	8003b14 <HCD_RXQLVL_IRQHandler+0x46>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	f000 80a9 	beq.w	8003c64 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b12:	e0aa      	b.n	8003c6a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80a6 	beq.w	8003c68 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3344      	adds	r3, #68	; 0x44
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 809b 	beq.w	8003c68 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3350      	adds	r3, #80	; 0x50
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	441a      	add	r2, r3
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	202c      	movs	r0, #44	; 0x2c
 8003b4c:	fb00 f303 	mul.w	r3, r0, r3
 8003b50:	440b      	add	r3, r1
 8003b52:	334c      	adds	r3, #76	; 0x4c
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d87a      	bhi.n	8003c50 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3344      	adds	r3, #68	; 0x44
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	b292      	uxth	r2, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f002 ff3e 	bl	80069f4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3344      	adds	r3, #68	; 0x44
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	202c      	movs	r0, #44	; 0x2c
 8003b92:	fb00 f303 	mul.w	r3, r0, r3
 8003b96:	440b      	add	r3, r1
 8003b98:	3344      	adds	r3, #68	; 0x44
 8003b9a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3350      	adds	r3, #80	; 0x50
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	441a      	add	r2, r3
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	202c      	movs	r0, #44	; 0x2c
 8003bb6:	fb00 f303 	mul.w	r3, r0, r3
 8003bba:	440b      	add	r3, r1
 8003bbc:	3350      	adds	r3, #80	; 0x50
 8003bbe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	0cdb      	lsrs	r3, r3, #19
 8003bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	212c      	movs	r1, #44	; 0x2c
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	3340      	adds	r3, #64	; 0x40
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d13c      	bne.n	8003c68 <HCD_RXQLVL_IRQHandler+0x19a>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d039      	beq.n	8003c68 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c0a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c12:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	3354      	adds	r3, #84	; 0x54
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f083 0301 	eor.w	r3, r3, #1
 8003c3a:	b2d8      	uxtb	r0, r3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3354      	adds	r3, #84	; 0x54
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	701a      	strb	r2, [r3, #0]
      break;
 8003c4e:	e00b      	b.n	8003c68 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3360      	adds	r3, #96	; 0x60
 8003c5e:	2204      	movs	r2, #4
 8003c60:	701a      	strb	r2, [r3, #0]
      break;
 8003c62:	e001      	b.n	8003c68 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c64:	bf00      	nop
 8003c66:	e000      	b.n	8003c6a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c68:	bf00      	nop
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	3728      	adds	r7, #40	; 0x28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c9e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d10b      	bne.n	8003cc2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f004 fa3f 	bl	8008138 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d132      	bne.n	8003d32 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f043 0308 	orr.w	r3, r3, #8
 8003cd2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d126      	bne.n	8003d2c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d113      	bne.n	8003d0e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cf0:	d106      	bne.n	8003d00 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 fef4 	bl	8006ae6 <USB_InitFSLSPClkSel>
 8003cfe:	e011      	b.n	8003d24 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f002 feed 	bl	8006ae6 <USB_InitFSLSPClkSel>
 8003d0c:	e00a      	b.n	8003d24 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d106      	bne.n	8003d24 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d22:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f004 fa35 	bl	8008194 <HAL_HCD_PortEnabled_Callback>
 8003d2a:	e002      	b.n	8003d32 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f004 fa3f 	bl	80081b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d103      	bne.n	8003d44 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f043 0320 	orr.w	r3, r3, #32
 8003d42:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e128      	b.n	8003fbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a90      	ldr	r2, [pc, #576]	; (8003fc4 <HAL_I2S_Init+0x26c>)
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fd fd5f 	bl	8001848 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003da0:	f023 030f 	bic.w	r3, r3, #15
 8003da4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2202      	movs	r2, #2
 8003dac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d060      	beq.n	8003e78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e001      	b.n	8003dc8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d802      	bhi.n	8003dd6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f001 fbea 	bl	80055b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ddc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de6:	d125      	bne.n	8003e34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	3305      	adds	r3, #5
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	e01f      	b.n	8003e52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	3305      	adds	r3, #5
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e00e      	b.n	8003e52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	3305      	adds	r3, #5
 8003e50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_I2S_Init+0x270>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e003      	b.n	8003e80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d902      	bls.n	8003e8c <HAL_I2S_Init+0x134>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2bff      	cmp	r3, #255	; 0xff
 8003e8a:	d907      	bls.n	8003e9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f043 0210 	orr.w	r2, r3, #16
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e08f      	b.n	8003fbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	ea42 0103 	orr.w	r1, r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6851      	ldr	r1, [r2, #4]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6892      	ldr	r2, [r2, #8]
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68d2      	ldr	r2, [r2, #12]
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6992      	ldr	r2, [r2, #24]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d161      	bne.n	8003fac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a38      	ldr	r2, [pc, #224]	; (8003fcc <HAL_I2S_Init+0x274>)
 8003eec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a37      	ldr	r2, [pc, #220]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_I2S_Init+0x1a4>
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003efa:	e001      	b.n	8003f00 <HAL_I2S_Init+0x1a8>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	4932      	ldr	r1, [pc, #200]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f08:	428a      	cmp	r2, r1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2S_Init+0x1b8>
 8003f0c:	4a31      	ldr	r2, [pc, #196]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003f0e:	e001      	b.n	8003f14 <HAL_I2S_Init+0x1bc>
 8003f10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f18:	f023 030f 	bic.w	r3, r3, #15
 8003f1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_I2S_Init+0x1d4>
 8003f28:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003f2a:	e001      	b.n	8003f30 <HAL_I2S_Init+0x1d8>
 8003f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f30:	2202      	movs	r2, #2
 8003f32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2S_Init+0x1ea>
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003f40:	e001      	b.n	8003f46 <HAL_I2S_Init+0x1ee>
 8003f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f52:	d003      	beq.n	8003f5c <HAL_I2S_Init+0x204>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e001      	b.n	8003f68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2S_Init+0x24c>
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2S_Init+0x250>
 8003fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa8:	897a      	ldrh	r2, [r7, #10]
 8003faa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	08004261 	.word	0x08004261
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	080043e9 	.word	0x080043e9
 8003fd0:	40003800 	.word	0x40003800
 8003fd4:	40003400 	.word	0x40003400

08003fd8 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_I2S_Receive+0x1c>
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0b4      	b.n	8004162 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2S_Receive+0x30>
 8004004:	2302      	movs	r3, #2
 8004006:	e0ac      	b.n	8004162 <HAL_I2S_Receive+0x18a>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d005      	beq.n	8004028 <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
 8004026:	e09c      	b.n	8004162 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2204      	movs	r2, #4
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d002      	beq.n	8004054 <HAL_I2S_Receive+0x7c>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10a      	bne.n	800406a <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	865a      	strh	r2, [r3, #50]	; 0x32
 8004068:	e005      	b.n	8004076 <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d007      	beq.n	8004096 <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004094:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a4:	d14f      	bne.n	8004146 <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 80040bc:	e043      	b.n	8004146 <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	2101      	movs	r1, #1
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f955 	bl	8004374 <I2S_WaitFlagStateUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00f      	beq.n	80040f0 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e038      	b.n	8004162 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	b292      	uxth	r2, r2
 80040fc:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d110      	bne.n	8004146 <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1b6      	bne.n	80040be <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	881a      	ldrh	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10e      	bne.n	80041fa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ffb8 	bl	800416a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	b292      	uxth	r2, r2
 8004216:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10e      	bne.n	8004258 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004248:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff93 	bl	800417e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b04      	cmp	r3, #4
 800427a:	d13a      	bne.n	80042f2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d109      	bne.n	800429a <I2S_IRQHandler+0x3a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d102      	bne.n	800429a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ffb4 	bl	8004202 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d126      	bne.n	80042f2 <I2S_IRQHandler+0x92>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d11f      	bne.n	80042f2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042c0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f043 0202 	orr.w	r2, r3, #2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff50 	bl	8004192 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d136      	bne.n	800436c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d109      	bne.n	800431c <I2S_IRQHandler+0xbc>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d102      	bne.n	800431c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff45 	bl	80041a6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b08      	cmp	r3, #8
 8004324:	d122      	bne.n	800436c <I2S_IRQHandler+0x10c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d11b      	bne.n	800436c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004342:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff ff13 	bl	8004192 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800436c:	bf00      	nop
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004384:	f7fd fe04 	bl	8001f90 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800438a:	e018      	b.n	80043be <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d014      	beq.n	80043be <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004394:	f7fd fdfc 	bl	8001f90 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d902      	bls.n	80043aa <I2S_WaitFlagStateUntilTimeout+0x36>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e00f      	b.n	80043de <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	bf0c      	ite	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	2300      	movne	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d1d7      	bne.n	800438c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a92      	ldr	r2, [pc, #584]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004402:	4b92      	ldr	r3, [pc, #584]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004404:	e001      	b.n	800440a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a8b      	ldr	r2, [pc, #556]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004420:	4b8a      	ldr	r3, [pc, #552]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004422:	e001      	b.n	8004428 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004434:	d004      	beq.n	8004440 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 8099 	bne.w	8004572 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d107      	bne.n	800445a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f925 	bl	80046a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9c8 	bl	8004804 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d13a      	bne.n	80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d035      	beq.n	80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004492:	4b6e      	ldr	r3, [pc, #440]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004494:	e001      	b.n	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4969      	ldr	r1, [pc, #420]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044a2:	428b      	cmp	r3, r1
 80044a4:	d101      	bne.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80044a6:	4b69      	ldr	r3, [pc, #420]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044a8:	e001      	b.n	80044ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80044aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f043 0202 	orr.w	r2, r3, #2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fe4f 	bl	8004192 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	f040 80c3 	bne.w	8004686 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80bd 	beq.w	8004686 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800451a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a49      	ldr	r2, [pc, #292]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004526:	4b49      	ldr	r3, [pc, #292]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004528:	e001      	b.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800452a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4944      	ldr	r1, [pc, #272]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004536:	428b      	cmp	r3, r1
 8004538:	d101      	bne.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800453a:	4b44      	ldr	r3, [pc, #272]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800453c:	e001      	b.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800453e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004542:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004546:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f043 0204 	orr.w	r2, r3, #4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fe11 	bl	8004192 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004570:	e089      	b.n	8004686 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d107      	bne.n	800458c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8be 	bl	8004708 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b01      	cmp	r3, #1
 8004594:	d107      	bne.n	80045a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8fd 	bl	80047a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d12f      	bne.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02a      	beq.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d6:	e001      	b.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4919      	ldr	r1, [pc, #100]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045e4:	428b      	cmp	r3, r1
 80045e6:	d101      	bne.n	80045ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045ea:	e001      	b.n	80045f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f043 0202 	orr.w	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fdc1 	bl	8004192 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b08      	cmp	r3, #8
 8004618:	d136      	bne.n	8004688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d031      	beq.n	8004688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a07      	ldr	r2, [pc, #28]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d101      	bne.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004630:	e001      	b.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4902      	ldr	r1, [pc, #8]	; (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463e:	428b      	cmp	r3, r1
 8004640:	d106      	bne.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004642:	4b02      	ldr	r3, [pc, #8]	; (800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004644:	e006      	b.n	8004654 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004646:	bf00      	nop
 8004648:	40003800 	.word	0x40003800
 800464c:	40003400 	.word	0x40003400
 8004650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004658:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004668:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f043 0204 	orr.w	r2, r3, #4
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fd87 	bl	8004192 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004684:	e000      	b.n	8004688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004686:	bf00      	nop
}
 8004688:	bf00      	nop
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	1c99      	adds	r1, r3, #2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6251      	str	r1, [r2, #36]	; 0x24
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d113      	bne.n	80046fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ffc9 	bl	8004690 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	1c99      	adds	r1, r3, #2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6251      	str	r1, [r2, #36]	; 0x24
 800471a:	8819      	ldrh	r1, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <I2SEx_TxISR_I2SExt+0x90>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <I2SEx_TxISR_I2SExt+0x22>
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <I2SEx_TxISR_I2SExt+0x94>)
 8004728:	e001      	b.n	800472e <I2SEx_TxISR_I2SExt+0x26>
 800472a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800472e:	460a      	mov	r2, r1
 8004730:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d121      	bne.n	800478e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a12      	ldr	r2, [pc, #72]	; (8004798 <I2SEx_TxISR_I2SExt+0x90>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <I2SEx_TxISR_I2SExt+0x50>
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <I2SEx_TxISR_I2SExt+0x94>)
 8004756:	e001      	b.n	800475c <I2SEx_TxISR_I2SExt+0x54>
 8004758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	490d      	ldr	r1, [pc, #52]	; (8004798 <I2SEx_TxISR_I2SExt+0x90>)
 8004764:	428b      	cmp	r3, r1
 8004766:	d101      	bne.n	800476c <I2SEx_TxISR_I2SExt+0x64>
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <I2SEx_TxISR_I2SExt+0x94>)
 800476a:	e001      	b.n	8004770 <I2SEx_TxISR_I2SExt+0x68>
 800476c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004770:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004774:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff81 	bl	8004690 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40003800 	.word	0x40003800
 800479c:	40003400 	.word	0x40003400

080047a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68d8      	ldr	r0, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	1c99      	adds	r1, r3, #2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047b8:	b282      	uxth	r2, r0
 80047ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d113      	bne.n	80047fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff ff4a 	bl	8004690 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a20      	ldr	r2, [pc, #128]	; (8004894 <I2SEx_RxISR_I2SExt+0x90>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d101      	bne.n	800481a <I2SEx_RxISR_I2SExt+0x16>
 8004816:	4b20      	ldr	r3, [pc, #128]	; (8004898 <I2SEx_RxISR_I2SExt+0x94>)
 8004818:	e001      	b.n	800481e <I2SEx_RxISR_I2SExt+0x1a>
 800481a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800481e:	68d8      	ldr	r0, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	1c99      	adds	r1, r3, #2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	62d1      	str	r1, [r2, #44]	; 0x2c
 800482a:	b282      	uxth	r2, r0
 800482c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d121      	bne.n	800488a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <I2SEx_RxISR_I2SExt+0x90>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d101      	bne.n	8004854 <I2SEx_RxISR_I2SExt+0x50>
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <I2SEx_RxISR_I2SExt+0x94>)
 8004852:	e001      	b.n	8004858 <I2SEx_RxISR_I2SExt+0x54>
 8004854:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	490d      	ldr	r1, [pc, #52]	; (8004894 <I2SEx_RxISR_I2SExt+0x90>)
 8004860:	428b      	cmp	r3, r1
 8004862:	d101      	bne.n	8004868 <I2SEx_RxISR_I2SExt+0x64>
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <I2SEx_RxISR_I2SExt+0x94>)
 8004866:	e001      	b.n	800486c <I2SEx_RxISR_I2SExt+0x68>
 8004868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800486c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004870:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ff03 	bl	8004690 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40003800 	.word	0x40003800
 8004898:	40003400 	.word	0x40003400

0800489c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e267      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d075      	beq.n	80049a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ba:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d00c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c6:	4b85      	ldr	r3, [pc, #532]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d112      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b82      	ldr	r3, [pc, #520]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d10b      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	4b7e      	ldr	r3, [pc, #504]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05b      	beq.n	80049a4 <HAL_RCC_OscConfig+0x108>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d157      	bne.n	80049a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e242      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d106      	bne.n	8004910 <HAL_RCC_OscConfig+0x74>
 8004902:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a75      	ldr	r2, [pc, #468]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e01d      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x98>
 800491a:	4b70      	ldr	r3, [pc, #448]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a6f      	ldr	r2, [pc, #444]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b6d      	ldr	r3, [pc, #436]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6c      	ldr	r2, [pc, #432]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004934:	4b69      	ldr	r3, [pc, #420]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a68      	ldr	r2, [pc, #416]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b66      	ldr	r3, [pc, #408]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a65      	ldr	r2, [pc, #404]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fd fb1c 	bl	8001f90 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495c:	f7fd fb18 	bl	8001f90 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e207      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b5b      	ldr	r3, [pc, #364]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0xc0>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fd fb08 	bl	8001f90 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fd fb04 	bl	8001f90 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1f3      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b51      	ldr	r3, [pc, #324]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0xe8>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d063      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b2:	4b4a      	ldr	r3, [pc, #296]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049be:	4b47      	ldr	r3, [pc, #284]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d11c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b44      	ldr	r3, [pc, #272]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	4b41      	ldr	r3, [pc, #260]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e1c7      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4937      	ldr	r1, [pc, #220]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	e03a      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0c:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_RCC_OscConfig+0x244>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fd fabd 	bl	8001f90 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1a:	f7fd fab9 	bl	8001f90 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e1a8      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4b28      	ldr	r3, [pc, #160]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4925      	ldr	r1, [pc, #148]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_RCC_OscConfig+0x244>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd fa9c 	bl	8001f90 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fd fa98 	bl	8001f90 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e187      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d036      	beq.n	8004af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <HAL_RCC_OscConfig+0x248>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7fd fa7c 	bl	8001f90 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fd fa78 	bl	8001f90 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e167      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x200>
 8004aba:	e01b      	b.n	8004af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_OscConfig+0x248>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac2:	f7fd fa65 	bl	8001f90 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	e00e      	b.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aca:	f7fd fa61 	bl	8001f90 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d907      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e150      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	4b88      	ldr	r3, [pc, #544]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ea      	bne.n	8004aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8097 	beq.w	8004c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b06:	4b81      	ldr	r3, [pc, #516]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	4b7d      	ldr	r3, [pc, #500]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	4a7c      	ldr	r2, [pc, #496]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40
 8004b22:	4b7a      	ldr	r3, [pc, #488]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b32:	4b77      	ldr	r3, [pc, #476]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d118      	bne.n	8004b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3e:	4b74      	ldr	r3, [pc, #464]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a73      	ldr	r2, [pc, #460]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fa21 	bl	8001f90 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fd fa1d 	bl	8001f90 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e10c      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2ea>
 8004b78:	4b64      	ldr	r3, [pc, #400]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	4a63      	ldr	r2, [pc, #396]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6713      	str	r3, [r2, #112]	; 0x70
 8004b84:	e01c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x324>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x30c>
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b94:	f043 0304 	orr.w	r3, r3, #4
 8004b98:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9a:	4b5c      	ldr	r3, [pc, #368]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	4a5b      	ldr	r2, [pc, #364]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x324>
 8004ba8:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a57      	ldr	r2, [pc, #348]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	4b55      	ldr	r3, [pc, #340]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a54      	ldr	r2, [pc, #336]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 0304 	bic.w	r3, r3, #4
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fd f9e2 	bl	8001f90 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fd f9de 	bl	8001f90 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0cb      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	4b49      	ldr	r3, [pc, #292]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0ee      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x334>
 8004bf2:	e014      	b.n	8004c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf4:	f7fd f9cc 	bl	8001f90 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fd f9c8 	bl	8001f90 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0b5      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ee      	bne.n	8004bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c24:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	4a38      	ldr	r2, [pc, #224]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a1 	beq.w	8004d7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3a:	4b34      	ldr	r3, [pc, #208]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d05c      	beq.n	8004d00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d141      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7fd f99c 	bl	8001f90 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fd f998 	bl	8001f90 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e087      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	3b01      	subs	r3, #1
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	491b      	ldr	r1, [pc, #108]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fd f971 	bl	8001f90 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb2:	f7fd f96d 	bl	8001f90 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e05c      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x416>
 8004cd0:	e054      	b.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7fd f95a 	bl	8001f90 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fd f956 	bl	8001f90 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e045      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x444>
 8004cfe:	e03d      	b.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e038      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40007000 	.word	0x40007000
 8004d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x4ec>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d028      	beq.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d121      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d11a      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	3b01      	subs	r3, #1
 8004d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0cc      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b68      	ldr	r3, [pc, #416]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d90c      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b63      	ldr	r3, [pc, #396]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b8      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de0:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a58      	ldr	r2, [pc, #352]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df8:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b50      	ldr	r3, [pc, #320]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	494d      	ldr	r1, [pc, #308]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d044      	beq.n	8004eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e06f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e067      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4934      	ldr	r1, [pc, #208]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f888 	bl	8001f90 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd f884 	bl	8001f90 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d20c      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e032      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4916      	ldr	r1, [pc, #88]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	490e      	ldr	r1, [pc, #56]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f12:	f000 f821 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004f16:	4602      	mov	r2, r0
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	490a      	ldr	r1, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	5ccb      	ldrb	r3, [r1, r3]
 8004f26:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fc fe44 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023c00 	.word	0x40023c00
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	0800cc08 	.word	0x0800cc08
 8004f50:	20000000 	.word	0x20000000
 8004f54:	20000004 	.word	0x20000004

08004f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f5c:	b094      	sub	sp, #80	; 0x50
 8004f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	647b      	str	r3, [r7, #68]	; 0x44
 8004f64:	2300      	movs	r3, #0
 8004f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f68:	2300      	movs	r3, #0
 8004f6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f70:	4b79      	ldr	r3, [pc, #484]	; (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d00d      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x40>
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	f200 80e1 	bhi.w	8005144 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x34>
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d003      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f8a:	e0db      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b73      	ldr	r3, [pc, #460]	; (800515c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f90:	e0db      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f92:	4b73      	ldr	r3, [pc, #460]	; (8005160 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f96:	e0d8      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa2:	4b6d      	ldr	r3, [pc, #436]	; (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d063      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fae:	4b6a      	ldr	r3, [pc, #424]	; (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fca:	4622      	mov	r2, r4
 8004fcc:	462b      	mov	r3, r5
 8004fce:	f04f 0000 	mov.w	r0, #0
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	0159      	lsls	r1, r3, #5
 8004fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fdc:	0150      	lsls	r0, r2, #5
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	1a51      	subs	r1, r2, r1
 8004fe6:	6139      	str	r1, [r7, #16]
 8004fe8:	4629      	mov	r1, r5
 8004fea:	eb63 0301 	sbc.w	r3, r3, r1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	018b      	lsls	r3, r1, #6
 8005000:	4651      	mov	r1, sl
 8005002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005006:	4651      	mov	r1, sl
 8005008:	018a      	lsls	r2, r1, #6
 800500a:	4651      	mov	r1, sl
 800500c:	ebb2 0801 	subs.w	r8, r2, r1
 8005010:	4659      	mov	r1, fp
 8005012:	eb63 0901 	sbc.w	r9, r3, r1
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502a:	4690      	mov	r8, r2
 800502c:	4699      	mov	r9, r3
 800502e:	4623      	mov	r3, r4
 8005030:	eb18 0303 	adds.w	r3, r8, r3
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	462b      	mov	r3, r5
 8005038:	eb49 0303 	adc.w	r3, r9, r3
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800504a:	4629      	mov	r1, r5
 800504c:	024b      	lsls	r3, r1, #9
 800504e:	4621      	mov	r1, r4
 8005050:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005054:	4621      	mov	r1, r4
 8005056:	024a      	lsls	r2, r1, #9
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505e:	2200      	movs	r2, #0
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
 8005062:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005064:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005068:	f7fb fe1e 	bl	8000ca8 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005074:	e058      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005076:	4b38      	ldr	r3, [pc, #224]	; (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	099b      	lsrs	r3, r3, #6
 800507c:	2200      	movs	r2, #0
 800507e:	4618      	mov	r0, r3
 8005080:	4611      	mov	r1, r2
 8005082:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005086:	623b      	str	r3, [r7, #32]
 8005088:	2300      	movs	r3, #0
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
 800508c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	f04f 0000 	mov.w	r0, #0
 8005098:	f04f 0100 	mov.w	r1, #0
 800509c:	0159      	lsls	r1, r3, #5
 800509e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a2:	0150      	lsls	r0, r2, #5
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4641      	mov	r1, r8
 80050aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ae:	4649      	mov	r1, r9
 80050b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050c8:	ebb2 040a 	subs.w	r4, r2, sl
 80050cc:	eb63 050b 	sbc.w	r5, r3, fp
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	00eb      	lsls	r3, r5, #3
 80050da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050de:	00e2      	lsls	r2, r4, #3
 80050e0:	4614      	mov	r4, r2
 80050e2:	461d      	mov	r5, r3
 80050e4:	4643      	mov	r3, r8
 80050e6:	18e3      	adds	r3, r4, r3
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	464b      	mov	r3, r9
 80050ec:	eb45 0303 	adc.w	r3, r5, r3
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fe:	4629      	mov	r1, r5
 8005100:	028b      	lsls	r3, r1, #10
 8005102:	4621      	mov	r1, r4
 8005104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005108:	4621      	mov	r1, r4
 800510a:	028a      	lsls	r2, r1, #10
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	2200      	movs	r2, #0
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	61fa      	str	r2, [r7, #28]
 8005118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800511c:	f7fb fdc4 	bl	8000ca8 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4613      	mov	r3, r2
 8005126:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	3301      	adds	r3, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800513a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005142:	e002      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_GetSysClockFreq+0x204>)
 8005146:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800514c:	4618      	mov	r0, r3
 800514e:	3750      	adds	r7, #80	; 0x50
 8005150:	46bd      	mov	sp, r7
 8005152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800
 800515c:	00f42400 	.word	0x00f42400
 8005160:	007a1200 	.word	0x007a1200

08005164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCC_GetHCLKFreq+0x14>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000000 	.word	0x20000000

0800517c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005180:	f7ff fff0 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	0a9b      	lsrs	r3, r3, #10
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4903      	ldr	r1, [pc, #12]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023800 	.word	0x40023800
 80051a0:	0800cc18 	.word	0x0800cc18

080051a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051a8:	f7ff ffdc 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0b5b      	lsrs	r3, r3, #13
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4903      	ldr	r1, [pc, #12]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0800cc18 	.word	0x0800cc18

080051cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	220f      	movs	r2, #15
 80051da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0203 	and.w	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051e8:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	08db      	lsrs	r3, r3, #3
 8005206:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_RCC_GetClockConfig+0x60>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 020f 	and.w	r2, r3, #15
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	40023c00 	.word	0x40023c00

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10b      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d075      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005264:	4b91      	ldr	r3, [pc, #580]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800526a:	f7fc fe91 	bl	8001f90 <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005272:	f7fc fe8d 	bl	8001f90 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e189      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005284:	4b8a      	ldr	r3, [pc, #552]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	019a      	lsls	r2, r3, #6
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	071b      	lsls	r3, r3, #28
 80052a8:	4981      	ldr	r1, [pc, #516]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01f      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052bc:	4b7c      	ldr	r3, [pc, #496]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c2:	0f1b      	lsrs	r3, r3, #28
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	019a      	lsls	r2, r3, #6
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	431a      	orrs	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	4974      	ldr	r1, [pc, #464]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052e4:	4b72      	ldr	r3, [pc, #456]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ea:	f023 021f 	bic.w	r2, r3, #31
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	496e      	ldr	r1, [pc, #440]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	019a      	lsls	r2, r3, #6
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	071b      	lsls	r3, r3, #28
 800531c:	4964      	ldr	r1, [pc, #400]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005324:	4b61      	ldr	r3, [pc, #388]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800532a:	f7fc fe31 	bl	8001f90 <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005332:	f7fc fe2d 	bl	8001f90 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e129      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005344:	4b5a      	ldr	r3, [pc, #360]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005364:	2b00      	cmp	r3, #0
 8005366:	d079      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005368:	4b52      	ldr	r3, [pc, #328]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800536e:	f7fc fe0f 	bl	8001f90 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005376:	f7fc fe0b 	bl	8001f90 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e107      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005388:	4b49      	ldr	r3, [pc, #292]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005394:	d0ef      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d020      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053a2:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	0f1b      	lsrs	r3, r3, #28
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	019a      	lsls	r2, r3, #6
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	431a      	orrs	r2, r3
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	071b      	lsls	r3, r3, #28
 80053c2:	493b      	ldr	r1, [pc, #236]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053ca:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	3b01      	subs	r3, #1
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	4934      	ldr	r1, [pc, #208]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01e      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053f0:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	0e1b      	lsrs	r3, r3, #24
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	019a      	lsls	r2, r3, #6
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	071b      	lsls	r3, r3, #28
 8005410:	4927      	ldr	r1, [pc, #156]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	4922      	ldr	r1, [pc, #136]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800542e:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005434:	f7fc fdac 	bl	8001f90 <HAL_GetTick>
 8005438:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800543a:	e008      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800543c:	f7fc fda8 	bl	8001f90 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e0a4      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545a:	d1ef      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 808b 	beq.w	8005580 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a0f      	ldr	r2, [pc, #60]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005478:	6413      	str	r3, [r2, #64]	; 0x40
 800547a:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a0b      	ldr	r2, [pc, #44]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800548c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005490:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005492:	f7fc fd7d 	bl	8001f90 <HAL_GetTick>
 8005496:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005498:	e010      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800549a:	f7fc fd79 	bl	8001f90 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d909      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e075      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80054ac:	42470068 	.word	0x42470068
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470070 	.word	0x42470070
 80054b8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054bc:	4b38      	ldr	r3, [pc, #224]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0e8      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054c8:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02f      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d028      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054e6:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054f0:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054f6:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054fc:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005502:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b01      	cmp	r3, #1
 800550c:	d114      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800550e:	f7fc fd3f 	bl	8001f90 <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005514:	e00a      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005516:	f7fc fd3b 	bl	8001f90 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e035      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552c:	4b1d      	ldr	r3, [pc, #116]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ee      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005544:	d10d      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005546:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555a:	4912      	ldr	r1, [pc, #72]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800555c:	4313      	orrs	r3, r2
 800555e:	608b      	str	r3, [r1, #8]
 8005560:	e005      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005568:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800556c:	6093      	str	r3, [r2, #8]
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005570:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557a:	490a      	ldr	r1, [pc, #40]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800557c:	4313      	orrs	r3, r2
 800557e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005594:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40007000 	.word	0x40007000
 80055a4:	40023800 	.word	0x40023800
 80055a8:	42470e40 	.word	0x42470e40
 80055ac:	424711e0 	.word	0x424711e0

080055b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d13e      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055ce:	4b23      	ldr	r3, [pc, #140]	; (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d12f      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055e6:	617b      	str	r3, [r7, #20]
          break;
 80055e8:	e02f      	b.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055ea:	4b1c      	ldr	r3, [pc, #112]	; (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f6:	d108      	bne.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055f8:	4b18      	ldr	r3, [pc, #96]	; (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	e007      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800561c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005634:	0f1b      	lsrs	r3, r3, #28
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
          break;
 8005642:	e002      	b.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]
          break;
 8005648:	bf00      	nop
        }
      }
      break;
 800564a:	bf00      	nop
    }
  }
  return frequency;
 800564c:	697b      	ldr	r3, [r7, #20]
}
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800
 8005660:	00bb8000 	.word	0x00bb8000
 8005664:	007a1200 	.word	0x007a1200
 8005668:	00f42400 	.word	0x00f42400

0800566c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e025      	b.n	80056cc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fc fa89 	bl	8001bac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f001 f855 	bl	800675c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	f001 f8aa 	bl	8006816 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e041      	b.n	800576a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fc f95a 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f000 fa96 	bl	8005c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e04e      	b.n	800582a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a23      	ldr	r2, [pc, #140]	; (8005838 <HAL_TIM_Base_Start_IT+0xc4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d01d      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1f      	ldr	r2, [pc, #124]	; (800583c <HAL_TIM_Base_Start_IT+0xc8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <HAL_TIM_Base_Start_IT+0xcc>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <HAL_TIM_Base_Start_IT+0xd0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <HAL_TIM_Base_Start_IT+0xd4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a19      	ldr	r2, [pc, #100]	; (800584c <HAL_TIM_Base_Start_IT+0xd8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x80>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a18      	ldr	r2, [pc, #96]	; (8005850 <HAL_TIM_Base_Start_IT+0xdc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d111      	bne.n	8005818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b06      	cmp	r3, #6
 8005804:	d010      	beq.n	8005828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005816:	e007      	b.n	8005828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40010400 	.word	0x40010400
 800584c:	40014000 	.word	0x40014000
 8005850:	40001800 	.word	0x40001800

08005854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b02      	cmp	r3, #2
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b02      	cmp	r3, #2
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0202 	mvn.w	r2, #2
 8005880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9b5 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f9a7 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f9b8 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0204 	mvn.w	r2, #4
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f98b 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f97d 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f98e 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b08      	cmp	r3, #8
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0208 	mvn.w	r2, #8
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2204      	movs	r2, #4
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f961 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f953 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f964 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b10      	cmp	r3, #16
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b10      	cmp	r3, #16
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0210 	mvn.w	r2, #16
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2208      	movs	r2, #8
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f937 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f929 	bl	8005bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f93a 	bl	8005c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d10e      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d107      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0201 	mvn.w	r2, #1
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fb fed2 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d10e      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d107      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fae0 	bl	8005fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d10e      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d107      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8ff 	bl	8005c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d10e      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d107      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0220 	mvn.w	r2, #32
 8005a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 faaa 	bl	8005fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_ConfigClockSource+0x1c>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e0b4      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x186>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab8:	d03e      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0xd4>
 8005aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abe:	f200 8087 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac6:	f000 8086 	beq.w	8005bd6 <HAL_TIM_ConfigClockSource+0x172>
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ace:	d87f      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d01a      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xa6>
 8005ad4:	2b70      	cmp	r3, #112	; 0x70
 8005ad6:	d87b      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d050      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x11a>
 8005adc:	2b60      	cmp	r3, #96	; 0x60
 8005ade:	d877      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b50      	cmp	r3, #80	; 0x50
 8005ae2:	d03c      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0xfa>
 8005ae4:	2b50      	cmp	r3, #80	; 0x50
 8005ae6:	d873      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d058      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x13a>
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d86f      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d064      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	2b30      	cmp	r3, #48	; 0x30
 8005af6:	d86b      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d060      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d867      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d05c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d05a      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005b08:	e062      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6899      	ldr	r1, [r3, #8]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f000 f9ad 	bl	8005e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	609a      	str	r2, [r3, #8]
      break;
 8005b36:	e04f      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6899      	ldr	r1, [r3, #8]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f000 f996 	bl	8005e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b5a:	609a      	str	r2, [r3, #8]
      break;
 8005b5c:	e03c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 f90a 	bl	8005d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2150      	movs	r1, #80	; 0x50
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f963 	bl	8005e42 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e02c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 f929 	bl	8005de2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2160      	movs	r1, #96	; 0x60
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f953 	bl	8005e42 <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e01c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 f8ea 	bl	8005d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2140      	movs	r1, #64	; 0x40
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f943 	bl	8005e42 <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e00c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f000 f93a 	bl	8005e42 <TIM_ITRx_SetConfig>
      break;
 8005bce:	e003      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a40      	ldr	r2, [pc, #256]	; (8005d58 <TIM_Base_SetConfig+0x114>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c62:	d00f      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a3d      	ldr	r2, [pc, #244]	; (8005d5c <TIM_Base_SetConfig+0x118>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a3c      	ldr	r2, [pc, #240]	; (8005d60 <TIM_Base_SetConfig+0x11c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <TIM_Base_SetConfig+0x120>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3a      	ldr	r2, [pc, #232]	; (8005d68 <TIM_Base_SetConfig+0x124>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d108      	bne.n	8005c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <TIM_Base_SetConfig+0x114>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d02b      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca4:	d027      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <TIM_Base_SetConfig+0x118>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d023      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2b      	ldr	r2, [pc, #172]	; (8005d60 <TIM_Base_SetConfig+0x11c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01f      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <TIM_Base_SetConfig+0x120>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01b      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a29      	ldr	r2, [pc, #164]	; (8005d68 <TIM_Base_SetConfig+0x124>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d017      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a28      	ldr	r2, [pc, #160]	; (8005d6c <TIM_Base_SetConfig+0x128>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a27      	ldr	r2, [pc, #156]	; (8005d70 <TIM_Base_SetConfig+0x12c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a26      	ldr	r2, [pc, #152]	; (8005d74 <TIM_Base_SetConfig+0x130>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <TIM_Base_SetConfig+0x134>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <TIM_Base_SetConfig+0x138>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <TIM_Base_SetConfig+0x13c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <TIM_Base_SetConfig+0x114>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_Base_SetConfig+0xf8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a0c      	ldr	r2, [pc, #48]	; (8005d68 <TIM_Base_SetConfig+0x124>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d103      	bne.n	8005d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	615a      	str	r2, [r3, #20]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40010400 	.word	0x40010400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800
 8005d78:	40001800 	.word	0x40001800
 8005d7c:	40001c00 	.word	0x40001c00
 8005d80:	40002000 	.word	0x40002000

08005d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 030a 	bic.w	r3, r3, #10
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b087      	sub	sp, #28
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0210 	bic.w	r2, r3, #16
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	031b      	lsls	r3, r3, #12
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f043 0307 	orr.w	r3, r3, #7
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	021a      	lsls	r2, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	609a      	str	r2, [r3, #8]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e05a      	b.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d022      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1c:	d01d      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d018      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d013      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00e      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a15      	ldr	r2, [pc, #84]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10c      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40001800 	.word	0x40001800

08005fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e03f      	b.n	800606a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fcfa 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2224      	movs	r2, #36	; 0x24
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800601a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f929 	bl	8006274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b08a      	sub	sp, #40	; 0x28
 8006076:	af02      	add	r7, sp, #8
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b20      	cmp	r3, #32
 8006090:	d17c      	bne.n	800618c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_UART_Transmit+0x2c>
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e075      	b.n	800618e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_UART_Transmit+0x3e>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e06e      	b.n	800618e <HAL_UART_Transmit+0x11c>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2221      	movs	r2, #33	; 0x21
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c6:	f7fb ff63 	bl	8001f90 <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e0:	d108      	bne.n	80060f4 <HAL_UART_Transmit+0x82>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e003      	b.n	80060fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006104:	e02a      	b.n	800615c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f840 	bl	8006196 <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e036      	b.n	800618e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10b      	bne.n	800613e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	3302      	adds	r3, #2
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e007      	b.n	800614e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1cf      	bne.n	8006106 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2200      	movs	r2, #0
 800616e:	2140      	movs	r1, #64	; 0x40
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f810 	bl	8006196 <UART_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e006      	b.n	800618e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3720      	adds	r7, #32
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b090      	sub	sp, #64	; 0x40
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	4613      	mov	r3, r2
 80061a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a6:	e050      	b.n	800624a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d04c      	beq.n	800624a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80061b6:	f7fb feeb 	bl	8001f90 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d241      	bcs.n	800624a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061e6:	637a      	str	r2, [r7, #52]	; 0x34
 80061e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e5      	bne.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3314      	adds	r3, #20
 8006200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	613b      	str	r3, [r7, #16]
   return(result);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	63bb      	str	r3, [r7, #56]	; 0x38
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3314      	adds	r3, #20
 8006218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621a:	623a      	str	r2, [r7, #32]
 800621c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	69f9      	ldr	r1, [r7, #28]
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	61bb      	str	r3, [r7, #24]
   return(result);
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e5      	bne.n	80061fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e00f      	b.n	800626a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4013      	ands	r3, r2
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	429a      	cmp	r2, r3
 8006258:	bf0c      	ite	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	2300      	movne	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	429a      	cmp	r2, r3
 8006266:	d09f      	beq.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3740      	adds	r7, #64	; 0x40
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006278:	b0c0      	sub	sp, #256	; 0x100
 800627a:	af00      	add	r7, sp, #0
 800627c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006290:	68d9      	ldr	r1, [r3, #12]
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	ea40 0301 	orr.w	r3, r0, r1
 800629c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062cc:	f021 010c 	bic.w	r1, r1, #12
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062da:	430b      	orrs	r3, r1
 80062dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ee:	6999      	ldr	r1, [r3, #24]
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	ea40 0301 	orr.w	r3, r0, r1
 80062fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b8f      	ldr	r3, [pc, #572]	; (8006540 <UART_SetConfig+0x2cc>)
 8006304:	429a      	cmp	r2, r3
 8006306:	d005      	beq.n	8006314 <UART_SetConfig+0xa0>
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b8d      	ldr	r3, [pc, #564]	; (8006544 <UART_SetConfig+0x2d0>)
 8006310:	429a      	cmp	r2, r3
 8006312:	d104      	bne.n	800631e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006314:	f7fe ff46 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800631c:	e003      	b.n	8006326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800631e:	f7fe ff2d 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006330:	f040 810c 	bne.w	800654c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006338:	2200      	movs	r2, #0
 800633a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006346:	4622      	mov	r2, r4
 8006348:	462b      	mov	r3, r5
 800634a:	1891      	adds	r1, r2, r2
 800634c:	65b9      	str	r1, [r7, #88]	; 0x58
 800634e:	415b      	adcs	r3, r3
 8006350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006356:	4621      	mov	r1, r4
 8006358:	eb12 0801 	adds.w	r8, r2, r1
 800635c:	4629      	mov	r1, r5
 800635e:	eb43 0901 	adc.w	r9, r3, r1
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800636e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006376:	4690      	mov	r8, r2
 8006378:	4699      	mov	r9, r3
 800637a:	4623      	mov	r3, r4
 800637c:	eb18 0303 	adds.w	r3, r8, r3
 8006380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006384:	462b      	mov	r3, r5
 8006386:	eb49 0303 	adc.w	r3, r9, r3
 800638a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800639a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800639e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063a2:	460b      	mov	r3, r1
 80063a4:	18db      	adds	r3, r3, r3
 80063a6:	653b      	str	r3, [r7, #80]	; 0x50
 80063a8:	4613      	mov	r3, r2
 80063aa:	eb42 0303 	adc.w	r3, r2, r3
 80063ae:	657b      	str	r3, [r7, #84]	; 0x54
 80063b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063b8:	f7fa fc76 	bl	8000ca8 <__aeabi_uldivmod>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4b61      	ldr	r3, [pc, #388]	; (8006548 <UART_SetConfig+0x2d4>)
 80063c2:	fba3 2302 	umull	r2, r3, r3, r2
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	011c      	lsls	r4, r3, #4
 80063ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063dc:	4642      	mov	r2, r8
 80063de:	464b      	mov	r3, r9
 80063e0:	1891      	adds	r1, r2, r2
 80063e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80063e4:	415b      	adcs	r3, r3
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063ec:	4641      	mov	r1, r8
 80063ee:	eb12 0a01 	adds.w	sl, r2, r1
 80063f2:	4649      	mov	r1, r9
 80063f4:	eb43 0b01 	adc.w	fp, r3, r1
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800640c:	4692      	mov	sl, r2
 800640e:	469b      	mov	fp, r3
 8006410:	4643      	mov	r3, r8
 8006412:	eb1a 0303 	adds.w	r3, sl, r3
 8006416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800641a:	464b      	mov	r3, r9
 800641c:	eb4b 0303 	adc.w	r3, fp, r3
 8006420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006438:	460b      	mov	r3, r1
 800643a:	18db      	adds	r3, r3, r3
 800643c:	643b      	str	r3, [r7, #64]	; 0x40
 800643e:	4613      	mov	r3, r2
 8006440:	eb42 0303 	adc.w	r3, r2, r3
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800644a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800644e:	f7fa fc2b 	bl	8000ca8 <__aeabi_uldivmod>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4611      	mov	r1, r2
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <UART_SetConfig+0x2d4>)
 800645a:	fba3 2301 	umull	r2, r3, r3, r1
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2264      	movs	r2, #100	; 0x64
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	1acb      	subs	r3, r1, r3
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800646e:	4b36      	ldr	r3, [pc, #216]	; (8006548 <UART_SetConfig+0x2d4>)
 8006470:	fba3 2302 	umull	r2, r3, r3, r2
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800647c:	441c      	add	r4, r3
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800648c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	1891      	adds	r1, r2, r2
 8006496:	63b9      	str	r1, [r7, #56]	; 0x38
 8006498:	415b      	adcs	r3, r3
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800649c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064a0:	4641      	mov	r1, r8
 80064a2:	1851      	adds	r1, r2, r1
 80064a4:	6339      	str	r1, [r7, #48]	; 0x30
 80064a6:	4649      	mov	r1, r9
 80064a8:	414b      	adcs	r3, r1
 80064aa:	637b      	str	r3, [r7, #52]	; 0x34
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064b8:	4659      	mov	r1, fp
 80064ba:	00cb      	lsls	r3, r1, #3
 80064bc:	4651      	mov	r1, sl
 80064be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c2:	4651      	mov	r1, sl
 80064c4:	00ca      	lsls	r2, r1, #3
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	4642      	mov	r2, r8
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064d4:	464b      	mov	r3, r9
 80064d6:	460a      	mov	r2, r1
 80064d8:	eb42 0303 	adc.w	r3, r2, r3
 80064dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064f4:	460b      	mov	r3, r1
 80064f6:	18db      	adds	r3, r3, r3
 80064f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fa:	4613      	mov	r3, r2
 80064fc:	eb42 0303 	adc.w	r3, r2, r3
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800650a:	f7fa fbcd 	bl	8000ca8 <__aeabi_uldivmod>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <UART_SetConfig+0x2d4>)
 8006514:	fba3 1302 	umull	r1, r3, r3, r2
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	2164      	movs	r1, #100	; 0x64
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	3332      	adds	r3, #50	; 0x32
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <UART_SetConfig+0x2d4>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	f003 0207 	and.w	r2, r3, #7
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4422      	add	r2, r4
 800653a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800653c:	e105      	b.n	800674a <UART_SetConfig+0x4d6>
 800653e:	bf00      	nop
 8006540:	40011000 	.word	0x40011000
 8006544:	40011400 	.word	0x40011400
 8006548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800654c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006550:	2200      	movs	r2, #0
 8006552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800655a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	1891      	adds	r1, r2, r2
 8006564:	6239      	str	r1, [r7, #32]
 8006566:	415b      	adcs	r3, r3
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
 800656a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800656e:	4641      	mov	r1, r8
 8006570:	1854      	adds	r4, r2, r1
 8006572:	4649      	mov	r1, r9
 8006574:	eb43 0501 	adc.w	r5, r3, r1
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	00eb      	lsls	r3, r5, #3
 8006582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006586:	00e2      	lsls	r2, r4, #3
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	4643      	mov	r3, r8
 800658e:	18e3      	adds	r3, r4, r3
 8006590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006594:	464b      	mov	r3, r9
 8006596:	eb45 0303 	adc.w	r3, r5, r3
 800659a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065ba:	4629      	mov	r1, r5
 80065bc:	008b      	lsls	r3, r1, #2
 80065be:	4621      	mov	r1, r4
 80065c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065c4:	4621      	mov	r1, r4
 80065c6:	008a      	lsls	r2, r1, #2
 80065c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065cc:	f7fa fb6c 	bl	8000ca8 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4b60      	ldr	r3, [pc, #384]	; (8006758 <UART_SetConfig+0x4e4>)
 80065d6:	fba3 2302 	umull	r2, r3, r3, r2
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	011c      	lsls	r4, r3, #4
 80065de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	1891      	adds	r1, r2, r2
 80065f6:	61b9      	str	r1, [r7, #24]
 80065f8:	415b      	adcs	r3, r3
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006600:	4641      	mov	r1, r8
 8006602:	1851      	adds	r1, r2, r1
 8006604:	6139      	str	r1, [r7, #16]
 8006606:	4649      	mov	r1, r9
 8006608:	414b      	adcs	r3, r1
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006618:	4659      	mov	r1, fp
 800661a:	00cb      	lsls	r3, r1, #3
 800661c:	4651      	mov	r1, sl
 800661e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006622:	4651      	mov	r1, sl
 8006624:	00ca      	lsls	r2, r1, #3
 8006626:	4610      	mov	r0, r2
 8006628:	4619      	mov	r1, r3
 800662a:	4603      	mov	r3, r0
 800662c:	4642      	mov	r2, r8
 800662e:	189b      	adds	r3, r3, r2
 8006630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006634:	464b      	mov	r3, r9
 8006636:	460a      	mov	r2, r1
 8006638:	eb42 0303 	adc.w	r3, r2, r3
 800663c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	67bb      	str	r3, [r7, #120]	; 0x78
 800664a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006658:	4649      	mov	r1, r9
 800665a:	008b      	lsls	r3, r1, #2
 800665c:	4641      	mov	r1, r8
 800665e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006662:	4641      	mov	r1, r8
 8006664:	008a      	lsls	r2, r1, #2
 8006666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800666a:	f7fa fb1d 	bl	8000ca8 <__aeabi_uldivmod>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4b39      	ldr	r3, [pc, #228]	; (8006758 <UART_SetConfig+0x4e4>)
 8006674:	fba3 1302 	umull	r1, r3, r3, r2
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	2164      	movs	r1, #100	; 0x64
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	3332      	adds	r3, #50	; 0x32
 8006686:	4a34      	ldr	r2, [pc, #208]	; (8006758 <UART_SetConfig+0x4e4>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006692:	441c      	add	r4, r3
 8006694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006698:	2200      	movs	r2, #0
 800669a:	673b      	str	r3, [r7, #112]	; 0x70
 800669c:	677a      	str	r2, [r7, #116]	; 0x74
 800669e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066a2:	4642      	mov	r2, r8
 80066a4:	464b      	mov	r3, r9
 80066a6:	1891      	adds	r1, r2, r2
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	415b      	adcs	r3, r3
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066b2:	4641      	mov	r1, r8
 80066b4:	1851      	adds	r1, r2, r1
 80066b6:	6039      	str	r1, [r7, #0]
 80066b8:	4649      	mov	r1, r9
 80066ba:	414b      	adcs	r3, r1
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066ca:	4659      	mov	r1, fp
 80066cc:	00cb      	lsls	r3, r1, #3
 80066ce:	4651      	mov	r1, sl
 80066d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d4:	4651      	mov	r1, sl
 80066d6:	00ca      	lsls	r2, r1, #3
 80066d8:	4610      	mov	r0, r2
 80066da:	4619      	mov	r1, r3
 80066dc:	4603      	mov	r3, r0
 80066de:	4642      	mov	r2, r8
 80066e0:	189b      	adds	r3, r3, r2
 80066e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066e4:	464b      	mov	r3, r9
 80066e6:	460a      	mov	r2, r1
 80066e8:	eb42 0303 	adc.w	r3, r2, r3
 80066ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	663b      	str	r3, [r7, #96]	; 0x60
 80066f8:	667a      	str	r2, [r7, #100]	; 0x64
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006706:	4649      	mov	r1, r9
 8006708:	008b      	lsls	r3, r1, #2
 800670a:	4641      	mov	r1, r8
 800670c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006710:	4641      	mov	r1, r8
 8006712:	008a      	lsls	r2, r1, #2
 8006714:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006718:	f7fa fac6 	bl	8000ca8 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <UART_SetConfig+0x4e4>)
 8006722:	fba3 1302 	umull	r1, r3, r3, r2
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	2164      	movs	r1, #100	; 0x64
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	3332      	adds	r3, #50	; 0x32
 8006734:	4a08      	ldr	r2, [pc, #32]	; (8006758 <UART_SetConfig+0x4e4>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	f003 020f 	and.w	r2, r3, #15
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4422      	add	r2, r4
 8006748:	609a      	str	r2, [r3, #8]
}
 800674a:	bf00      	nop
 800674c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006750:	46bd      	mov	sp, r7
 8006752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006756:	bf00      	nop
 8006758:	51eb851f 	.word	0x51eb851f

0800675c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d123      	bne.n	80067b6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	6851      	ldr	r1, [r2, #4]
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	6892      	ldr	r2, [r2, #8]
 8006782:	4311      	orrs	r1, r2
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	68d2      	ldr	r2, [r2, #12]
 8006788:	4311      	orrs	r1, r2
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	6912      	ldr	r2, [r2, #16]
 800678e:	4311      	orrs	r1, r2
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	6952      	ldr	r2, [r2, #20]
 8006794:	4311      	orrs	r1, r2
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	6992      	ldr	r2, [r2, #24]
 800679a:	4311      	orrs	r1, r2
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	69d2      	ldr	r2, [r2, #28]
 80067a0:	4311      	orrs	r1, r2
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	6a12      	ldr	r2, [r2, #32]
 80067a6:	4311      	orrs	r1, r2
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067ac:	430a      	orrs	r2, r1
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e028      	b.n	8006808 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	69d9      	ldr	r1, [r3, #28]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4319      	orrs	r1, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	430b      	orrs	r3, r1
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80067dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	6851      	ldr	r1, [r2, #4]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	6892      	ldr	r2, [r2, #8]
 80067e8:	4311      	orrs	r1, r2
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	68d2      	ldr	r2, [r2, #12]
 80067ee:	4311      	orrs	r1, r2
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	6912      	ldr	r2, [r2, #16]
 80067f4:	4311      	orrs	r1, r2
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	6952      	ldr	r2, [r2, #20]
 80067fa:	4311      	orrs	r1, r2
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	6992      	ldr	r2, [r2, #24]
 8006800:	430a      	orrs	r2, r1
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d128      	bne.n	800687a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1e59      	subs	r1, r3, #1
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	3b01      	subs	r3, #1
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	4319      	orrs	r1, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	3b01      	subs	r3, #1
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	4319      	orrs	r1, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	3b01      	subs	r3, #1
 8006850:	031b      	lsls	r3, r3, #12
 8006852:	4319      	orrs	r1, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	3b01      	subs	r3, #1
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	4319      	orrs	r1, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	3b01      	subs	r3, #1
 8006864:	051b      	lsls	r3, r3, #20
 8006866:	4319      	orrs	r1, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	3b01      	subs	r3, #1
 800686e:	061b      	lsls	r3, r3, #24
 8006870:	430b      	orrs	r3, r1
 8006872:	431a      	orrs	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
 8006878:	e02f      	b.n	80068da <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	68d2      	ldr	r2, [r2, #12]
 800688a:	3a01      	subs	r2, #1
 800688c:	0311      	lsls	r1, r2, #12
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	6952      	ldr	r2, [r2, #20]
 8006892:	3a01      	subs	r2, #1
 8006894:	0512      	lsls	r2, r2, #20
 8006896:	430a      	orrs	r2, r1
 8006898:	431a      	orrs	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1e59      	subs	r1, r3, #1
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	4319      	orrs	r1, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4319      	orrs	r1, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	041b      	lsls	r3, r3, #16
 80068c8:	4319      	orrs	r1, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	061b      	lsls	r3, r3, #24
 80068d2:	430b      	orrs	r3, r1
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f043 0201 	orr.w	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a13      	ldr	r2, [pc, #76]	; (8006990 <USB_FlushTxFifo+0x64>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d901      	bls.n	800694c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e01b      	b.n	8006984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	daf2      	bge.n	800693a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	019b      	lsls	r3, r3, #6
 800695c:	f043 0220 	orr.w	r2, r3, #32
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3301      	adds	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a08      	ldr	r2, [pc, #32]	; (8006990 <USB_FlushTxFifo+0x64>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d901      	bls.n	8006976 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e006      	b.n	8006984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b20      	cmp	r3, #32
 8006980:	d0f0      	beq.n	8006964 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	00030d40 	.word	0x00030d40

08006994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <USB_FlushRxFifo+0x5c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e018      	b.n	80069e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	daf2      	bge.n	80069a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2210      	movs	r2, #16
 80069c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <USB_FlushRxFifo+0x5c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e006      	b.n	80069e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d0f0      	beq.n	80069c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	00030d40 	.word	0x00030d40

080069f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b08b      	sub	sp, #44	; 0x2c
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	089b      	lsrs	r3, r3, #2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	623b      	str	r3, [r7, #32]
 8006a1e:	e014      	b.n	8006a4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	3301      	adds	r3, #1
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	3301      	adds	r3, #1
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	3301      	adds	r3, #1
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	3301      	adds	r3, #1
 8006a48:	623b      	str	r3, [r7, #32]
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d3e6      	bcc.n	8006a20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a52:	8bfb      	ldrh	r3, [r7, #30]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01e      	beq.n	8006a96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a62:	461a      	mov	r2, r3
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	701a      	strb	r2, [r3, #0]
      i++;
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	3301      	adds	r3, #1
 8006a82:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	3301      	adds	r3, #1
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a8a:	8bfb      	ldrh	r3, [r7, #30]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a90:	8bfb      	ldrh	r3, [r7, #30]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1ea      	bne.n	8006a6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	372c      	adds	r7, #44	; 0x2c
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	460b      	mov	r3, r1
 8006af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b04:	f023 0303 	bic.w	r3, r3, #3
 8006b08:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d107      	bne.n	8006b38 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b34:	6053      	str	r3, [r2, #4]
 8006b36:	e009      	b.n	8006b4c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d106      	bne.n	8006b4c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b44:	461a      	mov	r2, r3
 8006b46:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b4a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	b29b      	uxth	r3, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b089      	sub	sp, #36	; 0x24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	0c9b      	lsrs	r3, r3, #18
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	0fdb      	lsrs	r3, r3, #31
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d104      	bne.n	8006bd6 <USB_HC_Halt+0x5a>
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e0c8      	b.n	8006d68 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <USB_HC_Halt+0x66>
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d163      	bne.n	8006caa <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c00:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 80ab 	bne.w	8006d66 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d133      	bne.n	8006c84 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c68:	d81d      	bhi.n	8006ca6 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c80:	d0ec      	beq.n	8006c5c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c82:	e070      	b.n	8006d66 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ca4:	e05f      	b.n	8006d66 <USB_HC_Halt+0x1ea>
            break;
 8006ca6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ca8:	e05d      	b.n	8006d66 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d133      	bne.n	8006d42 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cf8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d18:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d26:	d81d      	bhi.n	8006d64 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3e:	d0ec      	beq.n	8006d1a <USB_HC_Halt+0x19e>
 8006d40:	e011      	b.n	8006d66 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	e000      	b.n	8006d66 <USB_HC_Halt+0x1ea>
          break;
 8006d64:	bf00      	nop
    }
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3724      	adds	r7, #36	; 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fdbe 	bl	800690a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d8e:	2110      	movs	r1, #16
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fdcb 	bl	800692c <USB_FlushTxFifo>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff fdf7 	bl	8006994 <USB_FlushRxFifo>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006db0:	2300      	movs	r3, #0
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	e01f      	b.n	8006df6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ddc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dea:	461a      	mov	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	3301      	adds	r3, #1
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b0f      	cmp	r3, #15
 8006dfa:	d9dc      	bls.n	8006db6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e034      	b.n	8006e6c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e36:	461a      	mov	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e48:	d80c      	bhi.n	8006e64 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e60:	d0ec      	beq.n	8006e3c <USB_StopHost+0xc8>
 8006e62:	e000      	b.n	8006e66 <USB_StopHost+0xf2>
        break;
 8006e64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b0f      	cmp	r3, #15
 8006e70:	d9c7      	bls.n	8006e02 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f04f 32ff 	mov.w	r2, #4294967295
 8006e86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff fd2d 	bl	80068e8 <USB_EnableGlobalInt>

  return ret;
 8006e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3720      	adds	r7, #32
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f804 	bl	8006ebc <USBH_HandleSof>
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b0b      	cmp	r3, #11
 8006ecc:	d10a      	bne.n	8006ee4 <USBH_HandleSof+0x28>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4798      	blx	r3
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f10:	2200      	movs	r2, #0
 8006f12:	4619      	mov	r1, r3
 8006f14:	f000 f8ae 	bl	8007074 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f18:	bf00      	nop
}
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f30:	bf00      	nop
}
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f70:	2200      	movs	r2, #0
 8006f72:	4619      	mov	r1, r3
 8006f74:	f000 f87e 	bl	8007074 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f912 	bl	80081cc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	791b      	ldrb	r3, [r3, #4]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f830 	bl	8007014 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	795b      	ldrb	r3, [r3, #5]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f82a 	bl	8007014 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f000 f84c 	bl	8007074 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007002:	2200      	movs	r2, #0
 8007004:	4619      	mov	r1, r3
 8007006:	f000 f835 	bl	8007074 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	2b0f      	cmp	r3, #15
 8007024:	d80d      	bhi.n	8007042 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	33e0      	adds	r3, #224	; 0xe0
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	33e0      	adds	r3, #224	; 0xe0
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007056:	f3ef 8305 	mrs	r3, IPSR
 800705a:	607b      	str	r3, [r7, #4]
  return(result);
 800705c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf14      	ite	ne
 8007062:	2301      	movne	r3, #1
 8007064:	2300      	moveq	r3, #0
 8007066:	b2db      	uxtb	r3, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <osMessagePut+0x1e>
    ticks = 1;
 800708e:	2301      	movs	r3, #1
 8007090:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007092:	f7ff ffdd 	bl	8007050 <inHandlerMode>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d018      	beq.n	80070ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800709c:	f107 0210 	add.w	r2, r7, #16
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	2300      	movs	r3, #0
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f9aa 	bl	8007400 <xQueueGenericSendFromISR>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d001      	beq.n	80070b6 <osMessagePut+0x42>
      return osErrorOS;
 80070b2:	23ff      	movs	r3, #255	; 0xff
 80070b4:	e018      	b.n	80070e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d014      	beq.n	80070e6 <osMessagePut+0x72>
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <osMessagePut+0x7c>)
 80070be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	e00b      	b.n	80070e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80070ce:	f107 0108 	add.w	r1, r7, #8
 80070d2:	2300      	movs	r3, #0
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f894 	bl	8007204 <xQueueGenericSend>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d001      	beq.n	80070e6 <osMessagePut+0x72>
      return osErrorOS;
 80070e2:	23ff      	movs	r3, #255	; 0xff
 80070e4:	e000      	b.n	80070e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
}
 8007130:	bf00      	nop
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d103      	bne.n	800715c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	e00c      	b.n	8007176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3308      	adds	r3, #8
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e002      	b.n	800716a <vListInsert+0x2e>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	d2f6      	bcs.n	8007164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6892      	ldr	r2, [r2, #8]
 80071c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6852      	ldr	r2, [r2, #4]
 80071ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d103      	bne.n	80071e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	1e5a      	subs	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08e      	sub	sp, #56	; 0x38
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007212:	2300      	movs	r3, #0
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <xQueueGenericSend+0x40>
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <xQueueGenericSend+0x44>
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <xQueueGenericSend+0x46>
 8007248:	2300      	movs	r3, #0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <xQueueGenericSend+0x60>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d103      	bne.n	8007272 <xQueueGenericSend+0x6e>
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <xQueueGenericSend+0x72>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <xQueueGenericSend+0x74>
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xQueueGenericSend+0x8e>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	623b      	str	r3, [r7, #32]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007292:	f000 fd31 	bl	8007cf8 <xTaskGetSchedulerState>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <xQueueGenericSend+0x9e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <xQueueGenericSend+0xa2>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <xQueueGenericSend+0xa4>
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	61fb      	str	r3, [r7, #28]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c2:	f000 fe39 	bl	8007f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <xQueueGenericSend+0xd4>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d129      	bne.n	800732c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072de:	f000 f92a 	bl	8007536 <prvCopyDataToQueue>
 80072e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d010      	beq.n	800730e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fbfb 	bl	8007aec <xTaskRemoveFromEventList>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d013      	beq.n	8007324 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072fc:	4b3f      	ldr	r3, [pc, #252]	; (80073fc <xQueueGenericSend+0x1f8>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	e00a      	b.n	8007324 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d007      	beq.n	8007324 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007314:	4b39      	ldr	r3, [pc, #228]	; (80073fc <xQueueGenericSend+0x1f8>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007324:	f000 fe38 	bl	8007f98 <vPortExitCritical>
				return pdPASS;
 8007328:	2301      	movs	r3, #1
 800732a:	e063      	b.n	80073f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007332:	f000 fe31 	bl	8007f98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007336:	2300      	movs	r3, #0
 8007338:	e05c      	b.n	80073f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800733a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007340:	f107 0314 	add.w	r3, r7, #20
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fc33 	bl	8007bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800734e:	f000 fe23 	bl	8007f98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007352:	f000 f9c5 	bl	80076e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007356:	f000 fdef 	bl	8007f38 <vPortEnterCritical>
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007360:	b25b      	sxtb	r3, r3
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d103      	bne.n	8007370 <xQueueGenericSend+0x16c>
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007376:	b25b      	sxtb	r3, r3
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d103      	bne.n	8007386 <xQueueGenericSend+0x182>
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007386:	f000 fe07 	bl	8007f98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800738a:	1d3a      	adds	r2, r7, #4
 800738c:	f107 0314 	add.w	r3, r7, #20
 8007390:	4611      	mov	r1, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fc22 	bl	8007bdc <xTaskCheckForTimeOut>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d124      	bne.n	80073e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800739e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073a0:	f000 f985 	bl	80076ae <prvIsQueueFull>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d018      	beq.n	80073dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	3310      	adds	r3, #16
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fb76 	bl	8007aa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ba:	f000 f926 	bl	800760a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073be:	f000 f99d 	bl	80076fc <xTaskResumeAll>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f47f af7c 	bne.w	80072c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <xQueueGenericSend+0x1f8>)
 80073cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	e772      	b.n	80072c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073de:	f000 f914 	bl	800760a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073e2:	f000 f98b 	bl	80076fc <xTaskResumeAll>
 80073e6:	e76c      	b.n	80072c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ea:	f000 f90e 	bl	800760a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073ee:	f000 f985 	bl	80076fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3738      	adds	r7, #56	; 0x38
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b090      	sub	sp, #64	; 0x40
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d103      	bne.n	800743c <xQueueGenericSendFromISR+0x3c>
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <xQueueGenericSendFromISR+0x40>
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <xQueueGenericSendFromISR+0x42>
 8007440:	2300      	movs	r3, #0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d103      	bne.n	800746a <xQueueGenericSendFromISR+0x6a>
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <xQueueGenericSendFromISR+0x6e>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <xQueueGenericSendFromISR+0x70>
 800746e:	2300      	movs	r3, #0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	623b      	str	r3, [r7, #32]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800748a:	f000 fe07 	bl	800809c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800748e:	f3ef 8211 	mrs	r2, BASEPRI
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	61fa      	str	r2, [r7, #28]
 80074a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d302      	bcc.n	80074bc <xQueueGenericSendFromISR+0xbc>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d12f      	bne.n	800751c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074d2:	f000 f830 	bl	8007536 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d112      	bne.n	8007506 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d016      	beq.n	8007516 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fafd 	bl	8007aec <xTaskRemoveFromEventList>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00b      	beq.n	8007516 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	e007      	b.n	8007516 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007506:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800750a:	3301      	adds	r3, #1
 800750c:	b2db      	uxtb	r3, r3
 800750e:	b25a      	sxtb	r2, r3
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007516:	2301      	movs	r3, #1
 8007518:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800751a:	e001      	b.n	8007520 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800751c:	2300      	movs	r3, #0
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800752a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800752e:	4618      	mov	r0, r3
 8007530:	3740      	adds	r7, #64	; 0x40
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10d      	bne.n	8007570 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d14d      	bne.n	80075f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fbe7 	bl	8007d34 <xTaskPriorityDisinherit>
 8007566:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
 800756e:	e043      	b.n	80075f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d119      	bne.n	80075aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6858      	ldr	r0, [r3, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	461a      	mov	r2, r3
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	f000 fe9d 	bl	80082c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	441a      	add	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	d32b      	bcc.n	80075f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	605a      	str	r2, [r3, #4]
 80075a8:	e026      	b.n	80075f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68d8      	ldr	r0, [r3, #12]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	461a      	mov	r2, r3
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	f000 fe83 	bl	80082c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	425b      	negs	r3, r3
 80075c4:	441a      	add	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d207      	bcs.n	80075e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	425b      	negs	r3, r3
 80075e0:	441a      	add	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d105      	bne.n	80075f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007600:	697b      	ldr	r3, [r7, #20]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007612:	f000 fc91 	bl	8007f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800761c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800761e:	e011      	b.n	8007644 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	d012      	beq.n	800764e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3324      	adds	r3, #36	; 0x24
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fa5d 	bl	8007aec <xTaskRemoveFromEventList>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007638:	f000 fb32 	bl	8007ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	3b01      	subs	r3, #1
 8007640:	b2db      	uxtb	r3, r3
 8007642:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007648:	2b00      	cmp	r3, #0
 800764a:	dce9      	bgt.n	8007620 <prvUnlockQueue+0x16>
 800764c:	e000      	b.n	8007650 <prvUnlockQueue+0x46>
					break;
 800764e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007658:	f000 fc9e 	bl	8007f98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800765c:	f000 fc6c 	bl	8007f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007666:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007668:	e011      	b.n	800768e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d012      	beq.n	8007698 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3310      	adds	r3, #16
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fa38 	bl	8007aec <xTaskRemoveFromEventList>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007682:	f000 fb0d 	bl	8007ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	3b01      	subs	r3, #1
 800768a:	b2db      	uxtb	r3, r3
 800768c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800768e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007692:	2b00      	cmp	r3, #0
 8007694:	dce9      	bgt.n	800766a <prvUnlockQueue+0x60>
 8007696:	e000      	b.n	800769a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007698:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	22ff      	movs	r2, #255	; 0xff
 800769e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076a2:	f000 fc79 	bl	8007f98 <vPortExitCritical>
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076b6:	f000 fc3f 	bl	8007f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d102      	bne.n	80076cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e001      	b.n	80076d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076d0:	f000 fc62 	bl	8007f98 <vPortExitCritical>

	return xReturn;
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076e4:	4b04      	ldr	r3, [pc, #16]	; (80076f8 <vTaskSuspendAll+0x18>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	4a03      	ldr	r2, [pc, #12]	; (80076f8 <vTaskSuspendAll+0x18>)
 80076ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076ee:	bf00      	nop
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	200007c4 	.word	0x200007c4

080076fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800770a:	4b41      	ldr	r3, [pc, #260]	; (8007810 <xTaskResumeAll+0x114>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <xTaskResumeAll+0x2c>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	603b      	str	r3, [r7, #0]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007728:	f000 fc06 	bl	8007f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800772c:	4b38      	ldr	r3, [pc, #224]	; (8007810 <xTaskResumeAll+0x114>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3b01      	subs	r3, #1
 8007732:	4a37      	ldr	r2, [pc, #220]	; (8007810 <xTaskResumeAll+0x114>)
 8007734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007736:	4b36      	ldr	r3, [pc, #216]	; (8007810 <xTaskResumeAll+0x114>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d161      	bne.n	8007802 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800773e:	4b35      	ldr	r3, [pc, #212]	; (8007814 <xTaskResumeAll+0x118>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d05d      	beq.n	8007802 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007746:	e02e      	b.n	80077a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007748:	4b33      	ldr	r3, [pc, #204]	; (8007818 <xTaskResumeAll+0x11c>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3318      	adds	r3, #24
 8007754:	4618      	mov	r0, r3
 8007756:	f7ff fd2a 	bl	80071ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3304      	adds	r3, #4
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fd25 	bl	80071ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	4b2b      	ldr	r3, [pc, #172]	; (800781c <xTaskResumeAll+0x120>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4313      	orrs	r3, r2
 8007772:	4a2a      	ldr	r2, [pc, #168]	; (800781c <xTaskResumeAll+0x120>)
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4a27      	ldr	r2, [pc, #156]	; (8007820 <xTaskResumeAll+0x124>)
 8007784:	441a      	add	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3304      	adds	r3, #4
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f7ff fcb1 	bl	80070f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007796:	4b23      	ldr	r3, [pc, #140]	; (8007824 <xTaskResumeAll+0x128>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077a0:	4b21      	ldr	r3, [pc, #132]	; (8007828 <xTaskResumeAll+0x12c>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077a6:	4b1c      	ldr	r3, [pc, #112]	; (8007818 <xTaskResumeAll+0x11c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1cc      	bne.n	8007748 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077b4:	f000 fa80 	bl	8007cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077b8:	4b1c      	ldr	r3, [pc, #112]	; (800782c <xTaskResumeAll+0x130>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077c4:	f000 f836 	bl	8007834 <xTaskIncrementTick>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077ce:	4b16      	ldr	r3, [pc, #88]	; (8007828 <xTaskResumeAll+0x12c>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f1      	bne.n	80077c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80077e0:	4b12      	ldr	r3, [pc, #72]	; (800782c <xTaskResumeAll+0x130>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <xTaskResumeAll+0x12c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <xTaskResumeAll+0x134>)
 80077f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007802:	f000 fbc9 	bl	8007f98 <vPortExitCritical>

	return xAlreadyYielded;
 8007806:	68bb      	ldr	r3, [r7, #8]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200007c4 	.word	0x200007c4
 8007814:	200007a4 	.word	0x200007a4
 8007818:	2000077c 	.word	0x2000077c
 800781c:	200007ac 	.word	0x200007ac
 8007820:	200006e8 	.word	0x200006e8
 8007824:	200006e4 	.word	0x200006e4
 8007828:	200007b8 	.word	0x200007b8
 800782c:	200007b4 	.word	0x200007b4
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800783e:	4b4e      	ldr	r3, [pc, #312]	; (8007978 <xTaskIncrementTick+0x144>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 808e 	bne.w	8007964 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007848:	4b4c      	ldr	r3, [pc, #304]	; (800797c <xTaskIncrementTick+0x148>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007850:	4a4a      	ldr	r2, [pc, #296]	; (800797c <xTaskIncrementTick+0x148>)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d120      	bne.n	800789e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800785c:	4b48      	ldr	r3, [pc, #288]	; (8007980 <xTaskIncrementTick+0x14c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <xTaskIncrementTick+0x48>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	603b      	str	r3, [r7, #0]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xTaskIncrementTick+0x46>
 800787c:	4b40      	ldr	r3, [pc, #256]	; (8007980 <xTaskIncrementTick+0x14c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	4b40      	ldr	r3, [pc, #256]	; (8007984 <xTaskIncrementTick+0x150>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a3e      	ldr	r2, [pc, #248]	; (8007980 <xTaskIncrementTick+0x14c>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4a3e      	ldr	r2, [pc, #248]	; (8007984 <xTaskIncrementTick+0x150>)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	4b3d      	ldr	r3, [pc, #244]	; (8007988 <xTaskIncrementTick+0x154>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a3c      	ldr	r2, [pc, #240]	; (8007988 <xTaskIncrementTick+0x154>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	f000 fa0d 	bl	8007cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800789e:	4b3b      	ldr	r3, [pc, #236]	; (800798c <xTaskIncrementTick+0x158>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d348      	bcc.n	800793a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a8:	4b35      	ldr	r3, [pc, #212]	; (8007980 <xTaskIncrementTick+0x14c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b2:	4b36      	ldr	r3, [pc, #216]	; (800798c <xTaskIncrementTick+0x158>)
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	601a      	str	r2, [r3, #0]
					break;
 80078ba:	e03e      	b.n	800793a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078bc:	4b30      	ldr	r3, [pc, #192]	; (8007980 <xTaskIncrementTick+0x14c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d203      	bcs.n	80078dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078d4:	4a2d      	ldr	r2, [pc, #180]	; (800798c <xTaskIncrementTick+0x158>)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078da:	e02e      	b.n	800793a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fc64 	bl	80071ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	3318      	adds	r3, #24
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fc5b 	bl	80071ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	2201      	movs	r2, #1
 80078fe:	409a      	lsls	r2, r3
 8007900:	4b23      	ldr	r3, [pc, #140]	; (8007990 <xTaskIncrementTick+0x15c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4313      	orrs	r3, r2
 8007906:	4a22      	ldr	r2, [pc, #136]	; (8007990 <xTaskIncrementTick+0x15c>)
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <xTaskIncrementTick+0x160>)
 8007918:	441a      	add	r2, r3
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7ff fbe7 	bl	80070f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <xTaskIncrementTick+0x164>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	429a      	cmp	r2, r3
 8007932:	d3b9      	bcc.n	80078a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007934:	2301      	movs	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007938:	e7b6      	b.n	80078a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800793a:	4b17      	ldr	r3, [pc, #92]	; (8007998 <xTaskIncrementTick+0x164>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4914      	ldr	r1, [pc, #80]	; (8007994 <xTaskIncrementTick+0x160>)
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d901      	bls.n	8007956 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007952:	2301      	movs	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007956:	4b11      	ldr	r3, [pc, #68]	; (800799c <xTaskIncrementTick+0x168>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e004      	b.n	800796e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007964:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <xTaskIncrementTick+0x16c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	4a0d      	ldr	r2, [pc, #52]	; (80079a0 <xTaskIncrementTick+0x16c>)
 800796c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800796e:	697b      	ldr	r3, [r7, #20]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	200007c4 	.word	0x200007c4
 800797c:	200007a8 	.word	0x200007a8
 8007980:	20000774 	.word	0x20000774
 8007984:	20000778 	.word	0x20000778
 8007988:	200007bc 	.word	0x200007bc
 800798c:	200007c0 	.word	0x200007c0
 8007990:	200007ac 	.word	0x200007ac
 8007994:	200006e8 	.word	0x200006e8
 8007998:	200006e4 	.word	0x200006e4
 800799c:	200007b8 	.word	0x200007b8
 80079a0:	200007b4 	.word	0x200007b4

080079a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079aa:	4b39      	ldr	r3, [pc, #228]	; (8007a90 <vTaskSwitchContext+0xec>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079b2:	4b38      	ldr	r3, [pc, #224]	; (8007a94 <vTaskSwitchContext+0xf0>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079b8:	e066      	b.n	8007a88 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 80079ba:	4b36      	ldr	r3, [pc, #216]	; (8007a94 <vTaskSwitchContext+0xf0>)
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80079c0:	4b35      	ldr	r3, [pc, #212]	; (8007a98 <vTaskSwitchContext+0xf4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d111      	bne.n	80079fc <vTaskSwitchContext+0x58>
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	3304      	adds	r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d10b      	bne.n	80079fc <vTaskSwitchContext+0x58>
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	3308      	adds	r3, #8
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d105      	bne.n	80079fc <vTaskSwitchContext+0x58>
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	330c      	adds	r3, #12
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d008      	beq.n	8007a0e <vTaskSwitchContext+0x6a>
 80079fc:	4b26      	ldr	r3, [pc, #152]	; (8007a98 <vTaskSwitchContext+0xf4>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <vTaskSwitchContext+0xf4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3334      	adds	r3, #52	; 0x34
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7f9 fb05 	bl	8001018 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a0e:	4b23      	ldr	r3, [pc, #140]	; (8007a9c <vTaskSwitchContext+0xf8>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	fab3 f383 	clz	r3, r3
 8007a1a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	f1c3 031f 	rsb	r3, r3, #31
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	491e      	ldr	r1, [pc, #120]	; (8007aa0 <vTaskSwitchContext+0xfc>)
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <vTaskSwitchContext+0xaa>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	607b      	str	r3, [r7, #4]
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <vTaskSwitchContext+0xa8>
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <vTaskSwitchContext+0xfc>)
 8007a5a:	4413      	add	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d104      	bne.n	8007a7e <vTaskSwitchContext+0xda>
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	605a      	str	r2, [r3, #4]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <vTaskSwitchContext+0xf4>)
 8007a86:	6013      	str	r3, [r2, #0]
}
 8007a88:	bf00      	nop
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	200007c4 	.word	0x200007c4
 8007a94:	200007b8 	.word	0x200007b8
 8007a98:	200006e4 	.word	0x200006e4
 8007a9c:	200007ac 	.word	0x200007ac
 8007aa0:	200006e8 	.word	0x200006e8

08007aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aca:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <vTaskPlaceOnEventList+0x44>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3318      	adds	r3, #24
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fb32 	bl	800713c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ad8:	2101      	movs	r1, #1
 8007ada:	6838      	ldr	r0, [r7, #0]
 8007adc:	f000 f9b0 	bl	8007e40 <prvAddCurrentTaskToDelayedList>
}
 8007ae0:	bf00      	nop
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	200006e4 	.word	0x200006e4

08007aec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	60fb      	str	r3, [r7, #12]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fb46 	bl	80071ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b22:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <xTaskRemoveFromEventList+0xac>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d11c      	bne.n	8007b64 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fb3d 	bl	80071ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	2201      	movs	r2, #1
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	4b17      	ldr	r3, [pc, #92]	; (8007b9c <xTaskRemoveFromEventList+0xb0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <xTaskRemoveFromEventList+0xb0>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <xTaskRemoveFromEventList+0xb4>)
 8007b54:	441a      	add	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7ff fac9 	bl	80070f4 <vListInsertEnd>
 8007b62:	e005      	b.n	8007b70 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	3318      	adds	r3, #24
 8007b68:	4619      	mov	r1, r3
 8007b6a:	480e      	ldr	r0, [pc, #56]	; (8007ba4 <xTaskRemoveFromEventList+0xb8>)
 8007b6c:	f7ff fac2 	bl	80070f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <xTaskRemoveFromEventList+0xbc>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d905      	bls.n	8007b8a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b82:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <xTaskRemoveFromEventList+0xc0>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e001      	b.n	8007b8e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b8e:	697b      	ldr	r3, [r7, #20]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200007c4 	.word	0x200007c4
 8007b9c:	200007ac 	.word	0x200007ac
 8007ba0:	200006e8 	.word	0x200006e8
 8007ba4:	2000077c 	.word	0x2000077c
 8007ba8:	200006e4 	.word	0x200006e4
 8007bac:	200007b8 	.word	0x200007b8

08007bb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bb8:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <vTaskInternalSetTimeOutState+0x24>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <vTaskInternalSetTimeOutState+0x28>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	605a      	str	r2, [r3, #4]
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	200007bc 	.word	0x200007bc
 8007bd8:	200007a8 	.word	0x200007a8

08007bdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	613b      	str	r3, [r7, #16]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	60fb      	str	r3, [r7, #12]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c1e:	f000 f98b 	bl	8007f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c22:	4b1d      	ldr	r3, [pc, #116]	; (8007c98 <xTaskCheckForTimeOut+0xbc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d102      	bne.n	8007c42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	e023      	b.n	8007c8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	4b15      	ldr	r3, [pc, #84]	; (8007c9c <xTaskCheckForTimeOut+0xc0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d007      	beq.n	8007c5e <xTaskCheckForTimeOut+0x82>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d302      	bcc.n	8007c5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	e015      	b.n	8007c8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d20b      	bcs.n	8007c80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff ff9b 	bl	8007bb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	e004      	b.n	8007c8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c86:	2301      	movs	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c8a:	f000 f985 	bl	8007f98 <vPortExitCritical>

	return xReturn;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3720      	adds	r7, #32
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	200007a8 	.word	0x200007a8
 8007c9c:	200007bc 	.word	0x200007bc

08007ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ca4:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <vTaskMissedYield+0x14>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
}
 8007caa:	bf00      	nop
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	200007b8 	.word	0x200007b8

08007cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <prvResetNextTaskUnblockTime+0x38>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d104      	bne.n	8007cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295
 8007cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cd0:	e008      	b.n	8007ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <prvResetNextTaskUnblockTime+0x38>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	4a04      	ldr	r2, [pc, #16]	; (8007cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ce2:	6013      	str	r3, [r2, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20000774 	.word	0x20000774
 8007cf4:	200007c0 	.word	0x200007c0

08007cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <xTaskGetSchedulerState+0x34>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d102      	bne.n	8007d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d06:	2301      	movs	r3, #1
 8007d08:	607b      	str	r3, [r7, #4]
 8007d0a:	e008      	b.n	8007d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d0c:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <xTaskGetSchedulerState+0x38>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d14:	2302      	movs	r3, #2
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	e001      	b.n	8007d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d1e:	687b      	ldr	r3, [r7, #4]
	}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	200007b0 	.word	0x200007b0
 8007d30:	200007c4 	.word	0x200007c4

08007d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d06e      	beq.n	8007e28 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d4a:	4b3a      	ldr	r3, [pc, #232]	; (8007e34 <xTaskPriorityDisinherit+0x100>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d00a      	beq.n	8007d6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	60fb      	str	r3, [r7, #12]
}
 8007d66:	bf00      	nop
 8007d68:	e7fe      	b.n	8007d68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	60bb      	str	r3, [r7, #8]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8c:	1e5a      	subs	r2, r3, #1
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d044      	beq.n	8007e28 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d140      	bne.n	8007e28 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff f9ff 	bl	80071ae <uxListRemove>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d115      	bne.n	8007de2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dba:	491f      	ldr	r1, [pc, #124]	; (8007e38 <xTaskPriorityDisinherit+0x104>)
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xTaskPriorityDisinherit+0xae>
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	43da      	mvns	r2, r3
 8007dd8:	4b18      	ldr	r3, [pc, #96]	; (8007e3c <xTaskPriorityDisinherit+0x108>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <xTaskPriorityDisinherit+0x108>)
 8007de0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	f1c3 0207 	rsb	r2, r3, #7
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	409a      	lsls	r2, r3
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <xTaskPriorityDisinherit+0x108>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	4a0d      	ldr	r2, [pc, #52]	; (8007e3c <xTaskPriorityDisinherit+0x108>)
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <xTaskPriorityDisinherit+0x104>)
 8007e16:	441a      	add	r2, r3
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f7ff f968 	bl	80070f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e28:	697b      	ldr	r3, [r7, #20]
	}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	200006e4 	.word	0x200006e4
 8007e38:	200006e8 	.word	0x200006e8
 8007e3c:	200007ac 	.word	0x200007ac

08007e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e4a:	4b29      	ldr	r3, [pc, #164]	; (8007ef0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e50:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff f9a9 	bl	80071ae <uxListRemove>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10b      	bne.n	8007e7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e62:	4b24      	ldr	r3, [pc, #144]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	2201      	movs	r2, #1
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43da      	mvns	r2, r3
 8007e70:	4b21      	ldr	r3, [pc, #132]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4013      	ands	r3, r2
 8007e76:	4a20      	ldr	r2, [pc, #128]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e80:	d10a      	bne.n	8007e98 <prvAddCurrentTaskToDelayedList+0x58>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e88:	4b1a      	ldr	r3, [pc, #104]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4619      	mov	r1, r3
 8007e90:	481a      	ldr	r0, [pc, #104]	; (8007efc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e92:	f7ff f92f 	bl	80070f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e96:	e026      	b.n	8007ee6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ea0:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d209      	bcs.n	8007ec4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb0:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f7ff f93d 	bl	800713c <vListInsert>
}
 8007ec2:	e010      	b.n	8007ee6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ec4:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7ff f933 	bl	800713c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d202      	bcs.n	8007ee6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ee0:	4a09      	ldr	r2, [pc, #36]	; (8007f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	6013      	str	r3, [r2, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	200007a8 	.word	0x200007a8
 8007ef4:	200006e4 	.word	0x200006e4
 8007ef8:	200007ac 	.word	0x200007ac
 8007efc:	20000790 	.word	0x20000790
 8007f00:	20000778 	.word	0x20000778
 8007f04:	20000774 	.word	0x20000774
 8007f08:	200007c0 	.word	0x200007c0
 8007f0c:	00000000 	.word	0x00000000

08007f10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <pxCurrentTCBConst2>)
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	6808      	ldr	r0, [r1, #0]
 8007f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	f380 8809 	msr	PSP, r0
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	4770      	bx	lr
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst2>:
 8007f30:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	607b      	str	r3, [r7, #4]
}
 8007f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f52:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <vPortEnterCritical+0x58>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3301      	adds	r3, #1
 8007f58:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <vPortEnterCritical+0x58>)
 8007f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <vPortEnterCritical+0x58>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d10f      	bne.n	8007f84 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <vPortEnterCritical+0x5c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	603b      	str	r3, [r7, #0]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <vPortEnterCritical+0x4a>
	}
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	2000000c 	.word	0x2000000c
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f9e:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <vPortExitCritical+0x50>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <vPortExitCritical+0x24>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	607b      	str	r3, [r7, #4]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <vPortExitCritical+0x50>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	4a09      	ldr	r2, [pc, #36]	; (8007fe8 <vPortExitCritical+0x50>)
 8007fc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <vPortExitCritical+0x50>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d105      	bne.n	8007fda <vPortExitCritical+0x42>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	f383 8811 	msr	BASEPRI, r3
}
 8007fd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	2000000c 	.word	0x2000000c
 8007fec:	00000000 	.word	0x00000000

08007ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ff0:	f3ef 8009 	mrs	r0, PSP
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	4b15      	ldr	r3, [pc, #84]	; (8008050 <pxCurrentTCBConst>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	f01e 0f10 	tst.w	lr, #16
 8008000:	bf08      	it	eq
 8008002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800a:	6010      	str	r0, [r2, #0]
 800800c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008014:	f380 8811 	msr	BASEPRI, r0
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f7ff fcc0 	bl	80079a4 <vTaskSwitchContext>
 8008024:	f04f 0000 	mov.w	r0, #0
 8008028:	f380 8811 	msr	BASEPRI, r0
 800802c:	bc09      	pop	{r0, r3}
 800802e:	6819      	ldr	r1, [r3, #0]
 8008030:	6808      	ldr	r0, [r1, #0]
 8008032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008036:	f01e 0f10 	tst.w	lr, #16
 800803a:	bf08      	it	eq
 800803c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008040:	f380 8809 	msr	PSP, r0
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	f3af 8000 	nop.w

08008050 <pxCurrentTCBConst>:
 8008050:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop

08008058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	607b      	str	r3, [r7, #4]
}
 8008070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008072:	f7ff fbdf 	bl	8007834 <xTaskIncrementTick>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <SysTick_Handler+0x40>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	2300      	movs	r3, #0
 8008086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f383 8811 	msr	BASEPRI, r3
}
 800808e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080a2:	f3ef 8305 	mrs	r3, IPSR
 80080a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d914      	bls.n	80080d8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080ae:	4a17      	ldr	r2, [pc, #92]	; (800810c <vPortValidateInterruptPriority+0x70>)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080b8:	4b15      	ldr	r3, [pc, #84]	; (8008110 <vPortValidateInterruptPriority+0x74>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	7afa      	ldrb	r2, [r7, #11]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d20a      	bcs.n	80080d8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	607b      	str	r3, [r7, #4]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <vPortValidateInterruptPriority+0x78>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080e0:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <vPortValidateInterruptPriority+0x7c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d90a      	bls.n	80080fe <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	603b      	str	r3, [r7, #0]
}
 80080fa:	bf00      	nop
 80080fc:	e7fe      	b.n	80080fc <vPortValidateInterruptPriority+0x60>
	}
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	e000e3f0 	.word	0xe000e3f0
 8008110:	200007c8 	.word	0x200007c8
 8008114:	e000ed0c 	.word	0xe000ed0c
 8008118:	200007cc 	.word	0x200007cc

0800811c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe feb4 	bl	8006e98 <USBH_LL_IncTimer>
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fef8 	bl	8006f3c <USBH_LL_Connect>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe ff0d 	bl	8006f82 <USBH_LL_Disconnect>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
 800817c:	4613      	mov	r3, r2
 800817e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe ff2d 	bl	8006fe6 <USBH_LL_NotifyURBChange>
#endif
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fea2 	bl	8006eec <USBH_LL_PortEnabled>
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe feae 	bl	8006f20 <USBH_LL_PortDisabled>
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fa fd98 	bl	8002d18 <HAL_HCD_Stop>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 f808 	bl	8008204 <USBH_Get_USB_Status>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d817      	bhi.n	8008248 <USBH_Get_USB_Status+0x44>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <USBH_Get_USB_Status+0x1c>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008231 	.word	0x08008231
 8008224:	08008237 	.word	0x08008237
 8008228:	0800823d 	.word	0x0800823d
 800822c:	08008243 	.word	0x08008243
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]
    break;
 8008234:	e00b      	b.n	800824e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008236:	2302      	movs	r3, #2
 8008238:	73fb      	strb	r3, [r7, #15]
    break;
 800823a:	e008      	b.n	800824e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800823c:	2301      	movs	r3, #1
 800823e:	73fb      	strb	r3, [r7, #15]
    break;
 8008240:	e005      	b.n	800824e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008242:	2302      	movs	r3, #2
 8008244:	73fb      	strb	r3, [r7, #15]
    break;
 8008246:	e002      	b.n	800824e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008248:	2302      	movs	r3, #2
 800824a:	73fb      	strb	r3, [r7, #15]
    break;
 800824c:	bf00      	nop
  }
  return usb_status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <__errno>:
 800825c:	4b01      	ldr	r3, [pc, #4]	; (8008264 <__errno+0x8>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	20000010 	.word	0x20000010

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4d0d      	ldr	r5, [pc, #52]	; (80082a0 <__libc_init_array+0x38>)
 800826c:	4c0d      	ldr	r4, [pc, #52]	; (80082a4 <__libc_init_array+0x3c>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	2600      	movs	r6, #0
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	4d0b      	ldr	r5, [pc, #44]	; (80082a8 <__libc_init_array+0x40>)
 800827a:	4c0c      	ldr	r4, [pc, #48]	; (80082ac <__libc_init_array+0x44>)
 800827c:	f004 fca8 	bl	800cbd0 <_init>
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	2600      	movs	r6, #0
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f855 3b04 	ldr.w	r3, [r5], #4
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	0800d0dc 	.word	0x0800d0dc
 80082a4:	0800d0dc 	.word	0x0800d0dc
 80082a8:	0800d0dc 	.word	0x0800d0dc
 80082ac:	0800d0e0 	.word	0x0800d0e0

080082b0 <malloc>:
 80082b0:	4b02      	ldr	r3, [pc, #8]	; (80082bc <malloc+0xc>)
 80082b2:	4601      	mov	r1, r0
 80082b4:	6818      	ldr	r0, [r3, #0]
 80082b6:	f000 b885 	b.w	80083c4 <_malloc_r>
 80082ba:	bf00      	nop
 80082bc:	20000010 	.word	0x20000010

080082c0 <memcpy>:
 80082c0:	440a      	add	r2, r1
 80082c2:	4291      	cmp	r1, r2
 80082c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082c8:	d100      	bne.n	80082cc <memcpy+0xc>
 80082ca:	4770      	bx	lr
 80082cc:	b510      	push	{r4, lr}
 80082ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082d6:	4291      	cmp	r1, r2
 80082d8:	d1f9      	bne.n	80082ce <memcpy+0xe>
 80082da:	bd10      	pop	{r4, pc}

080082dc <memset>:
 80082dc:	4402      	add	r2, r0
 80082de:	4603      	mov	r3, r0
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d100      	bne.n	80082e6 <memset+0xa>
 80082e4:	4770      	bx	lr
 80082e6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ea:	e7f9      	b.n	80082e0 <memset+0x4>

080082ec <_free_r>:
 80082ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ee:	2900      	cmp	r1, #0
 80082f0:	d044      	beq.n	800837c <_free_r+0x90>
 80082f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f6:	9001      	str	r0, [sp, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f1a1 0404 	sub.w	r4, r1, #4
 80082fe:	bfb8      	it	lt
 8008300:	18e4      	addlt	r4, r4, r3
 8008302:	f003 f941 	bl	800b588 <__malloc_lock>
 8008306:	4a1e      	ldr	r2, [pc, #120]	; (8008380 <_free_r+0x94>)
 8008308:	9801      	ldr	r0, [sp, #4]
 800830a:	6813      	ldr	r3, [r2, #0]
 800830c:	b933      	cbnz	r3, 800831c <_free_r+0x30>
 800830e:	6063      	str	r3, [r4, #4]
 8008310:	6014      	str	r4, [r2, #0]
 8008312:	b003      	add	sp, #12
 8008314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008318:	f003 b93c 	b.w	800b594 <__malloc_unlock>
 800831c:	42a3      	cmp	r3, r4
 800831e:	d908      	bls.n	8008332 <_free_r+0x46>
 8008320:	6825      	ldr	r5, [r4, #0]
 8008322:	1961      	adds	r1, r4, r5
 8008324:	428b      	cmp	r3, r1
 8008326:	bf01      	itttt	eq
 8008328:	6819      	ldreq	r1, [r3, #0]
 800832a:	685b      	ldreq	r3, [r3, #4]
 800832c:	1949      	addeq	r1, r1, r5
 800832e:	6021      	streq	r1, [r4, #0]
 8008330:	e7ed      	b.n	800830e <_free_r+0x22>
 8008332:	461a      	mov	r2, r3
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	b10b      	cbz	r3, 800833c <_free_r+0x50>
 8008338:	42a3      	cmp	r3, r4
 800833a:	d9fa      	bls.n	8008332 <_free_r+0x46>
 800833c:	6811      	ldr	r1, [r2, #0]
 800833e:	1855      	adds	r5, r2, r1
 8008340:	42a5      	cmp	r5, r4
 8008342:	d10b      	bne.n	800835c <_free_r+0x70>
 8008344:	6824      	ldr	r4, [r4, #0]
 8008346:	4421      	add	r1, r4
 8008348:	1854      	adds	r4, r2, r1
 800834a:	42a3      	cmp	r3, r4
 800834c:	6011      	str	r1, [r2, #0]
 800834e:	d1e0      	bne.n	8008312 <_free_r+0x26>
 8008350:	681c      	ldr	r4, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	6053      	str	r3, [r2, #4]
 8008356:	4421      	add	r1, r4
 8008358:	6011      	str	r1, [r2, #0]
 800835a:	e7da      	b.n	8008312 <_free_r+0x26>
 800835c:	d902      	bls.n	8008364 <_free_r+0x78>
 800835e:	230c      	movs	r3, #12
 8008360:	6003      	str	r3, [r0, #0]
 8008362:	e7d6      	b.n	8008312 <_free_r+0x26>
 8008364:	6825      	ldr	r5, [r4, #0]
 8008366:	1961      	adds	r1, r4, r5
 8008368:	428b      	cmp	r3, r1
 800836a:	bf04      	itt	eq
 800836c:	6819      	ldreq	r1, [r3, #0]
 800836e:	685b      	ldreq	r3, [r3, #4]
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	bf04      	itt	eq
 8008374:	1949      	addeq	r1, r1, r5
 8008376:	6021      	streq	r1, [r4, #0]
 8008378:	6054      	str	r4, [r2, #4]
 800837a:	e7ca      	b.n	8008312 <_free_r+0x26>
 800837c:	b003      	add	sp, #12
 800837e:	bd30      	pop	{r4, r5, pc}
 8008380:	20000ad4 	.word	0x20000ad4

08008384 <sbrk_aligned>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	4e0e      	ldr	r6, [pc, #56]	; (80083c0 <sbrk_aligned+0x3c>)
 8008388:	460c      	mov	r4, r1
 800838a:	6831      	ldr	r1, [r6, #0]
 800838c:	4605      	mov	r5, r0
 800838e:	b911      	cbnz	r1, 8008396 <sbrk_aligned+0x12>
 8008390:	f000 ff1e 	bl	80091d0 <_sbrk_r>
 8008394:	6030      	str	r0, [r6, #0]
 8008396:	4621      	mov	r1, r4
 8008398:	4628      	mov	r0, r5
 800839a:	f000 ff19 	bl	80091d0 <_sbrk_r>
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	d00a      	beq.n	80083b8 <sbrk_aligned+0x34>
 80083a2:	1cc4      	adds	r4, r0, #3
 80083a4:	f024 0403 	bic.w	r4, r4, #3
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d007      	beq.n	80083bc <sbrk_aligned+0x38>
 80083ac:	1a21      	subs	r1, r4, r0
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 ff0e 	bl	80091d0 <_sbrk_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d101      	bne.n	80083bc <sbrk_aligned+0x38>
 80083b8:	f04f 34ff 	mov.w	r4, #4294967295
 80083bc:	4620      	mov	r0, r4
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	20000ad8 	.word	0x20000ad8

080083c4 <_malloc_r>:
 80083c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c8:	1ccd      	adds	r5, r1, #3
 80083ca:	f025 0503 	bic.w	r5, r5, #3
 80083ce:	3508      	adds	r5, #8
 80083d0:	2d0c      	cmp	r5, #12
 80083d2:	bf38      	it	cc
 80083d4:	250c      	movcc	r5, #12
 80083d6:	2d00      	cmp	r5, #0
 80083d8:	4607      	mov	r7, r0
 80083da:	db01      	blt.n	80083e0 <_malloc_r+0x1c>
 80083dc:	42a9      	cmp	r1, r5
 80083de:	d905      	bls.n	80083ec <_malloc_r+0x28>
 80083e0:	230c      	movs	r3, #12
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	2600      	movs	r6, #0
 80083e6:	4630      	mov	r0, r6
 80083e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ec:	4e2e      	ldr	r6, [pc, #184]	; (80084a8 <_malloc_r+0xe4>)
 80083ee:	f003 f8cb 	bl	800b588 <__malloc_lock>
 80083f2:	6833      	ldr	r3, [r6, #0]
 80083f4:	461c      	mov	r4, r3
 80083f6:	bb34      	cbnz	r4, 8008446 <_malloc_r+0x82>
 80083f8:	4629      	mov	r1, r5
 80083fa:	4638      	mov	r0, r7
 80083fc:	f7ff ffc2 	bl	8008384 <sbrk_aligned>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	4604      	mov	r4, r0
 8008404:	d14d      	bne.n	80084a2 <_malloc_r+0xde>
 8008406:	6834      	ldr	r4, [r6, #0]
 8008408:	4626      	mov	r6, r4
 800840a:	2e00      	cmp	r6, #0
 800840c:	d140      	bne.n	8008490 <_malloc_r+0xcc>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	4631      	mov	r1, r6
 8008412:	4638      	mov	r0, r7
 8008414:	eb04 0803 	add.w	r8, r4, r3
 8008418:	f000 feda 	bl	80091d0 <_sbrk_r>
 800841c:	4580      	cmp	r8, r0
 800841e:	d13a      	bne.n	8008496 <_malloc_r+0xd2>
 8008420:	6821      	ldr	r1, [r4, #0]
 8008422:	3503      	adds	r5, #3
 8008424:	1a6d      	subs	r5, r5, r1
 8008426:	f025 0503 	bic.w	r5, r5, #3
 800842a:	3508      	adds	r5, #8
 800842c:	2d0c      	cmp	r5, #12
 800842e:	bf38      	it	cc
 8008430:	250c      	movcc	r5, #12
 8008432:	4629      	mov	r1, r5
 8008434:	4638      	mov	r0, r7
 8008436:	f7ff ffa5 	bl	8008384 <sbrk_aligned>
 800843a:	3001      	adds	r0, #1
 800843c:	d02b      	beq.n	8008496 <_malloc_r+0xd2>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	442b      	add	r3, r5
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	e00e      	b.n	8008464 <_malloc_r+0xa0>
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	1b52      	subs	r2, r2, r5
 800844a:	d41e      	bmi.n	800848a <_malloc_r+0xc6>
 800844c:	2a0b      	cmp	r2, #11
 800844e:	d916      	bls.n	800847e <_malloc_r+0xba>
 8008450:	1961      	adds	r1, r4, r5
 8008452:	42a3      	cmp	r3, r4
 8008454:	6025      	str	r5, [r4, #0]
 8008456:	bf18      	it	ne
 8008458:	6059      	strne	r1, [r3, #4]
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	bf08      	it	eq
 800845e:	6031      	streq	r1, [r6, #0]
 8008460:	5162      	str	r2, [r4, r5]
 8008462:	604b      	str	r3, [r1, #4]
 8008464:	4638      	mov	r0, r7
 8008466:	f104 060b 	add.w	r6, r4, #11
 800846a:	f003 f893 	bl	800b594 <__malloc_unlock>
 800846e:	f026 0607 	bic.w	r6, r6, #7
 8008472:	1d23      	adds	r3, r4, #4
 8008474:	1af2      	subs	r2, r6, r3
 8008476:	d0b6      	beq.n	80083e6 <_malloc_r+0x22>
 8008478:	1b9b      	subs	r3, r3, r6
 800847a:	50a3      	str	r3, [r4, r2]
 800847c:	e7b3      	b.n	80083e6 <_malloc_r+0x22>
 800847e:	6862      	ldr	r2, [r4, #4]
 8008480:	42a3      	cmp	r3, r4
 8008482:	bf0c      	ite	eq
 8008484:	6032      	streq	r2, [r6, #0]
 8008486:	605a      	strne	r2, [r3, #4]
 8008488:	e7ec      	b.n	8008464 <_malloc_r+0xa0>
 800848a:	4623      	mov	r3, r4
 800848c:	6864      	ldr	r4, [r4, #4]
 800848e:	e7b2      	b.n	80083f6 <_malloc_r+0x32>
 8008490:	4634      	mov	r4, r6
 8008492:	6876      	ldr	r6, [r6, #4]
 8008494:	e7b9      	b.n	800840a <_malloc_r+0x46>
 8008496:	230c      	movs	r3, #12
 8008498:	603b      	str	r3, [r7, #0]
 800849a:	4638      	mov	r0, r7
 800849c:	f003 f87a 	bl	800b594 <__malloc_unlock>
 80084a0:	e7a1      	b.n	80083e6 <_malloc_r+0x22>
 80084a2:	6025      	str	r5, [r4, #0]
 80084a4:	e7de      	b.n	8008464 <_malloc_r+0xa0>
 80084a6:	bf00      	nop
 80084a8:	20000ad4 	.word	0x20000ad4

080084ac <__cvt>:
 80084ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	ec55 4b10 	vmov	r4, r5, d0
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	460e      	mov	r6, r1
 80084b8:	4619      	mov	r1, r3
 80084ba:	462b      	mov	r3, r5
 80084bc:	bfbb      	ittet	lt
 80084be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084c2:	461d      	movlt	r5, r3
 80084c4:	2300      	movge	r3, #0
 80084c6:	232d      	movlt	r3, #45	; 0x2d
 80084c8:	700b      	strb	r3, [r1, #0]
 80084ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084d0:	4691      	mov	r9, r2
 80084d2:	f023 0820 	bic.w	r8, r3, #32
 80084d6:	bfbc      	itt	lt
 80084d8:	4622      	movlt	r2, r4
 80084da:	4614      	movlt	r4, r2
 80084dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084e0:	d005      	beq.n	80084ee <__cvt+0x42>
 80084e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084e6:	d100      	bne.n	80084ea <__cvt+0x3e>
 80084e8:	3601      	adds	r6, #1
 80084ea:	2102      	movs	r1, #2
 80084ec:	e000      	b.n	80084f0 <__cvt+0x44>
 80084ee:	2103      	movs	r1, #3
 80084f0:	ab03      	add	r3, sp, #12
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	ab02      	add	r3, sp, #8
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	ec45 4b10 	vmov	d0, r4, r5
 80084fc:	4653      	mov	r3, sl
 80084fe:	4632      	mov	r2, r6
 8008500:	f001 fdd6 	bl	800a0b0 <_dtoa_r>
 8008504:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008508:	4607      	mov	r7, r0
 800850a:	d102      	bne.n	8008512 <__cvt+0x66>
 800850c:	f019 0f01 	tst.w	r9, #1
 8008510:	d022      	beq.n	8008558 <__cvt+0xac>
 8008512:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008516:	eb07 0906 	add.w	r9, r7, r6
 800851a:	d110      	bne.n	800853e <__cvt+0x92>
 800851c:	783b      	ldrb	r3, [r7, #0]
 800851e:	2b30      	cmp	r3, #48	; 0x30
 8008520:	d10a      	bne.n	8008538 <__cvt+0x8c>
 8008522:	2200      	movs	r2, #0
 8008524:	2300      	movs	r3, #0
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f7f8 fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 800852e:	b918      	cbnz	r0, 8008538 <__cvt+0x8c>
 8008530:	f1c6 0601 	rsb	r6, r6, #1
 8008534:	f8ca 6000 	str.w	r6, [sl]
 8008538:	f8da 3000 	ldr.w	r3, [sl]
 800853c:	4499      	add	r9, r3
 800853e:	2200      	movs	r2, #0
 8008540:	2300      	movs	r3, #0
 8008542:	4620      	mov	r0, r4
 8008544:	4629      	mov	r1, r5
 8008546:	f7f8 facf 	bl	8000ae8 <__aeabi_dcmpeq>
 800854a:	b108      	cbz	r0, 8008550 <__cvt+0xa4>
 800854c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008550:	2230      	movs	r2, #48	; 0x30
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	454b      	cmp	r3, r9
 8008556:	d307      	bcc.n	8008568 <__cvt+0xbc>
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800855c:	1bdb      	subs	r3, r3, r7
 800855e:	4638      	mov	r0, r7
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	b004      	add	sp, #16
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	1c59      	adds	r1, r3, #1
 800856a:	9103      	str	r1, [sp, #12]
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	e7f0      	b.n	8008552 <__cvt+0xa6>

08008570 <__exponent>:
 8008570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008572:	4603      	mov	r3, r0
 8008574:	2900      	cmp	r1, #0
 8008576:	bfb8      	it	lt
 8008578:	4249      	neglt	r1, r1
 800857a:	f803 2b02 	strb.w	r2, [r3], #2
 800857e:	bfb4      	ite	lt
 8008580:	222d      	movlt	r2, #45	; 0x2d
 8008582:	222b      	movge	r2, #43	; 0x2b
 8008584:	2909      	cmp	r1, #9
 8008586:	7042      	strb	r2, [r0, #1]
 8008588:	dd2a      	ble.n	80085e0 <__exponent+0x70>
 800858a:	f10d 0407 	add.w	r4, sp, #7
 800858e:	46a4      	mov	ip, r4
 8008590:	270a      	movs	r7, #10
 8008592:	46a6      	mov	lr, r4
 8008594:	460a      	mov	r2, r1
 8008596:	fb91 f6f7 	sdiv	r6, r1, r7
 800859a:	fb07 1516 	mls	r5, r7, r6, r1
 800859e:	3530      	adds	r5, #48	; 0x30
 80085a0:	2a63      	cmp	r2, #99	; 0x63
 80085a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80085a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085aa:	4631      	mov	r1, r6
 80085ac:	dcf1      	bgt.n	8008592 <__exponent+0x22>
 80085ae:	3130      	adds	r1, #48	; 0x30
 80085b0:	f1ae 0502 	sub.w	r5, lr, #2
 80085b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085b8:	1c44      	adds	r4, r0, #1
 80085ba:	4629      	mov	r1, r5
 80085bc:	4561      	cmp	r1, ip
 80085be:	d30a      	bcc.n	80085d6 <__exponent+0x66>
 80085c0:	f10d 0209 	add.w	r2, sp, #9
 80085c4:	eba2 020e 	sub.w	r2, r2, lr
 80085c8:	4565      	cmp	r5, ip
 80085ca:	bf88      	it	hi
 80085cc:	2200      	movhi	r2, #0
 80085ce:	4413      	add	r3, r2
 80085d0:	1a18      	subs	r0, r3, r0
 80085d2:	b003      	add	sp, #12
 80085d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80085de:	e7ed      	b.n	80085bc <__exponent+0x4c>
 80085e0:	2330      	movs	r3, #48	; 0x30
 80085e2:	3130      	adds	r1, #48	; 0x30
 80085e4:	7083      	strb	r3, [r0, #2]
 80085e6:	70c1      	strb	r1, [r0, #3]
 80085e8:	1d03      	adds	r3, r0, #4
 80085ea:	e7f1      	b.n	80085d0 <__exponent+0x60>

080085ec <_printf_float>:
 80085ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f0:	ed2d 8b02 	vpush	{d8}
 80085f4:	b08d      	sub	sp, #52	; 0x34
 80085f6:	460c      	mov	r4, r1
 80085f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085fc:	4616      	mov	r6, r2
 80085fe:	461f      	mov	r7, r3
 8008600:	4605      	mov	r5, r0
 8008602:	f002 ffa7 	bl	800b554 <_localeconv_r>
 8008606:	f8d0 a000 	ldr.w	sl, [r0]
 800860a:	4650      	mov	r0, sl
 800860c:	f7f7 fdf0 	bl	80001f0 <strlen>
 8008610:	2300      	movs	r3, #0
 8008612:	930a      	str	r3, [sp, #40]	; 0x28
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	f8d8 3000 	ldr.w	r3, [r8]
 800861c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008620:	3307      	adds	r3, #7
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	f103 0208 	add.w	r2, r3, #8
 800862a:	f8c8 2000 	str.w	r2, [r8]
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008636:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800863a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800863e:	9307      	str	r3, [sp, #28]
 8008640:	f8cd 8018 	str.w	r8, [sp, #24]
 8008644:	ee08 0a10 	vmov	s16, r0
 8008648:	4b9f      	ldr	r3, [pc, #636]	; (80088c8 <_printf_float+0x2dc>)
 800864a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800864e:	f04f 32ff 	mov.w	r2, #4294967295
 8008652:	f7f8 fa7b 	bl	8000b4c <__aeabi_dcmpun>
 8008656:	bb88      	cbnz	r0, 80086bc <_printf_float+0xd0>
 8008658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800865c:	4b9a      	ldr	r3, [pc, #616]	; (80088c8 <_printf_float+0x2dc>)
 800865e:	f04f 32ff 	mov.w	r2, #4294967295
 8008662:	f7f8 fa55 	bl	8000b10 <__aeabi_dcmple>
 8008666:	bb48      	cbnz	r0, 80086bc <_printf_float+0xd0>
 8008668:	2200      	movs	r2, #0
 800866a:	2300      	movs	r3, #0
 800866c:	4640      	mov	r0, r8
 800866e:	4649      	mov	r1, r9
 8008670:	f7f8 fa44 	bl	8000afc <__aeabi_dcmplt>
 8008674:	b110      	cbz	r0, 800867c <_printf_float+0x90>
 8008676:	232d      	movs	r3, #45	; 0x2d
 8008678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800867c:	4b93      	ldr	r3, [pc, #588]	; (80088cc <_printf_float+0x2e0>)
 800867e:	4894      	ldr	r0, [pc, #592]	; (80088d0 <_printf_float+0x2e4>)
 8008680:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008684:	bf94      	ite	ls
 8008686:	4698      	movls	r8, r3
 8008688:	4680      	movhi	r8, r0
 800868a:	2303      	movs	r3, #3
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	9b05      	ldr	r3, [sp, #20]
 8008690:	f023 0204 	bic.w	r2, r3, #4
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	f04f 0900 	mov.w	r9, #0
 800869a:	9700      	str	r7, [sp, #0]
 800869c:	4633      	mov	r3, r6
 800869e:	aa0b      	add	r2, sp, #44	; 0x2c
 80086a0:	4621      	mov	r1, r4
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 f9d8 	bl	8008a58 <_printf_common>
 80086a8:	3001      	adds	r0, #1
 80086aa:	f040 8090 	bne.w	80087ce <_printf_float+0x1e2>
 80086ae:	f04f 30ff 	mov.w	r0, #4294967295
 80086b2:	b00d      	add	sp, #52	; 0x34
 80086b4:	ecbd 8b02 	vpop	{d8}
 80086b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	4649      	mov	r1, r9
 80086c4:	f7f8 fa42 	bl	8000b4c <__aeabi_dcmpun>
 80086c8:	b140      	cbz	r0, 80086dc <_printf_float+0xf0>
 80086ca:	464b      	mov	r3, r9
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfbc      	itt	lt
 80086d0:	232d      	movlt	r3, #45	; 0x2d
 80086d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086d6:	487f      	ldr	r0, [pc, #508]	; (80088d4 <_printf_float+0x2e8>)
 80086d8:	4b7f      	ldr	r3, [pc, #508]	; (80088d8 <_printf_float+0x2ec>)
 80086da:	e7d1      	b.n	8008680 <_printf_float+0x94>
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80086e2:	9206      	str	r2, [sp, #24]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	d13f      	bne.n	8008768 <_printf_float+0x17c>
 80086e8:	2306      	movs	r3, #6
 80086ea:	6063      	str	r3, [r4, #4]
 80086ec:	9b05      	ldr	r3, [sp, #20]
 80086ee:	6861      	ldr	r1, [r4, #4]
 80086f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086f4:	2300      	movs	r3, #0
 80086f6:	9303      	str	r3, [sp, #12]
 80086f8:	ab0a      	add	r3, sp, #40	; 0x28
 80086fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086fe:	ab09      	add	r3, sp, #36	; 0x24
 8008700:	ec49 8b10 	vmov	d0, r8, r9
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	6022      	str	r2, [r4, #0]
 8008708:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800870c:	4628      	mov	r0, r5
 800870e:	f7ff fecd 	bl	80084ac <__cvt>
 8008712:	9b06      	ldr	r3, [sp, #24]
 8008714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008716:	2b47      	cmp	r3, #71	; 0x47
 8008718:	4680      	mov	r8, r0
 800871a:	d108      	bne.n	800872e <_printf_float+0x142>
 800871c:	1cc8      	adds	r0, r1, #3
 800871e:	db02      	blt.n	8008726 <_printf_float+0x13a>
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	4299      	cmp	r1, r3
 8008724:	dd41      	ble.n	80087aa <_printf_float+0x1be>
 8008726:	f1ab 0b02 	sub.w	fp, fp, #2
 800872a:	fa5f fb8b 	uxtb.w	fp, fp
 800872e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008732:	d820      	bhi.n	8008776 <_printf_float+0x18a>
 8008734:	3901      	subs	r1, #1
 8008736:	465a      	mov	r2, fp
 8008738:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800873c:	9109      	str	r1, [sp, #36]	; 0x24
 800873e:	f7ff ff17 	bl	8008570 <__exponent>
 8008742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008744:	1813      	adds	r3, r2, r0
 8008746:	2a01      	cmp	r2, #1
 8008748:	4681      	mov	r9, r0
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	dc02      	bgt.n	8008754 <_printf_float+0x168>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	07d2      	lsls	r2, r2, #31
 8008752:	d501      	bpl.n	8008758 <_printf_float+0x16c>
 8008754:	3301      	adds	r3, #1
 8008756:	6123      	str	r3, [r4, #16]
 8008758:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800875c:	2b00      	cmp	r3, #0
 800875e:	d09c      	beq.n	800869a <_printf_float+0xae>
 8008760:	232d      	movs	r3, #45	; 0x2d
 8008762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008766:	e798      	b.n	800869a <_printf_float+0xae>
 8008768:	9a06      	ldr	r2, [sp, #24]
 800876a:	2a47      	cmp	r2, #71	; 0x47
 800876c:	d1be      	bne.n	80086ec <_printf_float+0x100>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1bc      	bne.n	80086ec <_printf_float+0x100>
 8008772:	2301      	movs	r3, #1
 8008774:	e7b9      	b.n	80086ea <_printf_float+0xfe>
 8008776:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800877a:	d118      	bne.n	80087ae <_printf_float+0x1c2>
 800877c:	2900      	cmp	r1, #0
 800877e:	6863      	ldr	r3, [r4, #4]
 8008780:	dd0b      	ble.n	800879a <_printf_float+0x1ae>
 8008782:	6121      	str	r1, [r4, #16]
 8008784:	b913      	cbnz	r3, 800878c <_printf_float+0x1a0>
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	07d0      	lsls	r0, r2, #31
 800878a:	d502      	bpl.n	8008792 <_printf_float+0x1a6>
 800878c:	3301      	adds	r3, #1
 800878e:	440b      	add	r3, r1
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	65a1      	str	r1, [r4, #88]	; 0x58
 8008794:	f04f 0900 	mov.w	r9, #0
 8008798:	e7de      	b.n	8008758 <_printf_float+0x16c>
 800879a:	b913      	cbnz	r3, 80087a2 <_printf_float+0x1b6>
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	07d2      	lsls	r2, r2, #31
 80087a0:	d501      	bpl.n	80087a6 <_printf_float+0x1ba>
 80087a2:	3302      	adds	r3, #2
 80087a4:	e7f4      	b.n	8008790 <_printf_float+0x1a4>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e7f2      	b.n	8008790 <_printf_float+0x1a4>
 80087aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b0:	4299      	cmp	r1, r3
 80087b2:	db05      	blt.n	80087c0 <_printf_float+0x1d4>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	6121      	str	r1, [r4, #16]
 80087b8:	07d8      	lsls	r0, r3, #31
 80087ba:	d5ea      	bpl.n	8008792 <_printf_float+0x1a6>
 80087bc:	1c4b      	adds	r3, r1, #1
 80087be:	e7e7      	b.n	8008790 <_printf_float+0x1a4>
 80087c0:	2900      	cmp	r1, #0
 80087c2:	bfd4      	ite	le
 80087c4:	f1c1 0202 	rsble	r2, r1, #2
 80087c8:	2201      	movgt	r2, #1
 80087ca:	4413      	add	r3, r2
 80087cc:	e7e0      	b.n	8008790 <_printf_float+0x1a4>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	055a      	lsls	r2, r3, #21
 80087d2:	d407      	bmi.n	80087e4 <_printf_float+0x1f8>
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	4642      	mov	r2, r8
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	d12c      	bne.n	800883c <_printf_float+0x250>
 80087e2:	e764      	b.n	80086ae <_printf_float+0xc2>
 80087e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087e8:	f240 80e0 	bls.w	80089ac <_printf_float+0x3c0>
 80087ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087f0:	2200      	movs	r2, #0
 80087f2:	2300      	movs	r3, #0
 80087f4:	f7f8 f978 	bl	8000ae8 <__aeabi_dcmpeq>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d034      	beq.n	8008866 <_printf_float+0x27a>
 80087fc:	4a37      	ldr	r2, [pc, #220]	; (80088dc <_printf_float+0x2f0>)
 80087fe:	2301      	movs	r3, #1
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	f43f af51 	beq.w	80086ae <_printf_float+0xc2>
 800880c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008810:	429a      	cmp	r2, r3
 8008812:	db02      	blt.n	800881a <_printf_float+0x22e>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	07d8      	lsls	r0, r3, #31
 8008818:	d510      	bpl.n	800883c <_printf_float+0x250>
 800881a:	ee18 3a10 	vmov	r3, s16
 800881e:	4652      	mov	r2, sl
 8008820:	4631      	mov	r1, r6
 8008822:	4628      	mov	r0, r5
 8008824:	47b8      	blx	r7
 8008826:	3001      	adds	r0, #1
 8008828:	f43f af41 	beq.w	80086ae <_printf_float+0xc2>
 800882c:	f04f 0800 	mov.w	r8, #0
 8008830:	f104 091a 	add.w	r9, r4, #26
 8008834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008836:	3b01      	subs	r3, #1
 8008838:	4543      	cmp	r3, r8
 800883a:	dc09      	bgt.n	8008850 <_printf_float+0x264>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	079b      	lsls	r3, r3, #30
 8008840:	f100 8105 	bmi.w	8008a4e <_printf_float+0x462>
 8008844:	68e0      	ldr	r0, [r4, #12]
 8008846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008848:	4298      	cmp	r0, r3
 800884a:	bfb8      	it	lt
 800884c:	4618      	movlt	r0, r3
 800884e:	e730      	b.n	80086b2 <_printf_float+0xc6>
 8008850:	2301      	movs	r3, #1
 8008852:	464a      	mov	r2, r9
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f af27 	beq.w	80086ae <_printf_float+0xc2>
 8008860:	f108 0801 	add.w	r8, r8, #1
 8008864:	e7e6      	b.n	8008834 <_printf_float+0x248>
 8008866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc39      	bgt.n	80088e0 <_printf_float+0x2f4>
 800886c:	4a1b      	ldr	r2, [pc, #108]	; (80088dc <_printf_float+0x2f0>)
 800886e:	2301      	movs	r3, #1
 8008870:	4631      	mov	r1, r6
 8008872:	4628      	mov	r0, r5
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f af19 	beq.w	80086ae <_printf_float+0xc2>
 800887c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008880:	4313      	orrs	r3, r2
 8008882:	d102      	bne.n	800888a <_printf_float+0x29e>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	07d9      	lsls	r1, r3, #31
 8008888:	d5d8      	bpl.n	800883c <_printf_float+0x250>
 800888a:	ee18 3a10 	vmov	r3, s16
 800888e:	4652      	mov	r2, sl
 8008890:	4631      	mov	r1, r6
 8008892:	4628      	mov	r0, r5
 8008894:	47b8      	blx	r7
 8008896:	3001      	adds	r0, #1
 8008898:	f43f af09 	beq.w	80086ae <_printf_float+0xc2>
 800889c:	f04f 0900 	mov.w	r9, #0
 80088a0:	f104 0a1a 	add.w	sl, r4, #26
 80088a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a6:	425b      	negs	r3, r3
 80088a8:	454b      	cmp	r3, r9
 80088aa:	dc01      	bgt.n	80088b0 <_printf_float+0x2c4>
 80088ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ae:	e792      	b.n	80087d6 <_printf_float+0x1ea>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4652      	mov	r2, sl
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f aef7 	beq.w	80086ae <_printf_float+0xc2>
 80088c0:	f109 0901 	add.w	r9, r9, #1
 80088c4:	e7ee      	b.n	80088a4 <_printf_float+0x2b8>
 80088c6:	bf00      	nop
 80088c8:	7fefffff 	.word	0x7fefffff
 80088cc:	0800cc2c 	.word	0x0800cc2c
 80088d0:	0800cc30 	.word	0x0800cc30
 80088d4:	0800cc38 	.word	0x0800cc38
 80088d8:	0800cc34 	.word	0x0800cc34
 80088dc:	0800cc3c 	.word	0x0800cc3c
 80088e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088e4:	429a      	cmp	r2, r3
 80088e6:	bfa8      	it	ge
 80088e8:	461a      	movge	r2, r3
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	4691      	mov	r9, r2
 80088ee:	dc37      	bgt.n	8008960 <_printf_float+0x374>
 80088f0:	f04f 0b00 	mov.w	fp, #0
 80088f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088f8:	f104 021a 	add.w	r2, r4, #26
 80088fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	eba3 0309 	sub.w	r3, r3, r9
 8008904:	455b      	cmp	r3, fp
 8008906:	dc33      	bgt.n	8008970 <_printf_float+0x384>
 8008908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800890c:	429a      	cmp	r2, r3
 800890e:	db3b      	blt.n	8008988 <_printf_float+0x39c>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	07da      	lsls	r2, r3, #31
 8008914:	d438      	bmi.n	8008988 <_printf_float+0x39c>
 8008916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008918:	9a05      	ldr	r2, [sp, #20]
 800891a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800891c:	1a9a      	subs	r2, r3, r2
 800891e:	eba3 0901 	sub.w	r9, r3, r1
 8008922:	4591      	cmp	r9, r2
 8008924:	bfa8      	it	ge
 8008926:	4691      	movge	r9, r2
 8008928:	f1b9 0f00 	cmp.w	r9, #0
 800892c:	dc35      	bgt.n	800899a <_printf_float+0x3ae>
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008936:	f104 0a1a 	add.w	sl, r4, #26
 800893a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	eba3 0309 	sub.w	r3, r3, r9
 8008944:	4543      	cmp	r3, r8
 8008946:	f77f af79 	ble.w	800883c <_printf_float+0x250>
 800894a:	2301      	movs	r3, #1
 800894c:	4652      	mov	r2, sl
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f aeaa 	beq.w	80086ae <_printf_float+0xc2>
 800895a:	f108 0801 	add.w	r8, r8, #1
 800895e:	e7ec      	b.n	800893a <_printf_float+0x34e>
 8008960:	4613      	mov	r3, r2
 8008962:	4631      	mov	r1, r6
 8008964:	4642      	mov	r2, r8
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	d1c0      	bne.n	80088f0 <_printf_float+0x304>
 800896e:	e69e      	b.n	80086ae <_printf_float+0xc2>
 8008970:	2301      	movs	r3, #1
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	9205      	str	r2, [sp, #20]
 8008978:	47b8      	blx	r7
 800897a:	3001      	adds	r0, #1
 800897c:	f43f ae97 	beq.w	80086ae <_printf_float+0xc2>
 8008980:	9a05      	ldr	r2, [sp, #20]
 8008982:	f10b 0b01 	add.w	fp, fp, #1
 8008986:	e7b9      	b.n	80088fc <_printf_float+0x310>
 8008988:	ee18 3a10 	vmov	r3, s16
 800898c:	4652      	mov	r2, sl
 800898e:	4631      	mov	r1, r6
 8008990:	4628      	mov	r0, r5
 8008992:	47b8      	blx	r7
 8008994:	3001      	adds	r0, #1
 8008996:	d1be      	bne.n	8008916 <_printf_float+0x32a>
 8008998:	e689      	b.n	80086ae <_printf_float+0xc2>
 800899a:	9a05      	ldr	r2, [sp, #20]
 800899c:	464b      	mov	r3, r9
 800899e:	4442      	add	r2, r8
 80089a0:	4631      	mov	r1, r6
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	d1c1      	bne.n	800892e <_printf_float+0x342>
 80089aa:	e680      	b.n	80086ae <_printf_float+0xc2>
 80089ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ae:	2a01      	cmp	r2, #1
 80089b0:	dc01      	bgt.n	80089b6 <_printf_float+0x3ca>
 80089b2:	07db      	lsls	r3, r3, #31
 80089b4:	d538      	bpl.n	8008a28 <_printf_float+0x43c>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4642      	mov	r2, r8
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f ae74 	beq.w	80086ae <_printf_float+0xc2>
 80089c6:	ee18 3a10 	vmov	r3, s16
 80089ca:	4652      	mov	r2, sl
 80089cc:	4631      	mov	r1, r6
 80089ce:	4628      	mov	r0, r5
 80089d0:	47b8      	blx	r7
 80089d2:	3001      	adds	r0, #1
 80089d4:	f43f ae6b 	beq.w	80086ae <_printf_float+0xc2>
 80089d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	f7f8 f882 	bl	8000ae8 <__aeabi_dcmpeq>
 80089e4:	b9d8      	cbnz	r0, 8008a1e <_printf_float+0x432>
 80089e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e8:	f108 0201 	add.w	r2, r8, #1
 80089ec:	3b01      	subs	r3, #1
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	d10e      	bne.n	8008a16 <_printf_float+0x42a>
 80089f8:	e659      	b.n	80086ae <_printf_float+0xc2>
 80089fa:	2301      	movs	r3, #1
 80089fc:	4652      	mov	r2, sl
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	f43f ae52 	beq.w	80086ae <_printf_float+0xc2>
 8008a0a:	f108 0801 	add.w	r8, r8, #1
 8008a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a10:	3b01      	subs	r3, #1
 8008a12:	4543      	cmp	r3, r8
 8008a14:	dcf1      	bgt.n	80089fa <_printf_float+0x40e>
 8008a16:	464b      	mov	r3, r9
 8008a18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a1c:	e6dc      	b.n	80087d8 <_printf_float+0x1ec>
 8008a1e:	f04f 0800 	mov.w	r8, #0
 8008a22:	f104 0a1a 	add.w	sl, r4, #26
 8008a26:	e7f2      	b.n	8008a0e <_printf_float+0x422>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4642      	mov	r2, r8
 8008a2c:	e7df      	b.n	80089ee <_printf_float+0x402>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	464a      	mov	r2, r9
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f43f ae38 	beq.w	80086ae <_printf_float+0xc2>
 8008a3e:	f108 0801 	add.w	r8, r8, #1
 8008a42:	68e3      	ldr	r3, [r4, #12]
 8008a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a46:	1a5b      	subs	r3, r3, r1
 8008a48:	4543      	cmp	r3, r8
 8008a4a:	dcf0      	bgt.n	8008a2e <_printf_float+0x442>
 8008a4c:	e6fa      	b.n	8008844 <_printf_float+0x258>
 8008a4e:	f04f 0800 	mov.w	r8, #0
 8008a52:	f104 0919 	add.w	r9, r4, #25
 8008a56:	e7f4      	b.n	8008a42 <_printf_float+0x456>

08008a58 <_printf_common>:
 8008a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	4616      	mov	r6, r2
 8008a5e:	4699      	mov	r9, r3
 8008a60:	688a      	ldr	r2, [r1, #8]
 8008a62:	690b      	ldr	r3, [r1, #16]
 8008a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	bfb8      	it	lt
 8008a6c:	4613      	movlt	r3, r2
 8008a6e:	6033      	str	r3, [r6, #0]
 8008a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a74:	4607      	mov	r7, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	b10a      	cbz	r2, 8008a7e <_printf_common+0x26>
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	6033      	str	r3, [r6, #0]
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	0699      	lsls	r1, r3, #26
 8008a82:	bf42      	ittt	mi
 8008a84:	6833      	ldrmi	r3, [r6, #0]
 8008a86:	3302      	addmi	r3, #2
 8008a88:	6033      	strmi	r3, [r6, #0]
 8008a8a:	6825      	ldr	r5, [r4, #0]
 8008a8c:	f015 0506 	ands.w	r5, r5, #6
 8008a90:	d106      	bne.n	8008aa0 <_printf_common+0x48>
 8008a92:	f104 0a19 	add.w	sl, r4, #25
 8008a96:	68e3      	ldr	r3, [r4, #12]
 8008a98:	6832      	ldr	r2, [r6, #0]
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	dc26      	bgt.n	8008aee <_printf_common+0x96>
 8008aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008aa4:	1e13      	subs	r3, r2, #0
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	bf18      	it	ne
 8008aaa:	2301      	movne	r3, #1
 8008aac:	0692      	lsls	r2, r2, #26
 8008aae:	d42b      	bmi.n	8008b08 <_printf_common+0xb0>
 8008ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	47c0      	blx	r8
 8008aba:	3001      	adds	r0, #1
 8008abc:	d01e      	beq.n	8008afc <_printf_common+0xa4>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	68e5      	ldr	r5, [r4, #12]
 8008ac2:	6832      	ldr	r2, [r6, #0]
 8008ac4:	f003 0306 	and.w	r3, r3, #6
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	bf08      	it	eq
 8008acc:	1aad      	subeq	r5, r5, r2
 8008ace:	68a3      	ldr	r3, [r4, #8]
 8008ad0:	6922      	ldr	r2, [r4, #16]
 8008ad2:	bf0c      	ite	eq
 8008ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad8:	2500      	movne	r5, #0
 8008ada:	4293      	cmp	r3, r2
 8008adc:	bfc4      	itt	gt
 8008ade:	1a9b      	subgt	r3, r3, r2
 8008ae0:	18ed      	addgt	r5, r5, r3
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	341a      	adds	r4, #26
 8008ae6:	42b5      	cmp	r5, r6
 8008ae8:	d11a      	bne.n	8008b20 <_printf_common+0xc8>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e008      	b.n	8008b00 <_printf_common+0xa8>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4652      	mov	r2, sl
 8008af2:	4649      	mov	r1, r9
 8008af4:	4638      	mov	r0, r7
 8008af6:	47c0      	blx	r8
 8008af8:	3001      	adds	r0, #1
 8008afa:	d103      	bne.n	8008b04 <_printf_common+0xac>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b04:	3501      	adds	r5, #1
 8008b06:	e7c6      	b.n	8008a96 <_printf_common+0x3e>
 8008b08:	18e1      	adds	r1, r4, r3
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	2030      	movs	r0, #48	; 0x30
 8008b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b12:	4422      	add	r2, r4
 8008b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b1c:	3302      	adds	r3, #2
 8008b1e:	e7c7      	b.n	8008ab0 <_printf_common+0x58>
 8008b20:	2301      	movs	r3, #1
 8008b22:	4622      	mov	r2, r4
 8008b24:	4649      	mov	r1, r9
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c0      	blx	r8
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d0e6      	beq.n	8008afc <_printf_common+0xa4>
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7d9      	b.n	8008ae6 <_printf_common+0x8e>
	...

08008b34 <_printf_i>:
 8008b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	7e0f      	ldrb	r7, [r1, #24]
 8008b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b3c:	2f78      	cmp	r7, #120	; 0x78
 8008b3e:	4691      	mov	r9, r2
 8008b40:	4680      	mov	r8, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	469a      	mov	sl, r3
 8008b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b4a:	d807      	bhi.n	8008b5c <_printf_i+0x28>
 8008b4c:	2f62      	cmp	r7, #98	; 0x62
 8008b4e:	d80a      	bhi.n	8008b66 <_printf_i+0x32>
 8008b50:	2f00      	cmp	r7, #0
 8008b52:	f000 80d8 	beq.w	8008d06 <_printf_i+0x1d2>
 8008b56:	2f58      	cmp	r7, #88	; 0x58
 8008b58:	f000 80a3 	beq.w	8008ca2 <_printf_i+0x16e>
 8008b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b64:	e03a      	b.n	8008bdc <_printf_i+0xa8>
 8008b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b6a:	2b15      	cmp	r3, #21
 8008b6c:	d8f6      	bhi.n	8008b5c <_printf_i+0x28>
 8008b6e:	a101      	add	r1, pc, #4	; (adr r1, 8008b74 <_printf_i+0x40>)
 8008b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b74:	08008bcd 	.word	0x08008bcd
 8008b78:	08008be1 	.word	0x08008be1
 8008b7c:	08008b5d 	.word	0x08008b5d
 8008b80:	08008b5d 	.word	0x08008b5d
 8008b84:	08008b5d 	.word	0x08008b5d
 8008b88:	08008b5d 	.word	0x08008b5d
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008b5d 	.word	0x08008b5d
 8008b94:	08008b5d 	.word	0x08008b5d
 8008b98:	08008b5d 	.word	0x08008b5d
 8008b9c:	08008b5d 	.word	0x08008b5d
 8008ba0:	08008ced 	.word	0x08008ced
 8008ba4:	08008c11 	.word	0x08008c11
 8008ba8:	08008ccf 	.word	0x08008ccf
 8008bac:	08008b5d 	.word	0x08008b5d
 8008bb0:	08008b5d 	.word	0x08008b5d
 8008bb4:	08008d0f 	.word	0x08008d0f
 8008bb8:	08008b5d 	.word	0x08008b5d
 8008bbc:	08008c11 	.word	0x08008c11
 8008bc0:	08008b5d 	.word	0x08008b5d
 8008bc4:	08008b5d 	.word	0x08008b5d
 8008bc8:	08008cd7 	.word	0x08008cd7
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	602a      	str	r2, [r5, #0]
 8008bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e0a3      	b.n	8008d28 <_printf_i+0x1f4>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	6829      	ldr	r1, [r5, #0]
 8008be4:	0606      	lsls	r6, r0, #24
 8008be6:	f101 0304 	add.w	r3, r1, #4
 8008bea:	d50a      	bpl.n	8008c02 <_printf_i+0xce>
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	da03      	bge.n	8008bfc <_printf_i+0xc8>
 8008bf4:	232d      	movs	r3, #45	; 0x2d
 8008bf6:	4276      	negs	r6, r6
 8008bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bfc:	485e      	ldr	r0, [pc, #376]	; (8008d78 <_printf_i+0x244>)
 8008bfe:	230a      	movs	r3, #10
 8008c00:	e019      	b.n	8008c36 <_printf_i+0x102>
 8008c02:	680e      	ldr	r6, [r1, #0]
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c0a:	bf18      	it	ne
 8008c0c:	b236      	sxthne	r6, r6
 8008c0e:	e7ef      	b.n	8008bf0 <_printf_i+0xbc>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	6820      	ldr	r0, [r4, #0]
 8008c14:	1d19      	adds	r1, r3, #4
 8008c16:	6029      	str	r1, [r5, #0]
 8008c18:	0601      	lsls	r1, r0, #24
 8008c1a:	d501      	bpl.n	8008c20 <_printf_i+0xec>
 8008c1c:	681e      	ldr	r6, [r3, #0]
 8008c1e:	e002      	b.n	8008c26 <_printf_i+0xf2>
 8008c20:	0646      	lsls	r6, r0, #25
 8008c22:	d5fb      	bpl.n	8008c1c <_printf_i+0xe8>
 8008c24:	881e      	ldrh	r6, [r3, #0]
 8008c26:	4854      	ldr	r0, [pc, #336]	; (8008d78 <_printf_i+0x244>)
 8008c28:	2f6f      	cmp	r7, #111	; 0x6f
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2308      	moveq	r3, #8
 8008c2e:	230a      	movne	r3, #10
 8008c30:	2100      	movs	r1, #0
 8008c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c36:	6865      	ldr	r5, [r4, #4]
 8008c38:	60a5      	str	r5, [r4, #8]
 8008c3a:	2d00      	cmp	r5, #0
 8008c3c:	bfa2      	ittt	ge
 8008c3e:	6821      	ldrge	r1, [r4, #0]
 8008c40:	f021 0104 	bicge.w	r1, r1, #4
 8008c44:	6021      	strge	r1, [r4, #0]
 8008c46:	b90e      	cbnz	r6, 8008c4c <_printf_i+0x118>
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	d04d      	beq.n	8008ce8 <_printf_i+0x1b4>
 8008c4c:	4615      	mov	r5, r2
 8008c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c52:	fb03 6711 	mls	r7, r3, r1, r6
 8008c56:	5dc7      	ldrb	r7, [r0, r7]
 8008c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c5c:	4637      	mov	r7, r6
 8008c5e:	42bb      	cmp	r3, r7
 8008c60:	460e      	mov	r6, r1
 8008c62:	d9f4      	bls.n	8008c4e <_printf_i+0x11a>
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d10b      	bne.n	8008c80 <_printf_i+0x14c>
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	07de      	lsls	r6, r3, #31
 8008c6c:	d508      	bpl.n	8008c80 <_printf_i+0x14c>
 8008c6e:	6923      	ldr	r3, [r4, #16]
 8008c70:	6861      	ldr	r1, [r4, #4]
 8008c72:	4299      	cmp	r1, r3
 8008c74:	bfde      	ittt	le
 8008c76:	2330      	movle	r3, #48	; 0x30
 8008c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c80:	1b52      	subs	r2, r2, r5
 8008c82:	6122      	str	r2, [r4, #16]
 8008c84:	f8cd a000 	str.w	sl, [sp]
 8008c88:	464b      	mov	r3, r9
 8008c8a:	aa03      	add	r2, sp, #12
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7ff fee2 	bl	8008a58 <_printf_common>
 8008c94:	3001      	adds	r0, #1
 8008c96:	d14c      	bne.n	8008d32 <_printf_i+0x1fe>
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	b004      	add	sp, #16
 8008c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca2:	4835      	ldr	r0, [pc, #212]	; (8008d78 <_printf_i+0x244>)
 8008ca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ca8:	6829      	ldr	r1, [r5, #0]
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cb0:	6029      	str	r1, [r5, #0]
 8008cb2:	061d      	lsls	r5, r3, #24
 8008cb4:	d514      	bpl.n	8008ce0 <_printf_i+0x1ac>
 8008cb6:	07df      	lsls	r7, r3, #31
 8008cb8:	bf44      	itt	mi
 8008cba:	f043 0320 	orrmi.w	r3, r3, #32
 8008cbe:	6023      	strmi	r3, [r4, #0]
 8008cc0:	b91e      	cbnz	r6, 8008cca <_printf_i+0x196>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	f023 0320 	bic.w	r3, r3, #32
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	2310      	movs	r3, #16
 8008ccc:	e7b0      	b.n	8008c30 <_printf_i+0xfc>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f043 0320 	orr.w	r3, r3, #32
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	2378      	movs	r3, #120	; 0x78
 8008cd8:	4828      	ldr	r0, [pc, #160]	; (8008d7c <_printf_i+0x248>)
 8008cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cde:	e7e3      	b.n	8008ca8 <_printf_i+0x174>
 8008ce0:	0659      	lsls	r1, r3, #25
 8008ce2:	bf48      	it	mi
 8008ce4:	b2b6      	uxthmi	r6, r6
 8008ce6:	e7e6      	b.n	8008cb6 <_printf_i+0x182>
 8008ce8:	4615      	mov	r5, r2
 8008cea:	e7bb      	b.n	8008c64 <_printf_i+0x130>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	6826      	ldr	r6, [r4, #0]
 8008cf0:	6961      	ldr	r1, [r4, #20]
 8008cf2:	1d18      	adds	r0, r3, #4
 8008cf4:	6028      	str	r0, [r5, #0]
 8008cf6:	0635      	lsls	r5, r6, #24
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	d501      	bpl.n	8008d00 <_printf_i+0x1cc>
 8008cfc:	6019      	str	r1, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <_printf_i+0x1d2>
 8008d00:	0670      	lsls	r0, r6, #25
 8008d02:	d5fb      	bpl.n	8008cfc <_printf_i+0x1c8>
 8008d04:	8019      	strh	r1, [r3, #0]
 8008d06:	2300      	movs	r3, #0
 8008d08:	6123      	str	r3, [r4, #16]
 8008d0a:	4615      	mov	r5, r2
 8008d0c:	e7ba      	b.n	8008c84 <_printf_i+0x150>
 8008d0e:	682b      	ldr	r3, [r5, #0]
 8008d10:	1d1a      	adds	r2, r3, #4
 8008d12:	602a      	str	r2, [r5, #0]
 8008d14:	681d      	ldr	r5, [r3, #0]
 8008d16:	6862      	ldr	r2, [r4, #4]
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f7f7 fa70 	bl	8000200 <memchr>
 8008d20:	b108      	cbz	r0, 8008d26 <_printf_i+0x1f2>
 8008d22:	1b40      	subs	r0, r0, r5
 8008d24:	6060      	str	r0, [r4, #4]
 8008d26:	6863      	ldr	r3, [r4, #4]
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d30:	e7a8      	b.n	8008c84 <_printf_i+0x150>
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	462a      	mov	r2, r5
 8008d36:	4649      	mov	r1, r9
 8008d38:	4640      	mov	r0, r8
 8008d3a:	47d0      	blx	sl
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d0ab      	beq.n	8008c98 <_printf_i+0x164>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	079b      	lsls	r3, r3, #30
 8008d44:	d413      	bmi.n	8008d6e <_printf_i+0x23a>
 8008d46:	68e0      	ldr	r0, [r4, #12]
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	4298      	cmp	r0, r3
 8008d4c:	bfb8      	it	lt
 8008d4e:	4618      	movlt	r0, r3
 8008d50:	e7a4      	b.n	8008c9c <_printf_i+0x168>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4632      	mov	r2, r6
 8008d56:	4649      	mov	r1, r9
 8008d58:	4640      	mov	r0, r8
 8008d5a:	47d0      	blx	sl
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d09b      	beq.n	8008c98 <_printf_i+0x164>
 8008d60:	3501      	adds	r5, #1
 8008d62:	68e3      	ldr	r3, [r4, #12]
 8008d64:	9903      	ldr	r1, [sp, #12]
 8008d66:	1a5b      	subs	r3, r3, r1
 8008d68:	42ab      	cmp	r3, r5
 8008d6a:	dcf2      	bgt.n	8008d52 <_printf_i+0x21e>
 8008d6c:	e7eb      	b.n	8008d46 <_printf_i+0x212>
 8008d6e:	2500      	movs	r5, #0
 8008d70:	f104 0619 	add.w	r6, r4, #25
 8008d74:	e7f5      	b.n	8008d62 <_printf_i+0x22e>
 8008d76:	bf00      	nop
 8008d78:	0800cc3e 	.word	0x0800cc3e
 8008d7c:	0800cc4f 	.word	0x0800cc4f

08008d80 <_scanf_float>:
 8008d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	b087      	sub	sp, #28
 8008d86:	4617      	mov	r7, r2
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	688b      	ldr	r3, [r1, #8]
 8008d8c:	1e5a      	subs	r2, r3, #1
 8008d8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d92:	bf83      	ittte	hi
 8008d94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d98:	195b      	addhi	r3, r3, r5
 8008d9a:	9302      	strhi	r3, [sp, #8]
 8008d9c:	2300      	movls	r3, #0
 8008d9e:	bf86      	itte	hi
 8008da0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008da4:	608b      	strhi	r3, [r1, #8]
 8008da6:	9302      	strls	r3, [sp, #8]
 8008da8:	680b      	ldr	r3, [r1, #0]
 8008daa:	468b      	mov	fp, r1
 8008dac:	2500      	movs	r5, #0
 8008dae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008db2:	f84b 3b1c 	str.w	r3, [fp], #28
 8008db6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008dba:	4680      	mov	r8, r0
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	465e      	mov	r6, fp
 8008dc0:	46aa      	mov	sl, r5
 8008dc2:	46a9      	mov	r9, r5
 8008dc4:	9501      	str	r5, [sp, #4]
 8008dc6:	68a2      	ldr	r2, [r4, #8]
 8008dc8:	b152      	cbz	r2, 8008de0 <_scanf_float+0x60>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b4e      	cmp	r3, #78	; 0x4e
 8008dd0:	d864      	bhi.n	8008e9c <_scanf_float+0x11c>
 8008dd2:	2b40      	cmp	r3, #64	; 0x40
 8008dd4:	d83c      	bhi.n	8008e50 <_scanf_float+0xd0>
 8008dd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008dda:	b2c8      	uxtb	r0, r1
 8008ddc:	280e      	cmp	r0, #14
 8008dde:	d93a      	bls.n	8008e56 <_scanf_float+0xd6>
 8008de0:	f1b9 0f00 	cmp.w	r9, #0
 8008de4:	d003      	beq.n	8008dee <_scanf_float+0x6e>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008df2:	f1ba 0f01 	cmp.w	sl, #1
 8008df6:	f200 8113 	bhi.w	8009020 <_scanf_float+0x2a0>
 8008dfa:	455e      	cmp	r6, fp
 8008dfc:	f200 8105 	bhi.w	800900a <_scanf_float+0x28a>
 8008e00:	2501      	movs	r5, #1
 8008e02:	4628      	mov	r0, r5
 8008e04:	b007      	add	sp, #28
 8008e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e0e:	2a0d      	cmp	r2, #13
 8008e10:	d8e6      	bhi.n	8008de0 <_scanf_float+0x60>
 8008e12:	a101      	add	r1, pc, #4	; (adr r1, 8008e18 <_scanf_float+0x98>)
 8008e14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e18:	08008f57 	.word	0x08008f57
 8008e1c:	08008de1 	.word	0x08008de1
 8008e20:	08008de1 	.word	0x08008de1
 8008e24:	08008de1 	.word	0x08008de1
 8008e28:	08008fb7 	.word	0x08008fb7
 8008e2c:	08008f8f 	.word	0x08008f8f
 8008e30:	08008de1 	.word	0x08008de1
 8008e34:	08008de1 	.word	0x08008de1
 8008e38:	08008f65 	.word	0x08008f65
 8008e3c:	08008de1 	.word	0x08008de1
 8008e40:	08008de1 	.word	0x08008de1
 8008e44:	08008de1 	.word	0x08008de1
 8008e48:	08008de1 	.word	0x08008de1
 8008e4c:	08008f1d 	.word	0x08008f1d
 8008e50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e54:	e7db      	b.n	8008e0e <_scanf_float+0x8e>
 8008e56:	290e      	cmp	r1, #14
 8008e58:	d8c2      	bhi.n	8008de0 <_scanf_float+0x60>
 8008e5a:	a001      	add	r0, pc, #4	; (adr r0, 8008e60 <_scanf_float+0xe0>)
 8008e5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e60:	08008f0f 	.word	0x08008f0f
 8008e64:	08008de1 	.word	0x08008de1
 8008e68:	08008f0f 	.word	0x08008f0f
 8008e6c:	08008fa3 	.word	0x08008fa3
 8008e70:	08008de1 	.word	0x08008de1
 8008e74:	08008ebd 	.word	0x08008ebd
 8008e78:	08008ef9 	.word	0x08008ef9
 8008e7c:	08008ef9 	.word	0x08008ef9
 8008e80:	08008ef9 	.word	0x08008ef9
 8008e84:	08008ef9 	.word	0x08008ef9
 8008e88:	08008ef9 	.word	0x08008ef9
 8008e8c:	08008ef9 	.word	0x08008ef9
 8008e90:	08008ef9 	.word	0x08008ef9
 8008e94:	08008ef9 	.word	0x08008ef9
 8008e98:	08008ef9 	.word	0x08008ef9
 8008e9c:	2b6e      	cmp	r3, #110	; 0x6e
 8008e9e:	d809      	bhi.n	8008eb4 <_scanf_float+0x134>
 8008ea0:	2b60      	cmp	r3, #96	; 0x60
 8008ea2:	d8b2      	bhi.n	8008e0a <_scanf_float+0x8a>
 8008ea4:	2b54      	cmp	r3, #84	; 0x54
 8008ea6:	d077      	beq.n	8008f98 <_scanf_float+0x218>
 8008ea8:	2b59      	cmp	r3, #89	; 0x59
 8008eaa:	d199      	bne.n	8008de0 <_scanf_float+0x60>
 8008eac:	2d07      	cmp	r5, #7
 8008eae:	d197      	bne.n	8008de0 <_scanf_float+0x60>
 8008eb0:	2508      	movs	r5, #8
 8008eb2:	e029      	b.n	8008f08 <_scanf_float+0x188>
 8008eb4:	2b74      	cmp	r3, #116	; 0x74
 8008eb6:	d06f      	beq.n	8008f98 <_scanf_float+0x218>
 8008eb8:	2b79      	cmp	r3, #121	; 0x79
 8008eba:	e7f6      	b.n	8008eaa <_scanf_float+0x12a>
 8008ebc:	6821      	ldr	r1, [r4, #0]
 8008ebe:	05c8      	lsls	r0, r1, #23
 8008ec0:	d51a      	bpl.n	8008ef8 <_scanf_float+0x178>
 8008ec2:	9b02      	ldr	r3, [sp, #8]
 8008ec4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ec8:	6021      	str	r1, [r4, #0]
 8008eca:	f109 0901 	add.w	r9, r9, #1
 8008ece:	b11b      	cbz	r3, 8008ed8 <_scanf_float+0x158>
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	60a2      	str	r2, [r4, #8]
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	60a3      	str	r3, [r4, #8]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	6123      	str	r3, [r4, #16]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	607b      	str	r3, [r7, #4]
 8008eec:	f340 8084 	ble.w	8008ff8 <_scanf_float+0x278>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	e766      	b.n	8008dc6 <_scanf_float+0x46>
 8008ef8:	eb1a 0f05 	cmn.w	sl, r5
 8008efc:	f47f af70 	bne.w	8008de0 <_scanf_float+0x60>
 8008f00:	6822      	ldr	r2, [r4, #0]
 8008f02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f06:	6022      	str	r2, [r4, #0]
 8008f08:	f806 3b01 	strb.w	r3, [r6], #1
 8008f0c:	e7e4      	b.n	8008ed8 <_scanf_float+0x158>
 8008f0e:	6822      	ldr	r2, [r4, #0]
 8008f10:	0610      	lsls	r0, r2, #24
 8008f12:	f57f af65 	bpl.w	8008de0 <_scanf_float+0x60>
 8008f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f1a:	e7f4      	b.n	8008f06 <_scanf_float+0x186>
 8008f1c:	f1ba 0f00 	cmp.w	sl, #0
 8008f20:	d10e      	bne.n	8008f40 <_scanf_float+0x1c0>
 8008f22:	f1b9 0f00 	cmp.w	r9, #0
 8008f26:	d10e      	bne.n	8008f46 <_scanf_float+0x1c6>
 8008f28:	6822      	ldr	r2, [r4, #0]
 8008f2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f32:	d108      	bne.n	8008f46 <_scanf_float+0x1c6>
 8008f34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f38:	6022      	str	r2, [r4, #0]
 8008f3a:	f04f 0a01 	mov.w	sl, #1
 8008f3e:	e7e3      	b.n	8008f08 <_scanf_float+0x188>
 8008f40:	f1ba 0f02 	cmp.w	sl, #2
 8008f44:	d055      	beq.n	8008ff2 <_scanf_float+0x272>
 8008f46:	2d01      	cmp	r5, #1
 8008f48:	d002      	beq.n	8008f50 <_scanf_float+0x1d0>
 8008f4a:	2d04      	cmp	r5, #4
 8008f4c:	f47f af48 	bne.w	8008de0 <_scanf_float+0x60>
 8008f50:	3501      	adds	r5, #1
 8008f52:	b2ed      	uxtb	r5, r5
 8008f54:	e7d8      	b.n	8008f08 <_scanf_float+0x188>
 8008f56:	f1ba 0f01 	cmp.w	sl, #1
 8008f5a:	f47f af41 	bne.w	8008de0 <_scanf_float+0x60>
 8008f5e:	f04f 0a02 	mov.w	sl, #2
 8008f62:	e7d1      	b.n	8008f08 <_scanf_float+0x188>
 8008f64:	b97d      	cbnz	r5, 8008f86 <_scanf_float+0x206>
 8008f66:	f1b9 0f00 	cmp.w	r9, #0
 8008f6a:	f47f af3c 	bne.w	8008de6 <_scanf_float+0x66>
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f78:	f47f af39 	bne.w	8008dee <_scanf_float+0x6e>
 8008f7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f80:	6022      	str	r2, [r4, #0]
 8008f82:	2501      	movs	r5, #1
 8008f84:	e7c0      	b.n	8008f08 <_scanf_float+0x188>
 8008f86:	2d03      	cmp	r5, #3
 8008f88:	d0e2      	beq.n	8008f50 <_scanf_float+0x1d0>
 8008f8a:	2d05      	cmp	r5, #5
 8008f8c:	e7de      	b.n	8008f4c <_scanf_float+0x1cc>
 8008f8e:	2d02      	cmp	r5, #2
 8008f90:	f47f af26 	bne.w	8008de0 <_scanf_float+0x60>
 8008f94:	2503      	movs	r5, #3
 8008f96:	e7b7      	b.n	8008f08 <_scanf_float+0x188>
 8008f98:	2d06      	cmp	r5, #6
 8008f9a:	f47f af21 	bne.w	8008de0 <_scanf_float+0x60>
 8008f9e:	2507      	movs	r5, #7
 8008fa0:	e7b2      	b.n	8008f08 <_scanf_float+0x188>
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	0591      	lsls	r1, r2, #22
 8008fa6:	f57f af1b 	bpl.w	8008de0 <_scanf_float+0x60>
 8008faa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fb4:	e7a8      	b.n	8008f08 <_scanf_float+0x188>
 8008fb6:	6822      	ldr	r2, [r4, #0]
 8008fb8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008fbc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008fc0:	d006      	beq.n	8008fd0 <_scanf_float+0x250>
 8008fc2:	0550      	lsls	r0, r2, #21
 8008fc4:	f57f af0c 	bpl.w	8008de0 <_scanf_float+0x60>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	f43f af0f 	beq.w	8008dee <_scanf_float+0x6e>
 8008fd0:	0591      	lsls	r1, r2, #22
 8008fd2:	bf58      	it	pl
 8008fd4:	9901      	ldrpl	r1, [sp, #4]
 8008fd6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fda:	bf58      	it	pl
 8008fdc:	eba9 0101 	subpl.w	r1, r9, r1
 8008fe0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008fe4:	bf58      	it	pl
 8008fe6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008fea:	6022      	str	r2, [r4, #0]
 8008fec:	f04f 0900 	mov.w	r9, #0
 8008ff0:	e78a      	b.n	8008f08 <_scanf_float+0x188>
 8008ff2:	f04f 0a03 	mov.w	sl, #3
 8008ff6:	e787      	b.n	8008f08 <_scanf_float+0x188>
 8008ff8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	4640      	mov	r0, r8
 8009000:	4798      	blx	r3
 8009002:	2800      	cmp	r0, #0
 8009004:	f43f aedf 	beq.w	8008dc6 <_scanf_float+0x46>
 8009008:	e6ea      	b.n	8008de0 <_scanf_float+0x60>
 800900a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800900e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009012:	463a      	mov	r2, r7
 8009014:	4640      	mov	r0, r8
 8009016:	4798      	blx	r3
 8009018:	6923      	ldr	r3, [r4, #16]
 800901a:	3b01      	subs	r3, #1
 800901c:	6123      	str	r3, [r4, #16]
 800901e:	e6ec      	b.n	8008dfa <_scanf_float+0x7a>
 8009020:	1e6b      	subs	r3, r5, #1
 8009022:	2b06      	cmp	r3, #6
 8009024:	d825      	bhi.n	8009072 <_scanf_float+0x2f2>
 8009026:	2d02      	cmp	r5, #2
 8009028:	d836      	bhi.n	8009098 <_scanf_float+0x318>
 800902a:	455e      	cmp	r6, fp
 800902c:	f67f aee8 	bls.w	8008e00 <_scanf_float+0x80>
 8009030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009034:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009038:	463a      	mov	r2, r7
 800903a:	4640      	mov	r0, r8
 800903c:	4798      	blx	r3
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	3b01      	subs	r3, #1
 8009042:	6123      	str	r3, [r4, #16]
 8009044:	e7f1      	b.n	800902a <_scanf_float+0x2aa>
 8009046:	9802      	ldr	r0, [sp, #8]
 8009048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800904c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009050:	9002      	str	r0, [sp, #8]
 8009052:	463a      	mov	r2, r7
 8009054:	4640      	mov	r0, r8
 8009056:	4798      	blx	r3
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	3b01      	subs	r3, #1
 800905c:	6123      	str	r3, [r4, #16]
 800905e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009062:	fa5f fa8a 	uxtb.w	sl, sl
 8009066:	f1ba 0f02 	cmp.w	sl, #2
 800906a:	d1ec      	bne.n	8009046 <_scanf_float+0x2c6>
 800906c:	3d03      	subs	r5, #3
 800906e:	b2ed      	uxtb	r5, r5
 8009070:	1b76      	subs	r6, r6, r5
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	05da      	lsls	r2, r3, #23
 8009076:	d52f      	bpl.n	80090d8 <_scanf_float+0x358>
 8009078:	055b      	lsls	r3, r3, #21
 800907a:	d510      	bpl.n	800909e <_scanf_float+0x31e>
 800907c:	455e      	cmp	r6, fp
 800907e:	f67f aebf 	bls.w	8008e00 <_scanf_float+0x80>
 8009082:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800908a:	463a      	mov	r2, r7
 800908c:	4640      	mov	r0, r8
 800908e:	4798      	blx	r3
 8009090:	6923      	ldr	r3, [r4, #16]
 8009092:	3b01      	subs	r3, #1
 8009094:	6123      	str	r3, [r4, #16]
 8009096:	e7f1      	b.n	800907c <_scanf_float+0x2fc>
 8009098:	46aa      	mov	sl, r5
 800909a:	9602      	str	r6, [sp, #8]
 800909c:	e7df      	b.n	800905e <_scanf_float+0x2de>
 800909e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	2965      	cmp	r1, #101	; 0x65
 80090a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80090aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	d00c      	beq.n	80090cc <_scanf_float+0x34c>
 80090b2:	2945      	cmp	r1, #69	; 0x45
 80090b4:	d00a      	beq.n	80090cc <_scanf_float+0x34c>
 80090b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090ba:	463a      	mov	r2, r7
 80090bc:	4640      	mov	r0, r8
 80090be:	4798      	blx	r3
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	1eb5      	subs	r5, r6, #2
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090d0:	463a      	mov	r2, r7
 80090d2:	4640      	mov	r0, r8
 80090d4:	4798      	blx	r3
 80090d6:	462e      	mov	r6, r5
 80090d8:	6825      	ldr	r5, [r4, #0]
 80090da:	f015 0510 	ands.w	r5, r5, #16
 80090de:	d159      	bne.n	8009194 <_scanf_float+0x414>
 80090e0:	7035      	strb	r5, [r6, #0]
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ec:	d11b      	bne.n	8009126 <_scanf_float+0x3a6>
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	454b      	cmp	r3, r9
 80090f2:	eba3 0209 	sub.w	r2, r3, r9
 80090f6:	d123      	bne.n	8009140 <_scanf_float+0x3c0>
 80090f8:	2200      	movs	r2, #0
 80090fa:	4659      	mov	r1, fp
 80090fc:	4640      	mov	r0, r8
 80090fe:	f000 fec1 	bl	8009e84 <_strtod_r>
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	f012 0f02 	tst.w	r2, #2
 800910a:	ec57 6b10 	vmov	r6, r7, d0
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	d021      	beq.n	8009156 <_scanf_float+0x3d6>
 8009112:	9903      	ldr	r1, [sp, #12]
 8009114:	1d1a      	adds	r2, r3, #4
 8009116:	600a      	str	r2, [r1, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	e9c3 6700 	strd	r6, r7, [r3]
 800911e:	68e3      	ldr	r3, [r4, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60e3      	str	r3, [r4, #12]
 8009124:	e66d      	b.n	8008e02 <_scanf_float+0x82>
 8009126:	9b04      	ldr	r3, [sp, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0e5      	beq.n	80090f8 <_scanf_float+0x378>
 800912c:	9905      	ldr	r1, [sp, #20]
 800912e:	230a      	movs	r3, #10
 8009130:	462a      	mov	r2, r5
 8009132:	3101      	adds	r1, #1
 8009134:	4640      	mov	r0, r8
 8009136:	f000 ff2d 	bl	8009f94 <_strtol_r>
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	9e05      	ldr	r6, [sp, #20]
 800913e:	1ac2      	subs	r2, r0, r3
 8009140:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009144:	429e      	cmp	r6, r3
 8009146:	bf28      	it	cs
 8009148:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800914c:	4912      	ldr	r1, [pc, #72]	; (8009198 <_scanf_float+0x418>)
 800914e:	4630      	mov	r0, r6
 8009150:	f000 f854 	bl	80091fc <siprintf>
 8009154:	e7d0      	b.n	80090f8 <_scanf_float+0x378>
 8009156:	9903      	ldr	r1, [sp, #12]
 8009158:	f012 0f04 	tst.w	r2, #4
 800915c:	f103 0204 	add.w	r2, r3, #4
 8009160:	600a      	str	r2, [r1, #0]
 8009162:	d1d9      	bne.n	8009118 <_scanf_float+0x398>
 8009164:	f8d3 8000 	ldr.w	r8, [r3]
 8009168:	ee10 2a10 	vmov	r2, s0
 800916c:	ee10 0a10 	vmov	r0, s0
 8009170:	463b      	mov	r3, r7
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 fcea 	bl	8000b4c <__aeabi_dcmpun>
 8009178:	b128      	cbz	r0, 8009186 <_scanf_float+0x406>
 800917a:	4808      	ldr	r0, [pc, #32]	; (800919c <_scanf_float+0x41c>)
 800917c:	f000 f838 	bl	80091f0 <nanf>
 8009180:	ed88 0a00 	vstr	s0, [r8]
 8009184:	e7cb      	b.n	800911e <_scanf_float+0x39e>
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fd3d 	bl	8000c08 <__aeabi_d2f>
 800918e:	f8c8 0000 	str.w	r0, [r8]
 8009192:	e7c4      	b.n	800911e <_scanf_float+0x39e>
 8009194:	2500      	movs	r5, #0
 8009196:	e634      	b.n	8008e02 <_scanf_float+0x82>
 8009198:	0800cc60 	.word	0x0800cc60
 800919c:	0800d0d0 	.word	0x0800d0d0

080091a0 <iprintf>:
 80091a0:	b40f      	push	{r0, r1, r2, r3}
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <iprintf+0x2c>)
 80091a4:	b513      	push	{r0, r1, r4, lr}
 80091a6:	681c      	ldr	r4, [r3, #0]
 80091a8:	b124      	cbz	r4, 80091b4 <iprintf+0x14>
 80091aa:	69a3      	ldr	r3, [r4, #24]
 80091ac:	b913      	cbnz	r3, 80091b4 <iprintf+0x14>
 80091ae:	4620      	mov	r0, r4
 80091b0:	f001 fdc4 	bl	800ad3c <__sinit>
 80091b4:	ab05      	add	r3, sp, #20
 80091b6:	9a04      	ldr	r2, [sp, #16]
 80091b8:	68a1      	ldr	r1, [r4, #8]
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	4620      	mov	r0, r4
 80091be:	f003 f84b 	bl	800c258 <_vfiprintf_r>
 80091c2:	b002      	add	sp, #8
 80091c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c8:	b004      	add	sp, #16
 80091ca:	4770      	bx	lr
 80091cc:	20000010 	.word	0x20000010

080091d0 <_sbrk_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d06      	ldr	r5, [pc, #24]	; (80091ec <_sbrk_r+0x1c>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	602b      	str	r3, [r5, #0]
 80091dc:	f7f8 fe30 	bl	8001e40 <_sbrk>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_sbrk_r+0x1a>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_sbrk_r+0x1a>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20000ae0 	.word	0x20000ae0

080091f0 <nanf>:
 80091f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80091f8 <nanf+0x8>
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	7fc00000 	.word	0x7fc00000

080091fc <siprintf>:
 80091fc:	b40e      	push	{r1, r2, r3}
 80091fe:	b500      	push	{lr}
 8009200:	b09c      	sub	sp, #112	; 0x70
 8009202:	ab1d      	add	r3, sp, #116	; 0x74
 8009204:	9002      	str	r0, [sp, #8]
 8009206:	9006      	str	r0, [sp, #24]
 8009208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800920c:	4809      	ldr	r0, [pc, #36]	; (8009234 <siprintf+0x38>)
 800920e:	9107      	str	r1, [sp, #28]
 8009210:	9104      	str	r1, [sp, #16]
 8009212:	4909      	ldr	r1, [pc, #36]	; (8009238 <siprintf+0x3c>)
 8009214:	f853 2b04 	ldr.w	r2, [r3], #4
 8009218:	9105      	str	r1, [sp, #20]
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	a902      	add	r1, sp, #8
 8009220:	f002 fef0 	bl	800c004 <_svfiprintf_r>
 8009224:	9b02      	ldr	r3, [sp, #8]
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
 800922a:	b01c      	add	sp, #112	; 0x70
 800922c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009230:	b003      	add	sp, #12
 8009232:	4770      	bx	lr
 8009234:	20000010 	.word	0x20000010
 8009238:	ffff0208 	.word	0xffff0208

0800923c <sulp>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	ec45 4b10 	vmov	d0, r4, r5
 8009246:	4616      	mov	r6, r2
 8009248:	f002 fd1c 	bl	800bc84 <__ulp>
 800924c:	ec51 0b10 	vmov	r0, r1, d0
 8009250:	b17e      	cbz	r6, 8009272 <sulp+0x36>
 8009252:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009256:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800925a:	2b00      	cmp	r3, #0
 800925c:	dd09      	ble.n	8009272 <sulp+0x36>
 800925e:	051b      	lsls	r3, r3, #20
 8009260:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009264:	2400      	movs	r4, #0
 8009266:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f7f7 f9d3 	bl	8000618 <__aeabi_dmul>
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	0000      	movs	r0, r0
	...

08009278 <_strtod_l>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	ed2d 8b02 	vpush	{d8}
 8009280:	b09d      	sub	sp, #116	; 0x74
 8009282:	461f      	mov	r7, r3
 8009284:	2300      	movs	r3, #0
 8009286:	9318      	str	r3, [sp, #96]	; 0x60
 8009288:	4ba2      	ldr	r3, [pc, #648]	; (8009514 <_strtod_l+0x29c>)
 800928a:	9213      	str	r2, [sp, #76]	; 0x4c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	4604      	mov	r4, r0
 8009292:	4618      	mov	r0, r3
 8009294:	4688      	mov	r8, r1
 8009296:	f7f6 ffab 	bl	80001f0 <strlen>
 800929a:	f04f 0a00 	mov.w	sl, #0
 800929e:	4605      	mov	r5, r0
 80092a0:	f04f 0b00 	mov.w	fp, #0
 80092a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	2a2b      	cmp	r2, #43	; 0x2b
 80092ae:	d04e      	beq.n	800934e <_strtod_l+0xd6>
 80092b0:	d83b      	bhi.n	800932a <_strtod_l+0xb2>
 80092b2:	2a0d      	cmp	r2, #13
 80092b4:	d834      	bhi.n	8009320 <_strtod_l+0xa8>
 80092b6:	2a08      	cmp	r2, #8
 80092b8:	d834      	bhi.n	8009324 <_strtod_l+0xac>
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	d03e      	beq.n	800933c <_strtod_l+0xc4>
 80092be:	2300      	movs	r3, #0
 80092c0:	930a      	str	r3, [sp, #40]	; 0x28
 80092c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092c4:	7833      	ldrb	r3, [r6, #0]
 80092c6:	2b30      	cmp	r3, #48	; 0x30
 80092c8:	f040 80b0 	bne.w	800942c <_strtod_l+0x1b4>
 80092cc:	7873      	ldrb	r3, [r6, #1]
 80092ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092d2:	2b58      	cmp	r3, #88	; 0x58
 80092d4:	d168      	bne.n	80093a8 <_strtod_l+0x130>
 80092d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	ab18      	add	r3, sp, #96	; 0x60
 80092dc:	9702      	str	r7, [sp, #8]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	4a8d      	ldr	r2, [pc, #564]	; (8009518 <_strtod_l+0x2a0>)
 80092e2:	ab19      	add	r3, sp, #100	; 0x64
 80092e4:	a917      	add	r1, sp, #92	; 0x5c
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 fe2c 	bl	800af44 <__gethex>
 80092ec:	f010 0707 	ands.w	r7, r0, #7
 80092f0:	4605      	mov	r5, r0
 80092f2:	d005      	beq.n	8009300 <_strtod_l+0x88>
 80092f4:	2f06      	cmp	r7, #6
 80092f6:	d12c      	bne.n	8009352 <_strtod_l+0xda>
 80092f8:	3601      	adds	r6, #1
 80092fa:	2300      	movs	r3, #0
 80092fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80092fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 8590 	bne.w	8009e28 <_strtod_l+0xbb0>
 8009308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930a:	b1eb      	cbz	r3, 8009348 <_strtod_l+0xd0>
 800930c:	4652      	mov	r2, sl
 800930e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009312:	ec43 2b10 	vmov	d0, r2, r3
 8009316:	b01d      	add	sp, #116	; 0x74
 8009318:	ecbd 8b02 	vpop	{d8}
 800931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009320:	2a20      	cmp	r2, #32
 8009322:	d1cc      	bne.n	80092be <_strtod_l+0x46>
 8009324:	3301      	adds	r3, #1
 8009326:	9317      	str	r3, [sp, #92]	; 0x5c
 8009328:	e7be      	b.n	80092a8 <_strtod_l+0x30>
 800932a:	2a2d      	cmp	r2, #45	; 0x2d
 800932c:	d1c7      	bne.n	80092be <_strtod_l+0x46>
 800932e:	2201      	movs	r2, #1
 8009330:	920a      	str	r2, [sp, #40]	; 0x28
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	9217      	str	r2, [sp, #92]	; 0x5c
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1c2      	bne.n	80092c2 <_strtod_l+0x4a>
 800933c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800933e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009342:	2b00      	cmp	r3, #0
 8009344:	f040 856e 	bne.w	8009e24 <_strtod_l+0xbac>
 8009348:	4652      	mov	r2, sl
 800934a:	465b      	mov	r3, fp
 800934c:	e7e1      	b.n	8009312 <_strtod_l+0x9a>
 800934e:	2200      	movs	r2, #0
 8009350:	e7ee      	b.n	8009330 <_strtod_l+0xb8>
 8009352:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009354:	b13a      	cbz	r2, 8009366 <_strtod_l+0xee>
 8009356:	2135      	movs	r1, #53	; 0x35
 8009358:	a81a      	add	r0, sp, #104	; 0x68
 800935a:	f002 fd9e 	bl	800be9a <__copybits>
 800935e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009360:	4620      	mov	r0, r4
 8009362:	f002 f95d 	bl	800b620 <_Bfree>
 8009366:	3f01      	subs	r7, #1
 8009368:	2f04      	cmp	r7, #4
 800936a:	d806      	bhi.n	800937a <_strtod_l+0x102>
 800936c:	e8df f007 	tbb	[pc, r7]
 8009370:	1714030a 	.word	0x1714030a
 8009374:	0a          	.byte	0x0a
 8009375:	00          	.byte	0x00
 8009376:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800937a:	0728      	lsls	r0, r5, #28
 800937c:	d5c0      	bpl.n	8009300 <_strtod_l+0x88>
 800937e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009382:	e7bd      	b.n	8009300 <_strtod_l+0x88>
 8009384:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800938a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800938e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009392:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009396:	e7f0      	b.n	800937a <_strtod_l+0x102>
 8009398:	f8df b180 	ldr.w	fp, [pc, #384]	; 800951c <_strtod_l+0x2a4>
 800939c:	e7ed      	b.n	800937a <_strtod_l+0x102>
 800939e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093a2:	f04f 3aff 	mov.w	sl, #4294967295
 80093a6:	e7e8      	b.n	800937a <_strtod_l+0x102>
 80093a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	2b30      	cmp	r3, #48	; 0x30
 80093b2:	d0f9      	beq.n	80093a8 <_strtod_l+0x130>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0a3      	beq.n	8009300 <_strtod_l+0x88>
 80093b8:	2301      	movs	r3, #1
 80093ba:	f04f 0900 	mov.w	r9, #0
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80093c8:	464f      	mov	r7, r9
 80093ca:	220a      	movs	r2, #10
 80093cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80093ce:	7806      	ldrb	r6, [r0, #0]
 80093d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093d4:	b2d9      	uxtb	r1, r3
 80093d6:	2909      	cmp	r1, #9
 80093d8:	d92a      	bls.n	8009430 <_strtod_l+0x1b8>
 80093da:	9905      	ldr	r1, [sp, #20]
 80093dc:	462a      	mov	r2, r5
 80093de:	f003 f8b6 	bl	800c54e <strncmp>
 80093e2:	b398      	cbz	r0, 800944c <_strtod_l+0x1d4>
 80093e4:	2000      	movs	r0, #0
 80093e6:	4632      	mov	r2, r6
 80093e8:	463d      	mov	r5, r7
 80093ea:	9005      	str	r0, [sp, #20]
 80093ec:	4603      	mov	r3, r0
 80093ee:	2a65      	cmp	r2, #101	; 0x65
 80093f0:	d001      	beq.n	80093f6 <_strtod_l+0x17e>
 80093f2:	2a45      	cmp	r2, #69	; 0x45
 80093f4:	d118      	bne.n	8009428 <_strtod_l+0x1b0>
 80093f6:	b91d      	cbnz	r5, 8009400 <_strtod_l+0x188>
 80093f8:	9a04      	ldr	r2, [sp, #16]
 80093fa:	4302      	orrs	r2, r0
 80093fc:	d09e      	beq.n	800933c <_strtod_l+0xc4>
 80093fe:	2500      	movs	r5, #0
 8009400:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009404:	f108 0201 	add.w	r2, r8, #1
 8009408:	9217      	str	r2, [sp, #92]	; 0x5c
 800940a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800940e:	2a2b      	cmp	r2, #43	; 0x2b
 8009410:	d075      	beq.n	80094fe <_strtod_l+0x286>
 8009412:	2a2d      	cmp	r2, #45	; 0x2d
 8009414:	d07b      	beq.n	800950e <_strtod_l+0x296>
 8009416:	f04f 0c00 	mov.w	ip, #0
 800941a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800941e:	2909      	cmp	r1, #9
 8009420:	f240 8082 	bls.w	8009528 <_strtod_l+0x2b0>
 8009424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009428:	2600      	movs	r6, #0
 800942a:	e09d      	b.n	8009568 <_strtod_l+0x2f0>
 800942c:	2300      	movs	r3, #0
 800942e:	e7c4      	b.n	80093ba <_strtod_l+0x142>
 8009430:	2f08      	cmp	r7, #8
 8009432:	bfd8      	it	le
 8009434:	9907      	ldrle	r1, [sp, #28]
 8009436:	f100 0001 	add.w	r0, r0, #1
 800943a:	bfda      	itte	le
 800943c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009440:	9307      	strle	r3, [sp, #28]
 8009442:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009446:	3701      	adds	r7, #1
 8009448:	9017      	str	r0, [sp, #92]	; 0x5c
 800944a:	e7bf      	b.n	80093cc <_strtod_l+0x154>
 800944c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800944e:	195a      	adds	r2, r3, r5
 8009450:	9217      	str	r2, [sp, #92]	; 0x5c
 8009452:	5d5a      	ldrb	r2, [r3, r5]
 8009454:	2f00      	cmp	r7, #0
 8009456:	d037      	beq.n	80094c8 <_strtod_l+0x250>
 8009458:	9005      	str	r0, [sp, #20]
 800945a:	463d      	mov	r5, r7
 800945c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009460:	2b09      	cmp	r3, #9
 8009462:	d912      	bls.n	800948a <_strtod_l+0x212>
 8009464:	2301      	movs	r3, #1
 8009466:	e7c2      	b.n	80093ee <_strtod_l+0x176>
 8009468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	9217      	str	r2, [sp, #92]	; 0x5c
 800946e:	785a      	ldrb	r2, [r3, #1]
 8009470:	3001      	adds	r0, #1
 8009472:	2a30      	cmp	r2, #48	; 0x30
 8009474:	d0f8      	beq.n	8009468 <_strtod_l+0x1f0>
 8009476:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800947a:	2b08      	cmp	r3, #8
 800947c:	f200 84d9 	bhi.w	8009e32 <_strtod_l+0xbba>
 8009480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009482:	9005      	str	r0, [sp, #20]
 8009484:	2000      	movs	r0, #0
 8009486:	9308      	str	r3, [sp, #32]
 8009488:	4605      	mov	r5, r0
 800948a:	3a30      	subs	r2, #48	; 0x30
 800948c:	f100 0301 	add.w	r3, r0, #1
 8009490:	d014      	beq.n	80094bc <_strtod_l+0x244>
 8009492:	9905      	ldr	r1, [sp, #20]
 8009494:	4419      	add	r1, r3
 8009496:	9105      	str	r1, [sp, #20]
 8009498:	462b      	mov	r3, r5
 800949a:	eb00 0e05 	add.w	lr, r0, r5
 800949e:	210a      	movs	r1, #10
 80094a0:	4573      	cmp	r3, lr
 80094a2:	d113      	bne.n	80094cc <_strtod_l+0x254>
 80094a4:	182b      	adds	r3, r5, r0
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	f105 0501 	add.w	r5, r5, #1
 80094ac:	4405      	add	r5, r0
 80094ae:	dc1c      	bgt.n	80094ea <_strtod_l+0x272>
 80094b0:	9907      	ldr	r1, [sp, #28]
 80094b2:	230a      	movs	r3, #10
 80094b4:	fb03 2301 	mla	r3, r3, r1, r2
 80094b8:	9307      	str	r3, [sp, #28]
 80094ba:	2300      	movs	r3, #0
 80094bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094be:	1c51      	adds	r1, r2, #1
 80094c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80094c2:	7852      	ldrb	r2, [r2, #1]
 80094c4:	4618      	mov	r0, r3
 80094c6:	e7c9      	b.n	800945c <_strtod_l+0x1e4>
 80094c8:	4638      	mov	r0, r7
 80094ca:	e7d2      	b.n	8009472 <_strtod_l+0x1fa>
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	dc04      	bgt.n	80094da <_strtod_l+0x262>
 80094d0:	9e07      	ldr	r6, [sp, #28]
 80094d2:	434e      	muls	r6, r1
 80094d4:	9607      	str	r6, [sp, #28]
 80094d6:	3301      	adds	r3, #1
 80094d8:	e7e2      	b.n	80094a0 <_strtod_l+0x228>
 80094da:	f103 0c01 	add.w	ip, r3, #1
 80094de:	f1bc 0f10 	cmp.w	ip, #16
 80094e2:	bfd8      	it	le
 80094e4:	fb01 f909 	mulle.w	r9, r1, r9
 80094e8:	e7f5      	b.n	80094d6 <_strtod_l+0x25e>
 80094ea:	2d10      	cmp	r5, #16
 80094ec:	bfdc      	itt	le
 80094ee:	230a      	movle	r3, #10
 80094f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80094f4:	e7e1      	b.n	80094ba <_strtod_l+0x242>
 80094f6:	2300      	movs	r3, #0
 80094f8:	9305      	str	r3, [sp, #20]
 80094fa:	2301      	movs	r3, #1
 80094fc:	e77c      	b.n	80093f8 <_strtod_l+0x180>
 80094fe:	f04f 0c00 	mov.w	ip, #0
 8009502:	f108 0202 	add.w	r2, r8, #2
 8009506:	9217      	str	r2, [sp, #92]	; 0x5c
 8009508:	f898 2002 	ldrb.w	r2, [r8, #2]
 800950c:	e785      	b.n	800941a <_strtod_l+0x1a2>
 800950e:	f04f 0c01 	mov.w	ip, #1
 8009512:	e7f6      	b.n	8009502 <_strtod_l+0x28a>
 8009514:	0800cf14 	.word	0x0800cf14
 8009518:	0800cc68 	.word	0x0800cc68
 800951c:	7ff00000 	.word	0x7ff00000
 8009520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009522:	1c51      	adds	r1, r2, #1
 8009524:	9117      	str	r1, [sp, #92]	; 0x5c
 8009526:	7852      	ldrb	r2, [r2, #1]
 8009528:	2a30      	cmp	r2, #48	; 0x30
 800952a:	d0f9      	beq.n	8009520 <_strtod_l+0x2a8>
 800952c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009530:	2908      	cmp	r1, #8
 8009532:	f63f af79 	bhi.w	8009428 <_strtod_l+0x1b0>
 8009536:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800953a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800953c:	9206      	str	r2, [sp, #24]
 800953e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009540:	1c51      	adds	r1, r2, #1
 8009542:	9117      	str	r1, [sp, #92]	; 0x5c
 8009544:	7852      	ldrb	r2, [r2, #1]
 8009546:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800954a:	2e09      	cmp	r6, #9
 800954c:	d937      	bls.n	80095be <_strtod_l+0x346>
 800954e:	9e06      	ldr	r6, [sp, #24]
 8009550:	1b89      	subs	r1, r1, r6
 8009552:	2908      	cmp	r1, #8
 8009554:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009558:	dc02      	bgt.n	8009560 <_strtod_l+0x2e8>
 800955a:	4576      	cmp	r6, lr
 800955c:	bfa8      	it	ge
 800955e:	4676      	movge	r6, lr
 8009560:	f1bc 0f00 	cmp.w	ip, #0
 8009564:	d000      	beq.n	8009568 <_strtod_l+0x2f0>
 8009566:	4276      	negs	r6, r6
 8009568:	2d00      	cmp	r5, #0
 800956a:	d14d      	bne.n	8009608 <_strtod_l+0x390>
 800956c:	9904      	ldr	r1, [sp, #16]
 800956e:	4301      	orrs	r1, r0
 8009570:	f47f aec6 	bne.w	8009300 <_strtod_l+0x88>
 8009574:	2b00      	cmp	r3, #0
 8009576:	f47f aee1 	bne.w	800933c <_strtod_l+0xc4>
 800957a:	2a69      	cmp	r2, #105	; 0x69
 800957c:	d027      	beq.n	80095ce <_strtod_l+0x356>
 800957e:	dc24      	bgt.n	80095ca <_strtod_l+0x352>
 8009580:	2a49      	cmp	r2, #73	; 0x49
 8009582:	d024      	beq.n	80095ce <_strtod_l+0x356>
 8009584:	2a4e      	cmp	r2, #78	; 0x4e
 8009586:	f47f aed9 	bne.w	800933c <_strtod_l+0xc4>
 800958a:	499f      	ldr	r1, [pc, #636]	; (8009808 <_strtod_l+0x590>)
 800958c:	a817      	add	r0, sp, #92	; 0x5c
 800958e:	f001 ff31 	bl	800b3f4 <__match>
 8009592:	2800      	cmp	r0, #0
 8009594:	f43f aed2 	beq.w	800933c <_strtod_l+0xc4>
 8009598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b28      	cmp	r3, #40	; 0x28
 800959e:	d12d      	bne.n	80095fc <_strtod_l+0x384>
 80095a0:	499a      	ldr	r1, [pc, #616]	; (800980c <_strtod_l+0x594>)
 80095a2:	aa1a      	add	r2, sp, #104	; 0x68
 80095a4:	a817      	add	r0, sp, #92	; 0x5c
 80095a6:	f001 ff39 	bl	800b41c <__hexnan>
 80095aa:	2805      	cmp	r0, #5
 80095ac:	d126      	bne.n	80095fc <_strtod_l+0x384>
 80095ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80095b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095bc:	e6a0      	b.n	8009300 <_strtod_l+0x88>
 80095be:	210a      	movs	r1, #10
 80095c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80095c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095c8:	e7b9      	b.n	800953e <_strtod_l+0x2c6>
 80095ca:	2a6e      	cmp	r2, #110	; 0x6e
 80095cc:	e7db      	b.n	8009586 <_strtod_l+0x30e>
 80095ce:	4990      	ldr	r1, [pc, #576]	; (8009810 <_strtod_l+0x598>)
 80095d0:	a817      	add	r0, sp, #92	; 0x5c
 80095d2:	f001 ff0f 	bl	800b3f4 <__match>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f aeb0 	beq.w	800933c <_strtod_l+0xc4>
 80095dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095de:	498d      	ldr	r1, [pc, #564]	; (8009814 <_strtod_l+0x59c>)
 80095e0:	3b01      	subs	r3, #1
 80095e2:	a817      	add	r0, sp, #92	; 0x5c
 80095e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80095e6:	f001 ff05 	bl	800b3f4 <__match>
 80095ea:	b910      	cbnz	r0, 80095f2 <_strtod_l+0x37a>
 80095ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ee:	3301      	adds	r3, #1
 80095f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80095f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009824 <_strtod_l+0x5ac>
 80095f6:	f04f 0a00 	mov.w	sl, #0
 80095fa:	e681      	b.n	8009300 <_strtod_l+0x88>
 80095fc:	4886      	ldr	r0, [pc, #536]	; (8009818 <_strtod_l+0x5a0>)
 80095fe:	f002 ff5b 	bl	800c4b8 <nan>
 8009602:	ec5b ab10 	vmov	sl, fp, d0
 8009606:	e67b      	b.n	8009300 <_strtod_l+0x88>
 8009608:	9b05      	ldr	r3, [sp, #20]
 800960a:	9807      	ldr	r0, [sp, #28]
 800960c:	1af3      	subs	r3, r6, r3
 800960e:	2f00      	cmp	r7, #0
 8009610:	bf08      	it	eq
 8009612:	462f      	moveq	r7, r5
 8009614:	2d10      	cmp	r5, #16
 8009616:	9306      	str	r3, [sp, #24]
 8009618:	46a8      	mov	r8, r5
 800961a:	bfa8      	it	ge
 800961c:	f04f 0810 	movge.w	r8, #16
 8009620:	f7f6 ff80 	bl	8000524 <__aeabi_ui2d>
 8009624:	2d09      	cmp	r5, #9
 8009626:	4682      	mov	sl, r0
 8009628:	468b      	mov	fp, r1
 800962a:	dd13      	ble.n	8009654 <_strtod_l+0x3dc>
 800962c:	4b7b      	ldr	r3, [pc, #492]	; (800981c <_strtod_l+0x5a4>)
 800962e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009636:	f7f6 ffef 	bl	8000618 <__aeabi_dmul>
 800963a:	4682      	mov	sl, r0
 800963c:	4648      	mov	r0, r9
 800963e:	468b      	mov	fp, r1
 8009640:	f7f6 ff70 	bl	8000524 <__aeabi_ui2d>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f6 fe2e 	bl	80002ac <__adddf3>
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	2d0f      	cmp	r5, #15
 8009656:	dc38      	bgt.n	80096ca <_strtod_l+0x452>
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f43f ae50 	beq.w	8009300 <_strtod_l+0x88>
 8009660:	dd24      	ble.n	80096ac <_strtod_l+0x434>
 8009662:	2b16      	cmp	r3, #22
 8009664:	dc0b      	bgt.n	800967e <_strtod_l+0x406>
 8009666:	496d      	ldr	r1, [pc, #436]	; (800981c <_strtod_l+0x5a4>)
 8009668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800966c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009670:	4652      	mov	r2, sl
 8009672:	465b      	mov	r3, fp
 8009674:	f7f6 ffd0 	bl	8000618 <__aeabi_dmul>
 8009678:	4682      	mov	sl, r0
 800967a:	468b      	mov	fp, r1
 800967c:	e640      	b.n	8009300 <_strtod_l+0x88>
 800967e:	9a06      	ldr	r2, [sp, #24]
 8009680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009684:	4293      	cmp	r3, r2
 8009686:	db20      	blt.n	80096ca <_strtod_l+0x452>
 8009688:	4c64      	ldr	r4, [pc, #400]	; (800981c <_strtod_l+0x5a4>)
 800968a:	f1c5 050f 	rsb	r5, r5, #15
 800968e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969a:	f7f6 ffbd 	bl	8000618 <__aeabi_dmul>
 800969e:	9b06      	ldr	r3, [sp, #24]
 80096a0:	1b5d      	subs	r5, r3, r5
 80096a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096aa:	e7e3      	b.n	8009674 <_strtod_l+0x3fc>
 80096ac:	9b06      	ldr	r3, [sp, #24]
 80096ae:	3316      	adds	r3, #22
 80096b0:	db0b      	blt.n	80096ca <_strtod_l+0x452>
 80096b2:	9b05      	ldr	r3, [sp, #20]
 80096b4:	1b9e      	subs	r6, r3, r6
 80096b6:	4b59      	ldr	r3, [pc, #356]	; (800981c <_strtod_l+0x5a4>)
 80096b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80096bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096c0:	4650      	mov	r0, sl
 80096c2:	4659      	mov	r1, fp
 80096c4:	f7f7 f8d2 	bl	800086c <__aeabi_ddiv>
 80096c8:	e7d6      	b.n	8009678 <_strtod_l+0x400>
 80096ca:	9b06      	ldr	r3, [sp, #24]
 80096cc:	eba5 0808 	sub.w	r8, r5, r8
 80096d0:	4498      	add	r8, r3
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	dd74      	ble.n	80097c2 <_strtod_l+0x54a>
 80096d8:	f018 030f 	ands.w	r3, r8, #15
 80096dc:	d00a      	beq.n	80096f4 <_strtod_l+0x47c>
 80096de:	494f      	ldr	r1, [pc, #316]	; (800981c <_strtod_l+0x5a4>)
 80096e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096e4:	4652      	mov	r2, sl
 80096e6:	465b      	mov	r3, fp
 80096e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ec:	f7f6 ff94 	bl	8000618 <__aeabi_dmul>
 80096f0:	4682      	mov	sl, r0
 80096f2:	468b      	mov	fp, r1
 80096f4:	f038 080f 	bics.w	r8, r8, #15
 80096f8:	d04f      	beq.n	800979a <_strtod_l+0x522>
 80096fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80096fe:	dd22      	ble.n	8009746 <_strtod_l+0x4ce>
 8009700:	2500      	movs	r5, #0
 8009702:	462e      	mov	r6, r5
 8009704:	9507      	str	r5, [sp, #28]
 8009706:	9505      	str	r5, [sp, #20]
 8009708:	2322      	movs	r3, #34	; 0x22
 800970a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009824 <_strtod_l+0x5ac>
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	f04f 0a00 	mov.w	sl, #0
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f43f adf2 	beq.w	8009300 <_strtod_l+0x88>
 800971c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800971e:	4620      	mov	r0, r4
 8009720:	f001 ff7e 	bl	800b620 <_Bfree>
 8009724:	9905      	ldr	r1, [sp, #20]
 8009726:	4620      	mov	r0, r4
 8009728:	f001 ff7a 	bl	800b620 <_Bfree>
 800972c:	4631      	mov	r1, r6
 800972e:	4620      	mov	r0, r4
 8009730:	f001 ff76 	bl	800b620 <_Bfree>
 8009734:	9907      	ldr	r1, [sp, #28]
 8009736:	4620      	mov	r0, r4
 8009738:	f001 ff72 	bl	800b620 <_Bfree>
 800973c:	4629      	mov	r1, r5
 800973e:	4620      	mov	r0, r4
 8009740:	f001 ff6e 	bl	800b620 <_Bfree>
 8009744:	e5dc      	b.n	8009300 <_strtod_l+0x88>
 8009746:	4b36      	ldr	r3, [pc, #216]	; (8009820 <_strtod_l+0x5a8>)
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	2300      	movs	r3, #0
 800974c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009750:	4650      	mov	r0, sl
 8009752:	4659      	mov	r1, fp
 8009754:	4699      	mov	r9, r3
 8009756:	f1b8 0f01 	cmp.w	r8, #1
 800975a:	dc21      	bgt.n	80097a0 <_strtod_l+0x528>
 800975c:	b10b      	cbz	r3, 8009762 <_strtod_l+0x4ea>
 800975e:	4682      	mov	sl, r0
 8009760:	468b      	mov	fp, r1
 8009762:	4b2f      	ldr	r3, [pc, #188]	; (8009820 <_strtod_l+0x5a8>)
 8009764:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009768:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800976c:	4652      	mov	r2, sl
 800976e:	465b      	mov	r3, fp
 8009770:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009774:	f7f6 ff50 	bl	8000618 <__aeabi_dmul>
 8009778:	4b2a      	ldr	r3, [pc, #168]	; (8009824 <_strtod_l+0x5ac>)
 800977a:	460a      	mov	r2, r1
 800977c:	400b      	ands	r3, r1
 800977e:	492a      	ldr	r1, [pc, #168]	; (8009828 <_strtod_l+0x5b0>)
 8009780:	428b      	cmp	r3, r1
 8009782:	4682      	mov	sl, r0
 8009784:	d8bc      	bhi.n	8009700 <_strtod_l+0x488>
 8009786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800978a:	428b      	cmp	r3, r1
 800978c:	bf86      	itte	hi
 800978e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800982c <_strtod_l+0x5b4>
 8009792:	f04f 3aff 	movhi.w	sl, #4294967295
 8009796:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800979a:	2300      	movs	r3, #0
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	e084      	b.n	80098aa <_strtod_l+0x632>
 80097a0:	f018 0f01 	tst.w	r8, #1
 80097a4:	d005      	beq.n	80097b2 <_strtod_l+0x53a>
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 ff34 	bl	8000618 <__aeabi_dmul>
 80097b0:	2301      	movs	r3, #1
 80097b2:	9a04      	ldr	r2, [sp, #16]
 80097b4:	3208      	adds	r2, #8
 80097b6:	f109 0901 	add.w	r9, r9, #1
 80097ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097be:	9204      	str	r2, [sp, #16]
 80097c0:	e7c9      	b.n	8009756 <_strtod_l+0x4de>
 80097c2:	d0ea      	beq.n	800979a <_strtod_l+0x522>
 80097c4:	f1c8 0800 	rsb	r8, r8, #0
 80097c8:	f018 020f 	ands.w	r2, r8, #15
 80097cc:	d00a      	beq.n	80097e4 <_strtod_l+0x56c>
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <_strtod_l+0x5a4>)
 80097d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097d4:	4650      	mov	r0, sl
 80097d6:	4659      	mov	r1, fp
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f7f7 f846 	bl	800086c <__aeabi_ddiv>
 80097e0:	4682      	mov	sl, r0
 80097e2:	468b      	mov	fp, r1
 80097e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80097e8:	d0d7      	beq.n	800979a <_strtod_l+0x522>
 80097ea:	f1b8 0f1f 	cmp.w	r8, #31
 80097ee:	dd1f      	ble.n	8009830 <_strtod_l+0x5b8>
 80097f0:	2500      	movs	r5, #0
 80097f2:	462e      	mov	r6, r5
 80097f4:	9507      	str	r5, [sp, #28]
 80097f6:	9505      	str	r5, [sp, #20]
 80097f8:	2322      	movs	r3, #34	; 0x22
 80097fa:	f04f 0a00 	mov.w	sl, #0
 80097fe:	f04f 0b00 	mov.w	fp, #0
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	e786      	b.n	8009714 <_strtod_l+0x49c>
 8009806:	bf00      	nop
 8009808:	0800cc39 	.word	0x0800cc39
 800980c:	0800cc7c 	.word	0x0800cc7c
 8009810:	0800cc31 	.word	0x0800cc31
 8009814:	0800cdbc 	.word	0x0800cdbc
 8009818:	0800d0d0 	.word	0x0800d0d0
 800981c:	0800cfb0 	.word	0x0800cfb0
 8009820:	0800cf88 	.word	0x0800cf88
 8009824:	7ff00000 	.word	0x7ff00000
 8009828:	7ca00000 	.word	0x7ca00000
 800982c:	7fefffff 	.word	0x7fefffff
 8009830:	f018 0310 	ands.w	r3, r8, #16
 8009834:	bf18      	it	ne
 8009836:	236a      	movne	r3, #106	; 0x6a
 8009838:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009be8 <_strtod_l+0x970>
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	4650      	mov	r0, sl
 8009840:	4659      	mov	r1, fp
 8009842:	2300      	movs	r3, #0
 8009844:	f018 0f01 	tst.w	r8, #1
 8009848:	d004      	beq.n	8009854 <_strtod_l+0x5dc>
 800984a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800984e:	f7f6 fee3 	bl	8000618 <__aeabi_dmul>
 8009852:	2301      	movs	r3, #1
 8009854:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009858:	f109 0908 	add.w	r9, r9, #8
 800985c:	d1f2      	bne.n	8009844 <_strtod_l+0x5cc>
 800985e:	b10b      	cbz	r3, 8009864 <_strtod_l+0x5ec>
 8009860:	4682      	mov	sl, r0
 8009862:	468b      	mov	fp, r1
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	b1c3      	cbz	r3, 800989a <_strtod_l+0x622>
 8009868:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800986c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009870:	2b00      	cmp	r3, #0
 8009872:	4659      	mov	r1, fp
 8009874:	dd11      	ble.n	800989a <_strtod_l+0x622>
 8009876:	2b1f      	cmp	r3, #31
 8009878:	f340 8124 	ble.w	8009ac4 <_strtod_l+0x84c>
 800987c:	2b34      	cmp	r3, #52	; 0x34
 800987e:	bfde      	ittt	le
 8009880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009884:	f04f 33ff 	movle.w	r3, #4294967295
 8009888:	fa03 f202 	lslle.w	r2, r3, r2
 800988c:	f04f 0a00 	mov.w	sl, #0
 8009890:	bfcc      	ite	gt
 8009892:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009896:	ea02 0b01 	andle.w	fp, r2, r1
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	4650      	mov	r0, sl
 80098a0:	4659      	mov	r1, fp
 80098a2:	f7f7 f921 	bl	8000ae8 <__aeabi_dcmpeq>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1a2      	bne.n	80097f0 <_strtod_l+0x578>
 80098aa:	9b07      	ldr	r3, [sp, #28]
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	9908      	ldr	r1, [sp, #32]
 80098b0:	462b      	mov	r3, r5
 80098b2:	463a      	mov	r2, r7
 80098b4:	4620      	mov	r0, r4
 80098b6:	f001 ff1b 	bl	800b6f0 <__s2b>
 80098ba:	9007      	str	r0, [sp, #28]
 80098bc:	2800      	cmp	r0, #0
 80098be:	f43f af1f 	beq.w	8009700 <_strtod_l+0x488>
 80098c2:	9b05      	ldr	r3, [sp, #20]
 80098c4:	1b9e      	subs	r6, r3, r6
 80098c6:	9b06      	ldr	r3, [sp, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfb4      	ite	lt
 80098cc:	4633      	movlt	r3, r6
 80098ce:	2300      	movge	r3, #0
 80098d0:	930c      	str	r3, [sp, #48]	; 0x30
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	2500      	movs	r5, #0
 80098d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098da:	9312      	str	r3, [sp, #72]	; 0x48
 80098dc:	462e      	mov	r6, r5
 80098de:	9b07      	ldr	r3, [sp, #28]
 80098e0:	4620      	mov	r0, r4
 80098e2:	6859      	ldr	r1, [r3, #4]
 80098e4:	f001 fe5c 	bl	800b5a0 <_Balloc>
 80098e8:	9005      	str	r0, [sp, #20]
 80098ea:	2800      	cmp	r0, #0
 80098ec:	f43f af0c 	beq.w	8009708 <_strtod_l+0x490>
 80098f0:	9b07      	ldr	r3, [sp, #28]
 80098f2:	691a      	ldr	r2, [r3, #16]
 80098f4:	3202      	adds	r2, #2
 80098f6:	f103 010c 	add.w	r1, r3, #12
 80098fa:	0092      	lsls	r2, r2, #2
 80098fc:	300c      	adds	r0, #12
 80098fe:	f7fe fcdf 	bl	80082c0 <memcpy>
 8009902:	ec4b ab10 	vmov	d0, sl, fp
 8009906:	aa1a      	add	r2, sp, #104	; 0x68
 8009908:	a919      	add	r1, sp, #100	; 0x64
 800990a:	4620      	mov	r0, r4
 800990c:	f002 fa36 	bl	800bd7c <__d2b>
 8009910:	ec4b ab18 	vmov	d8, sl, fp
 8009914:	9018      	str	r0, [sp, #96]	; 0x60
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f aef6 	beq.w	8009708 <_strtod_l+0x490>
 800991c:	2101      	movs	r1, #1
 800991e:	4620      	mov	r0, r4
 8009920:	f001 ff80 	bl	800b824 <__i2b>
 8009924:	4606      	mov	r6, r0
 8009926:	2800      	cmp	r0, #0
 8009928:	f43f aeee 	beq.w	8009708 <_strtod_l+0x490>
 800992c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfab      	itete	ge
 8009934:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009936:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800993a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800993e:	bfac      	ite	ge
 8009940:	eb03 0902 	addge.w	r9, r3, r2
 8009944:	1ad7      	sublt	r7, r2, r3
 8009946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009948:	eba3 0801 	sub.w	r8, r3, r1
 800994c:	4490      	add	r8, r2
 800994e:	4ba1      	ldr	r3, [pc, #644]	; (8009bd4 <_strtod_l+0x95c>)
 8009950:	f108 38ff 	add.w	r8, r8, #4294967295
 8009954:	4598      	cmp	r8, r3
 8009956:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800995a:	f280 80c7 	bge.w	8009aec <_strtod_l+0x874>
 800995e:	eba3 0308 	sub.w	r3, r3, r8
 8009962:	2b1f      	cmp	r3, #31
 8009964:	eba2 0203 	sub.w	r2, r2, r3
 8009968:	f04f 0101 	mov.w	r1, #1
 800996c:	f300 80b1 	bgt.w	8009ad2 <_strtod_l+0x85a>
 8009970:	fa01 f303 	lsl.w	r3, r1, r3
 8009974:	930d      	str	r3, [sp, #52]	; 0x34
 8009976:	2300      	movs	r3, #0
 8009978:	9308      	str	r3, [sp, #32]
 800997a:	eb09 0802 	add.w	r8, r9, r2
 800997e:	9b04      	ldr	r3, [sp, #16]
 8009980:	45c1      	cmp	r9, r8
 8009982:	4417      	add	r7, r2
 8009984:	441f      	add	r7, r3
 8009986:	464b      	mov	r3, r9
 8009988:	bfa8      	it	ge
 800998a:	4643      	movge	r3, r8
 800998c:	42bb      	cmp	r3, r7
 800998e:	bfa8      	it	ge
 8009990:	463b      	movge	r3, r7
 8009992:	2b00      	cmp	r3, #0
 8009994:	bfc2      	ittt	gt
 8009996:	eba8 0803 	subgt.w	r8, r8, r3
 800999a:	1aff      	subgt	r7, r7, r3
 800999c:	eba9 0903 	subgt.w	r9, r9, r3
 80099a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dd17      	ble.n	80099d6 <_strtod_l+0x75e>
 80099a6:	4631      	mov	r1, r6
 80099a8:	461a      	mov	r2, r3
 80099aa:	4620      	mov	r0, r4
 80099ac:	f001 fffa 	bl	800b9a4 <__pow5mult>
 80099b0:	4606      	mov	r6, r0
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aea8 	beq.w	8009708 <_strtod_l+0x490>
 80099b8:	4601      	mov	r1, r0
 80099ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099bc:	4620      	mov	r0, r4
 80099be:	f001 ff47 	bl	800b850 <__multiply>
 80099c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f43f ae9f 	beq.w	8009708 <_strtod_l+0x490>
 80099ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099cc:	4620      	mov	r0, r4
 80099ce:	f001 fe27 	bl	800b620 <_Bfree>
 80099d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d4:	9318      	str	r3, [sp, #96]	; 0x60
 80099d6:	f1b8 0f00 	cmp.w	r8, #0
 80099da:	f300 808c 	bgt.w	8009af6 <_strtod_l+0x87e>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dd08      	ble.n	80099f6 <_strtod_l+0x77e>
 80099e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099e6:	9905      	ldr	r1, [sp, #20]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f001 ffdb 	bl	800b9a4 <__pow5mult>
 80099ee:	9005      	str	r0, [sp, #20]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f43f ae89 	beq.w	8009708 <_strtod_l+0x490>
 80099f6:	2f00      	cmp	r7, #0
 80099f8:	dd08      	ble.n	8009a0c <_strtod_l+0x794>
 80099fa:	9905      	ldr	r1, [sp, #20]
 80099fc:	463a      	mov	r2, r7
 80099fe:	4620      	mov	r0, r4
 8009a00:	f002 f82a 	bl	800ba58 <__lshift>
 8009a04:	9005      	str	r0, [sp, #20]
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f ae7e 	beq.w	8009708 <_strtod_l+0x490>
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	dd08      	ble.n	8009a24 <_strtod_l+0x7ac>
 8009a12:	4631      	mov	r1, r6
 8009a14:	464a      	mov	r2, r9
 8009a16:	4620      	mov	r0, r4
 8009a18:	f002 f81e 	bl	800ba58 <__lshift>
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f ae72 	beq.w	8009708 <_strtod_l+0x490>
 8009a24:	9a05      	ldr	r2, [sp, #20]
 8009a26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f002 f8a1 	bl	800bb70 <__mdiff>
 8009a2e:	4605      	mov	r5, r0
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f43f ae69 	beq.w	8009708 <_strtod_l+0x490>
 8009a36:	68c3      	ldr	r3, [r0, #12]
 8009a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60c3      	str	r3, [r0, #12]
 8009a3e:	4631      	mov	r1, r6
 8009a40:	f002 f87a 	bl	800bb38 <__mcmp>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	da60      	bge.n	8009b0a <_strtod_l+0x892>
 8009a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a4e:	f040 8082 	bne.w	8009b56 <_strtod_l+0x8de>
 8009a52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d17d      	bne.n	8009b56 <_strtod_l+0x8de>
 8009a5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a5e:	0d1b      	lsrs	r3, r3, #20
 8009a60:	051b      	lsls	r3, r3, #20
 8009a62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a66:	d976      	bls.n	8009b56 <_strtod_l+0x8de>
 8009a68:	696b      	ldr	r3, [r5, #20]
 8009a6a:	b913      	cbnz	r3, 8009a72 <_strtod_l+0x7fa>
 8009a6c:	692b      	ldr	r3, [r5, #16]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	dd71      	ble.n	8009b56 <_strtod_l+0x8de>
 8009a72:	4629      	mov	r1, r5
 8009a74:	2201      	movs	r2, #1
 8009a76:	4620      	mov	r0, r4
 8009a78:	f001 ffee 	bl	800ba58 <__lshift>
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4605      	mov	r5, r0
 8009a80:	f002 f85a 	bl	800bb38 <__mcmp>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	dd66      	ble.n	8009b56 <_strtod_l+0x8de>
 8009a88:	9904      	ldr	r1, [sp, #16]
 8009a8a:	4a53      	ldr	r2, [pc, #332]	; (8009bd8 <_strtod_l+0x960>)
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	2900      	cmp	r1, #0
 8009a90:	f000 8081 	beq.w	8009b96 <_strtod_l+0x91e>
 8009a94:	ea02 010b 	and.w	r1, r2, fp
 8009a98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a9c:	dc7b      	bgt.n	8009b96 <_strtod_l+0x91e>
 8009a9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aa2:	f77f aea9 	ble.w	80097f8 <_strtod_l+0x580>
 8009aa6:	4b4d      	ldr	r3, [pc, #308]	; (8009bdc <_strtod_l+0x964>)
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	4659      	mov	r1, fp
 8009aac:	2200      	movs	r2, #0
 8009aae:	f7f6 fdb3 	bl	8000618 <__aeabi_dmul>
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4303      	orrs	r3, r0
 8009ab6:	bf08      	it	eq
 8009ab8:	2322      	moveq	r3, #34	; 0x22
 8009aba:	4682      	mov	sl, r0
 8009abc:	468b      	mov	fp, r1
 8009abe:	bf08      	it	eq
 8009ac0:	6023      	streq	r3, [r4, #0]
 8009ac2:	e62b      	b.n	800971c <_strtod_l+0x4a4>
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	ea03 0a0a 	and.w	sl, r3, sl
 8009ad0:	e6e3      	b.n	800989a <_strtod_l+0x622>
 8009ad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009ada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009ae2:	fa01 f308 	lsl.w	r3, r1, r8
 8009ae6:	9308      	str	r3, [sp, #32]
 8009ae8:	910d      	str	r1, [sp, #52]	; 0x34
 8009aea:	e746      	b.n	800997a <_strtod_l+0x702>
 8009aec:	2300      	movs	r3, #0
 8009aee:	9308      	str	r3, [sp, #32]
 8009af0:	2301      	movs	r3, #1
 8009af2:	930d      	str	r3, [sp, #52]	; 0x34
 8009af4:	e741      	b.n	800997a <_strtod_l+0x702>
 8009af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009af8:	4642      	mov	r2, r8
 8009afa:	4620      	mov	r0, r4
 8009afc:	f001 ffac 	bl	800ba58 <__lshift>
 8009b00:	9018      	str	r0, [sp, #96]	; 0x60
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f47f af6b 	bne.w	80099de <_strtod_l+0x766>
 8009b08:	e5fe      	b.n	8009708 <_strtod_l+0x490>
 8009b0a:	465f      	mov	r7, fp
 8009b0c:	d16e      	bne.n	8009bec <_strtod_l+0x974>
 8009b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b14:	b342      	cbz	r2, 8009b68 <_strtod_l+0x8f0>
 8009b16:	4a32      	ldr	r2, [pc, #200]	; (8009be0 <_strtod_l+0x968>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d128      	bne.n	8009b6e <_strtod_l+0x8f6>
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	4651      	mov	r1, sl
 8009b20:	b1eb      	cbz	r3, 8009b5e <_strtod_l+0x8e6>
 8009b22:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <_strtod_l+0x960>)
 8009b24:	403b      	ands	r3, r7
 8009b26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2e:	d819      	bhi.n	8009b64 <_strtod_l+0x8ec>
 8009b30:	0d1b      	lsrs	r3, r3, #20
 8009b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	4299      	cmp	r1, r3
 8009b3c:	d117      	bne.n	8009b6e <_strtod_l+0x8f6>
 8009b3e:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <_strtod_l+0x96c>)
 8009b40:	429f      	cmp	r7, r3
 8009b42:	d102      	bne.n	8009b4a <_strtod_l+0x8d2>
 8009b44:	3101      	adds	r1, #1
 8009b46:	f43f addf 	beq.w	8009708 <_strtod_l+0x490>
 8009b4a:	4b23      	ldr	r3, [pc, #140]	; (8009bd8 <_strtod_l+0x960>)
 8009b4c:	403b      	ands	r3, r7
 8009b4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b52:	f04f 0a00 	mov.w	sl, #0
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1a4      	bne.n	8009aa6 <_strtod_l+0x82e>
 8009b5c:	e5de      	b.n	800971c <_strtod_l+0x4a4>
 8009b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b62:	e7ea      	b.n	8009b3a <_strtod_l+0x8c2>
 8009b64:	4613      	mov	r3, r2
 8009b66:	e7e8      	b.n	8009b3a <_strtod_l+0x8c2>
 8009b68:	ea53 030a 	orrs.w	r3, r3, sl
 8009b6c:	d08c      	beq.n	8009a88 <_strtod_l+0x810>
 8009b6e:	9b08      	ldr	r3, [sp, #32]
 8009b70:	b1db      	cbz	r3, 8009baa <_strtod_l+0x932>
 8009b72:	423b      	tst	r3, r7
 8009b74:	d0ef      	beq.n	8009b56 <_strtod_l+0x8de>
 8009b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b78:	9a04      	ldr	r2, [sp, #16]
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	4659      	mov	r1, fp
 8009b7e:	b1c3      	cbz	r3, 8009bb2 <_strtod_l+0x93a>
 8009b80:	f7ff fb5c 	bl	800923c <sulp>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	ec51 0b18 	vmov	r0, r1, d8
 8009b8c:	f7f6 fb8e 	bl	80002ac <__adddf3>
 8009b90:	4682      	mov	sl, r0
 8009b92:	468b      	mov	fp, r1
 8009b94:	e7df      	b.n	8009b56 <_strtod_l+0x8de>
 8009b96:	4013      	ands	r3, r2
 8009b98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ba4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ba8:	e7d5      	b.n	8009b56 <_strtod_l+0x8de>
 8009baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bac:	ea13 0f0a 	tst.w	r3, sl
 8009bb0:	e7e0      	b.n	8009b74 <_strtod_l+0x8fc>
 8009bb2:	f7ff fb43 	bl	800923c <sulp>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	ec51 0b18 	vmov	r0, r1, d8
 8009bbe:	f7f6 fb73 	bl	80002a8 <__aeabi_dsub>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4682      	mov	sl, r0
 8009bc8:	468b      	mov	fp, r1
 8009bca:	f7f6 ff8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d0c1      	beq.n	8009b56 <_strtod_l+0x8de>
 8009bd2:	e611      	b.n	80097f8 <_strtod_l+0x580>
 8009bd4:	fffffc02 	.word	0xfffffc02
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	39500000 	.word	0x39500000
 8009be0:	000fffff 	.word	0x000fffff
 8009be4:	7fefffff 	.word	0x7fefffff
 8009be8:	0800cc90 	.word	0x0800cc90
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f002 f920 	bl	800be34 <__ratio>
 8009bf4:	ec59 8b10 	vmov	r8, r9, d0
 8009bf8:	ee10 0a10 	vmov	r0, s0
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c02:	4649      	mov	r1, r9
 8009c04:	f7f6 ff84 	bl	8000b10 <__aeabi_dcmple>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d07a      	beq.n	8009d02 <_strtod_l+0xa8a>
 8009c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d04a      	beq.n	8009ca8 <_strtod_l+0xa30>
 8009c12:	4b95      	ldr	r3, [pc, #596]	; (8009e68 <_strtod_l+0xbf0>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e68 <_strtod_l+0xbf0>
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	4b92      	ldr	r3, [pc, #584]	; (8009e6c <_strtod_l+0xbf4>)
 8009c24:	403b      	ands	r3, r7
 8009c26:	930d      	str	r3, [sp, #52]	; 0x34
 8009c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c2a:	4b91      	ldr	r3, [pc, #580]	; (8009e70 <_strtod_l+0xbf8>)
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	f040 80b0 	bne.w	8009d92 <_strtod_l+0xb1a>
 8009c32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c3a:	ec4b ab10 	vmov	d0, sl, fp
 8009c3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c42:	f002 f81f 	bl	800bc84 <__ulp>
 8009c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c4a:	ec53 2b10 	vmov	r2, r3, d0
 8009c4e:	f7f6 fce3 	bl	8000618 <__aeabi_dmul>
 8009c52:	4652      	mov	r2, sl
 8009c54:	465b      	mov	r3, fp
 8009c56:	f7f6 fb29 	bl	80002ac <__adddf3>
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4983      	ldr	r1, [pc, #524]	; (8009e6c <_strtod_l+0xbf4>)
 8009c5e:	4a85      	ldr	r2, [pc, #532]	; (8009e74 <_strtod_l+0xbfc>)
 8009c60:	4019      	ands	r1, r3
 8009c62:	4291      	cmp	r1, r2
 8009c64:	4682      	mov	sl, r0
 8009c66:	d960      	bls.n	8009d2a <_strtod_l+0xab2>
 8009c68:	ee18 3a90 	vmov	r3, s17
 8009c6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d104      	bne.n	8009c7e <_strtod_l+0xa06>
 8009c74:	ee18 3a10 	vmov	r3, s16
 8009c78:	3301      	adds	r3, #1
 8009c7a:	f43f ad45 	beq.w	8009708 <_strtod_l+0x490>
 8009c7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009e80 <_strtod_l+0xc08>
 8009c82:	f04f 3aff 	mov.w	sl, #4294967295
 8009c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f001 fcc9 	bl	800b620 <_Bfree>
 8009c8e:	9905      	ldr	r1, [sp, #20]
 8009c90:	4620      	mov	r0, r4
 8009c92:	f001 fcc5 	bl	800b620 <_Bfree>
 8009c96:	4631      	mov	r1, r6
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f001 fcc1 	bl	800b620 <_Bfree>
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f001 fcbd 	bl	800b620 <_Bfree>
 8009ca6:	e61a      	b.n	80098de <_strtod_l+0x666>
 8009ca8:	f1ba 0f00 	cmp.w	sl, #0
 8009cac:	d11b      	bne.n	8009ce6 <_strtod_l+0xa6e>
 8009cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cb2:	b9f3      	cbnz	r3, 8009cf2 <_strtod_l+0xa7a>
 8009cb4:	4b6c      	ldr	r3, [pc, #432]	; (8009e68 <_strtod_l+0xbf0>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4640      	mov	r0, r8
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 ff1e 	bl	8000afc <__aeabi_dcmplt>
 8009cc0:	b9d0      	cbnz	r0, 8009cf8 <_strtod_l+0xa80>
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	4b6c      	ldr	r3, [pc, #432]	; (8009e78 <_strtod_l+0xc00>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f7f6 fca5 	bl	8000618 <__aeabi_dmul>
 8009cce:	4680      	mov	r8, r0
 8009cd0:	4689      	mov	r9, r1
 8009cd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009cda:	9315      	str	r3, [sp, #84]	; 0x54
 8009cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ce4:	e79d      	b.n	8009c22 <_strtod_l+0x9aa>
 8009ce6:	f1ba 0f01 	cmp.w	sl, #1
 8009cea:	d102      	bne.n	8009cf2 <_strtod_l+0xa7a>
 8009cec:	2f00      	cmp	r7, #0
 8009cee:	f43f ad83 	beq.w	80097f8 <_strtod_l+0x580>
 8009cf2:	4b62      	ldr	r3, [pc, #392]	; (8009e7c <_strtod_l+0xc04>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	e78e      	b.n	8009c16 <_strtod_l+0x99e>
 8009cf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009e78 <_strtod_l+0xc00>
 8009cfc:	f04f 0800 	mov.w	r8, #0
 8009d00:	e7e7      	b.n	8009cd2 <_strtod_l+0xa5a>
 8009d02:	4b5d      	ldr	r3, [pc, #372]	; (8009e78 <_strtod_l+0xc00>)
 8009d04:	4640      	mov	r0, r8
 8009d06:	4649      	mov	r1, r9
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f7f6 fc85 	bl	8000618 <__aeabi_dmul>
 8009d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d10:	4680      	mov	r8, r0
 8009d12:	4689      	mov	r9, r1
 8009d14:	b933      	cbnz	r3, 8009d24 <_strtod_l+0xaac>
 8009d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d1a:	900e      	str	r0, [sp, #56]	; 0x38
 8009d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d22:	e7dd      	b.n	8009ce0 <_strtod_l+0xa68>
 8009d24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009d28:	e7f9      	b.n	8009d1e <_strtod_l+0xaa6>
 8009d2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1a8      	bne.n	8009c86 <_strtod_l+0xa0e>
 8009d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d3a:	0d1b      	lsrs	r3, r3, #20
 8009d3c:	051b      	lsls	r3, r3, #20
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d1a1      	bne.n	8009c86 <_strtod_l+0xa0e>
 8009d42:	4640      	mov	r0, r8
 8009d44:	4649      	mov	r1, r9
 8009d46:	f7f6 ffc7 	bl	8000cd8 <__aeabi_d2lz>
 8009d4a:	f7f6 fc37 	bl	80005bc <__aeabi_l2d>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	f7f6 faa7 	bl	80002a8 <__aeabi_dsub>
 8009d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d60:	ea43 030a 	orr.w	r3, r3, sl
 8009d64:	4313      	orrs	r3, r2
 8009d66:	4680      	mov	r8, r0
 8009d68:	4689      	mov	r9, r1
 8009d6a:	d055      	beq.n	8009e18 <_strtod_l+0xba0>
 8009d6c:	a336      	add	r3, pc, #216	; (adr r3, 8009e48 <_strtod_l+0xbd0>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f7f6 fec3 	bl	8000afc <__aeabi_dcmplt>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	f47f acd0 	bne.w	800971c <_strtod_l+0x4a4>
 8009d7c:	a334      	add	r3, pc, #208	; (adr r3, 8009e50 <_strtod_l+0xbd8>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fed7 	bl	8000b38 <__aeabi_dcmpgt>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f43f af7b 	beq.w	8009c86 <_strtod_l+0xa0e>
 8009d90:	e4c4      	b.n	800971c <_strtod_l+0x4a4>
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	b333      	cbz	r3, 8009de4 <_strtod_l+0xb6c>
 8009d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d9c:	d822      	bhi.n	8009de4 <_strtod_l+0xb6c>
 8009d9e:	a32e      	add	r3, pc, #184	; (adr r3, 8009e58 <_strtod_l+0xbe0>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 feb2 	bl	8000b10 <__aeabi_dcmple>
 8009dac:	b1a0      	cbz	r0, 8009dd8 <_strtod_l+0xb60>
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	f7f6 ff09 	bl	8000bc8 <__aeabi_d2uiz>
 8009db6:	2801      	cmp	r0, #1
 8009db8:	bf38      	it	cc
 8009dba:	2001      	movcc	r0, #1
 8009dbc:	f7f6 fbb2 	bl	8000524 <__aeabi_ui2d>
 8009dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	bb23      	cbnz	r3, 8009e12 <_strtod_l+0xb9a>
 8009dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dcc:	9010      	str	r0, [sp, #64]	; 0x40
 8009dce:	9311      	str	r3, [sp, #68]	; 0x44
 8009dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ddc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009de0:	1a9b      	subs	r3, r3, r2
 8009de2:	9309      	str	r3, [sp, #36]	; 0x24
 8009de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009de8:	eeb0 0a48 	vmov.f32	s0, s16
 8009dec:	eef0 0a68 	vmov.f32	s1, s17
 8009df0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009df4:	f001 ff46 	bl	800bc84 <__ulp>
 8009df8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009dfc:	ec53 2b10 	vmov	r2, r3, d0
 8009e00:	f7f6 fc0a 	bl	8000618 <__aeabi_dmul>
 8009e04:	ec53 2b18 	vmov	r2, r3, d8
 8009e08:	f7f6 fa50 	bl	80002ac <__adddf3>
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	468b      	mov	fp, r1
 8009e10:	e78d      	b.n	8009d2e <_strtod_l+0xab6>
 8009e12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009e16:	e7db      	b.n	8009dd0 <_strtod_l+0xb58>
 8009e18:	a311      	add	r3, pc, #68	; (adr r3, 8009e60 <_strtod_l+0xbe8>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fe6d 	bl	8000afc <__aeabi_dcmplt>
 8009e22:	e7b2      	b.n	8009d8a <_strtod_l+0xb12>
 8009e24:	2300      	movs	r3, #0
 8009e26:	930a      	str	r3, [sp, #40]	; 0x28
 8009e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	f7ff ba6b 	b.w	8009308 <_strtod_l+0x90>
 8009e32:	2a65      	cmp	r2, #101	; 0x65
 8009e34:	f43f ab5f 	beq.w	80094f6 <_strtod_l+0x27e>
 8009e38:	2a45      	cmp	r2, #69	; 0x45
 8009e3a:	f43f ab5c 	beq.w	80094f6 <_strtod_l+0x27e>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f7ff bb94 	b.w	800956c <_strtod_l+0x2f4>
 8009e44:	f3af 8000 	nop.w
 8009e48:	94a03595 	.word	0x94a03595
 8009e4c:	3fdfffff 	.word	0x3fdfffff
 8009e50:	35afe535 	.word	0x35afe535
 8009e54:	3fe00000 	.word	0x3fe00000
 8009e58:	ffc00000 	.word	0xffc00000
 8009e5c:	41dfffff 	.word	0x41dfffff
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fcfffff 	.word	0x3fcfffff
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	7ff00000 	.word	0x7ff00000
 8009e70:	7fe00000 	.word	0x7fe00000
 8009e74:	7c9fffff 	.word	0x7c9fffff
 8009e78:	3fe00000 	.word	0x3fe00000
 8009e7c:	bff00000 	.word	0xbff00000
 8009e80:	7fefffff 	.word	0x7fefffff

08009e84 <_strtod_r>:
 8009e84:	4b01      	ldr	r3, [pc, #4]	; (8009e8c <_strtod_r+0x8>)
 8009e86:	f7ff b9f7 	b.w	8009278 <_strtod_l>
 8009e8a:	bf00      	nop
 8009e8c:	20000078 	.word	0x20000078

08009e90 <_strtol_l.constprop.0>:
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e96:	d001      	beq.n	8009e9c <_strtol_l.constprop.0+0xc>
 8009e98:	2b24      	cmp	r3, #36	; 0x24
 8009e9a:	d906      	bls.n	8009eaa <_strtol_l.constprop.0+0x1a>
 8009e9c:	f7fe f9de 	bl	800825c <__errno>
 8009ea0:	2316      	movs	r3, #22
 8009ea2:	6003      	str	r3, [r0, #0]
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f90 <_strtol_l.constprop.0+0x100>
 8009eae:	460d      	mov	r5, r1
 8009eb0:	462e      	mov	r6, r5
 8009eb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009eba:	f017 0708 	ands.w	r7, r7, #8
 8009ebe:	d1f7      	bne.n	8009eb0 <_strtol_l.constprop.0+0x20>
 8009ec0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ec2:	d132      	bne.n	8009f2a <_strtol_l.constprop.0+0x9a>
 8009ec4:	782c      	ldrb	r4, [r5, #0]
 8009ec6:	2701      	movs	r7, #1
 8009ec8:	1cb5      	adds	r5, r6, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d05b      	beq.n	8009f86 <_strtol_l.constprop.0+0xf6>
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d109      	bne.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009ed2:	2c30      	cmp	r4, #48	; 0x30
 8009ed4:	d107      	bne.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009ed6:	782c      	ldrb	r4, [r5, #0]
 8009ed8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009edc:	2c58      	cmp	r4, #88	; 0x58
 8009ede:	d14d      	bne.n	8009f7c <_strtol_l.constprop.0+0xec>
 8009ee0:	786c      	ldrb	r4, [r5, #1]
 8009ee2:	2310      	movs	r3, #16
 8009ee4:	3502      	adds	r5, #2
 8009ee6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009eea:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eee:	f04f 0c00 	mov.w	ip, #0
 8009ef2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ef6:	4666      	mov	r6, ip
 8009ef8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009efc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f00:	f1be 0f09 	cmp.w	lr, #9
 8009f04:	d816      	bhi.n	8009f34 <_strtol_l.constprop.0+0xa4>
 8009f06:	4674      	mov	r4, lr
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	dd24      	ble.n	8009f56 <_strtol_l.constprop.0+0xc6>
 8009f0c:	f1bc 0f00 	cmp.w	ip, #0
 8009f10:	db1e      	blt.n	8009f50 <_strtol_l.constprop.0+0xc0>
 8009f12:	45b1      	cmp	r9, r6
 8009f14:	d31c      	bcc.n	8009f50 <_strtol_l.constprop.0+0xc0>
 8009f16:	d101      	bne.n	8009f1c <_strtol_l.constprop.0+0x8c>
 8009f18:	45a2      	cmp	sl, r4
 8009f1a:	db19      	blt.n	8009f50 <_strtol_l.constprop.0+0xc0>
 8009f1c:	fb06 4603 	mla	r6, r6, r3, r4
 8009f20:	f04f 0c01 	mov.w	ip, #1
 8009f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f28:	e7e8      	b.n	8009efc <_strtol_l.constprop.0+0x6c>
 8009f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f2c:	bf04      	itt	eq
 8009f2e:	782c      	ldrbeq	r4, [r5, #0]
 8009f30:	1cb5      	addeq	r5, r6, #2
 8009f32:	e7ca      	b.n	8009eca <_strtol_l.constprop.0+0x3a>
 8009f34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f38:	f1be 0f19 	cmp.w	lr, #25
 8009f3c:	d801      	bhi.n	8009f42 <_strtol_l.constprop.0+0xb2>
 8009f3e:	3c37      	subs	r4, #55	; 0x37
 8009f40:	e7e2      	b.n	8009f08 <_strtol_l.constprop.0+0x78>
 8009f42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f46:	f1be 0f19 	cmp.w	lr, #25
 8009f4a:	d804      	bhi.n	8009f56 <_strtol_l.constprop.0+0xc6>
 8009f4c:	3c57      	subs	r4, #87	; 0x57
 8009f4e:	e7db      	b.n	8009f08 <_strtol_l.constprop.0+0x78>
 8009f50:	f04f 3cff 	mov.w	ip, #4294967295
 8009f54:	e7e6      	b.n	8009f24 <_strtol_l.constprop.0+0x94>
 8009f56:	f1bc 0f00 	cmp.w	ip, #0
 8009f5a:	da05      	bge.n	8009f68 <_strtol_l.constprop.0+0xd8>
 8009f5c:	2322      	movs	r3, #34	; 0x22
 8009f5e:	6003      	str	r3, [r0, #0]
 8009f60:	4646      	mov	r6, r8
 8009f62:	b942      	cbnz	r2, 8009f76 <_strtol_l.constprop.0+0xe6>
 8009f64:	4630      	mov	r0, r6
 8009f66:	e79e      	b.n	8009ea6 <_strtol_l.constprop.0+0x16>
 8009f68:	b107      	cbz	r7, 8009f6c <_strtol_l.constprop.0+0xdc>
 8009f6a:	4276      	negs	r6, r6
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	d0f9      	beq.n	8009f64 <_strtol_l.constprop.0+0xd4>
 8009f70:	f1bc 0f00 	cmp.w	ip, #0
 8009f74:	d000      	beq.n	8009f78 <_strtol_l.constprop.0+0xe8>
 8009f76:	1e69      	subs	r1, r5, #1
 8009f78:	6011      	str	r1, [r2, #0]
 8009f7a:	e7f3      	b.n	8009f64 <_strtol_l.constprop.0+0xd4>
 8009f7c:	2430      	movs	r4, #48	; 0x30
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1b1      	bne.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009f82:	2308      	movs	r3, #8
 8009f84:	e7af      	b.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009f86:	2c30      	cmp	r4, #48	; 0x30
 8009f88:	d0a5      	beq.n	8009ed6 <_strtol_l.constprop.0+0x46>
 8009f8a:	230a      	movs	r3, #10
 8009f8c:	e7ab      	b.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009f8e:	bf00      	nop
 8009f90:	0800ccb9 	.word	0x0800ccb9

08009f94 <_strtol_r>:
 8009f94:	f7ff bf7c 	b.w	8009e90 <_strtol_l.constprop.0>

08009f98 <quorem>:
 8009f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	6903      	ldr	r3, [r0, #16]
 8009f9e:	690c      	ldr	r4, [r1, #16]
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	f2c0 8081 	blt.w	800a0aa <quorem+0x112>
 8009fa8:	3c01      	subs	r4, #1
 8009faa:	f101 0814 	add.w	r8, r1, #20
 8009fae:	f100 0514 	add.w	r5, r0, #20
 8009fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fd0:	d331      	bcc.n	800a036 <quorem+0x9e>
 8009fd2:	f04f 0e00 	mov.w	lr, #0
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	46ac      	mov	ip, r5
 8009fda:	46f2      	mov	sl, lr
 8009fdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fe0:	b293      	uxth	r3, r2
 8009fe2:	fb06 e303 	mla	r3, r6, r3, lr
 8009fe6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	ebaa 0303 	sub.w	r3, sl, r3
 8009ff0:	f8dc a000 	ldr.w	sl, [ip]
 8009ff4:	0c12      	lsrs	r2, r2, #16
 8009ff6:	fa13 f38a 	uxtah	r3, r3, sl
 8009ffa:	fb06 e202 	mla	r2, r6, r2, lr
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	9b00      	ldr	r3, [sp, #0]
 800a002:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a006:	b292      	uxth	r2, r2
 800a008:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a00c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a010:	f8bd 3000 	ldrh.w	r3, [sp]
 800a014:	4581      	cmp	r9, r0
 800a016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a01a:	f84c 3b04 	str.w	r3, [ip], #4
 800a01e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a022:	d2db      	bcs.n	8009fdc <quorem+0x44>
 800a024:	f855 300b 	ldr.w	r3, [r5, fp]
 800a028:	b92b      	cbnz	r3, 800a036 <quorem+0x9e>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	3b04      	subs	r3, #4
 800a02e:	429d      	cmp	r5, r3
 800a030:	461a      	mov	r2, r3
 800a032:	d32e      	bcc.n	800a092 <quorem+0xfa>
 800a034:	613c      	str	r4, [r7, #16]
 800a036:	4638      	mov	r0, r7
 800a038:	f001 fd7e 	bl	800bb38 <__mcmp>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	db24      	blt.n	800a08a <quorem+0xf2>
 800a040:	3601      	adds	r6, #1
 800a042:	4628      	mov	r0, r5
 800a044:	f04f 0c00 	mov.w	ip, #0
 800a048:	f858 2b04 	ldr.w	r2, [r8], #4
 800a04c:	f8d0 e000 	ldr.w	lr, [r0]
 800a050:	b293      	uxth	r3, r2
 800a052:	ebac 0303 	sub.w	r3, ip, r3
 800a056:	0c12      	lsrs	r2, r2, #16
 800a058:	fa13 f38e 	uxtah	r3, r3, lr
 800a05c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a064:	b29b      	uxth	r3, r3
 800a066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a06a:	45c1      	cmp	r9, r8
 800a06c:	f840 3b04 	str.w	r3, [r0], #4
 800a070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a074:	d2e8      	bcs.n	800a048 <quorem+0xb0>
 800a076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a07a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a07e:	b922      	cbnz	r2, 800a08a <quorem+0xf2>
 800a080:	3b04      	subs	r3, #4
 800a082:	429d      	cmp	r5, r3
 800a084:	461a      	mov	r2, r3
 800a086:	d30a      	bcc.n	800a09e <quorem+0x106>
 800a088:	613c      	str	r4, [r7, #16]
 800a08a:	4630      	mov	r0, r6
 800a08c:	b003      	add	sp, #12
 800a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a092:	6812      	ldr	r2, [r2, #0]
 800a094:	3b04      	subs	r3, #4
 800a096:	2a00      	cmp	r2, #0
 800a098:	d1cc      	bne.n	800a034 <quorem+0x9c>
 800a09a:	3c01      	subs	r4, #1
 800a09c:	e7c7      	b.n	800a02e <quorem+0x96>
 800a09e:	6812      	ldr	r2, [r2, #0]
 800a0a0:	3b04      	subs	r3, #4
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	d1f0      	bne.n	800a088 <quorem+0xf0>
 800a0a6:	3c01      	subs	r4, #1
 800a0a8:	e7eb      	b.n	800a082 <quorem+0xea>
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	e7ee      	b.n	800a08c <quorem+0xf4>
	...

0800a0b0 <_dtoa_r>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	ed2d 8b04 	vpush	{d8-d9}
 800a0b8:	ec57 6b10 	vmov	r6, r7, d0
 800a0bc:	b093      	sub	sp, #76	; 0x4c
 800a0be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0c4:	9106      	str	r1, [sp, #24]
 800a0c6:	ee10 aa10 	vmov	sl, s0
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a0d0:	46bb      	mov	fp, r7
 800a0d2:	b975      	cbnz	r5, 800a0f2 <_dtoa_r+0x42>
 800a0d4:	2010      	movs	r0, #16
 800a0d6:	f7fe f8eb 	bl	80082b0 <malloc>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a0de:	b920      	cbnz	r0, 800a0ea <_dtoa_r+0x3a>
 800a0e0:	4ba7      	ldr	r3, [pc, #668]	; (800a380 <_dtoa_r+0x2d0>)
 800a0e2:	21ea      	movs	r1, #234	; 0xea
 800a0e4:	48a7      	ldr	r0, [pc, #668]	; (800a384 <_dtoa_r+0x2d4>)
 800a0e6:	f002 fb27 	bl	800c738 <__assert_func>
 800a0ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0ee:	6005      	str	r5, [r0, #0]
 800a0f0:	60c5      	str	r5, [r0, #12]
 800a0f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f4:	6819      	ldr	r1, [r3, #0]
 800a0f6:	b151      	cbz	r1, 800a10e <_dtoa_r+0x5e>
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	604a      	str	r2, [r1, #4]
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4093      	lsls	r3, r2
 800a100:	608b      	str	r3, [r1, #8]
 800a102:	4620      	mov	r0, r4
 800a104:	f001 fa8c 	bl	800b620 <_Bfree>
 800a108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	1e3b      	subs	r3, r7, #0
 800a110:	bfaa      	itet	ge
 800a112:	2300      	movge	r3, #0
 800a114:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a118:	f8c8 3000 	strge.w	r3, [r8]
 800a11c:	4b9a      	ldr	r3, [pc, #616]	; (800a388 <_dtoa_r+0x2d8>)
 800a11e:	bfbc      	itt	lt
 800a120:	2201      	movlt	r2, #1
 800a122:	f8c8 2000 	strlt.w	r2, [r8]
 800a126:	ea33 030b 	bics.w	r3, r3, fp
 800a12a:	d11b      	bne.n	800a164 <_dtoa_r+0xb4>
 800a12c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a12e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a138:	4333      	orrs	r3, r6
 800a13a:	f000 8592 	beq.w	800ac62 <_dtoa_r+0xbb2>
 800a13e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a140:	b963      	cbnz	r3, 800a15c <_dtoa_r+0xac>
 800a142:	4b92      	ldr	r3, [pc, #584]	; (800a38c <_dtoa_r+0x2dc>)
 800a144:	e022      	b.n	800a18c <_dtoa_r+0xdc>
 800a146:	4b92      	ldr	r3, [pc, #584]	; (800a390 <_dtoa_r+0x2e0>)
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	3308      	adds	r3, #8
 800a14c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	9801      	ldr	r0, [sp, #4]
 800a152:	b013      	add	sp, #76	; 0x4c
 800a154:	ecbd 8b04 	vpop	{d8-d9}
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	4b8b      	ldr	r3, [pc, #556]	; (800a38c <_dtoa_r+0x2dc>)
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	3303      	adds	r3, #3
 800a162:	e7f3      	b.n	800a14c <_dtoa_r+0x9c>
 800a164:	2200      	movs	r2, #0
 800a166:	2300      	movs	r3, #0
 800a168:	4650      	mov	r0, sl
 800a16a:	4659      	mov	r1, fp
 800a16c:	f7f6 fcbc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a170:	ec4b ab19 	vmov	d9, sl, fp
 800a174:	4680      	mov	r8, r0
 800a176:	b158      	cbz	r0, 800a190 <_dtoa_r+0xe0>
 800a178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a17a:	2301      	movs	r3, #1
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 856b 	beq.w	800ac5c <_dtoa_r+0xbac>
 800a186:	4883      	ldr	r0, [pc, #524]	; (800a394 <_dtoa_r+0x2e4>)
 800a188:	6018      	str	r0, [r3, #0]
 800a18a:	1e43      	subs	r3, r0, #1
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	e7df      	b.n	800a150 <_dtoa_r+0xa0>
 800a190:	ec4b ab10 	vmov	d0, sl, fp
 800a194:	aa10      	add	r2, sp, #64	; 0x40
 800a196:	a911      	add	r1, sp, #68	; 0x44
 800a198:	4620      	mov	r0, r4
 800a19a:	f001 fdef 	bl	800bd7c <__d2b>
 800a19e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a1a2:	ee08 0a10 	vmov	s16, r0
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	f000 8084 	beq.w	800a2b4 <_dtoa_r+0x204>
 800a1ac:	ee19 3a90 	vmov	r3, s19
 800a1b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1b8:	4656      	mov	r6, sl
 800a1ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a1c6:	4b74      	ldr	r3, [pc, #464]	; (800a398 <_dtoa_r+0x2e8>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 f86b 	bl	80002a8 <__aeabi_dsub>
 800a1d2:	a365      	add	r3, pc, #404	; (adr r3, 800a368 <_dtoa_r+0x2b8>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 fa1e 	bl	8000618 <__aeabi_dmul>
 800a1dc:	a364      	add	r3, pc, #400	; (adr r3, 800a370 <_dtoa_r+0x2c0>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 f863 	bl	80002ac <__adddf3>
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	f7f6 f9aa 	bl	8000544 <__aeabi_i2d>
 800a1f0:	a361      	add	r3, pc, #388	; (adr r3, 800a378 <_dtoa_r+0x2c8>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 fa0f 	bl	8000618 <__aeabi_dmul>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	f7f6 f853 	bl	80002ac <__adddf3>
 800a206:	4606      	mov	r6, r0
 800a208:	460f      	mov	r7, r1
 800a20a:	f7f6 fcb5 	bl	8000b78 <__aeabi_d2iz>
 800a20e:	2200      	movs	r2, #0
 800a210:	9000      	str	r0, [sp, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f7f6 fc70 	bl	8000afc <__aeabi_dcmplt>
 800a21c:	b150      	cbz	r0, 800a234 <_dtoa_r+0x184>
 800a21e:	9800      	ldr	r0, [sp, #0]
 800a220:	f7f6 f990 	bl	8000544 <__aeabi_i2d>
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	f7f6 fc5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a22c:	b910      	cbnz	r0, 800a234 <_dtoa_r+0x184>
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	3b01      	subs	r3, #1
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	2b16      	cmp	r3, #22
 800a238:	d85a      	bhi.n	800a2f0 <_dtoa_r+0x240>
 800a23a:	9a00      	ldr	r2, [sp, #0]
 800a23c:	4b57      	ldr	r3, [pc, #348]	; (800a39c <_dtoa_r+0x2ec>)
 800a23e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	ec51 0b19 	vmov	r0, r1, d9
 800a24a:	f7f6 fc57 	bl	8000afc <__aeabi_dcmplt>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d050      	beq.n	800a2f4 <_dtoa_r+0x244>
 800a252:	9b00      	ldr	r3, [sp, #0]
 800a254:	3b01      	subs	r3, #1
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	2300      	movs	r3, #0
 800a25a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a25c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a25e:	1b5d      	subs	r5, r3, r5
 800a260:	1e6b      	subs	r3, r5, #1
 800a262:	9305      	str	r3, [sp, #20]
 800a264:	bf45      	ittet	mi
 800a266:	f1c5 0301 	rsbmi	r3, r5, #1
 800a26a:	9304      	strmi	r3, [sp, #16]
 800a26c:	2300      	movpl	r3, #0
 800a26e:	2300      	movmi	r3, #0
 800a270:	bf4c      	ite	mi
 800a272:	9305      	strmi	r3, [sp, #20]
 800a274:	9304      	strpl	r3, [sp, #16]
 800a276:	9b00      	ldr	r3, [sp, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	db3d      	blt.n	800a2f8 <_dtoa_r+0x248>
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	9a00      	ldr	r2, [sp, #0]
 800a280:	920a      	str	r2, [sp, #40]	; 0x28
 800a282:	4413      	add	r3, r2
 800a284:	9305      	str	r3, [sp, #20]
 800a286:	2300      	movs	r3, #0
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	9b06      	ldr	r3, [sp, #24]
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	f200 8089 	bhi.w	800a3a4 <_dtoa_r+0x2f4>
 800a292:	2b05      	cmp	r3, #5
 800a294:	bfc4      	itt	gt
 800a296:	3b04      	subgt	r3, #4
 800a298:	9306      	strgt	r3, [sp, #24]
 800a29a:	9b06      	ldr	r3, [sp, #24]
 800a29c:	f1a3 0302 	sub.w	r3, r3, #2
 800a2a0:	bfcc      	ite	gt
 800a2a2:	2500      	movgt	r5, #0
 800a2a4:	2501      	movle	r5, #1
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	f200 8087 	bhi.w	800a3ba <_dtoa_r+0x30a>
 800a2ac:	e8df f003 	tbb	[pc, r3]
 800a2b0:	59383a2d 	.word	0x59383a2d
 800a2b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a2b8:	441d      	add	r5, r3
 800a2ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	bfc1      	itttt	gt
 800a2c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800a2ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2d2:	bfda      	itte	le
 800a2d4:	f1c3 0320 	rsble	r3, r3, #32
 800a2d8:	fa06 f003 	lslle.w	r0, r6, r3
 800a2dc:	4318      	orrgt	r0, r3
 800a2de:	f7f6 f921 	bl	8000524 <__aeabi_ui2d>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2ea:	3d01      	subs	r5, #1
 800a2ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ee:	e76a      	b.n	800a1c6 <_dtoa_r+0x116>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e7b2      	b.n	800a25a <_dtoa_r+0x1aa>
 800a2f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2f6:	e7b1      	b.n	800a25c <_dtoa_r+0x1ac>
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	9a00      	ldr	r2, [sp, #0]
 800a2fc:	1a9b      	subs	r3, r3, r2
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	4253      	negs	r3, r2
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	2300      	movs	r3, #0
 800a306:	930a      	str	r3, [sp, #40]	; 0x28
 800a308:	e7bf      	b.n	800a28a <_dtoa_r+0x1da>
 800a30a:	2300      	movs	r3, #0
 800a30c:	9308      	str	r3, [sp, #32]
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc55      	bgt.n	800a3c0 <_dtoa_r+0x310>
 800a314:	2301      	movs	r3, #1
 800a316:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a31a:	461a      	mov	r2, r3
 800a31c:	9209      	str	r2, [sp, #36]	; 0x24
 800a31e:	e00c      	b.n	800a33a <_dtoa_r+0x28a>
 800a320:	2301      	movs	r3, #1
 800a322:	e7f3      	b.n	800a30c <_dtoa_r+0x25c>
 800a324:	2300      	movs	r3, #0
 800a326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a328:	9308      	str	r3, [sp, #32]
 800a32a:	9b00      	ldr	r3, [sp, #0]
 800a32c:	4413      	add	r3, r2
 800a32e:	9302      	str	r3, [sp, #8]
 800a330:	3301      	adds	r3, #1
 800a332:	2b01      	cmp	r3, #1
 800a334:	9303      	str	r3, [sp, #12]
 800a336:	bfb8      	it	lt
 800a338:	2301      	movlt	r3, #1
 800a33a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a33c:	2200      	movs	r2, #0
 800a33e:	6042      	str	r2, [r0, #4]
 800a340:	2204      	movs	r2, #4
 800a342:	f102 0614 	add.w	r6, r2, #20
 800a346:	429e      	cmp	r6, r3
 800a348:	6841      	ldr	r1, [r0, #4]
 800a34a:	d93d      	bls.n	800a3c8 <_dtoa_r+0x318>
 800a34c:	4620      	mov	r0, r4
 800a34e:	f001 f927 	bl	800b5a0 <_Balloc>
 800a352:	9001      	str	r0, [sp, #4]
 800a354:	2800      	cmp	r0, #0
 800a356:	d13b      	bne.n	800a3d0 <_dtoa_r+0x320>
 800a358:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <_dtoa_r+0x2f0>)
 800a35a:	4602      	mov	r2, r0
 800a35c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a360:	e6c0      	b.n	800a0e4 <_dtoa_r+0x34>
 800a362:	2301      	movs	r3, #1
 800a364:	e7df      	b.n	800a326 <_dtoa_r+0x276>
 800a366:	bf00      	nop
 800a368:	636f4361 	.word	0x636f4361
 800a36c:	3fd287a7 	.word	0x3fd287a7
 800a370:	8b60c8b3 	.word	0x8b60c8b3
 800a374:	3fc68a28 	.word	0x3fc68a28
 800a378:	509f79fb 	.word	0x509f79fb
 800a37c:	3fd34413 	.word	0x3fd34413
 800a380:	0800cdc6 	.word	0x0800cdc6
 800a384:	0800cddd 	.word	0x0800cddd
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	0800cdc2 	.word	0x0800cdc2
 800a390:	0800cdb9 	.word	0x0800cdb9
 800a394:	0800cc3d 	.word	0x0800cc3d
 800a398:	3ff80000 	.word	0x3ff80000
 800a39c:	0800cfb0 	.word	0x0800cfb0
 800a3a0:	0800ce38 	.word	0x0800ce38
 800a3a4:	2501      	movs	r5, #1
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9306      	str	r3, [sp, #24]
 800a3aa:	9508      	str	r5, [sp, #32]
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2312      	movs	r3, #18
 800a3b8:	e7b0      	b.n	800a31c <_dtoa_r+0x26c>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	9308      	str	r3, [sp, #32]
 800a3be:	e7f5      	b.n	800a3ac <_dtoa_r+0x2fc>
 800a3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3c6:	e7b8      	b.n	800a33a <_dtoa_r+0x28a>
 800a3c8:	3101      	adds	r1, #1
 800a3ca:	6041      	str	r1, [r0, #4]
 800a3cc:	0052      	lsls	r2, r2, #1
 800a3ce:	e7b8      	b.n	800a342 <_dtoa_r+0x292>
 800a3d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3d2:	9a01      	ldr	r2, [sp, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	2b0e      	cmp	r3, #14
 800a3da:	f200 809d 	bhi.w	800a518 <_dtoa_r+0x468>
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	f000 809a 	beq.w	800a518 <_dtoa_r+0x468>
 800a3e4:	9b00      	ldr	r3, [sp, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dd32      	ble.n	800a450 <_dtoa_r+0x3a0>
 800a3ea:	4ab7      	ldr	r2, [pc, #732]	; (800a6c8 <_dtoa_r+0x618>)
 800a3ec:	f003 030f 	and.w	r3, r3, #15
 800a3f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3f8:	9b00      	ldr	r3, [sp, #0]
 800a3fa:	05d8      	lsls	r0, r3, #23
 800a3fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a400:	d516      	bpl.n	800a430 <_dtoa_r+0x380>
 800a402:	4bb2      	ldr	r3, [pc, #712]	; (800a6cc <_dtoa_r+0x61c>)
 800a404:	ec51 0b19 	vmov	r0, r1, d9
 800a408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a40c:	f7f6 fa2e 	bl	800086c <__aeabi_ddiv>
 800a410:	f007 070f 	and.w	r7, r7, #15
 800a414:	4682      	mov	sl, r0
 800a416:	468b      	mov	fp, r1
 800a418:	2503      	movs	r5, #3
 800a41a:	4eac      	ldr	r6, [pc, #688]	; (800a6cc <_dtoa_r+0x61c>)
 800a41c:	b957      	cbnz	r7, 800a434 <_dtoa_r+0x384>
 800a41e:	4642      	mov	r2, r8
 800a420:	464b      	mov	r3, r9
 800a422:	4650      	mov	r0, sl
 800a424:	4659      	mov	r1, fp
 800a426:	f7f6 fa21 	bl	800086c <__aeabi_ddiv>
 800a42a:	4682      	mov	sl, r0
 800a42c:	468b      	mov	fp, r1
 800a42e:	e028      	b.n	800a482 <_dtoa_r+0x3d2>
 800a430:	2502      	movs	r5, #2
 800a432:	e7f2      	b.n	800a41a <_dtoa_r+0x36a>
 800a434:	07f9      	lsls	r1, r7, #31
 800a436:	d508      	bpl.n	800a44a <_dtoa_r+0x39a>
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a440:	f7f6 f8ea 	bl	8000618 <__aeabi_dmul>
 800a444:	3501      	adds	r5, #1
 800a446:	4680      	mov	r8, r0
 800a448:	4689      	mov	r9, r1
 800a44a:	107f      	asrs	r7, r7, #1
 800a44c:	3608      	adds	r6, #8
 800a44e:	e7e5      	b.n	800a41c <_dtoa_r+0x36c>
 800a450:	f000 809b 	beq.w	800a58a <_dtoa_r+0x4da>
 800a454:	9b00      	ldr	r3, [sp, #0]
 800a456:	4f9d      	ldr	r7, [pc, #628]	; (800a6cc <_dtoa_r+0x61c>)
 800a458:	425e      	negs	r6, r3
 800a45a:	4b9b      	ldr	r3, [pc, #620]	; (800a6c8 <_dtoa_r+0x618>)
 800a45c:	f006 020f 	and.w	r2, r6, #15
 800a460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	ec51 0b19 	vmov	r0, r1, d9
 800a46c:	f7f6 f8d4 	bl	8000618 <__aeabi_dmul>
 800a470:	1136      	asrs	r6, r6, #4
 800a472:	4682      	mov	sl, r0
 800a474:	468b      	mov	fp, r1
 800a476:	2300      	movs	r3, #0
 800a478:	2502      	movs	r5, #2
 800a47a:	2e00      	cmp	r6, #0
 800a47c:	d17a      	bne.n	800a574 <_dtoa_r+0x4c4>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1d3      	bne.n	800a42a <_dtoa_r+0x37a>
 800a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8082 	beq.w	800a58e <_dtoa_r+0x4de>
 800a48a:	4b91      	ldr	r3, [pc, #580]	; (800a6d0 <_dtoa_r+0x620>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	4650      	mov	r0, sl
 800a490:	4659      	mov	r1, fp
 800a492:	f7f6 fb33 	bl	8000afc <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	d079      	beq.n	800a58e <_dtoa_r+0x4de>
 800a49a:	9b03      	ldr	r3, [sp, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d076      	beq.n	800a58e <_dtoa_r+0x4de>
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dd36      	ble.n	800a514 <_dtoa_r+0x464>
 800a4a6:	9b00      	ldr	r3, [sp, #0]
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	1e5f      	subs	r7, r3, #1
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	4b88      	ldr	r3, [pc, #544]	; (800a6d4 <_dtoa_r+0x624>)
 800a4b2:	f7f6 f8b1 	bl	8000618 <__aeabi_dmul>
 800a4b6:	9e02      	ldr	r6, [sp, #8]
 800a4b8:	4682      	mov	sl, r0
 800a4ba:	468b      	mov	fp, r1
 800a4bc:	3501      	adds	r5, #1
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f7f6 f840 	bl	8000544 <__aeabi_i2d>
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	f7f6 f8a6 	bl	8000618 <__aeabi_dmul>
 800a4cc:	4b82      	ldr	r3, [pc, #520]	; (800a6d8 <_dtoa_r+0x628>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f7f5 feec 	bl	80002ac <__adddf3>
 800a4d4:	46d0      	mov	r8, sl
 800a4d6:	46d9      	mov	r9, fp
 800a4d8:	4682      	mov	sl, r0
 800a4da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a4de:	2e00      	cmp	r6, #0
 800a4e0:	d158      	bne.n	800a594 <_dtoa_r+0x4e4>
 800a4e2:	4b7e      	ldr	r3, [pc, #504]	; (800a6dc <_dtoa_r+0x62c>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	f7f5 fedd 	bl	80002a8 <__aeabi_dsub>
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	465b      	mov	r3, fp
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	4689      	mov	r9, r1
 800a4f6:	f7f6 fb1f 	bl	8000b38 <__aeabi_dcmpgt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f040 8295 	bne.w	800aa2a <_dtoa_r+0x97a>
 800a500:	4652      	mov	r2, sl
 800a502:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f6 faf7 	bl	8000afc <__aeabi_dcmplt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f040 8289 	bne.w	800aa26 <_dtoa_r+0x976>
 800a514:	ec5b ab19 	vmov	sl, fp, d9
 800a518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f2c0 8148 	blt.w	800a7b0 <_dtoa_r+0x700>
 800a520:	9a00      	ldr	r2, [sp, #0]
 800a522:	2a0e      	cmp	r2, #14
 800a524:	f300 8144 	bgt.w	800a7b0 <_dtoa_r+0x700>
 800a528:	4b67      	ldr	r3, [pc, #412]	; (800a6c8 <_dtoa_r+0x618>)
 800a52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a52e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	f280 80d5 	bge.w	800a6e4 <_dtoa_r+0x634>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f300 80d1 	bgt.w	800a6e4 <_dtoa_r+0x634>
 800a542:	f040 826f 	bne.w	800aa24 <_dtoa_r+0x974>
 800a546:	4b65      	ldr	r3, [pc, #404]	; (800a6dc <_dtoa_r+0x62c>)
 800a548:	2200      	movs	r2, #0
 800a54a:	4640      	mov	r0, r8
 800a54c:	4649      	mov	r1, r9
 800a54e:	f7f6 f863 	bl	8000618 <__aeabi_dmul>
 800a552:	4652      	mov	r2, sl
 800a554:	465b      	mov	r3, fp
 800a556:	f7f6 fae5 	bl	8000b24 <__aeabi_dcmpge>
 800a55a:	9e03      	ldr	r6, [sp, #12]
 800a55c:	4637      	mov	r7, r6
 800a55e:	2800      	cmp	r0, #0
 800a560:	f040 8245 	bne.w	800a9ee <_dtoa_r+0x93e>
 800a564:	9d01      	ldr	r5, [sp, #4]
 800a566:	2331      	movs	r3, #49	; 0x31
 800a568:	f805 3b01 	strb.w	r3, [r5], #1
 800a56c:	9b00      	ldr	r3, [sp, #0]
 800a56e:	3301      	adds	r3, #1
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	e240      	b.n	800a9f6 <_dtoa_r+0x946>
 800a574:	07f2      	lsls	r2, r6, #31
 800a576:	d505      	bpl.n	800a584 <_dtoa_r+0x4d4>
 800a578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a57c:	f7f6 f84c 	bl	8000618 <__aeabi_dmul>
 800a580:	3501      	adds	r5, #1
 800a582:	2301      	movs	r3, #1
 800a584:	1076      	asrs	r6, r6, #1
 800a586:	3708      	adds	r7, #8
 800a588:	e777      	b.n	800a47a <_dtoa_r+0x3ca>
 800a58a:	2502      	movs	r5, #2
 800a58c:	e779      	b.n	800a482 <_dtoa_r+0x3d2>
 800a58e:	9f00      	ldr	r7, [sp, #0]
 800a590:	9e03      	ldr	r6, [sp, #12]
 800a592:	e794      	b.n	800a4be <_dtoa_r+0x40e>
 800a594:	9901      	ldr	r1, [sp, #4]
 800a596:	4b4c      	ldr	r3, [pc, #304]	; (800a6c8 <_dtoa_r+0x618>)
 800a598:	4431      	add	r1, r6
 800a59a:	910d      	str	r1, [sp, #52]	; 0x34
 800a59c:	9908      	ldr	r1, [sp, #32]
 800a59e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5a6:	2900      	cmp	r1, #0
 800a5a8:	d043      	beq.n	800a632 <_dtoa_r+0x582>
 800a5aa:	494d      	ldr	r1, [pc, #308]	; (800a6e0 <_dtoa_r+0x630>)
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7f6 f95d 	bl	800086c <__aeabi_ddiv>
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	f7f5 fe77 	bl	80002a8 <__aeabi_dsub>
 800a5ba:	9d01      	ldr	r5, [sp, #4]
 800a5bc:	4682      	mov	sl, r0
 800a5be:	468b      	mov	fp, r1
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	f7f6 fad8 	bl	8000b78 <__aeabi_d2iz>
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	f7f5 ffbb 	bl	8000544 <__aeabi_i2d>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f5 fe67 	bl	80002a8 <__aeabi_dsub>
 800a5da:	3630      	adds	r6, #48	; 0x30
 800a5dc:	f805 6b01 	strb.w	r6, [r5], #1
 800a5e0:	4652      	mov	r2, sl
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	f7f6 fa88 	bl	8000afc <__aeabi_dcmplt>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d163      	bne.n	800a6b8 <_dtoa_r+0x608>
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	4936      	ldr	r1, [pc, #216]	; (800a6d0 <_dtoa_r+0x620>)
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f7f5 fe56 	bl	80002a8 <__aeabi_dsub>
 800a5fc:	4652      	mov	r2, sl
 800a5fe:	465b      	mov	r3, fp
 800a600:	f7f6 fa7c 	bl	8000afc <__aeabi_dcmplt>
 800a604:	2800      	cmp	r0, #0
 800a606:	f040 80b5 	bne.w	800a774 <_dtoa_r+0x6c4>
 800a60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a60c:	429d      	cmp	r5, r3
 800a60e:	d081      	beq.n	800a514 <_dtoa_r+0x464>
 800a610:	4b30      	ldr	r3, [pc, #192]	; (800a6d4 <_dtoa_r+0x624>)
 800a612:	2200      	movs	r2, #0
 800a614:	4650      	mov	r0, sl
 800a616:	4659      	mov	r1, fp
 800a618:	f7f5 fffe 	bl	8000618 <__aeabi_dmul>
 800a61c:	4b2d      	ldr	r3, [pc, #180]	; (800a6d4 <_dtoa_r+0x624>)
 800a61e:	4682      	mov	sl, r0
 800a620:	468b      	mov	fp, r1
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	2200      	movs	r2, #0
 800a628:	f7f5 fff6 	bl	8000618 <__aeabi_dmul>
 800a62c:	4680      	mov	r8, r0
 800a62e:	4689      	mov	r9, r1
 800a630:	e7c6      	b.n	800a5c0 <_dtoa_r+0x510>
 800a632:	4650      	mov	r0, sl
 800a634:	4659      	mov	r1, fp
 800a636:	f7f5 ffef 	bl	8000618 <__aeabi_dmul>
 800a63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a63c:	9d01      	ldr	r5, [sp, #4]
 800a63e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a640:	4682      	mov	sl, r0
 800a642:	468b      	mov	fp, r1
 800a644:	4649      	mov	r1, r9
 800a646:	4640      	mov	r0, r8
 800a648:	f7f6 fa96 	bl	8000b78 <__aeabi_d2iz>
 800a64c:	4606      	mov	r6, r0
 800a64e:	f7f5 ff79 	bl	8000544 <__aeabi_i2d>
 800a652:	3630      	adds	r6, #48	; 0x30
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	f7f5 fe24 	bl	80002a8 <__aeabi_dsub>
 800a660:	f805 6b01 	strb.w	r6, [r5], #1
 800a664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a666:	429d      	cmp	r5, r3
 800a668:	4680      	mov	r8, r0
 800a66a:	4689      	mov	r9, r1
 800a66c:	f04f 0200 	mov.w	r2, #0
 800a670:	d124      	bne.n	800a6bc <_dtoa_r+0x60c>
 800a672:	4b1b      	ldr	r3, [pc, #108]	; (800a6e0 <_dtoa_r+0x630>)
 800a674:	4650      	mov	r0, sl
 800a676:	4659      	mov	r1, fp
 800a678:	f7f5 fe18 	bl	80002ac <__adddf3>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4640      	mov	r0, r8
 800a682:	4649      	mov	r1, r9
 800a684:	f7f6 fa58 	bl	8000b38 <__aeabi_dcmpgt>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d173      	bne.n	800a774 <_dtoa_r+0x6c4>
 800a68c:	4652      	mov	r2, sl
 800a68e:	465b      	mov	r3, fp
 800a690:	4913      	ldr	r1, [pc, #76]	; (800a6e0 <_dtoa_r+0x630>)
 800a692:	2000      	movs	r0, #0
 800a694:	f7f5 fe08 	bl	80002a8 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4640      	mov	r0, r8
 800a69e:	4649      	mov	r1, r9
 800a6a0:	f7f6 fa2c 	bl	8000afc <__aeabi_dcmplt>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f43f af35 	beq.w	800a514 <_dtoa_r+0x464>
 800a6aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a6ac:	1e6b      	subs	r3, r5, #1
 800a6ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6b4:	2b30      	cmp	r3, #48	; 0x30
 800a6b6:	d0f8      	beq.n	800a6aa <_dtoa_r+0x5fa>
 800a6b8:	9700      	str	r7, [sp, #0]
 800a6ba:	e049      	b.n	800a750 <_dtoa_r+0x6a0>
 800a6bc:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <_dtoa_r+0x624>)
 800a6be:	f7f5 ffab 	bl	8000618 <__aeabi_dmul>
 800a6c2:	4680      	mov	r8, r0
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	e7bd      	b.n	800a644 <_dtoa_r+0x594>
 800a6c8:	0800cfb0 	.word	0x0800cfb0
 800a6cc:	0800cf88 	.word	0x0800cf88
 800a6d0:	3ff00000 	.word	0x3ff00000
 800a6d4:	40240000 	.word	0x40240000
 800a6d8:	401c0000 	.word	0x401c0000
 800a6dc:	40140000 	.word	0x40140000
 800a6e0:	3fe00000 	.word	0x3fe00000
 800a6e4:	9d01      	ldr	r5, [sp, #4]
 800a6e6:	4656      	mov	r6, sl
 800a6e8:	465f      	mov	r7, fp
 800a6ea:	4642      	mov	r2, r8
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	f7f6 f8bb 	bl	800086c <__aeabi_ddiv>
 800a6f6:	f7f6 fa3f 	bl	8000b78 <__aeabi_d2iz>
 800a6fa:	4682      	mov	sl, r0
 800a6fc:	f7f5 ff22 	bl	8000544 <__aeabi_i2d>
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	f7f5 ff88 	bl	8000618 <__aeabi_dmul>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a714:	f7f5 fdc8 	bl	80002a8 <__aeabi_dsub>
 800a718:	f805 6b01 	strb.w	r6, [r5], #1
 800a71c:	9e01      	ldr	r6, [sp, #4]
 800a71e:	9f03      	ldr	r7, [sp, #12]
 800a720:	1bae      	subs	r6, r5, r6
 800a722:	42b7      	cmp	r7, r6
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	d135      	bne.n	800a796 <_dtoa_r+0x6e6>
 800a72a:	f7f5 fdbf 	bl	80002ac <__adddf3>
 800a72e:	4642      	mov	r2, r8
 800a730:	464b      	mov	r3, r9
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	f7f6 f9ff 	bl	8000b38 <__aeabi_dcmpgt>
 800a73a:	b9d0      	cbnz	r0, 800a772 <_dtoa_r+0x6c2>
 800a73c:	4642      	mov	r2, r8
 800a73e:	464b      	mov	r3, r9
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f9d0 	bl	8000ae8 <__aeabi_dcmpeq>
 800a748:	b110      	cbz	r0, 800a750 <_dtoa_r+0x6a0>
 800a74a:	f01a 0f01 	tst.w	sl, #1
 800a74e:	d110      	bne.n	800a772 <_dtoa_r+0x6c2>
 800a750:	4620      	mov	r0, r4
 800a752:	ee18 1a10 	vmov	r1, s16
 800a756:	f000 ff63 	bl	800b620 <_Bfree>
 800a75a:	2300      	movs	r3, #0
 800a75c:	9800      	ldr	r0, [sp, #0]
 800a75e:	702b      	strb	r3, [r5, #0]
 800a760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a762:	3001      	adds	r0, #1
 800a764:	6018      	str	r0, [r3, #0]
 800a766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f43f acf1 	beq.w	800a150 <_dtoa_r+0xa0>
 800a76e:	601d      	str	r5, [r3, #0]
 800a770:	e4ee      	b.n	800a150 <_dtoa_r+0xa0>
 800a772:	9f00      	ldr	r7, [sp, #0]
 800a774:	462b      	mov	r3, r5
 800a776:	461d      	mov	r5, r3
 800a778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a77c:	2a39      	cmp	r2, #57	; 0x39
 800a77e:	d106      	bne.n	800a78e <_dtoa_r+0x6de>
 800a780:	9a01      	ldr	r2, [sp, #4]
 800a782:	429a      	cmp	r2, r3
 800a784:	d1f7      	bne.n	800a776 <_dtoa_r+0x6c6>
 800a786:	9901      	ldr	r1, [sp, #4]
 800a788:	2230      	movs	r2, #48	; 0x30
 800a78a:	3701      	adds	r7, #1
 800a78c:	700a      	strb	r2, [r1, #0]
 800a78e:	781a      	ldrb	r2, [r3, #0]
 800a790:	3201      	adds	r2, #1
 800a792:	701a      	strb	r2, [r3, #0]
 800a794:	e790      	b.n	800a6b8 <_dtoa_r+0x608>
 800a796:	4ba6      	ldr	r3, [pc, #664]	; (800aa30 <_dtoa_r+0x980>)
 800a798:	2200      	movs	r2, #0
 800a79a:	f7f5 ff3d 	bl	8000618 <__aeabi_dmul>
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	460f      	mov	r7, r1
 800a7a6:	f7f6 f99f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d09d      	beq.n	800a6ea <_dtoa_r+0x63a>
 800a7ae:	e7cf      	b.n	800a750 <_dtoa_r+0x6a0>
 800a7b0:	9a08      	ldr	r2, [sp, #32]
 800a7b2:	2a00      	cmp	r2, #0
 800a7b4:	f000 80d7 	beq.w	800a966 <_dtoa_r+0x8b6>
 800a7b8:	9a06      	ldr	r2, [sp, #24]
 800a7ba:	2a01      	cmp	r2, #1
 800a7bc:	f300 80ba 	bgt.w	800a934 <_dtoa_r+0x884>
 800a7c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	f000 80b2 	beq.w	800a92c <_dtoa_r+0x87c>
 800a7c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7cc:	9e07      	ldr	r6, [sp, #28]
 800a7ce:	9d04      	ldr	r5, [sp, #16]
 800a7d0:	9a04      	ldr	r2, [sp, #16]
 800a7d2:	441a      	add	r2, r3
 800a7d4:	9204      	str	r2, [sp, #16]
 800a7d6:	9a05      	ldr	r2, [sp, #20]
 800a7d8:	2101      	movs	r1, #1
 800a7da:	441a      	add	r2, r3
 800a7dc:	4620      	mov	r0, r4
 800a7de:	9205      	str	r2, [sp, #20]
 800a7e0:	f001 f820 	bl	800b824 <__i2b>
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	dd0c      	ble.n	800a804 <_dtoa_r+0x754>
 800a7ea:	9b05      	ldr	r3, [sp, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd09      	ble.n	800a804 <_dtoa_r+0x754>
 800a7f0:	42ab      	cmp	r3, r5
 800a7f2:	9a04      	ldr	r2, [sp, #16]
 800a7f4:	bfa8      	it	ge
 800a7f6:	462b      	movge	r3, r5
 800a7f8:	1ad2      	subs	r2, r2, r3
 800a7fa:	9204      	str	r2, [sp, #16]
 800a7fc:	9a05      	ldr	r2, [sp, #20]
 800a7fe:	1aed      	subs	r5, r5, r3
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	9305      	str	r3, [sp, #20]
 800a804:	9b07      	ldr	r3, [sp, #28]
 800a806:	b31b      	cbz	r3, 800a850 <_dtoa_r+0x7a0>
 800a808:	9b08      	ldr	r3, [sp, #32]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 80af 	beq.w	800a96e <_dtoa_r+0x8be>
 800a810:	2e00      	cmp	r6, #0
 800a812:	dd13      	ble.n	800a83c <_dtoa_r+0x78c>
 800a814:	4639      	mov	r1, r7
 800a816:	4632      	mov	r2, r6
 800a818:	4620      	mov	r0, r4
 800a81a:	f001 f8c3 	bl	800b9a4 <__pow5mult>
 800a81e:	ee18 2a10 	vmov	r2, s16
 800a822:	4601      	mov	r1, r0
 800a824:	4607      	mov	r7, r0
 800a826:	4620      	mov	r0, r4
 800a828:	f001 f812 	bl	800b850 <__multiply>
 800a82c:	ee18 1a10 	vmov	r1, s16
 800a830:	4680      	mov	r8, r0
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fef4 	bl	800b620 <_Bfree>
 800a838:	ee08 8a10 	vmov	s16, r8
 800a83c:	9b07      	ldr	r3, [sp, #28]
 800a83e:	1b9a      	subs	r2, r3, r6
 800a840:	d006      	beq.n	800a850 <_dtoa_r+0x7a0>
 800a842:	ee18 1a10 	vmov	r1, s16
 800a846:	4620      	mov	r0, r4
 800a848:	f001 f8ac 	bl	800b9a4 <__pow5mult>
 800a84c:	ee08 0a10 	vmov	s16, r0
 800a850:	2101      	movs	r1, #1
 800a852:	4620      	mov	r0, r4
 800a854:	f000 ffe6 	bl	800b824 <__i2b>
 800a858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	4606      	mov	r6, r0
 800a85e:	f340 8088 	ble.w	800a972 <_dtoa_r+0x8c2>
 800a862:	461a      	mov	r2, r3
 800a864:	4601      	mov	r1, r0
 800a866:	4620      	mov	r0, r4
 800a868:	f001 f89c 	bl	800b9a4 <__pow5mult>
 800a86c:	9b06      	ldr	r3, [sp, #24]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	4606      	mov	r6, r0
 800a872:	f340 8081 	ble.w	800a978 <_dtoa_r+0x8c8>
 800a876:	f04f 0800 	mov.w	r8, #0
 800a87a:	6933      	ldr	r3, [r6, #16]
 800a87c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a880:	6918      	ldr	r0, [r3, #16]
 800a882:	f000 ff7f 	bl	800b784 <__hi0bits>
 800a886:	f1c0 0020 	rsb	r0, r0, #32
 800a88a:	9b05      	ldr	r3, [sp, #20]
 800a88c:	4418      	add	r0, r3
 800a88e:	f010 001f 	ands.w	r0, r0, #31
 800a892:	f000 8092 	beq.w	800a9ba <_dtoa_r+0x90a>
 800a896:	f1c0 0320 	rsb	r3, r0, #32
 800a89a:	2b04      	cmp	r3, #4
 800a89c:	f340 808a 	ble.w	800a9b4 <_dtoa_r+0x904>
 800a8a0:	f1c0 001c 	rsb	r0, r0, #28
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	4403      	add	r3, r0
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	4403      	add	r3, r0
 800a8ae:	4405      	add	r5, r0
 800a8b0:	9305      	str	r3, [sp, #20]
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dd07      	ble.n	800a8c8 <_dtoa_r+0x818>
 800a8b8:	ee18 1a10 	vmov	r1, s16
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f001 f8ca 	bl	800ba58 <__lshift>
 800a8c4:	ee08 0a10 	vmov	s16, r0
 800a8c8:	9b05      	ldr	r3, [sp, #20]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	dd05      	ble.n	800a8da <_dtoa_r+0x82a>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f001 f8c0 	bl	800ba58 <__lshift>
 800a8d8:	4606      	mov	r6, r0
 800a8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d06e      	beq.n	800a9be <_dtoa_r+0x90e>
 800a8e0:	ee18 0a10 	vmov	r0, s16
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	f001 f927 	bl	800bb38 <__mcmp>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	da67      	bge.n	800a9be <_dtoa_r+0x90e>
 800a8ee:	9b00      	ldr	r3, [sp, #0]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	ee18 1a10 	vmov	r1, s16
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 feb1 	bl	800b664 <__multadd>
 800a902:	9b08      	ldr	r3, [sp, #32]
 800a904:	ee08 0a10 	vmov	s16, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 81b1 	beq.w	800ac70 <_dtoa_r+0xbc0>
 800a90e:	2300      	movs	r3, #0
 800a910:	4639      	mov	r1, r7
 800a912:	220a      	movs	r2, #10
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fea5 	bl	800b664 <__multadd>
 800a91a:	9b02      	ldr	r3, [sp, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	4607      	mov	r7, r0
 800a920:	f300 808e 	bgt.w	800aa40 <_dtoa_r+0x990>
 800a924:	9b06      	ldr	r3, [sp, #24]
 800a926:	2b02      	cmp	r3, #2
 800a928:	dc51      	bgt.n	800a9ce <_dtoa_r+0x91e>
 800a92a:	e089      	b.n	800aa40 <_dtoa_r+0x990>
 800a92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a92e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a932:	e74b      	b.n	800a7cc <_dtoa_r+0x71c>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	1e5e      	subs	r6, r3, #1
 800a938:	9b07      	ldr	r3, [sp, #28]
 800a93a:	42b3      	cmp	r3, r6
 800a93c:	bfbf      	itttt	lt
 800a93e:	9b07      	ldrlt	r3, [sp, #28]
 800a940:	9607      	strlt	r6, [sp, #28]
 800a942:	1af2      	sublt	r2, r6, r3
 800a944:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a946:	bfb6      	itet	lt
 800a948:	189b      	addlt	r3, r3, r2
 800a94a:	1b9e      	subge	r6, r3, r6
 800a94c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a94e:	9b03      	ldr	r3, [sp, #12]
 800a950:	bfb8      	it	lt
 800a952:	2600      	movlt	r6, #0
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfb7      	itett	lt
 800a958:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a95c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a960:	1a9d      	sublt	r5, r3, r2
 800a962:	2300      	movlt	r3, #0
 800a964:	e734      	b.n	800a7d0 <_dtoa_r+0x720>
 800a966:	9e07      	ldr	r6, [sp, #28]
 800a968:	9d04      	ldr	r5, [sp, #16]
 800a96a:	9f08      	ldr	r7, [sp, #32]
 800a96c:	e73b      	b.n	800a7e6 <_dtoa_r+0x736>
 800a96e:	9a07      	ldr	r2, [sp, #28]
 800a970:	e767      	b.n	800a842 <_dtoa_r+0x792>
 800a972:	9b06      	ldr	r3, [sp, #24]
 800a974:	2b01      	cmp	r3, #1
 800a976:	dc18      	bgt.n	800a9aa <_dtoa_r+0x8fa>
 800a978:	f1ba 0f00 	cmp.w	sl, #0
 800a97c:	d115      	bne.n	800a9aa <_dtoa_r+0x8fa>
 800a97e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a982:	b993      	cbnz	r3, 800a9aa <_dtoa_r+0x8fa>
 800a984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a988:	0d1b      	lsrs	r3, r3, #20
 800a98a:	051b      	lsls	r3, r3, #20
 800a98c:	b183      	cbz	r3, 800a9b0 <_dtoa_r+0x900>
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	3301      	adds	r3, #1
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	9b05      	ldr	r3, [sp, #20]
 800a996:	3301      	adds	r3, #1
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	f04f 0801 	mov.w	r8, #1
 800a99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f47f af6a 	bne.w	800a87a <_dtoa_r+0x7ca>
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e76f      	b.n	800a88a <_dtoa_r+0x7da>
 800a9aa:	f04f 0800 	mov.w	r8, #0
 800a9ae:	e7f6      	b.n	800a99e <_dtoa_r+0x8ee>
 800a9b0:	4698      	mov	r8, r3
 800a9b2:	e7f4      	b.n	800a99e <_dtoa_r+0x8ee>
 800a9b4:	f43f af7d 	beq.w	800a8b2 <_dtoa_r+0x802>
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	301c      	adds	r0, #28
 800a9bc:	e772      	b.n	800a8a4 <_dtoa_r+0x7f4>
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc37      	bgt.n	800aa34 <_dtoa_r+0x984>
 800a9c4:	9b06      	ldr	r3, [sp, #24]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	dd34      	ble.n	800aa34 <_dtoa_r+0x984>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	9302      	str	r3, [sp, #8]
 800a9ce:	9b02      	ldr	r3, [sp, #8]
 800a9d0:	b96b      	cbnz	r3, 800a9ee <_dtoa_r+0x93e>
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	2205      	movs	r2, #5
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 fe44 	bl	800b664 <__multadd>
 800a9dc:	4601      	mov	r1, r0
 800a9de:	4606      	mov	r6, r0
 800a9e0:	ee18 0a10 	vmov	r0, s16
 800a9e4:	f001 f8a8 	bl	800bb38 <__mcmp>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f73f adbb 	bgt.w	800a564 <_dtoa_r+0x4b4>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	9d01      	ldr	r5, [sp, #4]
 800a9f2:	43db      	mvns	r3, r3
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	f04f 0800 	mov.w	r8, #0
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 fe0f 	bl	800b620 <_Bfree>
 800aa02:	2f00      	cmp	r7, #0
 800aa04:	f43f aea4 	beq.w	800a750 <_dtoa_r+0x6a0>
 800aa08:	f1b8 0f00 	cmp.w	r8, #0
 800aa0c:	d005      	beq.n	800aa1a <_dtoa_r+0x96a>
 800aa0e:	45b8      	cmp	r8, r7
 800aa10:	d003      	beq.n	800aa1a <_dtoa_r+0x96a>
 800aa12:	4641      	mov	r1, r8
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 fe03 	bl	800b620 <_Bfree>
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fdff 	bl	800b620 <_Bfree>
 800aa22:	e695      	b.n	800a750 <_dtoa_r+0x6a0>
 800aa24:	2600      	movs	r6, #0
 800aa26:	4637      	mov	r7, r6
 800aa28:	e7e1      	b.n	800a9ee <_dtoa_r+0x93e>
 800aa2a:	9700      	str	r7, [sp, #0]
 800aa2c:	4637      	mov	r7, r6
 800aa2e:	e599      	b.n	800a564 <_dtoa_r+0x4b4>
 800aa30:	40240000 	.word	0x40240000
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 80ca 	beq.w	800abd0 <_dtoa_r+0xb20>
 800aa3c:	9b03      	ldr	r3, [sp, #12]
 800aa3e:	9302      	str	r3, [sp, #8]
 800aa40:	2d00      	cmp	r5, #0
 800aa42:	dd05      	ble.n	800aa50 <_dtoa_r+0x9a0>
 800aa44:	4639      	mov	r1, r7
 800aa46:	462a      	mov	r2, r5
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f001 f805 	bl	800ba58 <__lshift>
 800aa4e:	4607      	mov	r7, r0
 800aa50:	f1b8 0f00 	cmp.w	r8, #0
 800aa54:	d05b      	beq.n	800ab0e <_dtoa_r+0xa5e>
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fda1 	bl	800b5a0 <_Balloc>
 800aa5e:	4605      	mov	r5, r0
 800aa60:	b928      	cbnz	r0, 800aa6e <_dtoa_r+0x9be>
 800aa62:	4b87      	ldr	r3, [pc, #540]	; (800ac80 <_dtoa_r+0xbd0>)
 800aa64:	4602      	mov	r2, r0
 800aa66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa6a:	f7ff bb3b 	b.w	800a0e4 <_dtoa_r+0x34>
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	3202      	adds	r2, #2
 800aa72:	0092      	lsls	r2, r2, #2
 800aa74:	f107 010c 	add.w	r1, r7, #12
 800aa78:	300c      	adds	r0, #12
 800aa7a:	f7fd fc21 	bl	80082c0 <memcpy>
 800aa7e:	2201      	movs	r2, #1
 800aa80:	4629      	mov	r1, r5
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 ffe8 	bl	800ba58 <__lshift>
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	f103 0901 	add.w	r9, r3, #1
 800aa8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa92:	4413      	add	r3, r2
 800aa94:	9305      	str	r3, [sp, #20]
 800aa96:	f00a 0301 	and.w	r3, sl, #1
 800aa9a:	46b8      	mov	r8, r7
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	ee18 0a10 	vmov	r0, s16
 800aaa6:	f7ff fa77 	bl	8009f98 <quorem>
 800aaaa:	4641      	mov	r1, r8
 800aaac:	9002      	str	r0, [sp, #8]
 800aaae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aab2:	ee18 0a10 	vmov	r0, s16
 800aab6:	f001 f83f 	bl	800bb38 <__mcmp>
 800aaba:	463a      	mov	r2, r7
 800aabc:	9003      	str	r0, [sp, #12]
 800aabe:	4631      	mov	r1, r6
 800aac0:	4620      	mov	r0, r4
 800aac2:	f001 f855 	bl	800bb70 <__mdiff>
 800aac6:	68c2      	ldr	r2, [r0, #12]
 800aac8:	f109 3bff 	add.w	fp, r9, #4294967295
 800aacc:	4605      	mov	r5, r0
 800aace:	bb02      	cbnz	r2, 800ab12 <_dtoa_r+0xa62>
 800aad0:	4601      	mov	r1, r0
 800aad2:	ee18 0a10 	vmov	r0, s16
 800aad6:	f001 f82f 	bl	800bb38 <__mcmp>
 800aada:	4602      	mov	r2, r0
 800aadc:	4629      	mov	r1, r5
 800aade:	4620      	mov	r0, r4
 800aae0:	9207      	str	r2, [sp, #28]
 800aae2:	f000 fd9d 	bl	800b620 <_Bfree>
 800aae6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aaea:	ea43 0102 	orr.w	r1, r3, r2
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	464d      	mov	r5, r9
 800aaf4:	d10f      	bne.n	800ab16 <_dtoa_r+0xa66>
 800aaf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aafa:	d02a      	beq.n	800ab52 <_dtoa_r+0xaa2>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dd02      	ble.n	800ab08 <_dtoa_r+0xa58>
 800ab02:	9b02      	ldr	r3, [sp, #8]
 800ab04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ab08:	f88b a000 	strb.w	sl, [fp]
 800ab0c:	e775      	b.n	800a9fa <_dtoa_r+0x94a>
 800ab0e:	4638      	mov	r0, r7
 800ab10:	e7ba      	b.n	800aa88 <_dtoa_r+0x9d8>
 800ab12:	2201      	movs	r2, #1
 800ab14:	e7e2      	b.n	800aadc <_dtoa_r+0xa2c>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	db04      	blt.n	800ab26 <_dtoa_r+0xa76>
 800ab1c:	9906      	ldr	r1, [sp, #24]
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	9904      	ldr	r1, [sp, #16]
 800ab22:	430b      	orrs	r3, r1
 800ab24:	d122      	bne.n	800ab6c <_dtoa_r+0xabc>
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	ddee      	ble.n	800ab08 <_dtoa_r+0xa58>
 800ab2a:	ee18 1a10 	vmov	r1, s16
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 ff91 	bl	800ba58 <__lshift>
 800ab36:	4631      	mov	r1, r6
 800ab38:	ee08 0a10 	vmov	s16, r0
 800ab3c:	f000 fffc 	bl	800bb38 <__mcmp>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	dc03      	bgt.n	800ab4c <_dtoa_r+0xa9c>
 800ab44:	d1e0      	bne.n	800ab08 <_dtoa_r+0xa58>
 800ab46:	f01a 0f01 	tst.w	sl, #1
 800ab4a:	d0dd      	beq.n	800ab08 <_dtoa_r+0xa58>
 800ab4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab50:	d1d7      	bne.n	800ab02 <_dtoa_r+0xa52>
 800ab52:	2339      	movs	r3, #57	; 0x39
 800ab54:	f88b 3000 	strb.w	r3, [fp]
 800ab58:	462b      	mov	r3, r5
 800ab5a:	461d      	mov	r5, r3
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab62:	2a39      	cmp	r2, #57	; 0x39
 800ab64:	d071      	beq.n	800ac4a <_dtoa_r+0xb9a>
 800ab66:	3201      	adds	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]
 800ab6a:	e746      	b.n	800a9fa <_dtoa_r+0x94a>
 800ab6c:	2a00      	cmp	r2, #0
 800ab6e:	dd07      	ble.n	800ab80 <_dtoa_r+0xad0>
 800ab70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab74:	d0ed      	beq.n	800ab52 <_dtoa_r+0xaa2>
 800ab76:	f10a 0301 	add.w	r3, sl, #1
 800ab7a:	f88b 3000 	strb.w	r3, [fp]
 800ab7e:	e73c      	b.n	800a9fa <_dtoa_r+0x94a>
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab86:	4599      	cmp	r9, r3
 800ab88:	d047      	beq.n	800ac1a <_dtoa_r+0xb6a>
 800ab8a:	ee18 1a10 	vmov	r1, s16
 800ab8e:	2300      	movs	r3, #0
 800ab90:	220a      	movs	r2, #10
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 fd66 	bl	800b664 <__multadd>
 800ab98:	45b8      	cmp	r8, r7
 800ab9a:	ee08 0a10 	vmov	s16, r0
 800ab9e:	f04f 0300 	mov.w	r3, #0
 800aba2:	f04f 020a 	mov.w	r2, #10
 800aba6:	4641      	mov	r1, r8
 800aba8:	4620      	mov	r0, r4
 800abaa:	d106      	bne.n	800abba <_dtoa_r+0xb0a>
 800abac:	f000 fd5a 	bl	800b664 <__multadd>
 800abb0:	4680      	mov	r8, r0
 800abb2:	4607      	mov	r7, r0
 800abb4:	f109 0901 	add.w	r9, r9, #1
 800abb8:	e772      	b.n	800aaa0 <_dtoa_r+0x9f0>
 800abba:	f000 fd53 	bl	800b664 <__multadd>
 800abbe:	4639      	mov	r1, r7
 800abc0:	4680      	mov	r8, r0
 800abc2:	2300      	movs	r3, #0
 800abc4:	220a      	movs	r2, #10
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 fd4c 	bl	800b664 <__multadd>
 800abcc:	4607      	mov	r7, r0
 800abce:	e7f1      	b.n	800abb4 <_dtoa_r+0xb04>
 800abd0:	9b03      	ldr	r3, [sp, #12]
 800abd2:	9302      	str	r3, [sp, #8]
 800abd4:	9d01      	ldr	r5, [sp, #4]
 800abd6:	ee18 0a10 	vmov	r0, s16
 800abda:	4631      	mov	r1, r6
 800abdc:	f7ff f9dc 	bl	8009f98 <quorem>
 800abe0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	f805 ab01 	strb.w	sl, [r5], #1
 800abea:	1aea      	subs	r2, r5, r3
 800abec:	9b02      	ldr	r3, [sp, #8]
 800abee:	4293      	cmp	r3, r2
 800abf0:	dd09      	ble.n	800ac06 <_dtoa_r+0xb56>
 800abf2:	ee18 1a10 	vmov	r1, s16
 800abf6:	2300      	movs	r3, #0
 800abf8:	220a      	movs	r2, #10
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fd32 	bl	800b664 <__multadd>
 800ac00:	ee08 0a10 	vmov	s16, r0
 800ac04:	e7e7      	b.n	800abd6 <_dtoa_r+0xb26>
 800ac06:	9b02      	ldr	r3, [sp, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfc8      	it	gt
 800ac0c:	461d      	movgt	r5, r3
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	bfd8      	it	le
 800ac12:	2501      	movle	r5, #1
 800ac14:	441d      	add	r5, r3
 800ac16:	f04f 0800 	mov.w	r8, #0
 800ac1a:	ee18 1a10 	vmov	r1, s16
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 ff19 	bl	800ba58 <__lshift>
 800ac26:	4631      	mov	r1, r6
 800ac28:	ee08 0a10 	vmov	s16, r0
 800ac2c:	f000 ff84 	bl	800bb38 <__mcmp>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	dc91      	bgt.n	800ab58 <_dtoa_r+0xaa8>
 800ac34:	d102      	bne.n	800ac3c <_dtoa_r+0xb8c>
 800ac36:	f01a 0f01 	tst.w	sl, #1
 800ac3a:	d18d      	bne.n	800ab58 <_dtoa_r+0xaa8>
 800ac3c:	462b      	mov	r3, r5
 800ac3e:	461d      	mov	r5, r3
 800ac40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac44:	2a30      	cmp	r2, #48	; 0x30
 800ac46:	d0fa      	beq.n	800ac3e <_dtoa_r+0xb8e>
 800ac48:	e6d7      	b.n	800a9fa <_dtoa_r+0x94a>
 800ac4a:	9a01      	ldr	r2, [sp, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d184      	bne.n	800ab5a <_dtoa_r+0xaaa>
 800ac50:	9b00      	ldr	r3, [sp, #0]
 800ac52:	3301      	adds	r3, #1
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	2331      	movs	r3, #49	; 0x31
 800ac58:	7013      	strb	r3, [r2, #0]
 800ac5a:	e6ce      	b.n	800a9fa <_dtoa_r+0x94a>
 800ac5c:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <_dtoa_r+0xbd4>)
 800ac5e:	f7ff ba95 	b.w	800a18c <_dtoa_r+0xdc>
 800ac62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f47f aa6e 	bne.w	800a146 <_dtoa_r+0x96>
 800ac6a:	4b07      	ldr	r3, [pc, #28]	; (800ac88 <_dtoa_r+0xbd8>)
 800ac6c:	f7ff ba8e 	b.w	800a18c <_dtoa_r+0xdc>
 800ac70:	9b02      	ldr	r3, [sp, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	dcae      	bgt.n	800abd4 <_dtoa_r+0xb24>
 800ac76:	9b06      	ldr	r3, [sp, #24]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	f73f aea8 	bgt.w	800a9ce <_dtoa_r+0x91e>
 800ac7e:	e7a9      	b.n	800abd4 <_dtoa_r+0xb24>
 800ac80:	0800ce38 	.word	0x0800ce38
 800ac84:	0800cc3c 	.word	0x0800cc3c
 800ac88:	0800cdb9 	.word	0x0800cdb9

0800ac8c <std>:
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	4604      	mov	r4, r0
 800ac92:	e9c0 3300 	strd	r3, r3, [r0]
 800ac96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac9a:	6083      	str	r3, [r0, #8]
 800ac9c:	8181      	strh	r1, [r0, #12]
 800ac9e:	6643      	str	r3, [r0, #100]	; 0x64
 800aca0:	81c2      	strh	r2, [r0, #14]
 800aca2:	6183      	str	r3, [r0, #24]
 800aca4:	4619      	mov	r1, r3
 800aca6:	2208      	movs	r2, #8
 800aca8:	305c      	adds	r0, #92	; 0x5c
 800acaa:	f7fd fb17 	bl	80082dc <memset>
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <std+0x38>)
 800acb0:	6263      	str	r3, [r4, #36]	; 0x24
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <std+0x3c>)
 800acb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <std+0x40>)
 800acb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <std+0x44>)
 800acbc:	6224      	str	r4, [r4, #32]
 800acbe:	6323      	str	r3, [r4, #48]	; 0x30
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	bf00      	nop
 800acc4:	0800c4c9 	.word	0x0800c4c9
 800acc8:	0800c4eb 	.word	0x0800c4eb
 800accc:	0800c523 	.word	0x0800c523
 800acd0:	0800c547 	.word	0x0800c547

0800acd4 <_cleanup_r>:
 800acd4:	4901      	ldr	r1, [pc, #4]	; (800acdc <_cleanup_r+0x8>)
 800acd6:	f000 b8af 	b.w	800ae38 <_fwalk_reent>
 800acda:	bf00      	nop
 800acdc:	0800c8a1 	.word	0x0800c8a1

0800ace0 <__sfmoreglue>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	2268      	movs	r2, #104	; 0x68
 800ace4:	1e4d      	subs	r5, r1, #1
 800ace6:	4355      	muls	r5, r2
 800ace8:	460e      	mov	r6, r1
 800acea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acee:	f7fd fb69 	bl	80083c4 <_malloc_r>
 800acf2:	4604      	mov	r4, r0
 800acf4:	b140      	cbz	r0, 800ad08 <__sfmoreglue+0x28>
 800acf6:	2100      	movs	r1, #0
 800acf8:	e9c0 1600 	strd	r1, r6, [r0]
 800acfc:	300c      	adds	r0, #12
 800acfe:	60a0      	str	r0, [r4, #8]
 800ad00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad04:	f7fd faea 	bl	80082dc <memset>
 800ad08:	4620      	mov	r0, r4
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}

0800ad0c <__sfp_lock_acquire>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	; (800ad14 <__sfp_lock_acquire+0x8>)
 800ad0e:	f000 bc26 	b.w	800b55e <__retarget_lock_acquire_recursive>
 800ad12:	bf00      	nop
 800ad14:	20000add 	.word	0x20000add

0800ad18 <__sfp_lock_release>:
 800ad18:	4801      	ldr	r0, [pc, #4]	; (800ad20 <__sfp_lock_release+0x8>)
 800ad1a:	f000 bc21 	b.w	800b560 <__retarget_lock_release_recursive>
 800ad1e:	bf00      	nop
 800ad20:	20000add 	.word	0x20000add

0800ad24 <__sinit_lock_acquire>:
 800ad24:	4801      	ldr	r0, [pc, #4]	; (800ad2c <__sinit_lock_acquire+0x8>)
 800ad26:	f000 bc1a 	b.w	800b55e <__retarget_lock_acquire_recursive>
 800ad2a:	bf00      	nop
 800ad2c:	20000ade 	.word	0x20000ade

0800ad30 <__sinit_lock_release>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__sinit_lock_release+0x8>)
 800ad32:	f000 bc15 	b.w	800b560 <__retarget_lock_release_recursive>
 800ad36:	bf00      	nop
 800ad38:	20000ade 	.word	0x20000ade

0800ad3c <__sinit>:
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	4604      	mov	r4, r0
 800ad40:	f7ff fff0 	bl	800ad24 <__sinit_lock_acquire>
 800ad44:	69a3      	ldr	r3, [r4, #24]
 800ad46:	b11b      	cbz	r3, 800ad50 <__sinit+0x14>
 800ad48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad4c:	f7ff bff0 	b.w	800ad30 <__sinit_lock_release>
 800ad50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad54:	6523      	str	r3, [r4, #80]	; 0x50
 800ad56:	4b13      	ldr	r3, [pc, #76]	; (800ada4 <__sinit+0x68>)
 800ad58:	4a13      	ldr	r2, [pc, #76]	; (800ada8 <__sinit+0x6c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	bf04      	itt	eq
 800ad62:	2301      	moveq	r3, #1
 800ad64:	61a3      	streq	r3, [r4, #24]
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 f820 	bl	800adac <__sfp>
 800ad6c:	6060      	str	r0, [r4, #4]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 f81c 	bl	800adac <__sfp>
 800ad74:	60a0      	str	r0, [r4, #8]
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 f818 	bl	800adac <__sfp>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	60e0      	str	r0, [r4, #12]
 800ad80:	2104      	movs	r1, #4
 800ad82:	6860      	ldr	r0, [r4, #4]
 800ad84:	f7ff ff82 	bl	800ac8c <std>
 800ad88:	68a0      	ldr	r0, [r4, #8]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	2109      	movs	r1, #9
 800ad8e:	f7ff ff7d 	bl	800ac8c <std>
 800ad92:	68e0      	ldr	r0, [r4, #12]
 800ad94:	2202      	movs	r2, #2
 800ad96:	2112      	movs	r1, #18
 800ad98:	f7ff ff78 	bl	800ac8c <std>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	61a3      	str	r3, [r4, #24]
 800ada0:	e7d2      	b.n	800ad48 <__sinit+0xc>
 800ada2:	bf00      	nop
 800ada4:	0800cc28 	.word	0x0800cc28
 800ada8:	0800acd5 	.word	0x0800acd5

0800adac <__sfp>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	4607      	mov	r7, r0
 800adb0:	f7ff ffac 	bl	800ad0c <__sfp_lock_acquire>
 800adb4:	4b1e      	ldr	r3, [pc, #120]	; (800ae30 <__sfp+0x84>)
 800adb6:	681e      	ldr	r6, [r3, #0]
 800adb8:	69b3      	ldr	r3, [r6, #24]
 800adba:	b913      	cbnz	r3, 800adc2 <__sfp+0x16>
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7ff ffbd 	bl	800ad3c <__sinit>
 800adc2:	3648      	adds	r6, #72	; 0x48
 800adc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adc8:	3b01      	subs	r3, #1
 800adca:	d503      	bpl.n	800add4 <__sfp+0x28>
 800adcc:	6833      	ldr	r3, [r6, #0]
 800adce:	b30b      	cbz	r3, 800ae14 <__sfp+0x68>
 800add0:	6836      	ldr	r6, [r6, #0]
 800add2:	e7f7      	b.n	800adc4 <__sfp+0x18>
 800add4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800add8:	b9d5      	cbnz	r5, 800ae10 <__sfp+0x64>
 800adda:	4b16      	ldr	r3, [pc, #88]	; (800ae34 <__sfp+0x88>)
 800addc:	60e3      	str	r3, [r4, #12]
 800adde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ade2:	6665      	str	r5, [r4, #100]	; 0x64
 800ade4:	f000 fbba 	bl	800b55c <__retarget_lock_init_recursive>
 800ade8:	f7ff ff96 	bl	800ad18 <__sfp_lock_release>
 800adec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adf4:	6025      	str	r5, [r4, #0]
 800adf6:	61a5      	str	r5, [r4, #24]
 800adf8:	2208      	movs	r2, #8
 800adfa:	4629      	mov	r1, r5
 800adfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae00:	f7fd fa6c 	bl	80082dc <memset>
 800ae04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae10:	3468      	adds	r4, #104	; 0x68
 800ae12:	e7d9      	b.n	800adc8 <__sfp+0x1c>
 800ae14:	2104      	movs	r1, #4
 800ae16:	4638      	mov	r0, r7
 800ae18:	f7ff ff62 	bl	800ace0 <__sfmoreglue>
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	6030      	str	r0, [r6, #0]
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d1d5      	bne.n	800add0 <__sfp+0x24>
 800ae24:	f7ff ff78 	bl	800ad18 <__sfp_lock_release>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	e7ee      	b.n	800ae0c <__sfp+0x60>
 800ae2e:	bf00      	nop
 800ae30:	0800cc28 	.word	0x0800cc28
 800ae34:	ffff0001 	.word	0xffff0001

0800ae38 <_fwalk_reent>:
 800ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	4688      	mov	r8, r1
 800ae40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae44:	2700      	movs	r7, #0
 800ae46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae4e:	d505      	bpl.n	800ae5c <_fwalk_reent+0x24>
 800ae50:	6824      	ldr	r4, [r4, #0]
 800ae52:	2c00      	cmp	r4, #0
 800ae54:	d1f7      	bne.n	800ae46 <_fwalk_reent+0xe>
 800ae56:	4638      	mov	r0, r7
 800ae58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae5c:	89ab      	ldrh	r3, [r5, #12]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d907      	bls.n	800ae72 <_fwalk_reent+0x3a>
 800ae62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae66:	3301      	adds	r3, #1
 800ae68:	d003      	beq.n	800ae72 <_fwalk_reent+0x3a>
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	47c0      	blx	r8
 800ae70:	4307      	orrs	r7, r0
 800ae72:	3568      	adds	r5, #104	; 0x68
 800ae74:	e7e9      	b.n	800ae4a <_fwalk_reent+0x12>

0800ae76 <rshift>:
 800ae76:	6903      	ldr	r3, [r0, #16]
 800ae78:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae80:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae84:	f100 0414 	add.w	r4, r0, #20
 800ae88:	dd45      	ble.n	800af16 <rshift+0xa0>
 800ae8a:	f011 011f 	ands.w	r1, r1, #31
 800ae8e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae92:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae96:	d10c      	bne.n	800aeb2 <rshift+0x3c>
 800ae98:	f100 0710 	add.w	r7, r0, #16
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	42b1      	cmp	r1, r6
 800aea0:	d334      	bcc.n	800af0c <rshift+0x96>
 800aea2:	1a9b      	subs	r3, r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	1eea      	subs	r2, r5, #3
 800aea8:	4296      	cmp	r6, r2
 800aeaa:	bf38      	it	cc
 800aeac:	2300      	movcc	r3, #0
 800aeae:	4423      	add	r3, r4
 800aeb0:	e015      	b.n	800aede <rshift+0x68>
 800aeb2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeb6:	f1c1 0820 	rsb	r8, r1, #32
 800aeba:	40cf      	lsrs	r7, r1
 800aebc:	f105 0e04 	add.w	lr, r5, #4
 800aec0:	46a1      	mov	r9, r4
 800aec2:	4576      	cmp	r6, lr
 800aec4:	46f4      	mov	ip, lr
 800aec6:	d815      	bhi.n	800aef4 <rshift+0x7e>
 800aec8:	1a9a      	subs	r2, r3, r2
 800aeca:	0092      	lsls	r2, r2, #2
 800aecc:	3a04      	subs	r2, #4
 800aece:	3501      	adds	r5, #1
 800aed0:	42ae      	cmp	r6, r5
 800aed2:	bf38      	it	cc
 800aed4:	2200      	movcc	r2, #0
 800aed6:	18a3      	adds	r3, r4, r2
 800aed8:	50a7      	str	r7, [r4, r2]
 800aeda:	b107      	cbz	r7, 800aede <rshift+0x68>
 800aedc:	3304      	adds	r3, #4
 800aede:	1b1a      	subs	r2, r3, r4
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aee6:	bf08      	it	eq
 800aee8:	2300      	moveq	r3, #0
 800aeea:	6102      	str	r2, [r0, #16]
 800aeec:	bf08      	it	eq
 800aeee:	6143      	streq	r3, [r0, #20]
 800aef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef4:	f8dc c000 	ldr.w	ip, [ip]
 800aef8:	fa0c fc08 	lsl.w	ip, ip, r8
 800aefc:	ea4c 0707 	orr.w	r7, ip, r7
 800af00:	f849 7b04 	str.w	r7, [r9], #4
 800af04:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af08:	40cf      	lsrs	r7, r1
 800af0a:	e7da      	b.n	800aec2 <rshift+0x4c>
 800af0c:	f851 cb04 	ldr.w	ip, [r1], #4
 800af10:	f847 cf04 	str.w	ip, [r7, #4]!
 800af14:	e7c3      	b.n	800ae9e <rshift+0x28>
 800af16:	4623      	mov	r3, r4
 800af18:	e7e1      	b.n	800aede <rshift+0x68>

0800af1a <__hexdig_fun>:
 800af1a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af1e:	2b09      	cmp	r3, #9
 800af20:	d802      	bhi.n	800af28 <__hexdig_fun+0xe>
 800af22:	3820      	subs	r0, #32
 800af24:	b2c0      	uxtb	r0, r0
 800af26:	4770      	bx	lr
 800af28:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af2c:	2b05      	cmp	r3, #5
 800af2e:	d801      	bhi.n	800af34 <__hexdig_fun+0x1a>
 800af30:	3847      	subs	r0, #71	; 0x47
 800af32:	e7f7      	b.n	800af24 <__hexdig_fun+0xa>
 800af34:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af38:	2b05      	cmp	r3, #5
 800af3a:	d801      	bhi.n	800af40 <__hexdig_fun+0x26>
 800af3c:	3827      	subs	r0, #39	; 0x27
 800af3e:	e7f1      	b.n	800af24 <__hexdig_fun+0xa>
 800af40:	2000      	movs	r0, #0
 800af42:	4770      	bx	lr

0800af44 <__gethex>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	ed2d 8b02 	vpush	{d8}
 800af4c:	b089      	sub	sp, #36	; 0x24
 800af4e:	ee08 0a10 	vmov	s16, r0
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	4bb4      	ldr	r3, [pc, #720]	; (800b228 <__gethex+0x2e4>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	4618      	mov	r0, r3
 800af5c:	468b      	mov	fp, r1
 800af5e:	4690      	mov	r8, r2
 800af60:	f7f5 f946 	bl	80001f0 <strlen>
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	f8db 2000 	ldr.w	r2, [fp]
 800af6a:	4403      	add	r3, r0
 800af6c:	4682      	mov	sl, r0
 800af6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af72:	9305      	str	r3, [sp, #20]
 800af74:	1c93      	adds	r3, r2, #2
 800af76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af7e:	32fe      	adds	r2, #254	; 0xfe
 800af80:	18d1      	adds	r1, r2, r3
 800af82:	461f      	mov	r7, r3
 800af84:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af88:	9100      	str	r1, [sp, #0]
 800af8a:	2830      	cmp	r0, #48	; 0x30
 800af8c:	d0f8      	beq.n	800af80 <__gethex+0x3c>
 800af8e:	f7ff ffc4 	bl	800af1a <__hexdig_fun>
 800af92:	4604      	mov	r4, r0
 800af94:	2800      	cmp	r0, #0
 800af96:	d13a      	bne.n	800b00e <__gethex+0xca>
 800af98:	9901      	ldr	r1, [sp, #4]
 800af9a:	4652      	mov	r2, sl
 800af9c:	4638      	mov	r0, r7
 800af9e:	f001 fad6 	bl	800c54e <strncmp>
 800afa2:	4605      	mov	r5, r0
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d168      	bne.n	800b07a <__gethex+0x136>
 800afa8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afac:	eb07 060a 	add.w	r6, r7, sl
 800afb0:	f7ff ffb3 	bl	800af1a <__hexdig_fun>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d062      	beq.n	800b07e <__gethex+0x13a>
 800afb8:	4633      	mov	r3, r6
 800afba:	7818      	ldrb	r0, [r3, #0]
 800afbc:	2830      	cmp	r0, #48	; 0x30
 800afbe:	461f      	mov	r7, r3
 800afc0:	f103 0301 	add.w	r3, r3, #1
 800afc4:	d0f9      	beq.n	800afba <__gethex+0x76>
 800afc6:	f7ff ffa8 	bl	800af1a <__hexdig_fun>
 800afca:	2301      	movs	r3, #1
 800afcc:	fab0 f480 	clz	r4, r0
 800afd0:	0964      	lsrs	r4, r4, #5
 800afd2:	4635      	mov	r5, r6
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	463a      	mov	r2, r7
 800afd8:	4616      	mov	r6, r2
 800afda:	3201      	adds	r2, #1
 800afdc:	7830      	ldrb	r0, [r6, #0]
 800afde:	f7ff ff9c 	bl	800af1a <__hexdig_fun>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d1f8      	bne.n	800afd8 <__gethex+0x94>
 800afe6:	9901      	ldr	r1, [sp, #4]
 800afe8:	4652      	mov	r2, sl
 800afea:	4630      	mov	r0, r6
 800afec:	f001 faaf 	bl	800c54e <strncmp>
 800aff0:	b980      	cbnz	r0, 800b014 <__gethex+0xd0>
 800aff2:	b94d      	cbnz	r5, 800b008 <__gethex+0xc4>
 800aff4:	eb06 050a 	add.w	r5, r6, sl
 800aff8:	462a      	mov	r2, r5
 800affa:	4616      	mov	r6, r2
 800affc:	3201      	adds	r2, #1
 800affe:	7830      	ldrb	r0, [r6, #0]
 800b000:	f7ff ff8b 	bl	800af1a <__hexdig_fun>
 800b004:	2800      	cmp	r0, #0
 800b006:	d1f8      	bne.n	800affa <__gethex+0xb6>
 800b008:	1bad      	subs	r5, r5, r6
 800b00a:	00ad      	lsls	r5, r5, #2
 800b00c:	e004      	b.n	800b018 <__gethex+0xd4>
 800b00e:	2400      	movs	r4, #0
 800b010:	4625      	mov	r5, r4
 800b012:	e7e0      	b.n	800afd6 <__gethex+0x92>
 800b014:	2d00      	cmp	r5, #0
 800b016:	d1f7      	bne.n	800b008 <__gethex+0xc4>
 800b018:	7833      	ldrb	r3, [r6, #0]
 800b01a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b01e:	2b50      	cmp	r3, #80	; 0x50
 800b020:	d13b      	bne.n	800b09a <__gethex+0x156>
 800b022:	7873      	ldrb	r3, [r6, #1]
 800b024:	2b2b      	cmp	r3, #43	; 0x2b
 800b026:	d02c      	beq.n	800b082 <__gethex+0x13e>
 800b028:	2b2d      	cmp	r3, #45	; 0x2d
 800b02a:	d02e      	beq.n	800b08a <__gethex+0x146>
 800b02c:	1c71      	adds	r1, r6, #1
 800b02e:	f04f 0900 	mov.w	r9, #0
 800b032:	7808      	ldrb	r0, [r1, #0]
 800b034:	f7ff ff71 	bl	800af1a <__hexdig_fun>
 800b038:	1e43      	subs	r3, r0, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b18      	cmp	r3, #24
 800b03e:	d82c      	bhi.n	800b09a <__gethex+0x156>
 800b040:	f1a0 0210 	sub.w	r2, r0, #16
 800b044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b048:	f7ff ff67 	bl	800af1a <__hexdig_fun>
 800b04c:	1e43      	subs	r3, r0, #1
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b18      	cmp	r3, #24
 800b052:	d91d      	bls.n	800b090 <__gethex+0x14c>
 800b054:	f1b9 0f00 	cmp.w	r9, #0
 800b058:	d000      	beq.n	800b05c <__gethex+0x118>
 800b05a:	4252      	negs	r2, r2
 800b05c:	4415      	add	r5, r2
 800b05e:	f8cb 1000 	str.w	r1, [fp]
 800b062:	b1e4      	cbz	r4, 800b09e <__gethex+0x15a>
 800b064:	9b00      	ldr	r3, [sp, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	bf14      	ite	ne
 800b06a:	2700      	movne	r7, #0
 800b06c:	2706      	moveq	r7, #6
 800b06e:	4638      	mov	r0, r7
 800b070:	b009      	add	sp, #36	; 0x24
 800b072:	ecbd 8b02 	vpop	{d8}
 800b076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07a:	463e      	mov	r6, r7
 800b07c:	4625      	mov	r5, r4
 800b07e:	2401      	movs	r4, #1
 800b080:	e7ca      	b.n	800b018 <__gethex+0xd4>
 800b082:	f04f 0900 	mov.w	r9, #0
 800b086:	1cb1      	adds	r1, r6, #2
 800b088:	e7d3      	b.n	800b032 <__gethex+0xee>
 800b08a:	f04f 0901 	mov.w	r9, #1
 800b08e:	e7fa      	b.n	800b086 <__gethex+0x142>
 800b090:	230a      	movs	r3, #10
 800b092:	fb03 0202 	mla	r2, r3, r2, r0
 800b096:	3a10      	subs	r2, #16
 800b098:	e7d4      	b.n	800b044 <__gethex+0x100>
 800b09a:	4631      	mov	r1, r6
 800b09c:	e7df      	b.n	800b05e <__gethex+0x11a>
 800b09e:	1bf3      	subs	r3, r6, r7
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	2b07      	cmp	r3, #7
 800b0a6:	dc0b      	bgt.n	800b0c0 <__gethex+0x17c>
 800b0a8:	ee18 0a10 	vmov	r0, s16
 800b0ac:	f000 fa78 	bl	800b5a0 <_Balloc>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	b940      	cbnz	r0, 800b0c6 <__gethex+0x182>
 800b0b4:	4b5d      	ldr	r3, [pc, #372]	; (800b22c <__gethex+0x2e8>)
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	21de      	movs	r1, #222	; 0xde
 800b0ba:	485d      	ldr	r0, [pc, #372]	; (800b230 <__gethex+0x2ec>)
 800b0bc:	f001 fb3c 	bl	800c738 <__assert_func>
 800b0c0:	3101      	adds	r1, #1
 800b0c2:	105b      	asrs	r3, r3, #1
 800b0c4:	e7ee      	b.n	800b0a4 <__gethex+0x160>
 800b0c6:	f100 0914 	add.w	r9, r0, #20
 800b0ca:	f04f 0b00 	mov.w	fp, #0
 800b0ce:	f1ca 0301 	rsb	r3, sl, #1
 800b0d2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0d6:	f8cd b000 	str.w	fp, [sp]
 800b0da:	9306      	str	r3, [sp, #24]
 800b0dc:	42b7      	cmp	r7, r6
 800b0de:	d340      	bcc.n	800b162 <__gethex+0x21e>
 800b0e0:	9802      	ldr	r0, [sp, #8]
 800b0e2:	9b00      	ldr	r3, [sp, #0]
 800b0e4:	f840 3b04 	str.w	r3, [r0], #4
 800b0e8:	eba0 0009 	sub.w	r0, r0, r9
 800b0ec:	1080      	asrs	r0, r0, #2
 800b0ee:	0146      	lsls	r6, r0, #5
 800b0f0:	6120      	str	r0, [r4, #16]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fb46 	bl	800b784 <__hi0bits>
 800b0f8:	1a30      	subs	r0, r6, r0
 800b0fa:	f8d8 6000 	ldr.w	r6, [r8]
 800b0fe:	42b0      	cmp	r0, r6
 800b100:	dd63      	ble.n	800b1ca <__gethex+0x286>
 800b102:	1b87      	subs	r7, r0, r6
 800b104:	4639      	mov	r1, r7
 800b106:	4620      	mov	r0, r4
 800b108:	f000 feea 	bl	800bee0 <__any_on>
 800b10c:	4682      	mov	sl, r0
 800b10e:	b1a8      	cbz	r0, 800b13c <__gethex+0x1f8>
 800b110:	1e7b      	subs	r3, r7, #1
 800b112:	1159      	asrs	r1, r3, #5
 800b114:	f003 021f 	and.w	r2, r3, #31
 800b118:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b11c:	f04f 0a01 	mov.w	sl, #1
 800b120:	fa0a f202 	lsl.w	r2, sl, r2
 800b124:	420a      	tst	r2, r1
 800b126:	d009      	beq.n	800b13c <__gethex+0x1f8>
 800b128:	4553      	cmp	r3, sl
 800b12a:	dd05      	ble.n	800b138 <__gethex+0x1f4>
 800b12c:	1eb9      	subs	r1, r7, #2
 800b12e:	4620      	mov	r0, r4
 800b130:	f000 fed6 	bl	800bee0 <__any_on>
 800b134:	2800      	cmp	r0, #0
 800b136:	d145      	bne.n	800b1c4 <__gethex+0x280>
 800b138:	f04f 0a02 	mov.w	sl, #2
 800b13c:	4639      	mov	r1, r7
 800b13e:	4620      	mov	r0, r4
 800b140:	f7ff fe99 	bl	800ae76 <rshift>
 800b144:	443d      	add	r5, r7
 800b146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b14a:	42ab      	cmp	r3, r5
 800b14c:	da4c      	bge.n	800b1e8 <__gethex+0x2a4>
 800b14e:	ee18 0a10 	vmov	r0, s16
 800b152:	4621      	mov	r1, r4
 800b154:	f000 fa64 	bl	800b620 <_Bfree>
 800b158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b15a:	2300      	movs	r3, #0
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	27a3      	movs	r7, #163	; 0xa3
 800b160:	e785      	b.n	800b06e <__gethex+0x12a>
 800b162:	1e73      	subs	r3, r6, #1
 800b164:	9a05      	ldr	r2, [sp, #20]
 800b166:	9303      	str	r3, [sp, #12]
 800b168:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d019      	beq.n	800b1a4 <__gethex+0x260>
 800b170:	f1bb 0f20 	cmp.w	fp, #32
 800b174:	d107      	bne.n	800b186 <__gethex+0x242>
 800b176:	9b02      	ldr	r3, [sp, #8]
 800b178:	9a00      	ldr	r2, [sp, #0]
 800b17a:	f843 2b04 	str.w	r2, [r3], #4
 800b17e:	9302      	str	r3, [sp, #8]
 800b180:	2300      	movs	r3, #0
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	469b      	mov	fp, r3
 800b186:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b18a:	f7ff fec6 	bl	800af1a <__hexdig_fun>
 800b18e:	9b00      	ldr	r3, [sp, #0]
 800b190:	f000 000f 	and.w	r0, r0, #15
 800b194:	fa00 f00b 	lsl.w	r0, r0, fp
 800b198:	4303      	orrs	r3, r0
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	f10b 0b04 	add.w	fp, fp, #4
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	e00d      	b.n	800b1c0 <__gethex+0x27c>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	9a06      	ldr	r2, [sp, #24]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	42bb      	cmp	r3, r7
 800b1ac:	d3e0      	bcc.n	800b170 <__gethex+0x22c>
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	9901      	ldr	r1, [sp, #4]
 800b1b2:	9307      	str	r3, [sp, #28]
 800b1b4:	4652      	mov	r2, sl
 800b1b6:	f001 f9ca 	bl	800c54e <strncmp>
 800b1ba:	9b07      	ldr	r3, [sp, #28]
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d1d7      	bne.n	800b170 <__gethex+0x22c>
 800b1c0:	461e      	mov	r6, r3
 800b1c2:	e78b      	b.n	800b0dc <__gethex+0x198>
 800b1c4:	f04f 0a03 	mov.w	sl, #3
 800b1c8:	e7b8      	b.n	800b13c <__gethex+0x1f8>
 800b1ca:	da0a      	bge.n	800b1e2 <__gethex+0x29e>
 800b1cc:	1a37      	subs	r7, r6, r0
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	ee18 0a10 	vmov	r0, s16
 800b1d4:	463a      	mov	r2, r7
 800b1d6:	f000 fc3f 	bl	800ba58 <__lshift>
 800b1da:	1bed      	subs	r5, r5, r7
 800b1dc:	4604      	mov	r4, r0
 800b1de:	f100 0914 	add.w	r9, r0, #20
 800b1e2:	f04f 0a00 	mov.w	sl, #0
 800b1e6:	e7ae      	b.n	800b146 <__gethex+0x202>
 800b1e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1ec:	42a8      	cmp	r0, r5
 800b1ee:	dd72      	ble.n	800b2d6 <__gethex+0x392>
 800b1f0:	1b45      	subs	r5, r0, r5
 800b1f2:	42ae      	cmp	r6, r5
 800b1f4:	dc36      	bgt.n	800b264 <__gethex+0x320>
 800b1f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d02a      	beq.n	800b254 <__gethex+0x310>
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d02c      	beq.n	800b25c <__gethex+0x318>
 800b202:	2b01      	cmp	r3, #1
 800b204:	d11c      	bne.n	800b240 <__gethex+0x2fc>
 800b206:	42ae      	cmp	r6, r5
 800b208:	d11a      	bne.n	800b240 <__gethex+0x2fc>
 800b20a:	2e01      	cmp	r6, #1
 800b20c:	d112      	bne.n	800b234 <__gethex+0x2f0>
 800b20e:	9a04      	ldr	r2, [sp, #16]
 800b210:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	2301      	movs	r3, #1
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	f8c9 3000 	str.w	r3, [r9]
 800b21e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b220:	2762      	movs	r7, #98	; 0x62
 800b222:	601c      	str	r4, [r3, #0]
 800b224:	e723      	b.n	800b06e <__gethex+0x12a>
 800b226:	bf00      	nop
 800b228:	0800cf14 	.word	0x0800cf14
 800b22c:	0800ce38 	.word	0x0800ce38
 800b230:	0800ceac 	.word	0x0800ceac
 800b234:	1e71      	subs	r1, r6, #1
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fe52 	bl	800bee0 <__any_on>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d1e6      	bne.n	800b20e <__gethex+0x2ca>
 800b240:	ee18 0a10 	vmov	r0, s16
 800b244:	4621      	mov	r1, r4
 800b246:	f000 f9eb 	bl	800b620 <_Bfree>
 800b24a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b24c:	2300      	movs	r3, #0
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	2750      	movs	r7, #80	; 0x50
 800b252:	e70c      	b.n	800b06e <__gethex+0x12a>
 800b254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1f2      	bne.n	800b240 <__gethex+0x2fc>
 800b25a:	e7d8      	b.n	800b20e <__gethex+0x2ca>
 800b25c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1d5      	bne.n	800b20e <__gethex+0x2ca>
 800b262:	e7ed      	b.n	800b240 <__gethex+0x2fc>
 800b264:	1e6f      	subs	r7, r5, #1
 800b266:	f1ba 0f00 	cmp.w	sl, #0
 800b26a:	d131      	bne.n	800b2d0 <__gethex+0x38c>
 800b26c:	b127      	cbz	r7, 800b278 <__gethex+0x334>
 800b26e:	4639      	mov	r1, r7
 800b270:	4620      	mov	r0, r4
 800b272:	f000 fe35 	bl	800bee0 <__any_on>
 800b276:	4682      	mov	sl, r0
 800b278:	117b      	asrs	r3, r7, #5
 800b27a:	2101      	movs	r1, #1
 800b27c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b280:	f007 071f 	and.w	r7, r7, #31
 800b284:	fa01 f707 	lsl.w	r7, r1, r7
 800b288:	421f      	tst	r7, r3
 800b28a:	4629      	mov	r1, r5
 800b28c:	4620      	mov	r0, r4
 800b28e:	bf18      	it	ne
 800b290:	f04a 0a02 	orrne.w	sl, sl, #2
 800b294:	1b76      	subs	r6, r6, r5
 800b296:	f7ff fdee 	bl	800ae76 <rshift>
 800b29a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b29e:	2702      	movs	r7, #2
 800b2a0:	f1ba 0f00 	cmp.w	sl, #0
 800b2a4:	d048      	beq.n	800b338 <__gethex+0x3f4>
 800b2a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d015      	beq.n	800b2da <__gethex+0x396>
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d017      	beq.n	800b2e2 <__gethex+0x39e>
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d109      	bne.n	800b2ca <__gethex+0x386>
 800b2b6:	f01a 0f02 	tst.w	sl, #2
 800b2ba:	d006      	beq.n	800b2ca <__gethex+0x386>
 800b2bc:	f8d9 0000 	ldr.w	r0, [r9]
 800b2c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2c4:	f01a 0f01 	tst.w	sl, #1
 800b2c8:	d10e      	bne.n	800b2e8 <__gethex+0x3a4>
 800b2ca:	f047 0710 	orr.w	r7, r7, #16
 800b2ce:	e033      	b.n	800b338 <__gethex+0x3f4>
 800b2d0:	f04f 0a01 	mov.w	sl, #1
 800b2d4:	e7d0      	b.n	800b278 <__gethex+0x334>
 800b2d6:	2701      	movs	r7, #1
 800b2d8:	e7e2      	b.n	800b2a0 <__gethex+0x35c>
 800b2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2dc:	f1c3 0301 	rsb	r3, r3, #1
 800b2e0:	9315      	str	r3, [sp, #84]	; 0x54
 800b2e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d0f0      	beq.n	800b2ca <__gethex+0x386>
 800b2e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2ec:	f104 0314 	add.w	r3, r4, #20
 800b2f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2f8:	f04f 0c00 	mov.w	ip, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b302:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b306:	d01c      	beq.n	800b342 <__gethex+0x3fe>
 800b308:	3201      	adds	r2, #1
 800b30a:	6002      	str	r2, [r0, #0]
 800b30c:	2f02      	cmp	r7, #2
 800b30e:	f104 0314 	add.w	r3, r4, #20
 800b312:	d13f      	bne.n	800b394 <__gethex+0x450>
 800b314:	f8d8 2000 	ldr.w	r2, [r8]
 800b318:	3a01      	subs	r2, #1
 800b31a:	42b2      	cmp	r2, r6
 800b31c:	d10a      	bne.n	800b334 <__gethex+0x3f0>
 800b31e:	1171      	asrs	r1, r6, #5
 800b320:	2201      	movs	r2, #1
 800b322:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b326:	f006 061f 	and.w	r6, r6, #31
 800b32a:	fa02 f606 	lsl.w	r6, r2, r6
 800b32e:	421e      	tst	r6, r3
 800b330:	bf18      	it	ne
 800b332:	4617      	movne	r7, r2
 800b334:	f047 0720 	orr.w	r7, r7, #32
 800b338:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b33a:	601c      	str	r4, [r3, #0]
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	601d      	str	r5, [r3, #0]
 800b340:	e695      	b.n	800b06e <__gethex+0x12a>
 800b342:	4299      	cmp	r1, r3
 800b344:	f843 cc04 	str.w	ip, [r3, #-4]
 800b348:	d8d8      	bhi.n	800b2fc <__gethex+0x3b8>
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	459b      	cmp	fp, r3
 800b34e:	db19      	blt.n	800b384 <__gethex+0x440>
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	ee18 0a10 	vmov	r0, s16
 800b356:	3101      	adds	r1, #1
 800b358:	f000 f922 	bl	800b5a0 <_Balloc>
 800b35c:	4681      	mov	r9, r0
 800b35e:	b918      	cbnz	r0, 800b368 <__gethex+0x424>
 800b360:	4b1a      	ldr	r3, [pc, #104]	; (800b3cc <__gethex+0x488>)
 800b362:	4602      	mov	r2, r0
 800b364:	2184      	movs	r1, #132	; 0x84
 800b366:	e6a8      	b.n	800b0ba <__gethex+0x176>
 800b368:	6922      	ldr	r2, [r4, #16]
 800b36a:	3202      	adds	r2, #2
 800b36c:	f104 010c 	add.w	r1, r4, #12
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	300c      	adds	r0, #12
 800b374:	f7fc ffa4 	bl	80082c0 <memcpy>
 800b378:	4621      	mov	r1, r4
 800b37a:	ee18 0a10 	vmov	r0, s16
 800b37e:	f000 f94f 	bl	800b620 <_Bfree>
 800b382:	464c      	mov	r4, r9
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b38c:	6122      	str	r2, [r4, #16]
 800b38e:	2201      	movs	r2, #1
 800b390:	615a      	str	r2, [r3, #20]
 800b392:	e7bb      	b.n	800b30c <__gethex+0x3c8>
 800b394:	6922      	ldr	r2, [r4, #16]
 800b396:	455a      	cmp	r2, fp
 800b398:	dd0b      	ble.n	800b3b2 <__gethex+0x46e>
 800b39a:	2101      	movs	r1, #1
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7ff fd6a 	bl	800ae76 <rshift>
 800b3a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3a6:	3501      	adds	r5, #1
 800b3a8:	42ab      	cmp	r3, r5
 800b3aa:	f6ff aed0 	blt.w	800b14e <__gethex+0x20a>
 800b3ae:	2701      	movs	r7, #1
 800b3b0:	e7c0      	b.n	800b334 <__gethex+0x3f0>
 800b3b2:	f016 061f 	ands.w	r6, r6, #31
 800b3b6:	d0fa      	beq.n	800b3ae <__gethex+0x46a>
 800b3b8:	4453      	add	r3, sl
 800b3ba:	f1c6 0620 	rsb	r6, r6, #32
 800b3be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3c2:	f000 f9df 	bl	800b784 <__hi0bits>
 800b3c6:	42b0      	cmp	r0, r6
 800b3c8:	dbe7      	blt.n	800b39a <__gethex+0x456>
 800b3ca:	e7f0      	b.n	800b3ae <__gethex+0x46a>
 800b3cc:	0800ce38 	.word	0x0800ce38

0800b3d0 <L_shift>:
 800b3d0:	f1c2 0208 	rsb	r2, r2, #8
 800b3d4:	0092      	lsls	r2, r2, #2
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	f1c2 0620 	rsb	r6, r2, #32
 800b3dc:	6843      	ldr	r3, [r0, #4]
 800b3de:	6804      	ldr	r4, [r0, #0]
 800b3e0:	fa03 f506 	lsl.w	r5, r3, r6
 800b3e4:	432c      	orrs	r4, r5
 800b3e6:	40d3      	lsrs	r3, r2
 800b3e8:	6004      	str	r4, [r0, #0]
 800b3ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ee:	4288      	cmp	r0, r1
 800b3f0:	d3f4      	bcc.n	800b3dc <L_shift+0xc>
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}

0800b3f4 <__match>:
 800b3f4:	b530      	push	{r4, r5, lr}
 800b3f6:	6803      	ldr	r3, [r0, #0]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fe:	b914      	cbnz	r4, 800b406 <__match+0x12>
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	2001      	movs	r0, #1
 800b404:	bd30      	pop	{r4, r5, pc}
 800b406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b40e:	2d19      	cmp	r5, #25
 800b410:	bf98      	it	ls
 800b412:	3220      	addls	r2, #32
 800b414:	42a2      	cmp	r2, r4
 800b416:	d0f0      	beq.n	800b3fa <__match+0x6>
 800b418:	2000      	movs	r0, #0
 800b41a:	e7f3      	b.n	800b404 <__match+0x10>

0800b41c <__hexnan>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	680b      	ldr	r3, [r1, #0]
 800b422:	115e      	asrs	r6, r3, #5
 800b424:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b428:	f013 031f 	ands.w	r3, r3, #31
 800b42c:	b087      	sub	sp, #28
 800b42e:	bf18      	it	ne
 800b430:	3604      	addne	r6, #4
 800b432:	2500      	movs	r5, #0
 800b434:	1f37      	subs	r7, r6, #4
 800b436:	4690      	mov	r8, r2
 800b438:	6802      	ldr	r2, [r0, #0]
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	4682      	mov	sl, r0
 800b43e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b442:	46b9      	mov	r9, r7
 800b444:	463c      	mov	r4, r7
 800b446:	9502      	str	r5, [sp, #8]
 800b448:	46ab      	mov	fp, r5
 800b44a:	7851      	ldrb	r1, [r2, #1]
 800b44c:	1c53      	adds	r3, r2, #1
 800b44e:	9303      	str	r3, [sp, #12]
 800b450:	b341      	cbz	r1, 800b4a4 <__hexnan+0x88>
 800b452:	4608      	mov	r0, r1
 800b454:	9205      	str	r2, [sp, #20]
 800b456:	9104      	str	r1, [sp, #16]
 800b458:	f7ff fd5f 	bl	800af1a <__hexdig_fun>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d14f      	bne.n	800b500 <__hexnan+0xe4>
 800b460:	9904      	ldr	r1, [sp, #16]
 800b462:	9a05      	ldr	r2, [sp, #20]
 800b464:	2920      	cmp	r1, #32
 800b466:	d818      	bhi.n	800b49a <__hexnan+0x7e>
 800b468:	9b02      	ldr	r3, [sp, #8]
 800b46a:	459b      	cmp	fp, r3
 800b46c:	dd13      	ble.n	800b496 <__hexnan+0x7a>
 800b46e:	454c      	cmp	r4, r9
 800b470:	d206      	bcs.n	800b480 <__hexnan+0x64>
 800b472:	2d07      	cmp	r5, #7
 800b474:	dc04      	bgt.n	800b480 <__hexnan+0x64>
 800b476:	462a      	mov	r2, r5
 800b478:	4649      	mov	r1, r9
 800b47a:	4620      	mov	r0, r4
 800b47c:	f7ff ffa8 	bl	800b3d0 <L_shift>
 800b480:	4544      	cmp	r4, r8
 800b482:	d950      	bls.n	800b526 <__hexnan+0x10a>
 800b484:	2300      	movs	r3, #0
 800b486:	f1a4 0904 	sub.w	r9, r4, #4
 800b48a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b48e:	f8cd b008 	str.w	fp, [sp, #8]
 800b492:	464c      	mov	r4, r9
 800b494:	461d      	mov	r5, r3
 800b496:	9a03      	ldr	r2, [sp, #12]
 800b498:	e7d7      	b.n	800b44a <__hexnan+0x2e>
 800b49a:	2929      	cmp	r1, #41	; 0x29
 800b49c:	d156      	bne.n	800b54c <__hexnan+0x130>
 800b49e:	3202      	adds	r2, #2
 800b4a0:	f8ca 2000 	str.w	r2, [sl]
 800b4a4:	f1bb 0f00 	cmp.w	fp, #0
 800b4a8:	d050      	beq.n	800b54c <__hexnan+0x130>
 800b4aa:	454c      	cmp	r4, r9
 800b4ac:	d206      	bcs.n	800b4bc <__hexnan+0xa0>
 800b4ae:	2d07      	cmp	r5, #7
 800b4b0:	dc04      	bgt.n	800b4bc <__hexnan+0xa0>
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7ff ff8a 	bl	800b3d0 <L_shift>
 800b4bc:	4544      	cmp	r4, r8
 800b4be:	d934      	bls.n	800b52a <__hexnan+0x10e>
 800b4c0:	f1a8 0204 	sub.w	r2, r8, #4
 800b4c4:	4623      	mov	r3, r4
 800b4c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ce:	429f      	cmp	r7, r3
 800b4d0:	d2f9      	bcs.n	800b4c6 <__hexnan+0xaa>
 800b4d2:	1b3b      	subs	r3, r7, r4
 800b4d4:	f023 0303 	bic.w	r3, r3, #3
 800b4d8:	3304      	adds	r3, #4
 800b4da:	3401      	adds	r4, #1
 800b4dc:	3e03      	subs	r6, #3
 800b4de:	42b4      	cmp	r4, r6
 800b4e0:	bf88      	it	hi
 800b4e2:	2304      	movhi	r3, #4
 800b4e4:	4443      	add	r3, r8
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f843 2b04 	str.w	r2, [r3], #4
 800b4ec:	429f      	cmp	r7, r3
 800b4ee:	d2fb      	bcs.n	800b4e8 <__hexnan+0xcc>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	b91b      	cbnz	r3, 800b4fc <__hexnan+0xe0>
 800b4f4:	4547      	cmp	r7, r8
 800b4f6:	d127      	bne.n	800b548 <__hexnan+0x12c>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	2005      	movs	r0, #5
 800b4fe:	e026      	b.n	800b54e <__hexnan+0x132>
 800b500:	3501      	adds	r5, #1
 800b502:	2d08      	cmp	r5, #8
 800b504:	f10b 0b01 	add.w	fp, fp, #1
 800b508:	dd06      	ble.n	800b518 <__hexnan+0xfc>
 800b50a:	4544      	cmp	r4, r8
 800b50c:	d9c3      	bls.n	800b496 <__hexnan+0x7a>
 800b50e:	2300      	movs	r3, #0
 800b510:	f844 3c04 	str.w	r3, [r4, #-4]
 800b514:	2501      	movs	r5, #1
 800b516:	3c04      	subs	r4, #4
 800b518:	6822      	ldr	r2, [r4, #0]
 800b51a:	f000 000f 	and.w	r0, r0, #15
 800b51e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b522:	6022      	str	r2, [r4, #0]
 800b524:	e7b7      	b.n	800b496 <__hexnan+0x7a>
 800b526:	2508      	movs	r5, #8
 800b528:	e7b5      	b.n	800b496 <__hexnan+0x7a>
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d0df      	beq.n	800b4f0 <__hexnan+0xd4>
 800b530:	f04f 32ff 	mov.w	r2, #4294967295
 800b534:	f1c3 0320 	rsb	r3, r3, #32
 800b538:	fa22 f303 	lsr.w	r3, r2, r3
 800b53c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b540:	401a      	ands	r2, r3
 800b542:	f846 2c04 	str.w	r2, [r6, #-4]
 800b546:	e7d3      	b.n	800b4f0 <__hexnan+0xd4>
 800b548:	3f04      	subs	r7, #4
 800b54a:	e7d1      	b.n	800b4f0 <__hexnan+0xd4>
 800b54c:	2004      	movs	r0, #4
 800b54e:	b007      	add	sp, #28
 800b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b554 <_localeconv_r>:
 800b554:	4800      	ldr	r0, [pc, #0]	; (800b558 <_localeconv_r+0x4>)
 800b556:	4770      	bx	lr
 800b558:	20000168 	.word	0x20000168

0800b55c <__retarget_lock_init_recursive>:
 800b55c:	4770      	bx	lr

0800b55e <__retarget_lock_acquire_recursive>:
 800b55e:	4770      	bx	lr

0800b560 <__retarget_lock_release_recursive>:
 800b560:	4770      	bx	lr

0800b562 <__ascii_mbtowc>:
 800b562:	b082      	sub	sp, #8
 800b564:	b901      	cbnz	r1, 800b568 <__ascii_mbtowc+0x6>
 800b566:	a901      	add	r1, sp, #4
 800b568:	b142      	cbz	r2, 800b57c <__ascii_mbtowc+0x1a>
 800b56a:	b14b      	cbz	r3, 800b580 <__ascii_mbtowc+0x1e>
 800b56c:	7813      	ldrb	r3, [r2, #0]
 800b56e:	600b      	str	r3, [r1, #0]
 800b570:	7812      	ldrb	r2, [r2, #0]
 800b572:	1e10      	subs	r0, r2, #0
 800b574:	bf18      	it	ne
 800b576:	2001      	movne	r0, #1
 800b578:	b002      	add	sp, #8
 800b57a:	4770      	bx	lr
 800b57c:	4610      	mov	r0, r2
 800b57e:	e7fb      	b.n	800b578 <__ascii_mbtowc+0x16>
 800b580:	f06f 0001 	mvn.w	r0, #1
 800b584:	e7f8      	b.n	800b578 <__ascii_mbtowc+0x16>
	...

0800b588 <__malloc_lock>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__malloc_lock+0x8>)
 800b58a:	f7ff bfe8 	b.w	800b55e <__retarget_lock_acquire_recursive>
 800b58e:	bf00      	nop
 800b590:	20000adc 	.word	0x20000adc

0800b594 <__malloc_unlock>:
 800b594:	4801      	ldr	r0, [pc, #4]	; (800b59c <__malloc_unlock+0x8>)
 800b596:	f7ff bfe3 	b.w	800b560 <__retarget_lock_release_recursive>
 800b59a:	bf00      	nop
 800b59c:	20000adc 	.word	0x20000adc

0800b5a0 <_Balloc>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	460d      	mov	r5, r1
 800b5a8:	b976      	cbnz	r6, 800b5c8 <_Balloc+0x28>
 800b5aa:	2010      	movs	r0, #16
 800b5ac:	f7fc fe80 	bl	80082b0 <malloc>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	6260      	str	r0, [r4, #36]	; 0x24
 800b5b4:	b920      	cbnz	r0, 800b5c0 <_Balloc+0x20>
 800b5b6:	4b18      	ldr	r3, [pc, #96]	; (800b618 <_Balloc+0x78>)
 800b5b8:	4818      	ldr	r0, [pc, #96]	; (800b61c <_Balloc+0x7c>)
 800b5ba:	2166      	movs	r1, #102	; 0x66
 800b5bc:	f001 f8bc 	bl	800c738 <__assert_func>
 800b5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5c4:	6006      	str	r6, [r0, #0]
 800b5c6:	60c6      	str	r6, [r0, #12]
 800b5c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5ca:	68f3      	ldr	r3, [r6, #12]
 800b5cc:	b183      	cbz	r3, 800b5f0 <_Balloc+0x50>
 800b5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5d6:	b9b8      	cbnz	r0, 800b608 <_Balloc+0x68>
 800b5d8:	2101      	movs	r1, #1
 800b5da:	fa01 f605 	lsl.w	r6, r1, r5
 800b5de:	1d72      	adds	r2, r6, #5
 800b5e0:	0092      	lsls	r2, r2, #2
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 fc9d 	bl	800bf22 <_calloc_r>
 800b5e8:	b160      	cbz	r0, 800b604 <_Balloc+0x64>
 800b5ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5ee:	e00e      	b.n	800b60e <_Balloc+0x6e>
 800b5f0:	2221      	movs	r2, #33	; 0x21
 800b5f2:	2104      	movs	r1, #4
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f000 fc94 	bl	800bf22 <_calloc_r>
 800b5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5fc:	60f0      	str	r0, [r6, #12]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1e4      	bne.n	800b5ce <_Balloc+0x2e>
 800b604:	2000      	movs	r0, #0
 800b606:	bd70      	pop	{r4, r5, r6, pc}
 800b608:	6802      	ldr	r2, [r0, #0]
 800b60a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b60e:	2300      	movs	r3, #0
 800b610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b614:	e7f7      	b.n	800b606 <_Balloc+0x66>
 800b616:	bf00      	nop
 800b618:	0800cdc6 	.word	0x0800cdc6
 800b61c:	0800cf28 	.word	0x0800cf28

0800b620 <_Bfree>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b624:	4605      	mov	r5, r0
 800b626:	460c      	mov	r4, r1
 800b628:	b976      	cbnz	r6, 800b648 <_Bfree+0x28>
 800b62a:	2010      	movs	r0, #16
 800b62c:	f7fc fe40 	bl	80082b0 <malloc>
 800b630:	4602      	mov	r2, r0
 800b632:	6268      	str	r0, [r5, #36]	; 0x24
 800b634:	b920      	cbnz	r0, 800b640 <_Bfree+0x20>
 800b636:	4b09      	ldr	r3, [pc, #36]	; (800b65c <_Bfree+0x3c>)
 800b638:	4809      	ldr	r0, [pc, #36]	; (800b660 <_Bfree+0x40>)
 800b63a:	218a      	movs	r1, #138	; 0x8a
 800b63c:	f001 f87c 	bl	800c738 <__assert_func>
 800b640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b644:	6006      	str	r6, [r0, #0]
 800b646:	60c6      	str	r6, [r0, #12]
 800b648:	b13c      	cbz	r4, 800b65a <_Bfree+0x3a>
 800b64a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b64c:	6862      	ldr	r2, [r4, #4]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b654:	6021      	str	r1, [r4, #0]
 800b656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b65a:	bd70      	pop	{r4, r5, r6, pc}
 800b65c:	0800cdc6 	.word	0x0800cdc6
 800b660:	0800cf28 	.word	0x0800cf28

0800b664 <__multadd>:
 800b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b668:	690d      	ldr	r5, [r1, #16]
 800b66a:	4607      	mov	r7, r0
 800b66c:	460c      	mov	r4, r1
 800b66e:	461e      	mov	r6, r3
 800b670:	f101 0c14 	add.w	ip, r1, #20
 800b674:	2000      	movs	r0, #0
 800b676:	f8dc 3000 	ldr.w	r3, [ip]
 800b67a:	b299      	uxth	r1, r3
 800b67c:	fb02 6101 	mla	r1, r2, r1, r6
 800b680:	0c1e      	lsrs	r6, r3, #16
 800b682:	0c0b      	lsrs	r3, r1, #16
 800b684:	fb02 3306 	mla	r3, r2, r6, r3
 800b688:	b289      	uxth	r1, r1
 800b68a:	3001      	adds	r0, #1
 800b68c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b690:	4285      	cmp	r5, r0
 800b692:	f84c 1b04 	str.w	r1, [ip], #4
 800b696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b69a:	dcec      	bgt.n	800b676 <__multadd+0x12>
 800b69c:	b30e      	cbz	r6, 800b6e2 <__multadd+0x7e>
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	42ab      	cmp	r3, r5
 800b6a2:	dc19      	bgt.n	800b6d8 <__multadd+0x74>
 800b6a4:	6861      	ldr	r1, [r4, #4]
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	3101      	adds	r1, #1
 800b6aa:	f7ff ff79 	bl	800b5a0 <_Balloc>
 800b6ae:	4680      	mov	r8, r0
 800b6b0:	b928      	cbnz	r0, 800b6be <__multadd+0x5a>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <__multadd+0x84>)
 800b6b6:	480d      	ldr	r0, [pc, #52]	; (800b6ec <__multadd+0x88>)
 800b6b8:	21b5      	movs	r1, #181	; 0xb5
 800b6ba:	f001 f83d 	bl	800c738 <__assert_func>
 800b6be:	6922      	ldr	r2, [r4, #16]
 800b6c0:	3202      	adds	r2, #2
 800b6c2:	f104 010c 	add.w	r1, r4, #12
 800b6c6:	0092      	lsls	r2, r2, #2
 800b6c8:	300c      	adds	r0, #12
 800b6ca:	f7fc fdf9 	bl	80082c0 <memcpy>
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f7ff ffa5 	bl	800b620 <_Bfree>
 800b6d6:	4644      	mov	r4, r8
 800b6d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6dc:	3501      	adds	r5, #1
 800b6de:	615e      	str	r6, [r3, #20]
 800b6e0:	6125      	str	r5, [r4, #16]
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e8:	0800ce38 	.word	0x0800ce38
 800b6ec:	0800cf28 	.word	0x0800cf28

0800b6f0 <__s2b>:
 800b6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	4615      	mov	r5, r2
 800b6f8:	461f      	mov	r7, r3
 800b6fa:	2209      	movs	r2, #9
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	4606      	mov	r6, r0
 800b700:	fb93 f3f2 	sdiv	r3, r3, r2
 800b704:	2100      	movs	r1, #0
 800b706:	2201      	movs	r2, #1
 800b708:	429a      	cmp	r2, r3
 800b70a:	db09      	blt.n	800b720 <__s2b+0x30>
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7ff ff47 	bl	800b5a0 <_Balloc>
 800b712:	b940      	cbnz	r0, 800b726 <__s2b+0x36>
 800b714:	4602      	mov	r2, r0
 800b716:	4b19      	ldr	r3, [pc, #100]	; (800b77c <__s2b+0x8c>)
 800b718:	4819      	ldr	r0, [pc, #100]	; (800b780 <__s2b+0x90>)
 800b71a:	21ce      	movs	r1, #206	; 0xce
 800b71c:	f001 f80c 	bl	800c738 <__assert_func>
 800b720:	0052      	lsls	r2, r2, #1
 800b722:	3101      	adds	r1, #1
 800b724:	e7f0      	b.n	800b708 <__s2b+0x18>
 800b726:	9b08      	ldr	r3, [sp, #32]
 800b728:	6143      	str	r3, [r0, #20]
 800b72a:	2d09      	cmp	r5, #9
 800b72c:	f04f 0301 	mov.w	r3, #1
 800b730:	6103      	str	r3, [r0, #16]
 800b732:	dd16      	ble.n	800b762 <__s2b+0x72>
 800b734:	f104 0909 	add.w	r9, r4, #9
 800b738:	46c8      	mov	r8, r9
 800b73a:	442c      	add	r4, r5
 800b73c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b740:	4601      	mov	r1, r0
 800b742:	3b30      	subs	r3, #48	; 0x30
 800b744:	220a      	movs	r2, #10
 800b746:	4630      	mov	r0, r6
 800b748:	f7ff ff8c 	bl	800b664 <__multadd>
 800b74c:	45a0      	cmp	r8, r4
 800b74e:	d1f5      	bne.n	800b73c <__s2b+0x4c>
 800b750:	f1a5 0408 	sub.w	r4, r5, #8
 800b754:	444c      	add	r4, r9
 800b756:	1b2d      	subs	r5, r5, r4
 800b758:	1963      	adds	r3, r4, r5
 800b75a:	42bb      	cmp	r3, r7
 800b75c:	db04      	blt.n	800b768 <__s2b+0x78>
 800b75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b762:	340a      	adds	r4, #10
 800b764:	2509      	movs	r5, #9
 800b766:	e7f6      	b.n	800b756 <__s2b+0x66>
 800b768:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b76c:	4601      	mov	r1, r0
 800b76e:	3b30      	subs	r3, #48	; 0x30
 800b770:	220a      	movs	r2, #10
 800b772:	4630      	mov	r0, r6
 800b774:	f7ff ff76 	bl	800b664 <__multadd>
 800b778:	e7ee      	b.n	800b758 <__s2b+0x68>
 800b77a:	bf00      	nop
 800b77c:	0800ce38 	.word	0x0800ce38
 800b780:	0800cf28 	.word	0x0800cf28

0800b784 <__hi0bits>:
 800b784:	0c03      	lsrs	r3, r0, #16
 800b786:	041b      	lsls	r3, r3, #16
 800b788:	b9d3      	cbnz	r3, 800b7c0 <__hi0bits+0x3c>
 800b78a:	0400      	lsls	r0, r0, #16
 800b78c:	2310      	movs	r3, #16
 800b78e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b792:	bf04      	itt	eq
 800b794:	0200      	lsleq	r0, r0, #8
 800b796:	3308      	addeq	r3, #8
 800b798:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b79c:	bf04      	itt	eq
 800b79e:	0100      	lsleq	r0, r0, #4
 800b7a0:	3304      	addeq	r3, #4
 800b7a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7a6:	bf04      	itt	eq
 800b7a8:	0080      	lsleq	r0, r0, #2
 800b7aa:	3302      	addeq	r3, #2
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	db05      	blt.n	800b7bc <__hi0bits+0x38>
 800b7b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7b4:	f103 0301 	add.w	r3, r3, #1
 800b7b8:	bf08      	it	eq
 800b7ba:	2320      	moveq	r3, #32
 800b7bc:	4618      	mov	r0, r3
 800b7be:	4770      	bx	lr
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e7e4      	b.n	800b78e <__hi0bits+0xa>

0800b7c4 <__lo0bits>:
 800b7c4:	6803      	ldr	r3, [r0, #0]
 800b7c6:	f013 0207 	ands.w	r2, r3, #7
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	d00b      	beq.n	800b7e6 <__lo0bits+0x22>
 800b7ce:	07da      	lsls	r2, r3, #31
 800b7d0:	d423      	bmi.n	800b81a <__lo0bits+0x56>
 800b7d2:	0798      	lsls	r0, r3, #30
 800b7d4:	bf49      	itett	mi
 800b7d6:	085b      	lsrmi	r3, r3, #1
 800b7d8:	089b      	lsrpl	r3, r3, #2
 800b7da:	2001      	movmi	r0, #1
 800b7dc:	600b      	strmi	r3, [r1, #0]
 800b7de:	bf5c      	itt	pl
 800b7e0:	600b      	strpl	r3, [r1, #0]
 800b7e2:	2002      	movpl	r0, #2
 800b7e4:	4770      	bx	lr
 800b7e6:	b298      	uxth	r0, r3
 800b7e8:	b9a8      	cbnz	r0, 800b816 <__lo0bits+0x52>
 800b7ea:	0c1b      	lsrs	r3, r3, #16
 800b7ec:	2010      	movs	r0, #16
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	b90a      	cbnz	r2, 800b7f6 <__lo0bits+0x32>
 800b7f2:	3008      	adds	r0, #8
 800b7f4:	0a1b      	lsrs	r3, r3, #8
 800b7f6:	071a      	lsls	r2, r3, #28
 800b7f8:	bf04      	itt	eq
 800b7fa:	091b      	lsreq	r3, r3, #4
 800b7fc:	3004      	addeq	r0, #4
 800b7fe:	079a      	lsls	r2, r3, #30
 800b800:	bf04      	itt	eq
 800b802:	089b      	lsreq	r3, r3, #2
 800b804:	3002      	addeq	r0, #2
 800b806:	07da      	lsls	r2, r3, #31
 800b808:	d403      	bmi.n	800b812 <__lo0bits+0x4e>
 800b80a:	085b      	lsrs	r3, r3, #1
 800b80c:	f100 0001 	add.w	r0, r0, #1
 800b810:	d005      	beq.n	800b81e <__lo0bits+0x5a>
 800b812:	600b      	str	r3, [r1, #0]
 800b814:	4770      	bx	lr
 800b816:	4610      	mov	r0, r2
 800b818:	e7e9      	b.n	800b7ee <__lo0bits+0x2a>
 800b81a:	2000      	movs	r0, #0
 800b81c:	4770      	bx	lr
 800b81e:	2020      	movs	r0, #32
 800b820:	4770      	bx	lr
	...

0800b824 <__i2b>:
 800b824:	b510      	push	{r4, lr}
 800b826:	460c      	mov	r4, r1
 800b828:	2101      	movs	r1, #1
 800b82a:	f7ff feb9 	bl	800b5a0 <_Balloc>
 800b82e:	4602      	mov	r2, r0
 800b830:	b928      	cbnz	r0, 800b83e <__i2b+0x1a>
 800b832:	4b05      	ldr	r3, [pc, #20]	; (800b848 <__i2b+0x24>)
 800b834:	4805      	ldr	r0, [pc, #20]	; (800b84c <__i2b+0x28>)
 800b836:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b83a:	f000 ff7d 	bl	800c738 <__assert_func>
 800b83e:	2301      	movs	r3, #1
 800b840:	6144      	str	r4, [r0, #20]
 800b842:	6103      	str	r3, [r0, #16]
 800b844:	bd10      	pop	{r4, pc}
 800b846:	bf00      	nop
 800b848:	0800ce38 	.word	0x0800ce38
 800b84c:	0800cf28 	.word	0x0800cf28

0800b850 <__multiply>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	4691      	mov	r9, r2
 800b856:	690a      	ldr	r2, [r1, #16]
 800b858:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	bfb8      	it	lt
 800b860:	460b      	movlt	r3, r1
 800b862:	460c      	mov	r4, r1
 800b864:	bfbc      	itt	lt
 800b866:	464c      	movlt	r4, r9
 800b868:	4699      	movlt	r9, r3
 800b86a:	6927      	ldr	r7, [r4, #16]
 800b86c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b870:	68a3      	ldr	r3, [r4, #8]
 800b872:	6861      	ldr	r1, [r4, #4]
 800b874:	eb07 060a 	add.w	r6, r7, sl
 800b878:	42b3      	cmp	r3, r6
 800b87a:	b085      	sub	sp, #20
 800b87c:	bfb8      	it	lt
 800b87e:	3101      	addlt	r1, #1
 800b880:	f7ff fe8e 	bl	800b5a0 <_Balloc>
 800b884:	b930      	cbnz	r0, 800b894 <__multiply+0x44>
 800b886:	4602      	mov	r2, r0
 800b888:	4b44      	ldr	r3, [pc, #272]	; (800b99c <__multiply+0x14c>)
 800b88a:	4845      	ldr	r0, [pc, #276]	; (800b9a0 <__multiply+0x150>)
 800b88c:	f240 115d 	movw	r1, #349	; 0x15d
 800b890:	f000 ff52 	bl	800c738 <__assert_func>
 800b894:	f100 0514 	add.w	r5, r0, #20
 800b898:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b89c:	462b      	mov	r3, r5
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4543      	cmp	r3, r8
 800b8a2:	d321      	bcc.n	800b8e8 <__multiply+0x98>
 800b8a4:	f104 0314 	add.w	r3, r4, #20
 800b8a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8ac:	f109 0314 	add.w	r3, r9, #20
 800b8b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8b4:	9202      	str	r2, [sp, #8]
 800b8b6:	1b3a      	subs	r2, r7, r4
 800b8b8:	3a15      	subs	r2, #21
 800b8ba:	f022 0203 	bic.w	r2, r2, #3
 800b8be:	3204      	adds	r2, #4
 800b8c0:	f104 0115 	add.w	r1, r4, #21
 800b8c4:	428f      	cmp	r7, r1
 800b8c6:	bf38      	it	cc
 800b8c8:	2204      	movcc	r2, #4
 800b8ca:	9201      	str	r2, [sp, #4]
 800b8cc:	9a02      	ldr	r2, [sp, #8]
 800b8ce:	9303      	str	r3, [sp, #12]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d80c      	bhi.n	800b8ee <__multiply+0x9e>
 800b8d4:	2e00      	cmp	r6, #0
 800b8d6:	dd03      	ble.n	800b8e0 <__multiply+0x90>
 800b8d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d05a      	beq.n	800b996 <__multiply+0x146>
 800b8e0:	6106      	str	r6, [r0, #16]
 800b8e2:	b005      	add	sp, #20
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	f843 2b04 	str.w	r2, [r3], #4
 800b8ec:	e7d8      	b.n	800b8a0 <__multiply+0x50>
 800b8ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8f2:	f1ba 0f00 	cmp.w	sl, #0
 800b8f6:	d024      	beq.n	800b942 <__multiply+0xf2>
 800b8f8:	f104 0e14 	add.w	lr, r4, #20
 800b8fc:	46a9      	mov	r9, r5
 800b8fe:	f04f 0c00 	mov.w	ip, #0
 800b902:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b906:	f8d9 1000 	ldr.w	r1, [r9]
 800b90a:	fa1f fb82 	uxth.w	fp, r2
 800b90e:	b289      	uxth	r1, r1
 800b910:	fb0a 110b 	mla	r1, sl, fp, r1
 800b914:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b918:	f8d9 2000 	ldr.w	r2, [r9]
 800b91c:	4461      	add	r1, ip
 800b91e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b922:	fb0a c20b 	mla	r2, sl, fp, ip
 800b926:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b92a:	b289      	uxth	r1, r1
 800b92c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b930:	4577      	cmp	r7, lr
 800b932:	f849 1b04 	str.w	r1, [r9], #4
 800b936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b93a:	d8e2      	bhi.n	800b902 <__multiply+0xb2>
 800b93c:	9a01      	ldr	r2, [sp, #4]
 800b93e:	f845 c002 	str.w	ip, [r5, r2]
 800b942:	9a03      	ldr	r2, [sp, #12]
 800b944:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b948:	3304      	adds	r3, #4
 800b94a:	f1b9 0f00 	cmp.w	r9, #0
 800b94e:	d020      	beq.n	800b992 <__multiply+0x142>
 800b950:	6829      	ldr	r1, [r5, #0]
 800b952:	f104 0c14 	add.w	ip, r4, #20
 800b956:	46ae      	mov	lr, r5
 800b958:	f04f 0a00 	mov.w	sl, #0
 800b95c:	f8bc b000 	ldrh.w	fp, [ip]
 800b960:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b964:	fb09 220b 	mla	r2, r9, fp, r2
 800b968:	4492      	add	sl, r2
 800b96a:	b289      	uxth	r1, r1
 800b96c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b970:	f84e 1b04 	str.w	r1, [lr], #4
 800b974:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b978:	f8be 1000 	ldrh.w	r1, [lr]
 800b97c:	0c12      	lsrs	r2, r2, #16
 800b97e:	fb09 1102 	mla	r1, r9, r2, r1
 800b982:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b986:	4567      	cmp	r7, ip
 800b988:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b98c:	d8e6      	bhi.n	800b95c <__multiply+0x10c>
 800b98e:	9a01      	ldr	r2, [sp, #4]
 800b990:	50a9      	str	r1, [r5, r2]
 800b992:	3504      	adds	r5, #4
 800b994:	e79a      	b.n	800b8cc <__multiply+0x7c>
 800b996:	3e01      	subs	r6, #1
 800b998:	e79c      	b.n	800b8d4 <__multiply+0x84>
 800b99a:	bf00      	nop
 800b99c:	0800ce38 	.word	0x0800ce38
 800b9a0:	0800cf28 	.word	0x0800cf28

0800b9a4 <__pow5mult>:
 800b9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a8:	4615      	mov	r5, r2
 800b9aa:	f012 0203 	ands.w	r2, r2, #3
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	460f      	mov	r7, r1
 800b9b2:	d007      	beq.n	800b9c4 <__pow5mult+0x20>
 800b9b4:	4c25      	ldr	r4, [pc, #148]	; (800ba4c <__pow5mult+0xa8>)
 800b9b6:	3a01      	subs	r2, #1
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9be:	f7ff fe51 	bl	800b664 <__multadd>
 800b9c2:	4607      	mov	r7, r0
 800b9c4:	10ad      	asrs	r5, r5, #2
 800b9c6:	d03d      	beq.n	800ba44 <__pow5mult+0xa0>
 800b9c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9ca:	b97c      	cbnz	r4, 800b9ec <__pow5mult+0x48>
 800b9cc:	2010      	movs	r0, #16
 800b9ce:	f7fc fc6f 	bl	80082b0 <malloc>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	6270      	str	r0, [r6, #36]	; 0x24
 800b9d6:	b928      	cbnz	r0, 800b9e4 <__pow5mult+0x40>
 800b9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ba50 <__pow5mult+0xac>)
 800b9da:	481e      	ldr	r0, [pc, #120]	; (800ba54 <__pow5mult+0xb0>)
 800b9dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9e0:	f000 feaa 	bl	800c738 <__assert_func>
 800b9e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9e8:	6004      	str	r4, [r0, #0]
 800b9ea:	60c4      	str	r4, [r0, #12]
 800b9ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9f4:	b94c      	cbnz	r4, 800ba0a <__pow5mult+0x66>
 800b9f6:	f240 2171 	movw	r1, #625	; 0x271
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ff12 	bl	800b824 <__i2b>
 800ba00:	2300      	movs	r3, #0
 800ba02:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba06:	4604      	mov	r4, r0
 800ba08:	6003      	str	r3, [r0, #0]
 800ba0a:	f04f 0900 	mov.w	r9, #0
 800ba0e:	07eb      	lsls	r3, r5, #31
 800ba10:	d50a      	bpl.n	800ba28 <__pow5mult+0x84>
 800ba12:	4639      	mov	r1, r7
 800ba14:	4622      	mov	r2, r4
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7ff ff1a 	bl	800b850 <__multiply>
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	4680      	mov	r8, r0
 800ba20:	4630      	mov	r0, r6
 800ba22:	f7ff fdfd 	bl	800b620 <_Bfree>
 800ba26:	4647      	mov	r7, r8
 800ba28:	106d      	asrs	r5, r5, #1
 800ba2a:	d00b      	beq.n	800ba44 <__pow5mult+0xa0>
 800ba2c:	6820      	ldr	r0, [r4, #0]
 800ba2e:	b938      	cbnz	r0, 800ba40 <__pow5mult+0x9c>
 800ba30:	4622      	mov	r2, r4
 800ba32:	4621      	mov	r1, r4
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff ff0b 	bl	800b850 <__multiply>
 800ba3a:	6020      	str	r0, [r4, #0]
 800ba3c:	f8c0 9000 	str.w	r9, [r0]
 800ba40:	4604      	mov	r4, r0
 800ba42:	e7e4      	b.n	800ba0e <__pow5mult+0x6a>
 800ba44:	4638      	mov	r0, r7
 800ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0800d078 	.word	0x0800d078
 800ba50:	0800cdc6 	.word	0x0800cdc6
 800ba54:	0800cf28 	.word	0x0800cf28

0800ba58 <__lshift>:
 800ba58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	6849      	ldr	r1, [r1, #4]
 800ba60:	6923      	ldr	r3, [r4, #16]
 800ba62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	4607      	mov	r7, r0
 800ba6a:	4691      	mov	r9, r2
 800ba6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba70:	f108 0601 	add.w	r6, r8, #1
 800ba74:	42b3      	cmp	r3, r6
 800ba76:	db0b      	blt.n	800ba90 <__lshift+0x38>
 800ba78:	4638      	mov	r0, r7
 800ba7a:	f7ff fd91 	bl	800b5a0 <_Balloc>
 800ba7e:	4605      	mov	r5, r0
 800ba80:	b948      	cbnz	r0, 800ba96 <__lshift+0x3e>
 800ba82:	4602      	mov	r2, r0
 800ba84:	4b2a      	ldr	r3, [pc, #168]	; (800bb30 <__lshift+0xd8>)
 800ba86:	482b      	ldr	r0, [pc, #172]	; (800bb34 <__lshift+0xdc>)
 800ba88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba8c:	f000 fe54 	bl	800c738 <__assert_func>
 800ba90:	3101      	adds	r1, #1
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	e7ee      	b.n	800ba74 <__lshift+0x1c>
 800ba96:	2300      	movs	r3, #0
 800ba98:	f100 0114 	add.w	r1, r0, #20
 800ba9c:	f100 0210 	add.w	r2, r0, #16
 800baa0:	4618      	mov	r0, r3
 800baa2:	4553      	cmp	r3, sl
 800baa4:	db37      	blt.n	800bb16 <__lshift+0xbe>
 800baa6:	6920      	ldr	r0, [r4, #16]
 800baa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baac:	f104 0314 	add.w	r3, r4, #20
 800bab0:	f019 091f 	ands.w	r9, r9, #31
 800bab4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bab8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800babc:	d02f      	beq.n	800bb1e <__lshift+0xc6>
 800babe:	f1c9 0e20 	rsb	lr, r9, #32
 800bac2:	468a      	mov	sl, r1
 800bac4:	f04f 0c00 	mov.w	ip, #0
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	fa02 f209 	lsl.w	r2, r2, r9
 800bace:	ea42 020c 	orr.w	r2, r2, ip
 800bad2:	f84a 2b04 	str.w	r2, [sl], #4
 800bad6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bada:	4298      	cmp	r0, r3
 800badc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bae0:	d8f2      	bhi.n	800bac8 <__lshift+0x70>
 800bae2:	1b03      	subs	r3, r0, r4
 800bae4:	3b15      	subs	r3, #21
 800bae6:	f023 0303 	bic.w	r3, r3, #3
 800baea:	3304      	adds	r3, #4
 800baec:	f104 0215 	add.w	r2, r4, #21
 800baf0:	4290      	cmp	r0, r2
 800baf2:	bf38      	it	cc
 800baf4:	2304      	movcc	r3, #4
 800baf6:	f841 c003 	str.w	ip, [r1, r3]
 800bafa:	f1bc 0f00 	cmp.w	ip, #0
 800bafe:	d001      	beq.n	800bb04 <__lshift+0xac>
 800bb00:	f108 0602 	add.w	r6, r8, #2
 800bb04:	3e01      	subs	r6, #1
 800bb06:	4638      	mov	r0, r7
 800bb08:	612e      	str	r6, [r5, #16]
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	f7ff fd88 	bl	800b620 <_Bfree>
 800bb10:	4628      	mov	r0, r5
 800bb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb16:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	e7c1      	b.n	800baa2 <__lshift+0x4a>
 800bb1e:	3904      	subs	r1, #4
 800bb20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb24:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb28:	4298      	cmp	r0, r3
 800bb2a:	d8f9      	bhi.n	800bb20 <__lshift+0xc8>
 800bb2c:	e7ea      	b.n	800bb04 <__lshift+0xac>
 800bb2e:	bf00      	nop
 800bb30:	0800ce38 	.word	0x0800ce38
 800bb34:	0800cf28 	.word	0x0800cf28

0800bb38 <__mcmp>:
 800bb38:	b530      	push	{r4, r5, lr}
 800bb3a:	6902      	ldr	r2, [r0, #16]
 800bb3c:	690c      	ldr	r4, [r1, #16]
 800bb3e:	1b12      	subs	r2, r2, r4
 800bb40:	d10e      	bne.n	800bb60 <__mcmp+0x28>
 800bb42:	f100 0314 	add.w	r3, r0, #20
 800bb46:	3114      	adds	r1, #20
 800bb48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb58:	42a5      	cmp	r5, r4
 800bb5a:	d003      	beq.n	800bb64 <__mcmp+0x2c>
 800bb5c:	d305      	bcc.n	800bb6a <__mcmp+0x32>
 800bb5e:	2201      	movs	r2, #1
 800bb60:	4610      	mov	r0, r2
 800bb62:	bd30      	pop	{r4, r5, pc}
 800bb64:	4283      	cmp	r3, r0
 800bb66:	d3f3      	bcc.n	800bb50 <__mcmp+0x18>
 800bb68:	e7fa      	b.n	800bb60 <__mcmp+0x28>
 800bb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6e:	e7f7      	b.n	800bb60 <__mcmp+0x28>

0800bb70 <__mdiff>:
 800bb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	460c      	mov	r4, r1
 800bb76:	4606      	mov	r6, r0
 800bb78:	4611      	mov	r1, r2
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4690      	mov	r8, r2
 800bb7e:	f7ff ffdb 	bl	800bb38 <__mcmp>
 800bb82:	1e05      	subs	r5, r0, #0
 800bb84:	d110      	bne.n	800bba8 <__mdiff+0x38>
 800bb86:	4629      	mov	r1, r5
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7ff fd09 	bl	800b5a0 <_Balloc>
 800bb8e:	b930      	cbnz	r0, 800bb9e <__mdiff+0x2e>
 800bb90:	4b3a      	ldr	r3, [pc, #232]	; (800bc7c <__mdiff+0x10c>)
 800bb92:	4602      	mov	r2, r0
 800bb94:	f240 2132 	movw	r1, #562	; 0x232
 800bb98:	4839      	ldr	r0, [pc, #228]	; (800bc80 <__mdiff+0x110>)
 800bb9a:	f000 fdcd 	bl	800c738 <__assert_func>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba8:	bfa4      	itt	ge
 800bbaa:	4643      	movge	r3, r8
 800bbac:	46a0      	movge	r8, r4
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbb4:	bfa6      	itte	ge
 800bbb6:	461c      	movge	r4, r3
 800bbb8:	2500      	movge	r5, #0
 800bbba:	2501      	movlt	r5, #1
 800bbbc:	f7ff fcf0 	bl	800b5a0 <_Balloc>
 800bbc0:	b920      	cbnz	r0, 800bbcc <__mdiff+0x5c>
 800bbc2:	4b2e      	ldr	r3, [pc, #184]	; (800bc7c <__mdiff+0x10c>)
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbca:	e7e5      	b.n	800bb98 <__mdiff+0x28>
 800bbcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbd0:	6926      	ldr	r6, [r4, #16]
 800bbd2:	60c5      	str	r5, [r0, #12]
 800bbd4:	f104 0914 	add.w	r9, r4, #20
 800bbd8:	f108 0514 	add.w	r5, r8, #20
 800bbdc:	f100 0e14 	add.w	lr, r0, #20
 800bbe0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbe8:	f108 0210 	add.w	r2, r8, #16
 800bbec:	46f2      	mov	sl, lr
 800bbee:	2100      	movs	r1, #0
 800bbf0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbf8:	fa1f f883 	uxth.w	r8, r3
 800bbfc:	fa11 f18b 	uxtah	r1, r1, fp
 800bc00:	0c1b      	lsrs	r3, r3, #16
 800bc02:	eba1 0808 	sub.w	r8, r1, r8
 800bc06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc0e:	fa1f f888 	uxth.w	r8, r8
 800bc12:	1419      	asrs	r1, r3, #16
 800bc14:	454e      	cmp	r6, r9
 800bc16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc1a:	f84a 3b04 	str.w	r3, [sl], #4
 800bc1e:	d8e7      	bhi.n	800bbf0 <__mdiff+0x80>
 800bc20:	1b33      	subs	r3, r6, r4
 800bc22:	3b15      	subs	r3, #21
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	3304      	adds	r3, #4
 800bc2a:	3415      	adds	r4, #21
 800bc2c:	42a6      	cmp	r6, r4
 800bc2e:	bf38      	it	cc
 800bc30:	2304      	movcc	r3, #4
 800bc32:	441d      	add	r5, r3
 800bc34:	4473      	add	r3, lr
 800bc36:	469e      	mov	lr, r3
 800bc38:	462e      	mov	r6, r5
 800bc3a:	4566      	cmp	r6, ip
 800bc3c:	d30e      	bcc.n	800bc5c <__mdiff+0xec>
 800bc3e:	f10c 0203 	add.w	r2, ip, #3
 800bc42:	1b52      	subs	r2, r2, r5
 800bc44:	f022 0203 	bic.w	r2, r2, #3
 800bc48:	3d03      	subs	r5, #3
 800bc4a:	45ac      	cmp	ip, r5
 800bc4c:	bf38      	it	cc
 800bc4e:	2200      	movcc	r2, #0
 800bc50:	441a      	add	r2, r3
 800bc52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc56:	b17b      	cbz	r3, 800bc78 <__mdiff+0x108>
 800bc58:	6107      	str	r7, [r0, #16]
 800bc5a:	e7a3      	b.n	800bba4 <__mdiff+0x34>
 800bc5c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc60:	fa11 f288 	uxtah	r2, r1, r8
 800bc64:	1414      	asrs	r4, r2, #16
 800bc66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc6a:	b292      	uxth	r2, r2
 800bc6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc70:	f84e 2b04 	str.w	r2, [lr], #4
 800bc74:	1421      	asrs	r1, r4, #16
 800bc76:	e7e0      	b.n	800bc3a <__mdiff+0xca>
 800bc78:	3f01      	subs	r7, #1
 800bc7a:	e7ea      	b.n	800bc52 <__mdiff+0xe2>
 800bc7c:	0800ce38 	.word	0x0800ce38
 800bc80:	0800cf28 	.word	0x0800cf28

0800bc84 <__ulp>:
 800bc84:	b082      	sub	sp, #8
 800bc86:	ed8d 0b00 	vstr	d0, [sp]
 800bc8a:	9b01      	ldr	r3, [sp, #4]
 800bc8c:	4912      	ldr	r1, [pc, #72]	; (800bcd8 <__ulp+0x54>)
 800bc8e:	4019      	ands	r1, r3
 800bc90:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc94:	2900      	cmp	r1, #0
 800bc96:	dd05      	ble.n	800bca4 <__ulp+0x20>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	ec43 2b10 	vmov	d0, r2, r3
 800bca0:	b002      	add	sp, #8
 800bca2:	4770      	bx	lr
 800bca4:	4249      	negs	r1, r1
 800bca6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bcaa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	f04f 0300 	mov.w	r3, #0
 800bcb6:	da04      	bge.n	800bcc2 <__ulp+0x3e>
 800bcb8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bcbc:	fa41 f300 	asr.w	r3, r1, r0
 800bcc0:	e7ec      	b.n	800bc9c <__ulp+0x18>
 800bcc2:	f1a0 0114 	sub.w	r1, r0, #20
 800bcc6:	291e      	cmp	r1, #30
 800bcc8:	bfda      	itte	le
 800bcca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bcce:	fa20 f101 	lsrle.w	r1, r0, r1
 800bcd2:	2101      	movgt	r1, #1
 800bcd4:	460a      	mov	r2, r1
 800bcd6:	e7e1      	b.n	800bc9c <__ulp+0x18>
 800bcd8:	7ff00000 	.word	0x7ff00000

0800bcdc <__b2d>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	6905      	ldr	r5, [r0, #16]
 800bce0:	f100 0714 	add.w	r7, r0, #20
 800bce4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bce8:	1f2e      	subs	r6, r5, #4
 800bcea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f7ff fd48 	bl	800b784 <__hi0bits>
 800bcf4:	f1c0 0320 	rsb	r3, r0, #32
 800bcf8:	280a      	cmp	r0, #10
 800bcfa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd78 <__b2d+0x9c>
 800bcfe:	600b      	str	r3, [r1, #0]
 800bd00:	dc14      	bgt.n	800bd2c <__b2d+0x50>
 800bd02:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd06:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd0a:	42b7      	cmp	r7, r6
 800bd0c:	ea41 030c 	orr.w	r3, r1, ip
 800bd10:	bf34      	ite	cc
 800bd12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd16:	2100      	movcs	r1, #0
 800bd18:	3015      	adds	r0, #21
 800bd1a:	fa04 f000 	lsl.w	r0, r4, r0
 800bd1e:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd22:	ea40 0201 	orr.w	r2, r0, r1
 800bd26:	ec43 2b10 	vmov	d0, r2, r3
 800bd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd2c:	42b7      	cmp	r7, r6
 800bd2e:	bf3a      	itte	cc
 800bd30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd34:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd38:	2100      	movcs	r1, #0
 800bd3a:	380b      	subs	r0, #11
 800bd3c:	d017      	beq.n	800bd6e <__b2d+0x92>
 800bd3e:	f1c0 0c20 	rsb	ip, r0, #32
 800bd42:	fa04 f500 	lsl.w	r5, r4, r0
 800bd46:	42be      	cmp	r6, r7
 800bd48:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd4c:	ea45 0504 	orr.w	r5, r5, r4
 800bd50:	bf8c      	ite	hi
 800bd52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd56:	2400      	movls	r4, #0
 800bd58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bd5c:	fa01 f000 	lsl.w	r0, r1, r0
 800bd60:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd68:	ea40 0204 	orr.w	r2, r0, r4
 800bd6c:	e7db      	b.n	800bd26 <__b2d+0x4a>
 800bd6e:	ea44 030c 	orr.w	r3, r4, ip
 800bd72:	460a      	mov	r2, r1
 800bd74:	e7d7      	b.n	800bd26 <__b2d+0x4a>
 800bd76:	bf00      	nop
 800bd78:	3ff00000 	.word	0x3ff00000

0800bd7c <__d2b>:
 800bd7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd80:	4689      	mov	r9, r1
 800bd82:	2101      	movs	r1, #1
 800bd84:	ec57 6b10 	vmov	r6, r7, d0
 800bd88:	4690      	mov	r8, r2
 800bd8a:	f7ff fc09 	bl	800b5a0 <_Balloc>
 800bd8e:	4604      	mov	r4, r0
 800bd90:	b930      	cbnz	r0, 800bda0 <__d2b+0x24>
 800bd92:	4602      	mov	r2, r0
 800bd94:	4b25      	ldr	r3, [pc, #148]	; (800be2c <__d2b+0xb0>)
 800bd96:	4826      	ldr	r0, [pc, #152]	; (800be30 <__d2b+0xb4>)
 800bd98:	f240 310a 	movw	r1, #778	; 0x30a
 800bd9c:	f000 fccc 	bl	800c738 <__assert_func>
 800bda0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bda4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bda8:	bb35      	cbnz	r5, 800bdf8 <__d2b+0x7c>
 800bdaa:	2e00      	cmp	r6, #0
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	d028      	beq.n	800be02 <__d2b+0x86>
 800bdb0:	4668      	mov	r0, sp
 800bdb2:	9600      	str	r6, [sp, #0]
 800bdb4:	f7ff fd06 	bl	800b7c4 <__lo0bits>
 800bdb8:	9900      	ldr	r1, [sp, #0]
 800bdba:	b300      	cbz	r0, 800bdfe <__d2b+0x82>
 800bdbc:	9a01      	ldr	r2, [sp, #4]
 800bdbe:	f1c0 0320 	rsb	r3, r0, #32
 800bdc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc6:	430b      	orrs	r3, r1
 800bdc8:	40c2      	lsrs	r2, r0
 800bdca:	6163      	str	r3, [r4, #20]
 800bdcc:	9201      	str	r2, [sp, #4]
 800bdce:	9b01      	ldr	r3, [sp, #4]
 800bdd0:	61a3      	str	r3, [r4, #24]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	bf14      	ite	ne
 800bdd6:	2202      	movne	r2, #2
 800bdd8:	2201      	moveq	r2, #1
 800bdda:	6122      	str	r2, [r4, #16]
 800bddc:	b1d5      	cbz	r5, 800be14 <__d2b+0x98>
 800bdde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bde2:	4405      	add	r5, r0
 800bde4:	f8c9 5000 	str.w	r5, [r9]
 800bde8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bdec:	f8c8 0000 	str.w	r0, [r8]
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	b003      	add	sp, #12
 800bdf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdfc:	e7d5      	b.n	800bdaa <__d2b+0x2e>
 800bdfe:	6161      	str	r1, [r4, #20]
 800be00:	e7e5      	b.n	800bdce <__d2b+0x52>
 800be02:	a801      	add	r0, sp, #4
 800be04:	f7ff fcde 	bl	800b7c4 <__lo0bits>
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	6163      	str	r3, [r4, #20]
 800be0c:	2201      	movs	r2, #1
 800be0e:	6122      	str	r2, [r4, #16]
 800be10:	3020      	adds	r0, #32
 800be12:	e7e3      	b.n	800bddc <__d2b+0x60>
 800be14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be1c:	f8c9 0000 	str.w	r0, [r9]
 800be20:	6918      	ldr	r0, [r3, #16]
 800be22:	f7ff fcaf 	bl	800b784 <__hi0bits>
 800be26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be2a:	e7df      	b.n	800bdec <__d2b+0x70>
 800be2c:	0800ce38 	.word	0x0800ce38
 800be30:	0800cf28 	.word	0x0800cf28

0800be34 <__ratio>:
 800be34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	4688      	mov	r8, r1
 800be3a:	4669      	mov	r1, sp
 800be3c:	4681      	mov	r9, r0
 800be3e:	f7ff ff4d 	bl	800bcdc <__b2d>
 800be42:	a901      	add	r1, sp, #4
 800be44:	4640      	mov	r0, r8
 800be46:	ec55 4b10 	vmov	r4, r5, d0
 800be4a:	f7ff ff47 	bl	800bcdc <__b2d>
 800be4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be56:	eba3 0c02 	sub.w	ip, r3, r2
 800be5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be5e:	1a9b      	subs	r3, r3, r2
 800be60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be64:	ec51 0b10 	vmov	r0, r1, d0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	bfd6      	itet	le
 800be6c:	460a      	movle	r2, r1
 800be6e:	462a      	movgt	r2, r5
 800be70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be74:	468b      	mov	fp, r1
 800be76:	462f      	mov	r7, r5
 800be78:	bfd4      	ite	le
 800be7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be82:	4620      	mov	r0, r4
 800be84:	ee10 2a10 	vmov	r2, s0
 800be88:	465b      	mov	r3, fp
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fcee 	bl	800086c <__aeabi_ddiv>
 800be90:	ec41 0b10 	vmov	d0, r0, r1
 800be94:	b003      	add	sp, #12
 800be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be9a <__copybits>:
 800be9a:	3901      	subs	r1, #1
 800be9c:	b570      	push	{r4, r5, r6, lr}
 800be9e:	1149      	asrs	r1, r1, #5
 800bea0:	6914      	ldr	r4, [r2, #16]
 800bea2:	3101      	adds	r1, #1
 800bea4:	f102 0314 	add.w	r3, r2, #20
 800bea8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800beac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800beb0:	1f05      	subs	r5, r0, #4
 800beb2:	42a3      	cmp	r3, r4
 800beb4:	d30c      	bcc.n	800bed0 <__copybits+0x36>
 800beb6:	1aa3      	subs	r3, r4, r2
 800beb8:	3b11      	subs	r3, #17
 800beba:	f023 0303 	bic.w	r3, r3, #3
 800bebe:	3211      	adds	r2, #17
 800bec0:	42a2      	cmp	r2, r4
 800bec2:	bf88      	it	hi
 800bec4:	2300      	movhi	r3, #0
 800bec6:	4418      	add	r0, r3
 800bec8:	2300      	movs	r3, #0
 800beca:	4288      	cmp	r0, r1
 800becc:	d305      	bcc.n	800beda <__copybits+0x40>
 800bece:	bd70      	pop	{r4, r5, r6, pc}
 800bed0:	f853 6b04 	ldr.w	r6, [r3], #4
 800bed4:	f845 6f04 	str.w	r6, [r5, #4]!
 800bed8:	e7eb      	b.n	800beb2 <__copybits+0x18>
 800beda:	f840 3b04 	str.w	r3, [r0], #4
 800bede:	e7f4      	b.n	800beca <__copybits+0x30>

0800bee0 <__any_on>:
 800bee0:	f100 0214 	add.w	r2, r0, #20
 800bee4:	6900      	ldr	r0, [r0, #16]
 800bee6:	114b      	asrs	r3, r1, #5
 800bee8:	4298      	cmp	r0, r3
 800beea:	b510      	push	{r4, lr}
 800beec:	db11      	blt.n	800bf12 <__any_on+0x32>
 800beee:	dd0a      	ble.n	800bf06 <__any_on+0x26>
 800bef0:	f011 011f 	ands.w	r1, r1, #31
 800bef4:	d007      	beq.n	800bf06 <__any_on+0x26>
 800bef6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800befa:	fa24 f001 	lsr.w	r0, r4, r1
 800befe:	fa00 f101 	lsl.w	r1, r0, r1
 800bf02:	428c      	cmp	r4, r1
 800bf04:	d10b      	bne.n	800bf1e <__any_on+0x3e>
 800bf06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d803      	bhi.n	800bf16 <__any_on+0x36>
 800bf0e:	2000      	movs	r0, #0
 800bf10:	bd10      	pop	{r4, pc}
 800bf12:	4603      	mov	r3, r0
 800bf14:	e7f7      	b.n	800bf06 <__any_on+0x26>
 800bf16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf1a:	2900      	cmp	r1, #0
 800bf1c:	d0f5      	beq.n	800bf0a <__any_on+0x2a>
 800bf1e:	2001      	movs	r0, #1
 800bf20:	e7f6      	b.n	800bf10 <__any_on+0x30>

0800bf22 <_calloc_r>:
 800bf22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf24:	fba1 2402 	umull	r2, r4, r1, r2
 800bf28:	b94c      	cbnz	r4, 800bf3e <_calloc_r+0x1c>
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	9201      	str	r2, [sp, #4]
 800bf2e:	f7fc fa49 	bl	80083c4 <_malloc_r>
 800bf32:	9a01      	ldr	r2, [sp, #4]
 800bf34:	4605      	mov	r5, r0
 800bf36:	b930      	cbnz	r0, 800bf46 <_calloc_r+0x24>
 800bf38:	4628      	mov	r0, r5
 800bf3a:	b003      	add	sp, #12
 800bf3c:	bd30      	pop	{r4, r5, pc}
 800bf3e:	220c      	movs	r2, #12
 800bf40:	6002      	str	r2, [r0, #0]
 800bf42:	2500      	movs	r5, #0
 800bf44:	e7f8      	b.n	800bf38 <_calloc_r+0x16>
 800bf46:	4621      	mov	r1, r4
 800bf48:	f7fc f9c8 	bl	80082dc <memset>
 800bf4c:	e7f4      	b.n	800bf38 <_calloc_r+0x16>

0800bf4e <__ssputs_r>:
 800bf4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf52:	688e      	ldr	r6, [r1, #8]
 800bf54:	429e      	cmp	r6, r3
 800bf56:	4682      	mov	sl, r0
 800bf58:	460c      	mov	r4, r1
 800bf5a:	4690      	mov	r8, r2
 800bf5c:	461f      	mov	r7, r3
 800bf5e:	d838      	bhi.n	800bfd2 <__ssputs_r+0x84>
 800bf60:	898a      	ldrh	r2, [r1, #12]
 800bf62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf66:	d032      	beq.n	800bfce <__ssputs_r+0x80>
 800bf68:	6825      	ldr	r5, [r4, #0]
 800bf6a:	6909      	ldr	r1, [r1, #16]
 800bf6c:	eba5 0901 	sub.w	r9, r5, r1
 800bf70:	6965      	ldr	r5, [r4, #20]
 800bf72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	444b      	add	r3, r9
 800bf7e:	106d      	asrs	r5, r5, #1
 800bf80:	429d      	cmp	r5, r3
 800bf82:	bf38      	it	cc
 800bf84:	461d      	movcc	r5, r3
 800bf86:	0553      	lsls	r3, r2, #21
 800bf88:	d531      	bpl.n	800bfee <__ssputs_r+0xa0>
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	f7fc fa1a 	bl	80083c4 <_malloc_r>
 800bf90:	4606      	mov	r6, r0
 800bf92:	b950      	cbnz	r0, 800bfaa <__ssputs_r+0x5c>
 800bf94:	230c      	movs	r3, #12
 800bf96:	f8ca 3000 	str.w	r3, [sl]
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfa0:	81a3      	strh	r3, [r4, #12]
 800bfa2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfaa:	6921      	ldr	r1, [r4, #16]
 800bfac:	464a      	mov	r2, r9
 800bfae:	f7fc f987 	bl	80082c0 <memcpy>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfbc:	81a3      	strh	r3, [r4, #12]
 800bfbe:	6126      	str	r6, [r4, #16]
 800bfc0:	6165      	str	r5, [r4, #20]
 800bfc2:	444e      	add	r6, r9
 800bfc4:	eba5 0509 	sub.w	r5, r5, r9
 800bfc8:	6026      	str	r6, [r4, #0]
 800bfca:	60a5      	str	r5, [r4, #8]
 800bfcc:	463e      	mov	r6, r7
 800bfce:	42be      	cmp	r6, r7
 800bfd0:	d900      	bls.n	800bfd4 <__ssputs_r+0x86>
 800bfd2:	463e      	mov	r6, r7
 800bfd4:	6820      	ldr	r0, [r4, #0]
 800bfd6:	4632      	mov	r2, r6
 800bfd8:	4641      	mov	r1, r8
 800bfda:	f000 fd27 	bl	800ca2c <memmove>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	1b9b      	subs	r3, r3, r6
 800bfe2:	60a3      	str	r3, [r4, #8]
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	4433      	add	r3, r6
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	2000      	movs	r0, #0
 800bfec:	e7db      	b.n	800bfa6 <__ssputs_r+0x58>
 800bfee:	462a      	mov	r2, r5
 800bff0:	f000 fd36 	bl	800ca60 <_realloc_r>
 800bff4:	4606      	mov	r6, r0
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d1e1      	bne.n	800bfbe <__ssputs_r+0x70>
 800bffa:	6921      	ldr	r1, [r4, #16]
 800bffc:	4650      	mov	r0, sl
 800bffe:	f7fc f975 	bl	80082ec <_free_r>
 800c002:	e7c7      	b.n	800bf94 <__ssputs_r+0x46>

0800c004 <_svfiprintf_r>:
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	4698      	mov	r8, r3
 800c00a:	898b      	ldrh	r3, [r1, #12]
 800c00c:	061b      	lsls	r3, r3, #24
 800c00e:	b09d      	sub	sp, #116	; 0x74
 800c010:	4607      	mov	r7, r0
 800c012:	460d      	mov	r5, r1
 800c014:	4614      	mov	r4, r2
 800c016:	d50e      	bpl.n	800c036 <_svfiprintf_r+0x32>
 800c018:	690b      	ldr	r3, [r1, #16]
 800c01a:	b963      	cbnz	r3, 800c036 <_svfiprintf_r+0x32>
 800c01c:	2140      	movs	r1, #64	; 0x40
 800c01e:	f7fc f9d1 	bl	80083c4 <_malloc_r>
 800c022:	6028      	str	r0, [r5, #0]
 800c024:	6128      	str	r0, [r5, #16]
 800c026:	b920      	cbnz	r0, 800c032 <_svfiprintf_r+0x2e>
 800c028:	230c      	movs	r3, #12
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	e0d1      	b.n	800c1d6 <_svfiprintf_r+0x1d2>
 800c032:	2340      	movs	r3, #64	; 0x40
 800c034:	616b      	str	r3, [r5, #20]
 800c036:	2300      	movs	r3, #0
 800c038:	9309      	str	r3, [sp, #36]	; 0x24
 800c03a:	2320      	movs	r3, #32
 800c03c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c040:	f8cd 800c 	str.w	r8, [sp, #12]
 800c044:	2330      	movs	r3, #48	; 0x30
 800c046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c1f0 <_svfiprintf_r+0x1ec>
 800c04a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c04e:	f04f 0901 	mov.w	r9, #1
 800c052:	4623      	mov	r3, r4
 800c054:	469a      	mov	sl, r3
 800c056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c05a:	b10a      	cbz	r2, 800c060 <_svfiprintf_r+0x5c>
 800c05c:	2a25      	cmp	r2, #37	; 0x25
 800c05e:	d1f9      	bne.n	800c054 <_svfiprintf_r+0x50>
 800c060:	ebba 0b04 	subs.w	fp, sl, r4
 800c064:	d00b      	beq.n	800c07e <_svfiprintf_r+0x7a>
 800c066:	465b      	mov	r3, fp
 800c068:	4622      	mov	r2, r4
 800c06a:	4629      	mov	r1, r5
 800c06c:	4638      	mov	r0, r7
 800c06e:	f7ff ff6e 	bl	800bf4e <__ssputs_r>
 800c072:	3001      	adds	r0, #1
 800c074:	f000 80aa 	beq.w	800c1cc <_svfiprintf_r+0x1c8>
 800c078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c07a:	445a      	add	r2, fp
 800c07c:	9209      	str	r2, [sp, #36]	; 0x24
 800c07e:	f89a 3000 	ldrb.w	r3, [sl]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 80a2 	beq.w	800c1cc <_svfiprintf_r+0x1c8>
 800c088:	2300      	movs	r3, #0
 800c08a:	f04f 32ff 	mov.w	r2, #4294967295
 800c08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c092:	f10a 0a01 	add.w	sl, sl, #1
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	9307      	str	r3, [sp, #28]
 800c09a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c09e:	931a      	str	r3, [sp, #104]	; 0x68
 800c0a0:	4654      	mov	r4, sl
 800c0a2:	2205      	movs	r2, #5
 800c0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a8:	4851      	ldr	r0, [pc, #324]	; (800c1f0 <_svfiprintf_r+0x1ec>)
 800c0aa:	f7f4 f8a9 	bl	8000200 <memchr>
 800c0ae:	9a04      	ldr	r2, [sp, #16]
 800c0b0:	b9d8      	cbnz	r0, 800c0ea <_svfiprintf_r+0xe6>
 800c0b2:	06d0      	lsls	r0, r2, #27
 800c0b4:	bf44      	itt	mi
 800c0b6:	2320      	movmi	r3, #32
 800c0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0bc:	0711      	lsls	r1, r2, #28
 800c0be:	bf44      	itt	mi
 800c0c0:	232b      	movmi	r3, #43	; 0x2b
 800c0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c0cc:	d015      	beq.n	800c0fa <_svfiprintf_r+0xf6>
 800c0ce:	9a07      	ldr	r2, [sp, #28]
 800c0d0:	4654      	mov	r4, sl
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	f04f 0c0a 	mov.w	ip, #10
 800c0d8:	4621      	mov	r1, r4
 800c0da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0de:	3b30      	subs	r3, #48	; 0x30
 800c0e0:	2b09      	cmp	r3, #9
 800c0e2:	d94e      	bls.n	800c182 <_svfiprintf_r+0x17e>
 800c0e4:	b1b0      	cbz	r0, 800c114 <_svfiprintf_r+0x110>
 800c0e6:	9207      	str	r2, [sp, #28]
 800c0e8:	e014      	b.n	800c114 <_svfiprintf_r+0x110>
 800c0ea:	eba0 0308 	sub.w	r3, r0, r8
 800c0ee:	fa09 f303 	lsl.w	r3, r9, r3
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	9304      	str	r3, [sp, #16]
 800c0f6:	46a2      	mov	sl, r4
 800c0f8:	e7d2      	b.n	800c0a0 <_svfiprintf_r+0x9c>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	1d19      	adds	r1, r3, #4
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	9103      	str	r1, [sp, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	bfbb      	ittet	lt
 800c106:	425b      	neglt	r3, r3
 800c108:	f042 0202 	orrlt.w	r2, r2, #2
 800c10c:	9307      	strge	r3, [sp, #28]
 800c10e:	9307      	strlt	r3, [sp, #28]
 800c110:	bfb8      	it	lt
 800c112:	9204      	strlt	r2, [sp, #16]
 800c114:	7823      	ldrb	r3, [r4, #0]
 800c116:	2b2e      	cmp	r3, #46	; 0x2e
 800c118:	d10c      	bne.n	800c134 <_svfiprintf_r+0x130>
 800c11a:	7863      	ldrb	r3, [r4, #1]
 800c11c:	2b2a      	cmp	r3, #42	; 0x2a
 800c11e:	d135      	bne.n	800c18c <_svfiprintf_r+0x188>
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	1d1a      	adds	r2, r3, #4
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	9203      	str	r2, [sp, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	bfb8      	it	lt
 800c12c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c130:	3402      	adds	r4, #2
 800c132:	9305      	str	r3, [sp, #20]
 800c134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c200 <_svfiprintf_r+0x1fc>
 800c138:	7821      	ldrb	r1, [r4, #0]
 800c13a:	2203      	movs	r2, #3
 800c13c:	4650      	mov	r0, sl
 800c13e:	f7f4 f85f 	bl	8000200 <memchr>
 800c142:	b140      	cbz	r0, 800c156 <_svfiprintf_r+0x152>
 800c144:	2340      	movs	r3, #64	; 0x40
 800c146:	eba0 000a 	sub.w	r0, r0, sl
 800c14a:	fa03 f000 	lsl.w	r0, r3, r0
 800c14e:	9b04      	ldr	r3, [sp, #16]
 800c150:	4303      	orrs	r3, r0
 800c152:	3401      	adds	r4, #1
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c15a:	4826      	ldr	r0, [pc, #152]	; (800c1f4 <_svfiprintf_r+0x1f0>)
 800c15c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c160:	2206      	movs	r2, #6
 800c162:	f7f4 f84d 	bl	8000200 <memchr>
 800c166:	2800      	cmp	r0, #0
 800c168:	d038      	beq.n	800c1dc <_svfiprintf_r+0x1d8>
 800c16a:	4b23      	ldr	r3, [pc, #140]	; (800c1f8 <_svfiprintf_r+0x1f4>)
 800c16c:	bb1b      	cbnz	r3, 800c1b6 <_svfiprintf_r+0x1b2>
 800c16e:	9b03      	ldr	r3, [sp, #12]
 800c170:	3307      	adds	r3, #7
 800c172:	f023 0307 	bic.w	r3, r3, #7
 800c176:	3308      	adds	r3, #8
 800c178:	9303      	str	r3, [sp, #12]
 800c17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17c:	4433      	add	r3, r6
 800c17e:	9309      	str	r3, [sp, #36]	; 0x24
 800c180:	e767      	b.n	800c052 <_svfiprintf_r+0x4e>
 800c182:	fb0c 3202 	mla	r2, ip, r2, r3
 800c186:	460c      	mov	r4, r1
 800c188:	2001      	movs	r0, #1
 800c18a:	e7a5      	b.n	800c0d8 <_svfiprintf_r+0xd4>
 800c18c:	2300      	movs	r3, #0
 800c18e:	3401      	adds	r4, #1
 800c190:	9305      	str	r3, [sp, #20]
 800c192:	4619      	mov	r1, r3
 800c194:	f04f 0c0a 	mov.w	ip, #10
 800c198:	4620      	mov	r0, r4
 800c19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c19e:	3a30      	subs	r2, #48	; 0x30
 800c1a0:	2a09      	cmp	r2, #9
 800c1a2:	d903      	bls.n	800c1ac <_svfiprintf_r+0x1a8>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d0c5      	beq.n	800c134 <_svfiprintf_r+0x130>
 800c1a8:	9105      	str	r1, [sp, #20]
 800c1aa:	e7c3      	b.n	800c134 <_svfiprintf_r+0x130>
 800c1ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e7f0      	b.n	800c198 <_svfiprintf_r+0x194>
 800c1b6:	ab03      	add	r3, sp, #12
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	462a      	mov	r2, r5
 800c1bc:	4b0f      	ldr	r3, [pc, #60]	; (800c1fc <_svfiprintf_r+0x1f8>)
 800c1be:	a904      	add	r1, sp, #16
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f7fc fa13 	bl	80085ec <_printf_float>
 800c1c6:	1c42      	adds	r2, r0, #1
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	d1d6      	bne.n	800c17a <_svfiprintf_r+0x176>
 800c1cc:	89ab      	ldrh	r3, [r5, #12]
 800c1ce:	065b      	lsls	r3, r3, #25
 800c1d0:	f53f af2c 	bmi.w	800c02c <_svfiprintf_r+0x28>
 800c1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1d6:	b01d      	add	sp, #116	; 0x74
 800c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1dc:	ab03      	add	r3, sp, #12
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	462a      	mov	r2, r5
 800c1e2:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <_svfiprintf_r+0x1f8>)
 800c1e4:	a904      	add	r1, sp, #16
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f7fc fca4 	bl	8008b34 <_printf_i>
 800c1ec:	e7eb      	b.n	800c1c6 <_svfiprintf_r+0x1c2>
 800c1ee:	bf00      	nop
 800c1f0:	0800d084 	.word	0x0800d084
 800c1f4:	0800d08e 	.word	0x0800d08e
 800c1f8:	080085ed 	.word	0x080085ed
 800c1fc:	0800bf4f 	.word	0x0800bf4f
 800c200:	0800d08a 	.word	0x0800d08a

0800c204 <__sfputc_r>:
 800c204:	6893      	ldr	r3, [r2, #8]
 800c206:	3b01      	subs	r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	b410      	push	{r4}
 800c20c:	6093      	str	r3, [r2, #8]
 800c20e:	da08      	bge.n	800c222 <__sfputc_r+0x1e>
 800c210:	6994      	ldr	r4, [r2, #24]
 800c212:	42a3      	cmp	r3, r4
 800c214:	db01      	blt.n	800c21a <__sfputc_r+0x16>
 800c216:	290a      	cmp	r1, #10
 800c218:	d103      	bne.n	800c222 <__sfputc_r+0x1e>
 800c21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c21e:	f000 b9ab 	b.w	800c578 <__swbuf_r>
 800c222:	6813      	ldr	r3, [r2, #0]
 800c224:	1c58      	adds	r0, r3, #1
 800c226:	6010      	str	r0, [r2, #0]
 800c228:	7019      	strb	r1, [r3, #0]
 800c22a:	4608      	mov	r0, r1
 800c22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <__sfputs_r>:
 800c232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c234:	4606      	mov	r6, r0
 800c236:	460f      	mov	r7, r1
 800c238:	4614      	mov	r4, r2
 800c23a:	18d5      	adds	r5, r2, r3
 800c23c:	42ac      	cmp	r4, r5
 800c23e:	d101      	bne.n	800c244 <__sfputs_r+0x12>
 800c240:	2000      	movs	r0, #0
 800c242:	e007      	b.n	800c254 <__sfputs_r+0x22>
 800c244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c248:	463a      	mov	r2, r7
 800c24a:	4630      	mov	r0, r6
 800c24c:	f7ff ffda 	bl	800c204 <__sfputc_r>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d1f3      	bne.n	800c23c <__sfputs_r+0xa>
 800c254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c258 <_vfiprintf_r>:
 800c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	460d      	mov	r5, r1
 800c25e:	b09d      	sub	sp, #116	; 0x74
 800c260:	4614      	mov	r4, r2
 800c262:	4698      	mov	r8, r3
 800c264:	4606      	mov	r6, r0
 800c266:	b118      	cbz	r0, 800c270 <_vfiprintf_r+0x18>
 800c268:	6983      	ldr	r3, [r0, #24]
 800c26a:	b90b      	cbnz	r3, 800c270 <_vfiprintf_r+0x18>
 800c26c:	f7fe fd66 	bl	800ad3c <__sinit>
 800c270:	4b89      	ldr	r3, [pc, #548]	; (800c498 <_vfiprintf_r+0x240>)
 800c272:	429d      	cmp	r5, r3
 800c274:	d11b      	bne.n	800c2ae <_vfiprintf_r+0x56>
 800c276:	6875      	ldr	r5, [r6, #4]
 800c278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c27a:	07d9      	lsls	r1, r3, #31
 800c27c:	d405      	bmi.n	800c28a <_vfiprintf_r+0x32>
 800c27e:	89ab      	ldrh	r3, [r5, #12]
 800c280:	059a      	lsls	r2, r3, #22
 800c282:	d402      	bmi.n	800c28a <_vfiprintf_r+0x32>
 800c284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c286:	f7ff f96a 	bl	800b55e <__retarget_lock_acquire_recursive>
 800c28a:	89ab      	ldrh	r3, [r5, #12]
 800c28c:	071b      	lsls	r3, r3, #28
 800c28e:	d501      	bpl.n	800c294 <_vfiprintf_r+0x3c>
 800c290:	692b      	ldr	r3, [r5, #16]
 800c292:	b9eb      	cbnz	r3, 800c2d0 <_vfiprintf_r+0x78>
 800c294:	4629      	mov	r1, r5
 800c296:	4630      	mov	r0, r6
 800c298:	f000 f9e0 	bl	800c65c <__swsetup_r>
 800c29c:	b1c0      	cbz	r0, 800c2d0 <_vfiprintf_r+0x78>
 800c29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a0:	07dc      	lsls	r4, r3, #31
 800c2a2:	d50e      	bpl.n	800c2c2 <_vfiprintf_r+0x6a>
 800c2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a8:	b01d      	add	sp, #116	; 0x74
 800c2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ae:	4b7b      	ldr	r3, [pc, #492]	; (800c49c <_vfiprintf_r+0x244>)
 800c2b0:	429d      	cmp	r5, r3
 800c2b2:	d101      	bne.n	800c2b8 <_vfiprintf_r+0x60>
 800c2b4:	68b5      	ldr	r5, [r6, #8]
 800c2b6:	e7df      	b.n	800c278 <_vfiprintf_r+0x20>
 800c2b8:	4b79      	ldr	r3, [pc, #484]	; (800c4a0 <_vfiprintf_r+0x248>)
 800c2ba:	429d      	cmp	r5, r3
 800c2bc:	bf08      	it	eq
 800c2be:	68f5      	ldreq	r5, [r6, #12]
 800c2c0:	e7da      	b.n	800c278 <_vfiprintf_r+0x20>
 800c2c2:	89ab      	ldrh	r3, [r5, #12]
 800c2c4:	0598      	lsls	r0, r3, #22
 800c2c6:	d4ed      	bmi.n	800c2a4 <_vfiprintf_r+0x4c>
 800c2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ca:	f7ff f949 	bl	800b560 <__retarget_lock_release_recursive>
 800c2ce:	e7e9      	b.n	800c2a4 <_vfiprintf_r+0x4c>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d4:	2320      	movs	r3, #32
 800c2d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2de:	2330      	movs	r3, #48	; 0x30
 800c2e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4a4 <_vfiprintf_r+0x24c>
 800c2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2e8:	f04f 0901 	mov.w	r9, #1
 800c2ec:	4623      	mov	r3, r4
 800c2ee:	469a      	mov	sl, r3
 800c2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f4:	b10a      	cbz	r2, 800c2fa <_vfiprintf_r+0xa2>
 800c2f6:	2a25      	cmp	r2, #37	; 0x25
 800c2f8:	d1f9      	bne.n	800c2ee <_vfiprintf_r+0x96>
 800c2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c2fe:	d00b      	beq.n	800c318 <_vfiprintf_r+0xc0>
 800c300:	465b      	mov	r3, fp
 800c302:	4622      	mov	r2, r4
 800c304:	4629      	mov	r1, r5
 800c306:	4630      	mov	r0, r6
 800c308:	f7ff ff93 	bl	800c232 <__sfputs_r>
 800c30c:	3001      	adds	r0, #1
 800c30e:	f000 80aa 	beq.w	800c466 <_vfiprintf_r+0x20e>
 800c312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c314:	445a      	add	r2, fp
 800c316:	9209      	str	r2, [sp, #36]	; 0x24
 800c318:	f89a 3000 	ldrb.w	r3, [sl]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f000 80a2 	beq.w	800c466 <_vfiprintf_r+0x20e>
 800c322:	2300      	movs	r3, #0
 800c324:	f04f 32ff 	mov.w	r2, #4294967295
 800c328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c32c:	f10a 0a01 	add.w	sl, sl, #1
 800c330:	9304      	str	r3, [sp, #16]
 800c332:	9307      	str	r3, [sp, #28]
 800c334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c338:	931a      	str	r3, [sp, #104]	; 0x68
 800c33a:	4654      	mov	r4, sl
 800c33c:	2205      	movs	r2, #5
 800c33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c342:	4858      	ldr	r0, [pc, #352]	; (800c4a4 <_vfiprintf_r+0x24c>)
 800c344:	f7f3 ff5c 	bl	8000200 <memchr>
 800c348:	9a04      	ldr	r2, [sp, #16]
 800c34a:	b9d8      	cbnz	r0, 800c384 <_vfiprintf_r+0x12c>
 800c34c:	06d1      	lsls	r1, r2, #27
 800c34e:	bf44      	itt	mi
 800c350:	2320      	movmi	r3, #32
 800c352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c356:	0713      	lsls	r3, r2, #28
 800c358:	bf44      	itt	mi
 800c35a:	232b      	movmi	r3, #43	; 0x2b
 800c35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c360:	f89a 3000 	ldrb.w	r3, [sl]
 800c364:	2b2a      	cmp	r3, #42	; 0x2a
 800c366:	d015      	beq.n	800c394 <_vfiprintf_r+0x13c>
 800c368:	9a07      	ldr	r2, [sp, #28]
 800c36a:	4654      	mov	r4, sl
 800c36c:	2000      	movs	r0, #0
 800c36e:	f04f 0c0a 	mov.w	ip, #10
 800c372:	4621      	mov	r1, r4
 800c374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c378:	3b30      	subs	r3, #48	; 0x30
 800c37a:	2b09      	cmp	r3, #9
 800c37c:	d94e      	bls.n	800c41c <_vfiprintf_r+0x1c4>
 800c37e:	b1b0      	cbz	r0, 800c3ae <_vfiprintf_r+0x156>
 800c380:	9207      	str	r2, [sp, #28]
 800c382:	e014      	b.n	800c3ae <_vfiprintf_r+0x156>
 800c384:	eba0 0308 	sub.w	r3, r0, r8
 800c388:	fa09 f303 	lsl.w	r3, r9, r3
 800c38c:	4313      	orrs	r3, r2
 800c38e:	9304      	str	r3, [sp, #16]
 800c390:	46a2      	mov	sl, r4
 800c392:	e7d2      	b.n	800c33a <_vfiprintf_r+0xe2>
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	1d19      	adds	r1, r3, #4
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	9103      	str	r1, [sp, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	bfbb      	ittet	lt
 800c3a0:	425b      	neglt	r3, r3
 800c3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a6:	9307      	strge	r3, [sp, #28]
 800c3a8:	9307      	strlt	r3, [sp, #28]
 800c3aa:	bfb8      	it	lt
 800c3ac:	9204      	strlt	r2, [sp, #16]
 800c3ae:	7823      	ldrb	r3, [r4, #0]
 800c3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3b2:	d10c      	bne.n	800c3ce <_vfiprintf_r+0x176>
 800c3b4:	7863      	ldrb	r3, [r4, #1]
 800c3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b8:	d135      	bne.n	800c426 <_vfiprintf_r+0x1ce>
 800c3ba:	9b03      	ldr	r3, [sp, #12]
 800c3bc:	1d1a      	adds	r2, r3, #4
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	9203      	str	r2, [sp, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	bfb8      	it	lt
 800c3c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3ca:	3402      	adds	r4, #2
 800c3cc:	9305      	str	r3, [sp, #20]
 800c3ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4b4 <_vfiprintf_r+0x25c>
 800c3d2:	7821      	ldrb	r1, [r4, #0]
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	4650      	mov	r0, sl
 800c3d8:	f7f3 ff12 	bl	8000200 <memchr>
 800c3dc:	b140      	cbz	r0, 800c3f0 <_vfiprintf_r+0x198>
 800c3de:	2340      	movs	r3, #64	; 0x40
 800c3e0:	eba0 000a 	sub.w	r0, r0, sl
 800c3e4:	fa03 f000 	lsl.w	r0, r3, r0
 800c3e8:	9b04      	ldr	r3, [sp, #16]
 800c3ea:	4303      	orrs	r3, r0
 800c3ec:	3401      	adds	r4, #1
 800c3ee:	9304      	str	r3, [sp, #16]
 800c3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f4:	482c      	ldr	r0, [pc, #176]	; (800c4a8 <_vfiprintf_r+0x250>)
 800c3f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3fa:	2206      	movs	r2, #6
 800c3fc:	f7f3 ff00 	bl	8000200 <memchr>
 800c400:	2800      	cmp	r0, #0
 800c402:	d03f      	beq.n	800c484 <_vfiprintf_r+0x22c>
 800c404:	4b29      	ldr	r3, [pc, #164]	; (800c4ac <_vfiprintf_r+0x254>)
 800c406:	bb1b      	cbnz	r3, 800c450 <_vfiprintf_r+0x1f8>
 800c408:	9b03      	ldr	r3, [sp, #12]
 800c40a:	3307      	adds	r3, #7
 800c40c:	f023 0307 	bic.w	r3, r3, #7
 800c410:	3308      	adds	r3, #8
 800c412:	9303      	str	r3, [sp, #12]
 800c414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c416:	443b      	add	r3, r7
 800c418:	9309      	str	r3, [sp, #36]	; 0x24
 800c41a:	e767      	b.n	800c2ec <_vfiprintf_r+0x94>
 800c41c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c420:	460c      	mov	r4, r1
 800c422:	2001      	movs	r0, #1
 800c424:	e7a5      	b.n	800c372 <_vfiprintf_r+0x11a>
 800c426:	2300      	movs	r3, #0
 800c428:	3401      	adds	r4, #1
 800c42a:	9305      	str	r3, [sp, #20]
 800c42c:	4619      	mov	r1, r3
 800c42e:	f04f 0c0a 	mov.w	ip, #10
 800c432:	4620      	mov	r0, r4
 800c434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c438:	3a30      	subs	r2, #48	; 0x30
 800c43a:	2a09      	cmp	r2, #9
 800c43c:	d903      	bls.n	800c446 <_vfiprintf_r+0x1ee>
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0c5      	beq.n	800c3ce <_vfiprintf_r+0x176>
 800c442:	9105      	str	r1, [sp, #20]
 800c444:	e7c3      	b.n	800c3ce <_vfiprintf_r+0x176>
 800c446:	fb0c 2101 	mla	r1, ip, r1, r2
 800c44a:	4604      	mov	r4, r0
 800c44c:	2301      	movs	r3, #1
 800c44e:	e7f0      	b.n	800c432 <_vfiprintf_r+0x1da>
 800c450:	ab03      	add	r3, sp, #12
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	462a      	mov	r2, r5
 800c456:	4b16      	ldr	r3, [pc, #88]	; (800c4b0 <_vfiprintf_r+0x258>)
 800c458:	a904      	add	r1, sp, #16
 800c45a:	4630      	mov	r0, r6
 800c45c:	f7fc f8c6 	bl	80085ec <_printf_float>
 800c460:	4607      	mov	r7, r0
 800c462:	1c78      	adds	r0, r7, #1
 800c464:	d1d6      	bne.n	800c414 <_vfiprintf_r+0x1bc>
 800c466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c468:	07d9      	lsls	r1, r3, #31
 800c46a:	d405      	bmi.n	800c478 <_vfiprintf_r+0x220>
 800c46c:	89ab      	ldrh	r3, [r5, #12]
 800c46e:	059a      	lsls	r2, r3, #22
 800c470:	d402      	bmi.n	800c478 <_vfiprintf_r+0x220>
 800c472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c474:	f7ff f874 	bl	800b560 <__retarget_lock_release_recursive>
 800c478:	89ab      	ldrh	r3, [r5, #12]
 800c47a:	065b      	lsls	r3, r3, #25
 800c47c:	f53f af12 	bmi.w	800c2a4 <_vfiprintf_r+0x4c>
 800c480:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c482:	e711      	b.n	800c2a8 <_vfiprintf_r+0x50>
 800c484:	ab03      	add	r3, sp, #12
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	462a      	mov	r2, r5
 800c48a:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <_vfiprintf_r+0x258>)
 800c48c:	a904      	add	r1, sp, #16
 800c48e:	4630      	mov	r0, r6
 800c490:	f7fc fb50 	bl	8008b34 <_printf_i>
 800c494:	e7e4      	b.n	800c460 <_vfiprintf_r+0x208>
 800c496:	bf00      	nop
 800c498:	0800ce6c 	.word	0x0800ce6c
 800c49c:	0800ce8c 	.word	0x0800ce8c
 800c4a0:	0800ce4c 	.word	0x0800ce4c
 800c4a4:	0800d084 	.word	0x0800d084
 800c4a8:	0800d08e 	.word	0x0800d08e
 800c4ac:	080085ed 	.word	0x080085ed
 800c4b0:	0800c233 	.word	0x0800c233
 800c4b4:	0800d08a 	.word	0x0800d08a

0800c4b8 <nan>:
 800c4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c4c0 <nan+0x8>
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	7ff80000 	.word	0x7ff80000

0800c4c8 <__sread>:
 800c4c8:	b510      	push	{r4, lr}
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d0:	f000 faf6 	bl	800cac0 <_read_r>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	bfab      	itete	ge
 800c4d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4da:	89a3      	ldrhlt	r3, [r4, #12]
 800c4dc:	181b      	addge	r3, r3, r0
 800c4de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4e2:	bfac      	ite	ge
 800c4e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4e6:	81a3      	strhlt	r3, [r4, #12]
 800c4e8:	bd10      	pop	{r4, pc}

0800c4ea <__swrite>:
 800c4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ee:	461f      	mov	r7, r3
 800c4f0:	898b      	ldrh	r3, [r1, #12]
 800c4f2:	05db      	lsls	r3, r3, #23
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	4616      	mov	r6, r2
 800c4fa:	d505      	bpl.n	800c508 <__swrite+0x1e>
 800c4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c500:	2302      	movs	r3, #2
 800c502:	2200      	movs	r2, #0
 800c504:	f000 fa1a 	bl	800c93c <_lseek_r>
 800c508:	89a3      	ldrh	r3, [r4, #12]
 800c50a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c50e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c512:	81a3      	strh	r3, [r4, #12]
 800c514:	4632      	mov	r2, r6
 800c516:	463b      	mov	r3, r7
 800c518:	4628      	mov	r0, r5
 800c51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c51e:	f000 b88b 	b.w	800c638 <_write_r>

0800c522 <__sseek>:
 800c522:	b510      	push	{r4, lr}
 800c524:	460c      	mov	r4, r1
 800c526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52a:	f000 fa07 	bl	800c93c <_lseek_r>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	bf15      	itete	ne
 800c534:	6560      	strne	r0, [r4, #84]	; 0x54
 800c536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c53a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c53e:	81a3      	strheq	r3, [r4, #12]
 800c540:	bf18      	it	ne
 800c542:	81a3      	strhne	r3, [r4, #12]
 800c544:	bd10      	pop	{r4, pc}

0800c546 <__sclose>:
 800c546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54a:	f000 b913 	b.w	800c774 <_close_r>

0800c54e <strncmp>:
 800c54e:	b510      	push	{r4, lr}
 800c550:	b17a      	cbz	r2, 800c572 <strncmp+0x24>
 800c552:	4603      	mov	r3, r0
 800c554:	3901      	subs	r1, #1
 800c556:	1884      	adds	r4, r0, r2
 800c558:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c55c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c560:	4290      	cmp	r0, r2
 800c562:	d101      	bne.n	800c568 <strncmp+0x1a>
 800c564:	42a3      	cmp	r3, r4
 800c566:	d101      	bne.n	800c56c <strncmp+0x1e>
 800c568:	1a80      	subs	r0, r0, r2
 800c56a:	bd10      	pop	{r4, pc}
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d1f3      	bne.n	800c558 <strncmp+0xa>
 800c570:	e7fa      	b.n	800c568 <strncmp+0x1a>
 800c572:	4610      	mov	r0, r2
 800c574:	e7f9      	b.n	800c56a <strncmp+0x1c>
	...

0800c578 <__swbuf_r>:
 800c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57a:	460e      	mov	r6, r1
 800c57c:	4614      	mov	r4, r2
 800c57e:	4605      	mov	r5, r0
 800c580:	b118      	cbz	r0, 800c58a <__swbuf_r+0x12>
 800c582:	6983      	ldr	r3, [r0, #24]
 800c584:	b90b      	cbnz	r3, 800c58a <__swbuf_r+0x12>
 800c586:	f7fe fbd9 	bl	800ad3c <__sinit>
 800c58a:	4b21      	ldr	r3, [pc, #132]	; (800c610 <__swbuf_r+0x98>)
 800c58c:	429c      	cmp	r4, r3
 800c58e:	d12b      	bne.n	800c5e8 <__swbuf_r+0x70>
 800c590:	686c      	ldr	r4, [r5, #4]
 800c592:	69a3      	ldr	r3, [r4, #24]
 800c594:	60a3      	str	r3, [r4, #8]
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	071a      	lsls	r2, r3, #28
 800c59a:	d52f      	bpl.n	800c5fc <__swbuf_r+0x84>
 800c59c:	6923      	ldr	r3, [r4, #16]
 800c59e:	b36b      	cbz	r3, 800c5fc <__swbuf_r+0x84>
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	1ac0      	subs	r0, r0, r3
 800c5a6:	6963      	ldr	r3, [r4, #20]
 800c5a8:	b2f6      	uxtb	r6, r6
 800c5aa:	4283      	cmp	r3, r0
 800c5ac:	4637      	mov	r7, r6
 800c5ae:	dc04      	bgt.n	800c5ba <__swbuf_r+0x42>
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f000 f974 	bl	800c8a0 <_fflush_r>
 800c5b8:	bb30      	cbnz	r0, 800c608 <__swbuf_r+0x90>
 800c5ba:	68a3      	ldr	r3, [r4, #8]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	60a3      	str	r3, [r4, #8]
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	6022      	str	r2, [r4, #0]
 800c5c6:	701e      	strb	r6, [r3, #0]
 800c5c8:	6963      	ldr	r3, [r4, #20]
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	4283      	cmp	r3, r0
 800c5ce:	d004      	beq.n	800c5da <__swbuf_r+0x62>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	07db      	lsls	r3, r3, #31
 800c5d4:	d506      	bpl.n	800c5e4 <__swbuf_r+0x6c>
 800c5d6:	2e0a      	cmp	r6, #10
 800c5d8:	d104      	bne.n	800c5e4 <__swbuf_r+0x6c>
 800c5da:	4621      	mov	r1, r4
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f000 f95f 	bl	800c8a0 <_fflush_r>
 800c5e2:	b988      	cbnz	r0, 800c608 <__swbuf_r+0x90>
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5e8:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <__swbuf_r+0x9c>)
 800c5ea:	429c      	cmp	r4, r3
 800c5ec:	d101      	bne.n	800c5f2 <__swbuf_r+0x7a>
 800c5ee:	68ac      	ldr	r4, [r5, #8]
 800c5f0:	e7cf      	b.n	800c592 <__swbuf_r+0x1a>
 800c5f2:	4b09      	ldr	r3, [pc, #36]	; (800c618 <__swbuf_r+0xa0>)
 800c5f4:	429c      	cmp	r4, r3
 800c5f6:	bf08      	it	eq
 800c5f8:	68ec      	ldreq	r4, [r5, #12]
 800c5fa:	e7ca      	b.n	800c592 <__swbuf_r+0x1a>
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 f82c 	bl	800c65c <__swsetup_r>
 800c604:	2800      	cmp	r0, #0
 800c606:	d0cb      	beq.n	800c5a0 <__swbuf_r+0x28>
 800c608:	f04f 37ff 	mov.w	r7, #4294967295
 800c60c:	e7ea      	b.n	800c5e4 <__swbuf_r+0x6c>
 800c60e:	bf00      	nop
 800c610:	0800ce6c 	.word	0x0800ce6c
 800c614:	0800ce8c 	.word	0x0800ce8c
 800c618:	0800ce4c 	.word	0x0800ce4c

0800c61c <__ascii_wctomb>:
 800c61c:	b149      	cbz	r1, 800c632 <__ascii_wctomb+0x16>
 800c61e:	2aff      	cmp	r2, #255	; 0xff
 800c620:	bf85      	ittet	hi
 800c622:	238a      	movhi	r3, #138	; 0x8a
 800c624:	6003      	strhi	r3, [r0, #0]
 800c626:	700a      	strbls	r2, [r1, #0]
 800c628:	f04f 30ff 	movhi.w	r0, #4294967295
 800c62c:	bf98      	it	ls
 800c62e:	2001      	movls	r0, #1
 800c630:	4770      	bx	lr
 800c632:	4608      	mov	r0, r1
 800c634:	4770      	bx	lr
	...

0800c638 <_write_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4d07      	ldr	r5, [pc, #28]	; (800c658 <_write_r+0x20>)
 800c63c:	4604      	mov	r4, r0
 800c63e:	4608      	mov	r0, r1
 800c640:	4611      	mov	r1, r2
 800c642:	2200      	movs	r2, #0
 800c644:	602a      	str	r2, [r5, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	f7f5 fba9 	bl	8001d9e <_write>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_write_r+0x1e>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b103      	cbz	r3, 800c656 <_write_r+0x1e>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	20000ae0 	.word	0x20000ae0

0800c65c <__swsetup_r>:
 800c65c:	4b32      	ldr	r3, [pc, #200]	; (800c728 <__swsetup_r+0xcc>)
 800c65e:	b570      	push	{r4, r5, r6, lr}
 800c660:	681d      	ldr	r5, [r3, #0]
 800c662:	4606      	mov	r6, r0
 800c664:	460c      	mov	r4, r1
 800c666:	b125      	cbz	r5, 800c672 <__swsetup_r+0x16>
 800c668:	69ab      	ldr	r3, [r5, #24]
 800c66a:	b913      	cbnz	r3, 800c672 <__swsetup_r+0x16>
 800c66c:	4628      	mov	r0, r5
 800c66e:	f7fe fb65 	bl	800ad3c <__sinit>
 800c672:	4b2e      	ldr	r3, [pc, #184]	; (800c72c <__swsetup_r+0xd0>)
 800c674:	429c      	cmp	r4, r3
 800c676:	d10f      	bne.n	800c698 <__swsetup_r+0x3c>
 800c678:	686c      	ldr	r4, [r5, #4]
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c680:	0719      	lsls	r1, r3, #28
 800c682:	d42c      	bmi.n	800c6de <__swsetup_r+0x82>
 800c684:	06dd      	lsls	r5, r3, #27
 800c686:	d411      	bmi.n	800c6ac <__swsetup_r+0x50>
 800c688:	2309      	movs	r3, #9
 800c68a:	6033      	str	r3, [r6, #0]
 800c68c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c690:	81a3      	strh	r3, [r4, #12]
 800c692:	f04f 30ff 	mov.w	r0, #4294967295
 800c696:	e03e      	b.n	800c716 <__swsetup_r+0xba>
 800c698:	4b25      	ldr	r3, [pc, #148]	; (800c730 <__swsetup_r+0xd4>)
 800c69a:	429c      	cmp	r4, r3
 800c69c:	d101      	bne.n	800c6a2 <__swsetup_r+0x46>
 800c69e:	68ac      	ldr	r4, [r5, #8]
 800c6a0:	e7eb      	b.n	800c67a <__swsetup_r+0x1e>
 800c6a2:	4b24      	ldr	r3, [pc, #144]	; (800c734 <__swsetup_r+0xd8>)
 800c6a4:	429c      	cmp	r4, r3
 800c6a6:	bf08      	it	eq
 800c6a8:	68ec      	ldreq	r4, [r5, #12]
 800c6aa:	e7e6      	b.n	800c67a <__swsetup_r+0x1e>
 800c6ac:	0758      	lsls	r0, r3, #29
 800c6ae:	d512      	bpl.n	800c6d6 <__swsetup_r+0x7a>
 800c6b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6b2:	b141      	cbz	r1, 800c6c6 <__swsetup_r+0x6a>
 800c6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6b8:	4299      	cmp	r1, r3
 800c6ba:	d002      	beq.n	800c6c2 <__swsetup_r+0x66>
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7fb fe15 	bl	80082ec <_free_r>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6cc:	81a3      	strh	r3, [r4, #12]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	6063      	str	r3, [r4, #4]
 800c6d2:	6923      	ldr	r3, [r4, #16]
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	f043 0308 	orr.w	r3, r3, #8
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	6923      	ldr	r3, [r4, #16]
 800c6e0:	b94b      	cbnz	r3, 800c6f6 <__swsetup_r+0x9a>
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6ec:	d003      	beq.n	800c6f6 <__swsetup_r+0x9a>
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f000 f95b 	bl	800c9ac <__smakebuf_r>
 800c6f6:	89a0      	ldrh	r0, [r4, #12]
 800c6f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6fc:	f010 0301 	ands.w	r3, r0, #1
 800c700:	d00a      	beq.n	800c718 <__swsetup_r+0xbc>
 800c702:	2300      	movs	r3, #0
 800c704:	60a3      	str	r3, [r4, #8]
 800c706:	6963      	ldr	r3, [r4, #20]
 800c708:	425b      	negs	r3, r3
 800c70a:	61a3      	str	r3, [r4, #24]
 800c70c:	6923      	ldr	r3, [r4, #16]
 800c70e:	b943      	cbnz	r3, 800c722 <__swsetup_r+0xc6>
 800c710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c714:	d1ba      	bne.n	800c68c <__swsetup_r+0x30>
 800c716:	bd70      	pop	{r4, r5, r6, pc}
 800c718:	0781      	lsls	r1, r0, #30
 800c71a:	bf58      	it	pl
 800c71c:	6963      	ldrpl	r3, [r4, #20]
 800c71e:	60a3      	str	r3, [r4, #8]
 800c720:	e7f4      	b.n	800c70c <__swsetup_r+0xb0>
 800c722:	2000      	movs	r0, #0
 800c724:	e7f7      	b.n	800c716 <__swsetup_r+0xba>
 800c726:	bf00      	nop
 800c728:	20000010 	.word	0x20000010
 800c72c:	0800ce6c 	.word	0x0800ce6c
 800c730:	0800ce8c 	.word	0x0800ce8c
 800c734:	0800ce4c 	.word	0x0800ce4c

0800c738 <__assert_func>:
 800c738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c73a:	4614      	mov	r4, r2
 800c73c:	461a      	mov	r2, r3
 800c73e:	4b09      	ldr	r3, [pc, #36]	; (800c764 <__assert_func+0x2c>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4605      	mov	r5, r0
 800c744:	68d8      	ldr	r0, [r3, #12]
 800c746:	b14c      	cbz	r4, 800c75c <__assert_func+0x24>
 800c748:	4b07      	ldr	r3, [pc, #28]	; (800c768 <__assert_func+0x30>)
 800c74a:	9100      	str	r1, [sp, #0]
 800c74c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c750:	4906      	ldr	r1, [pc, #24]	; (800c76c <__assert_func+0x34>)
 800c752:	462b      	mov	r3, r5
 800c754:	f000 f8e0 	bl	800c918 <fiprintf>
 800c758:	f000 f9c4 	bl	800cae4 <abort>
 800c75c:	4b04      	ldr	r3, [pc, #16]	; (800c770 <__assert_func+0x38>)
 800c75e:	461c      	mov	r4, r3
 800c760:	e7f3      	b.n	800c74a <__assert_func+0x12>
 800c762:	bf00      	nop
 800c764:	20000010 	.word	0x20000010
 800c768:	0800d095 	.word	0x0800d095
 800c76c:	0800d0a2 	.word	0x0800d0a2
 800c770:	0800d0d0 	.word	0x0800d0d0

0800c774 <_close_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4d06      	ldr	r5, [pc, #24]	; (800c790 <_close_r+0x1c>)
 800c778:	2300      	movs	r3, #0
 800c77a:	4604      	mov	r4, r0
 800c77c:	4608      	mov	r0, r1
 800c77e:	602b      	str	r3, [r5, #0]
 800c780:	f7f5 fb29 	bl	8001dd6 <_close>
 800c784:	1c43      	adds	r3, r0, #1
 800c786:	d102      	bne.n	800c78e <_close_r+0x1a>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	b103      	cbz	r3, 800c78e <_close_r+0x1a>
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	bd38      	pop	{r3, r4, r5, pc}
 800c790:	20000ae0 	.word	0x20000ae0

0800c794 <__sflush_r>:
 800c794:	898a      	ldrh	r2, [r1, #12]
 800c796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79a:	4605      	mov	r5, r0
 800c79c:	0710      	lsls	r0, r2, #28
 800c79e:	460c      	mov	r4, r1
 800c7a0:	d458      	bmi.n	800c854 <__sflush_r+0xc0>
 800c7a2:	684b      	ldr	r3, [r1, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dc05      	bgt.n	800c7b4 <__sflush_r+0x20>
 800c7a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	dc02      	bgt.n	800c7b4 <__sflush_r+0x20>
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7b6:	2e00      	cmp	r6, #0
 800c7b8:	d0f9      	beq.n	800c7ae <__sflush_r+0x1a>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7c0:	682f      	ldr	r7, [r5, #0]
 800c7c2:	602b      	str	r3, [r5, #0]
 800c7c4:	d032      	beq.n	800c82c <__sflush_r+0x98>
 800c7c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	075a      	lsls	r2, r3, #29
 800c7cc:	d505      	bpl.n	800c7da <__sflush_r+0x46>
 800c7ce:	6863      	ldr	r3, [r4, #4]
 800c7d0:	1ac0      	subs	r0, r0, r3
 800c7d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7d4:	b10b      	cbz	r3, 800c7da <__sflush_r+0x46>
 800c7d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7d8:	1ac0      	subs	r0, r0, r3
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4602      	mov	r2, r0
 800c7de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7e0:	6a21      	ldr	r1, [r4, #32]
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	47b0      	blx	r6
 800c7e6:	1c43      	adds	r3, r0, #1
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	d106      	bne.n	800c7fa <__sflush_r+0x66>
 800c7ec:	6829      	ldr	r1, [r5, #0]
 800c7ee:	291d      	cmp	r1, #29
 800c7f0:	d82c      	bhi.n	800c84c <__sflush_r+0xb8>
 800c7f2:	4a2a      	ldr	r2, [pc, #168]	; (800c89c <__sflush_r+0x108>)
 800c7f4:	40ca      	lsrs	r2, r1
 800c7f6:	07d6      	lsls	r6, r2, #31
 800c7f8:	d528      	bpl.n	800c84c <__sflush_r+0xb8>
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	6062      	str	r2, [r4, #4]
 800c7fe:	04d9      	lsls	r1, r3, #19
 800c800:	6922      	ldr	r2, [r4, #16]
 800c802:	6022      	str	r2, [r4, #0]
 800c804:	d504      	bpl.n	800c810 <__sflush_r+0x7c>
 800c806:	1c42      	adds	r2, r0, #1
 800c808:	d101      	bne.n	800c80e <__sflush_r+0x7a>
 800c80a:	682b      	ldr	r3, [r5, #0]
 800c80c:	b903      	cbnz	r3, 800c810 <__sflush_r+0x7c>
 800c80e:	6560      	str	r0, [r4, #84]	; 0x54
 800c810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c812:	602f      	str	r7, [r5, #0]
 800c814:	2900      	cmp	r1, #0
 800c816:	d0ca      	beq.n	800c7ae <__sflush_r+0x1a>
 800c818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c81c:	4299      	cmp	r1, r3
 800c81e:	d002      	beq.n	800c826 <__sflush_r+0x92>
 800c820:	4628      	mov	r0, r5
 800c822:	f7fb fd63 	bl	80082ec <_free_r>
 800c826:	2000      	movs	r0, #0
 800c828:	6360      	str	r0, [r4, #52]	; 0x34
 800c82a:	e7c1      	b.n	800c7b0 <__sflush_r+0x1c>
 800c82c:	6a21      	ldr	r1, [r4, #32]
 800c82e:	2301      	movs	r3, #1
 800c830:	4628      	mov	r0, r5
 800c832:	47b0      	blx	r6
 800c834:	1c41      	adds	r1, r0, #1
 800c836:	d1c7      	bne.n	800c7c8 <__sflush_r+0x34>
 800c838:	682b      	ldr	r3, [r5, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0c4      	beq.n	800c7c8 <__sflush_r+0x34>
 800c83e:	2b1d      	cmp	r3, #29
 800c840:	d001      	beq.n	800c846 <__sflush_r+0xb2>
 800c842:	2b16      	cmp	r3, #22
 800c844:	d101      	bne.n	800c84a <__sflush_r+0xb6>
 800c846:	602f      	str	r7, [r5, #0]
 800c848:	e7b1      	b.n	800c7ae <__sflush_r+0x1a>
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c850:	81a3      	strh	r3, [r4, #12]
 800c852:	e7ad      	b.n	800c7b0 <__sflush_r+0x1c>
 800c854:	690f      	ldr	r7, [r1, #16]
 800c856:	2f00      	cmp	r7, #0
 800c858:	d0a9      	beq.n	800c7ae <__sflush_r+0x1a>
 800c85a:	0793      	lsls	r3, r2, #30
 800c85c:	680e      	ldr	r6, [r1, #0]
 800c85e:	bf08      	it	eq
 800c860:	694b      	ldreq	r3, [r1, #20]
 800c862:	600f      	str	r7, [r1, #0]
 800c864:	bf18      	it	ne
 800c866:	2300      	movne	r3, #0
 800c868:	eba6 0807 	sub.w	r8, r6, r7
 800c86c:	608b      	str	r3, [r1, #8]
 800c86e:	f1b8 0f00 	cmp.w	r8, #0
 800c872:	dd9c      	ble.n	800c7ae <__sflush_r+0x1a>
 800c874:	6a21      	ldr	r1, [r4, #32]
 800c876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c878:	4643      	mov	r3, r8
 800c87a:	463a      	mov	r2, r7
 800c87c:	4628      	mov	r0, r5
 800c87e:	47b0      	blx	r6
 800c880:	2800      	cmp	r0, #0
 800c882:	dc06      	bgt.n	800c892 <__sflush_r+0xfe>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	e78e      	b.n	800c7b0 <__sflush_r+0x1c>
 800c892:	4407      	add	r7, r0
 800c894:	eba8 0800 	sub.w	r8, r8, r0
 800c898:	e7e9      	b.n	800c86e <__sflush_r+0xda>
 800c89a:	bf00      	nop
 800c89c:	20400001 	.word	0x20400001

0800c8a0 <_fflush_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	690b      	ldr	r3, [r1, #16]
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	b913      	cbnz	r3, 800c8b0 <_fflush_r+0x10>
 800c8aa:	2500      	movs	r5, #0
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}
 800c8b0:	b118      	cbz	r0, 800c8ba <_fflush_r+0x1a>
 800c8b2:	6983      	ldr	r3, [r0, #24]
 800c8b4:	b90b      	cbnz	r3, 800c8ba <_fflush_r+0x1a>
 800c8b6:	f7fe fa41 	bl	800ad3c <__sinit>
 800c8ba:	4b14      	ldr	r3, [pc, #80]	; (800c90c <_fflush_r+0x6c>)
 800c8bc:	429c      	cmp	r4, r3
 800c8be:	d11b      	bne.n	800c8f8 <_fflush_r+0x58>
 800c8c0:	686c      	ldr	r4, [r5, #4]
 800c8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d0ef      	beq.n	800c8aa <_fflush_r+0xa>
 800c8ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8cc:	07d0      	lsls	r0, r2, #31
 800c8ce:	d404      	bmi.n	800c8da <_fflush_r+0x3a>
 800c8d0:	0599      	lsls	r1, r3, #22
 800c8d2:	d402      	bmi.n	800c8da <_fflush_r+0x3a>
 800c8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8d6:	f7fe fe42 	bl	800b55e <__retarget_lock_acquire_recursive>
 800c8da:	4628      	mov	r0, r5
 800c8dc:	4621      	mov	r1, r4
 800c8de:	f7ff ff59 	bl	800c794 <__sflush_r>
 800c8e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8e4:	07da      	lsls	r2, r3, #31
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	d4e0      	bmi.n	800c8ac <_fflush_r+0xc>
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	059b      	lsls	r3, r3, #22
 800c8ee:	d4dd      	bmi.n	800c8ac <_fflush_r+0xc>
 800c8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8f2:	f7fe fe35 	bl	800b560 <__retarget_lock_release_recursive>
 800c8f6:	e7d9      	b.n	800c8ac <_fflush_r+0xc>
 800c8f8:	4b05      	ldr	r3, [pc, #20]	; (800c910 <_fflush_r+0x70>)
 800c8fa:	429c      	cmp	r4, r3
 800c8fc:	d101      	bne.n	800c902 <_fflush_r+0x62>
 800c8fe:	68ac      	ldr	r4, [r5, #8]
 800c900:	e7df      	b.n	800c8c2 <_fflush_r+0x22>
 800c902:	4b04      	ldr	r3, [pc, #16]	; (800c914 <_fflush_r+0x74>)
 800c904:	429c      	cmp	r4, r3
 800c906:	bf08      	it	eq
 800c908:	68ec      	ldreq	r4, [r5, #12]
 800c90a:	e7da      	b.n	800c8c2 <_fflush_r+0x22>
 800c90c:	0800ce6c 	.word	0x0800ce6c
 800c910:	0800ce8c 	.word	0x0800ce8c
 800c914:	0800ce4c 	.word	0x0800ce4c

0800c918 <fiprintf>:
 800c918:	b40e      	push	{r1, r2, r3}
 800c91a:	b503      	push	{r0, r1, lr}
 800c91c:	4601      	mov	r1, r0
 800c91e:	ab03      	add	r3, sp, #12
 800c920:	4805      	ldr	r0, [pc, #20]	; (800c938 <fiprintf+0x20>)
 800c922:	f853 2b04 	ldr.w	r2, [r3], #4
 800c926:	6800      	ldr	r0, [r0, #0]
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	f7ff fc95 	bl	800c258 <_vfiprintf_r>
 800c92e:	b002      	add	sp, #8
 800c930:	f85d eb04 	ldr.w	lr, [sp], #4
 800c934:	b003      	add	sp, #12
 800c936:	4770      	bx	lr
 800c938:	20000010 	.word	0x20000010

0800c93c <_lseek_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4d07      	ldr	r5, [pc, #28]	; (800c95c <_lseek_r+0x20>)
 800c940:	4604      	mov	r4, r0
 800c942:	4608      	mov	r0, r1
 800c944:	4611      	mov	r1, r2
 800c946:	2200      	movs	r2, #0
 800c948:	602a      	str	r2, [r5, #0]
 800c94a:	461a      	mov	r2, r3
 800c94c:	f7f5 fa6a 	bl	8001e24 <_lseek>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d102      	bne.n	800c95a <_lseek_r+0x1e>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b103      	cbz	r3, 800c95a <_lseek_r+0x1e>
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	20000ae0 	.word	0x20000ae0

0800c960 <__swhatbuf_r>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	460e      	mov	r6, r1
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	2900      	cmp	r1, #0
 800c96a:	b096      	sub	sp, #88	; 0x58
 800c96c:	4614      	mov	r4, r2
 800c96e:	461d      	mov	r5, r3
 800c970:	da08      	bge.n	800c984 <__swhatbuf_r+0x24>
 800c972:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	602a      	str	r2, [r5, #0]
 800c97a:	061a      	lsls	r2, r3, #24
 800c97c:	d410      	bmi.n	800c9a0 <__swhatbuf_r+0x40>
 800c97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c982:	e00e      	b.n	800c9a2 <__swhatbuf_r+0x42>
 800c984:	466a      	mov	r2, sp
 800c986:	f000 f8b5 	bl	800caf4 <_fstat_r>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	dbf1      	blt.n	800c972 <__swhatbuf_r+0x12>
 800c98e:	9a01      	ldr	r2, [sp, #4]
 800c990:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c994:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c998:	425a      	negs	r2, r3
 800c99a:	415a      	adcs	r2, r3
 800c99c:	602a      	str	r2, [r5, #0]
 800c99e:	e7ee      	b.n	800c97e <__swhatbuf_r+0x1e>
 800c9a0:	2340      	movs	r3, #64	; 0x40
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	b016      	add	sp, #88	; 0x58
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9ac <__smakebuf_r>:
 800c9ac:	898b      	ldrh	r3, [r1, #12]
 800c9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9b0:	079d      	lsls	r5, r3, #30
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	d507      	bpl.n	800c9c8 <__smakebuf_r+0x1c>
 800c9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	6123      	str	r3, [r4, #16]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	6163      	str	r3, [r4, #20]
 800c9c4:	b002      	add	sp, #8
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	ab01      	add	r3, sp, #4
 800c9ca:	466a      	mov	r2, sp
 800c9cc:	f7ff ffc8 	bl	800c960 <__swhatbuf_r>
 800c9d0:	9900      	ldr	r1, [sp, #0]
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7fb fcf5 	bl	80083c4 <_malloc_r>
 800c9da:	b948      	cbnz	r0, 800c9f0 <__smakebuf_r+0x44>
 800c9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e0:	059a      	lsls	r2, r3, #22
 800c9e2:	d4ef      	bmi.n	800c9c4 <__smakebuf_r+0x18>
 800c9e4:	f023 0303 	bic.w	r3, r3, #3
 800c9e8:	f043 0302 	orr.w	r3, r3, #2
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	e7e3      	b.n	800c9b8 <__smakebuf_r+0xc>
 800c9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ca28 <__smakebuf_r+0x7c>)
 800c9f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	6020      	str	r0, [r4, #0]
 800c9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9fc:	81a3      	strh	r3, [r4, #12]
 800c9fe:	9b00      	ldr	r3, [sp, #0]
 800ca00:	6163      	str	r3, [r4, #20]
 800ca02:	9b01      	ldr	r3, [sp, #4]
 800ca04:	6120      	str	r0, [r4, #16]
 800ca06:	b15b      	cbz	r3, 800ca20 <__smakebuf_r+0x74>
 800ca08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f000 f883 	bl	800cb18 <_isatty_r>
 800ca12:	b128      	cbz	r0, 800ca20 <__smakebuf_r+0x74>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f023 0303 	bic.w	r3, r3, #3
 800ca1a:	f043 0301 	orr.w	r3, r3, #1
 800ca1e:	81a3      	strh	r3, [r4, #12]
 800ca20:	89a0      	ldrh	r0, [r4, #12]
 800ca22:	4305      	orrs	r5, r0
 800ca24:	81a5      	strh	r5, [r4, #12]
 800ca26:	e7cd      	b.n	800c9c4 <__smakebuf_r+0x18>
 800ca28:	0800acd5 	.word	0x0800acd5

0800ca2c <memmove>:
 800ca2c:	4288      	cmp	r0, r1
 800ca2e:	b510      	push	{r4, lr}
 800ca30:	eb01 0402 	add.w	r4, r1, r2
 800ca34:	d902      	bls.n	800ca3c <memmove+0x10>
 800ca36:	4284      	cmp	r4, r0
 800ca38:	4623      	mov	r3, r4
 800ca3a:	d807      	bhi.n	800ca4c <memmove+0x20>
 800ca3c:	1e43      	subs	r3, r0, #1
 800ca3e:	42a1      	cmp	r1, r4
 800ca40:	d008      	beq.n	800ca54 <memmove+0x28>
 800ca42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca4a:	e7f8      	b.n	800ca3e <memmove+0x12>
 800ca4c:	4402      	add	r2, r0
 800ca4e:	4601      	mov	r1, r0
 800ca50:	428a      	cmp	r2, r1
 800ca52:	d100      	bne.n	800ca56 <memmove+0x2a>
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca5e:	e7f7      	b.n	800ca50 <memmove+0x24>

0800ca60 <_realloc_r>:
 800ca60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca64:	4680      	mov	r8, r0
 800ca66:	4614      	mov	r4, r2
 800ca68:	460e      	mov	r6, r1
 800ca6a:	b921      	cbnz	r1, 800ca76 <_realloc_r+0x16>
 800ca6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	4611      	mov	r1, r2
 800ca72:	f7fb bca7 	b.w	80083c4 <_malloc_r>
 800ca76:	b92a      	cbnz	r2, 800ca84 <_realloc_r+0x24>
 800ca78:	f7fb fc38 	bl	80082ec <_free_r>
 800ca7c:	4625      	mov	r5, r4
 800ca7e:	4628      	mov	r0, r5
 800ca80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca84:	f000 f858 	bl	800cb38 <_malloc_usable_size_r>
 800ca88:	4284      	cmp	r4, r0
 800ca8a:	4607      	mov	r7, r0
 800ca8c:	d802      	bhi.n	800ca94 <_realloc_r+0x34>
 800ca8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca92:	d812      	bhi.n	800caba <_realloc_r+0x5a>
 800ca94:	4621      	mov	r1, r4
 800ca96:	4640      	mov	r0, r8
 800ca98:	f7fb fc94 	bl	80083c4 <_malloc_r>
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d0ed      	beq.n	800ca7e <_realloc_r+0x1e>
 800caa2:	42bc      	cmp	r4, r7
 800caa4:	4622      	mov	r2, r4
 800caa6:	4631      	mov	r1, r6
 800caa8:	bf28      	it	cs
 800caaa:	463a      	movcs	r2, r7
 800caac:	f7fb fc08 	bl	80082c0 <memcpy>
 800cab0:	4631      	mov	r1, r6
 800cab2:	4640      	mov	r0, r8
 800cab4:	f7fb fc1a 	bl	80082ec <_free_r>
 800cab8:	e7e1      	b.n	800ca7e <_realloc_r+0x1e>
 800caba:	4635      	mov	r5, r6
 800cabc:	e7df      	b.n	800ca7e <_realloc_r+0x1e>
	...

0800cac0 <_read_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4d07      	ldr	r5, [pc, #28]	; (800cae0 <_read_r+0x20>)
 800cac4:	4604      	mov	r4, r0
 800cac6:	4608      	mov	r0, r1
 800cac8:	4611      	mov	r1, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	602a      	str	r2, [r5, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	f7f5 f948 	bl	8001d64 <_read>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d102      	bne.n	800cade <_read_r+0x1e>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	b103      	cbz	r3, 800cade <_read_r+0x1e>
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	20000ae0 	.word	0x20000ae0

0800cae4 <abort>:
 800cae4:	b508      	push	{r3, lr}
 800cae6:	2006      	movs	r0, #6
 800cae8:	f000 f856 	bl	800cb98 <raise>
 800caec:	2001      	movs	r0, #1
 800caee:	f7f5 f92f 	bl	8001d50 <_exit>
	...

0800caf4 <_fstat_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d07      	ldr	r5, [pc, #28]	; (800cb14 <_fstat_r+0x20>)
 800caf8:	2300      	movs	r3, #0
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	4611      	mov	r1, r2
 800cb00:	602b      	str	r3, [r5, #0]
 800cb02:	f7f5 f974 	bl	8001dee <_fstat>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	d102      	bne.n	800cb10 <_fstat_r+0x1c>
 800cb0a:	682b      	ldr	r3, [r5, #0]
 800cb0c:	b103      	cbz	r3, 800cb10 <_fstat_r+0x1c>
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	20000ae0 	.word	0x20000ae0

0800cb18 <_isatty_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d06      	ldr	r5, [pc, #24]	; (800cb34 <_isatty_r+0x1c>)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	602b      	str	r3, [r5, #0]
 800cb24:	f7f5 f973 	bl	8001e0e <_isatty>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_isatty_r+0x1a>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_isatty_r+0x1a>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	20000ae0 	.word	0x20000ae0

0800cb38 <_malloc_usable_size_r>:
 800cb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb3c:	1f18      	subs	r0, r3, #4
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	bfbc      	itt	lt
 800cb42:	580b      	ldrlt	r3, [r1, r0]
 800cb44:	18c0      	addlt	r0, r0, r3
 800cb46:	4770      	bx	lr

0800cb48 <_raise_r>:
 800cb48:	291f      	cmp	r1, #31
 800cb4a:	b538      	push	{r3, r4, r5, lr}
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	460d      	mov	r5, r1
 800cb50:	d904      	bls.n	800cb5c <_raise_r+0x14>
 800cb52:	2316      	movs	r3, #22
 800cb54:	6003      	str	r3, [r0, #0]
 800cb56:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb5e:	b112      	cbz	r2, 800cb66 <_raise_r+0x1e>
 800cb60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb64:	b94b      	cbnz	r3, 800cb7a <_raise_r+0x32>
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 f830 	bl	800cbcc <_getpid_r>
 800cb6c:	462a      	mov	r2, r5
 800cb6e:	4601      	mov	r1, r0
 800cb70:	4620      	mov	r0, r4
 800cb72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb76:	f000 b817 	b.w	800cba8 <_kill_r>
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d00a      	beq.n	800cb94 <_raise_r+0x4c>
 800cb7e:	1c59      	adds	r1, r3, #1
 800cb80:	d103      	bne.n	800cb8a <_raise_r+0x42>
 800cb82:	2316      	movs	r3, #22
 800cb84:	6003      	str	r3, [r0, #0]
 800cb86:	2001      	movs	r0, #1
 800cb88:	e7e7      	b.n	800cb5a <_raise_r+0x12>
 800cb8a:	2400      	movs	r4, #0
 800cb8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb90:	4628      	mov	r0, r5
 800cb92:	4798      	blx	r3
 800cb94:	2000      	movs	r0, #0
 800cb96:	e7e0      	b.n	800cb5a <_raise_r+0x12>

0800cb98 <raise>:
 800cb98:	4b02      	ldr	r3, [pc, #8]	; (800cba4 <raise+0xc>)
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	6818      	ldr	r0, [r3, #0]
 800cb9e:	f7ff bfd3 	b.w	800cb48 <_raise_r>
 800cba2:	bf00      	nop
 800cba4:	20000010 	.word	0x20000010

0800cba8 <_kill_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d07      	ldr	r5, [pc, #28]	; (800cbc8 <_kill_r+0x20>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	602b      	str	r3, [r5, #0]
 800cbb6:	f7f5 f8bb 	bl	8001d30 <_kill>
 800cbba:	1c43      	adds	r3, r0, #1
 800cbbc:	d102      	bne.n	800cbc4 <_kill_r+0x1c>
 800cbbe:	682b      	ldr	r3, [r5, #0]
 800cbc0:	b103      	cbz	r3, 800cbc4 <_kill_r+0x1c>
 800cbc2:	6023      	str	r3, [r4, #0]
 800cbc4:	bd38      	pop	{r3, r4, r5, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20000ae0 	.word	0x20000ae0

0800cbcc <_getpid_r>:
 800cbcc:	f7f5 b8a8 	b.w	8001d20 <_getpid>

0800cbd0 <_init>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	bf00      	nop
 800cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd6:	bc08      	pop	{r3}
 800cbd8:	469e      	mov	lr, r3
 800cbda:	4770      	bx	lr

0800cbdc <_fini>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	bf00      	nop
 800cbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe2:	bc08      	pop	{r3}
 800cbe4:	469e      	mov	lr, r3
 800cbe6:	4770      	bx	lr
