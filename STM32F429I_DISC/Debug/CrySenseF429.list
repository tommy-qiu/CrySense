
CrySenseF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800cd98  0800cd98  0001cd98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d274  0800d274  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d274  0800d274  0001d274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d27c  0800d27c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d27c  0800d27c  0001d27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d280  0800d280  0001d280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000045e4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200047c8  200047c8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000217f0  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a79  00000000  00000000  00041a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00046480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019f8  00000000  00000000  00048050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002983c  00000000  00000000  00049a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020f09  00000000  00000000  00073284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef816  00000000  00000000  0009418d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001839a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b9c  00000000  00000000  001839f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cd80 	.word	0x0800cd80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800cd80 	.word	0x0800cd80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001038:	1d39      	adds	r1, r7, #4
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2201      	movs	r2, #1
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <__io_putchar+0x20>)
 8001042:	f005 f8f0 	bl	8006226 <HAL_UART_Transmit>
  return ch;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002f8 	.word	0x200002f8

08001054 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	//printf("HERE CALLBACK\n\r");
	data_ready = 1;
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <HAL_I2S_RxCpltCallback+0x1c>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream0_IRQn);
 8001062:	200b      	movs	r0, #11
 8001064:	f001 f8ba 	bl	80021dc <HAL_NVIC_ClearPendingIRQ>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000370 	.word	0x20000370

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f000 ff6d 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f841 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f000 f9d5 	bl	8001430 <MX_GPIO_Init>
  MX_DMA_Init();
 8001086:	f000 f963 	bl	8001350 <MX_DMA_Init>
  MX_CRC_Init();
 800108a:	f000 f8a5 	bl	80011d8 <MX_CRC_Init>
  MX_FMC_Init();
 800108e:	f000 f97f 	bl	8001390 <MX_FMC_Init>
  MX_TIM1_Init();
 8001092:	f000 f8e3 	bl	800125c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001096:	f000 f931 	bl	80012fc <MX_USART1_UART_Init>
  MX_I2S3_Init();
 800109a:	f000 f8b1 	bl	8001200 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *) audio_buffer, BUFFER_SIZE);
 800109e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a2:	4913      	ldr	r1, [pc, #76]	; (80010f0 <main+0x7c>)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <main+0x80>)
 80010a6:	f003 f863 	bl	8004170 <HAL_I2S_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(data_ready == 1){
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <main+0x84>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d1fb      	bne.n	80010aa <main+0x36>
		printf("here\n\r");
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <main+0x88>)
 80010b4:	f008 f94c 	bl	8009350 <iprintf>
		for(int i = 0;i<BUFFER_SIZE;i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	e00a      	b.n	80010d4 <main+0x60>
			printf("%f\n",audio_buffer[i]);
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <main+0x7c>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <main+0x8c>)
 80010ca:	f008 f941 	bl	8009350 <iprintf>
		for(int i = 0;i<BUFFER_SIZE;i++){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010da:	dbf0      	blt.n	80010be <main+0x4a>
		}
		data_ready = 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <main+0x84>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
		HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)audio_buffer, BUFFER_SIZE);
 80010e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e6:	4902      	ldr	r1, [pc, #8]	; (80010f0 <main+0x7c>)
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <main+0x80>)
 80010ea:	f003 f841 	bl	8004170 <HAL_I2S_Receive_DMA>
	if(data_ready == 1){
 80010ee:	e7dc      	b.n	80010aa <main+0x36>
 80010f0:	20000374 	.word	0x20000374
 80010f4:	20000208 	.word	0x20000208
 80010f8:	20000370 	.word	0x20000370
 80010fc:	0800cd98 	.word	0x0800cd98
 8001100:	0800cda0 	.word	0x0800cda0

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f007 f9ba 	bl	800848c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <SystemClock_Config+0xcc>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <SystemClock_Config+0xcc>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <SystemClock_Config+0xcc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <SystemClock_Config+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <SystemClock_Config+0xd0>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SystemClock_Config+0xd0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800117c:	2348      	movs	r3, #72	; 0x48
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001184:	2303      	movs	r3, #3
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f003 fc5f 	bl	8004a50 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001198:	f000 fb1a 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2102      	movs	r1, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fec1 	bl	8004f40 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011c4:	f000 fb04 	bl	80017d0 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3750      	adds	r7, #80	; 0x50
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_CRC_Init+0x20>)
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <MX_CRC_Init+0x24>)
 80011e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_CRC_Init+0x20>)
 80011e4:	f001 f808 	bl	80021f8 <HAL_CRC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011ee:	f000 faef 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000200 	.word	0x20000200
 80011fc:	40023000 	.word	0x40023000

08001200 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_I2S3_Init+0x54>)
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <MX_I2S3_Init+0x58>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2S3_Init+0x54>)
 800120c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001210:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_I2S3_Init+0x54>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_I2S3_Init+0x54>)
 800121a:	2203      	movs	r2, #3
 800121c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_I2S3_Init+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_I2S3_Init+0x54>)
 8001226:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800122a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_I2S3_Init+0x54>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_I2S3_Init+0x54>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_I2S3_Init+0x54>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_I2S3_Init+0x54>)
 8001240:	f002 fe56 	bl	8003ef0 <HAL_I2S_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800124a:	f000 fac1 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000208 	.word	0x20000208
 8001258:	40003c00 	.word	0x40003c00

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_TIM1_Init+0x98>)
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <MX_TIM1_Init+0x9c>)
 800127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_TIM1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_TIM1_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_TIM1_Init+0x98>)
 800128c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_TIM1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_TIM1_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_TIM1_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_TIM1_Init+0x98>)
 80012a6:	f004 faef 	bl	8005888 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012b0:	f000 fa8e 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_TIM1_Init+0x98>)
 80012c2:	f004 fca9 	bl	8005c18 <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012cc:	f000 fa80 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_TIM1_Init+0x98>)
 80012de:	f004 fec5 	bl	800606c <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 fa72 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200002b0 	.word	0x200002b0
 80012f8:	40010000 	.word	0x40010000

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART1_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800131c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001320:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001324:	220c      	movs	r2, #12
 8001326:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001336:	f004 ff29 	bl	800618c <HAL_UART_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001340:	f000 fa46 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002f8 	.word	0x200002f8
 800134c:	40011000 	.word	0x40011000

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_DMA_Init+0x3c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <MX_DMA_Init+0x3c>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_DMA_Init+0x3c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	200b      	movs	r0, #11
 8001378:	f000 ff06 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800137c:	200b      	movs	r0, #11
 800137e:	f000 ff1f 	bl	80021c0 <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_FMC_Init+0x98>)
 80013aa:	4a20      	ldr	r2, [pc, #128]	; (800142c <MX_FMC_Init+0x9c>)
 80013ac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_FMC_Init+0x98>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_FMC_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_FMC_Init+0x98>)
 80013bc:	2204      	movs	r2, #4
 80013be:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_FMC_Init+0x98>)
 80013c2:	2210      	movs	r2, #16
 80013c4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_FMC_Init+0x98>)
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_FMC_Init+0x98>)
 80013ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013d2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_FMC_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_FMC_Init+0x98>)
 80013dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_FMC_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_FMC_Init+0x98>)
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80013f4:	2307      	movs	r3, #7
 80013f6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80013fc:	2307      	movs	r3, #7
 80013fe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001400:	2303      	movs	r3, #3
 8001402:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_FMC_Init+0x98>)
 8001412:	f004 fa05 	bl	8005820 <HAL_SDRAM_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800141c:	f000 f9d8 	bl	80017d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000033c 	.word	0x2000033c
 800142c:	a0000140 	.word	0xa0000140

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	4bb2      	ldr	r3, [pc, #712]	; (8001714 <MX_GPIO_Init+0x2e4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4ab1      	ldr	r2, [pc, #708]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4baf      	ldr	r3, [pc, #700]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	623b      	str	r3, [r7, #32]
 8001460:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	4bab      	ldr	r3, [pc, #684]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4aaa      	ldr	r2, [pc, #680]	; (8001714 <MX_GPIO_Init+0x2e4>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4ba8      	ldr	r3, [pc, #672]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4ba4      	ldr	r3, [pc, #656]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4aa3      	ldr	r2, [pc, #652]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4ba1      	ldr	r3, [pc, #644]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b9d      	ldr	r3, [pc, #628]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a9c      	ldr	r2, [pc, #624]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b9a      	ldr	r3, [pc, #616]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b96      	ldr	r3, [pc, #600]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a95      	ldr	r2, [pc, #596]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b93      	ldr	r3, [pc, #588]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b8f      	ldr	r3, [pc, #572]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a8e      	ldr	r2, [pc, #568]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a87      	ldr	r2, [pc, #540]	; (8001714 <MX_GPIO_Init+0x2e4>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b85      	ldr	r3, [pc, #532]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b81      	ldr	r3, [pc, #516]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a80      	ldr	r2, [pc, #512]	; (8001714 <MX_GPIO_Init+0x2e4>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b7e      	ldr	r3, [pc, #504]	; (8001714 <MX_GPIO_Init+0x2e4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2116      	movs	r1, #22
 800152a:	487b      	ldr	r0, [pc, #492]	; (8001718 <MX_GPIO_Init+0x2e8>)
 800152c:	f001 fb9c 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	4879      	ldr	r0, [pc, #484]	; (800171c <MX_GPIO_Init+0x2ec>)
 8001536:	f001 fb97 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001540:	4877      	ldr	r0, [pc, #476]	; (8001720 <MX_GPIO_Init+0x2f0>)
 8001542:	f001 fb91 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800154c:	4875      	ldr	r0, [pc, #468]	; (8001724 <MX_GPIO_Init+0x2f4>)
 800154e:	f001 fb8b 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001552:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001564:	2305      	movs	r3, #5
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	486e      	ldr	r0, [pc, #440]	; (8001728 <MX_GPIO_Init+0x2f8>)
 8001570:	f001 f9ce 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001586:	230e      	movs	r3, #14
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4865      	ldr	r0, [pc, #404]	; (8001728 <MX_GPIO_Init+0x2f8>)
 8001592:	f001 f9bd 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001596:	2316      	movs	r3, #22
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	485a      	ldr	r0, [pc, #360]	; (8001718 <MX_GPIO_Init+0x2e8>)
 80015ae:	f001 f9af 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80015b2:	2307      	movs	r3, #7
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4855      	ldr	r0, [pc, #340]	; (800171c <MX_GPIO_Init+0x2ec>)
 80015c8:	f001 f9a2 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 80015cc:	2358      	movs	r3, #88	; 0x58
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015dc:	230e      	movs	r3, #14
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	484d      	ldr	r0, [pc, #308]	; (800171c <MX_GPIO_Init+0x2ec>)
 80015e8:	f001 f992 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4846      	ldr	r0, [pc, #280]	; (800171c <MX_GPIO_Init+0x2ec>)
 8001604:	f001 f984 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001608:	2320      	movs	r3, #32
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800160c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	483e      	ldr	r0, [pc, #248]	; (8001718 <MX_GPIO_Init+0x2e8>)
 800161e:	f001 f977 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001622:	2303      	movs	r3, #3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001632:	2309      	movs	r3, #9
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	483b      	ldr	r0, [pc, #236]	; (800172c <MX_GPIO_Init+0x2fc>)
 800163e:	f001 f967 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4835      	ldr	r0, [pc, #212]	; (800172c <MX_GPIO_Init+0x2fc>)
 8001656:	f001 f95b 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800165a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800166c:	230e      	movs	r3, #14
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	482d      	ldr	r0, [pc, #180]	; (800172c <MX_GPIO_Init+0x2fc>)
 8001678:	f001 f94a 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800167c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4823      	ldr	r0, [pc, #140]	; (8001720 <MX_GPIO_Init+0x2f0>)
 8001692:	f001 f93d 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001696:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	481c      	ldr	r0, [pc, #112]	; (8001720 <MX_GPIO_Init+0x2f0>)
 80016b0:	f001 f92e 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80016b4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c6:	230e      	movs	r3, #14
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <MX_GPIO_Init+0x2f4>)
 80016d2:	f001 f91d 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 80016d6:	23c0      	movs	r3, #192	; 0xc0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e6:	230e      	movs	r3, #14
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <MX_GPIO_Init+0x2e8>)
 80016f2:	f001 f90d 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80016f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fc:	2312      	movs	r3, #18
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	2301      	movs	r3, #1
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001708:	2304      	movs	r3, #4
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	e00e      	b.n	8001730 <MX_GPIO_Init+0x300>
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40020800 	.word	0x40020800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021800 	.word	0x40021800
 8001728:	40021400 	.word	0x40021400
 800172c:	40020400 	.word	0x40020400
 8001730:	4619      	mov	r1, r3
 8001732:	481b      	ldr	r0, [pc, #108]	; (80017a0 <MX_GPIO_Init+0x370>)
 8001734:	f001 f8ec 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001738:	2348      	movs	r3, #72	; 0x48
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001748:	230e      	movs	r3, #14
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_GPIO_Init+0x374>)
 8001754:	f001 f8dc 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800176a:	2309      	movs	r3, #9
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_GPIO_Init+0x378>)
 8001776:	f001 f8cb 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800177a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_GPIO_Init+0x378>)
 8001794:	f001 f8bc 	bl	8002910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001798:	bf00      	nop
 800179a:	3738      	adds	r7, #56	; 0x38
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021800 	.word	0x40021800

080017ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017be:	f000 fbed 	bl	8001f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40001000 	.word	0x40001000

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_MspInit+0x54>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_MspInit+0x54>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_MspInit+0x54>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_MspInit+0x54>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_MspInit+0x54>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_MspInit+0x54>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	210f      	movs	r1, #15
 800181e:	f06f 0001 	mvn.w	r0, #1
 8001822:	f000 fcb1 	bl	8002188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_CRC_MspInit+0x3c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10d      	bne.n	8001862 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_CRC_MspInit+0x40>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_CRC_MspInit+0x40>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_CRC_MspInit+0x40>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023000 	.word	0x40023000
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	; 0x58
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2230      	movs	r2, #48	; 0x30
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f006 fdf7 	bl	800848c <memset>
  if(hi2s->Instance==SPI3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_I2S_MspInit+0x154>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f040 808c 	bne.w	80019c2 <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fd92 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80018c6:	f7ff ff83 	bl	80017d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a3f      	ldr	r2, [pc, #252]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 80018d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a31      	ldr	r2, [pc, #196]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_I2S_MspInit+0x158>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800191e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001930:	2306      	movs	r3, #6
 8001932:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001938:	4619      	mov	r1, r3
 800193a:	4826      	ldr	r0, [pc, #152]	; (80019d4 <HAL_I2S_MspInit+0x15c>)
 800193c:	f000 ffe8 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001940:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001952:	2306      	movs	r3, #6
 8001954:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800195a:	4619      	mov	r1, r3
 800195c:	481e      	ldr	r0, [pc, #120]	; (80019d8 <HAL_I2S_MspInit+0x160>)
 800195e:	f000 ffd7 	bl	8002910 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_I2S_MspInit+0x164>)
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_I2S_MspInit+0x168>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_I2S_MspInit+0x164>)
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_I2S_MspInit+0x164>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_I2S_MspInit+0x164>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_I2S_MspInit+0x164>)
 800197c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001980:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_I2S_MspInit+0x164>)
 8001984:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001988:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_I2S_MspInit+0x164>)
 800198c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001990:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_I2S_MspInit+0x164>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_I2S_MspInit+0x164>)
 800199a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199e:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_I2S_MspInit+0x164>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <HAL_I2S_MspInit+0x164>)
 80019a8:	f000 fc42 	bl	8002230 <HAL_DMA_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 80019b2:	f7ff ff0d 	bl	80017d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_I2S_MspInit+0x164>)
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_I2S_MspInit+0x164>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3758      	adds	r7, #88	; 0x58
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40003c00 	.word	0x40003c00
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020800 	.word	0x40020800
 80019dc:	20000250 	.word	0x20000250
 80019e0:	40026010 	.word	0x40026010

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_TIM_Base_MspInit+0x3c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10d      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_TIM_Base_MspInit+0x40>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_TIM_Base_MspInit+0x40>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_TIM_Base_MspInit+0x40>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_UART_MspInit+0x84>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12c      	bne.n	8001aa4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_UART_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a82:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a94:	2307      	movs	r3, #7
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <HAL_UART_MspInit+0x8c>)
 8001aa0:	f000 ff36 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_FMC_MspInit+0x104>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d16f      	bne.n	8001bb4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_FMC_MspInit+0x104>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_FMC_MspInit+0x108>)
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	4a37      	ldr	r2, [pc, #220]	; (8001bc0 <HAL_FMC_MspInit+0x108>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6393      	str	r3, [r2, #56]	; 0x38
 8001aea:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_FMC_MspInit+0x108>)
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001af6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001afa:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b08:	230c      	movs	r3, #12
 8001b0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	482c      	ldr	r0, [pc, #176]	; (8001bc4 <HAL_FMC_MspInit+0x10c>)
 8001b12:	f000 fefd 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001b16:	2301      	movs	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b26:	230c      	movs	r3, #12
 8001b28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <HAL_FMC_MspInit+0x110>)
 8001b30:	f000 feee 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001b34:	f248 1333 	movw	r3, #33075	; 0x8133
 8001b38:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b46:	230c      	movs	r3, #12
 8001b48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481f      	ldr	r0, [pc, #124]	; (8001bcc <HAL_FMC_MspInit+0x114>)
 8001b50:	f000 fede 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001b54:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b58:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b66:	230c      	movs	r3, #12
 8001b68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4818      	ldr	r0, [pc, #96]	; (8001bd0 <HAL_FMC_MspInit+0x118>)
 8001b70:	f000 fece 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001b74:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b78:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b86:	230c      	movs	r3, #12
 8001b88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <HAL_FMC_MspInit+0x11c>)
 8001b90:	f000 febe 	bl	8002910 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001b94:	2360      	movs	r3, #96	; 0x60
 8001b96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <HAL_FMC_MspInit+0x120>)
 8001bae:	f000 feaf 	bl	8002910 <HAL_GPIO_Init>
 8001bb2:	e000      	b.n	8001bb6 <HAL_FMC_MspInit+0xfe>
    return;
 8001bb4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20004374 	.word	0x20004374
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40020400 	.word	0x40020400

08001bdc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001be4:	f7ff ff68 	bl	8001ab8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_InitTick+0xe4>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <HAL_InitTick+0xe4>)
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_InitTick+0xe4>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c1c:	f107 0210 	add.w	r2, r7, #16
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fbaa 	bl	8005380 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c36:	f003 fb7b 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8001c3a:	6378      	str	r0, [r7, #52]	; 0x34
 8001c3c:	e004      	b.n	8001c48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c3e:	f003 fb77 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8001c42:	4603      	mov	r3, r0
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_InitTick+0xe8>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	3b01      	subs	r3, #1
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_InitTick+0xec>)
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_InitTick+0xf0>)
 8001c5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_InitTick+0xec>)
 8001c5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c64:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_InitTick+0xec>)
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_InitTick+0xec>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_InitTick+0xec>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_InitTick+0xec>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c7c:	4817      	ldr	r0, [pc, #92]	; (8001cdc <HAL_InitTick+0xec>)
 8001c7e:	f003 fe03 	bl	8005888 <HAL_TIM_Base_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c90:	4812      	ldr	r0, [pc, #72]	; (8001cdc <HAL_InitTick+0xec>)
 8001c92:	f003 fe49 	bl	8005928 <HAL_TIM_Base_Start_IT>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d111      	bne.n	8001cc8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ca4:	2036      	movs	r0, #54	; 0x36
 8001ca6:	f000 fa8b 	bl	80021c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d808      	bhi.n	8001cc2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	2036      	movs	r0, #54	; 0x36
 8001cb6:	f000 fa67 	bl	8002188 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_InitTick+0xf4>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e002      	b.n	8001cc8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3738      	adds	r7, #56	; 0x38
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	431bde83 	.word	0x431bde83
 8001cdc:	20004378 	.word	0x20004378
 8001ce0:	40001000 	.word	0x40001000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	HAL_I2S_RxCpltCallback(DMA1_Stream0_IRQn);
 8001d18:	200b      	movs	r0, #11
 8001d1a:	f7ff f99b 	bl	8001054 <HAL_I2S_RxCpltCallback>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA1_Stream0_IRQHandler+0x14>)
 8001d20:	f000 fb8c 	bl	800243c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000250 	.word	0x20000250

08001d2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <TIM6_DAC_IRQHandler+0x10>)
 8001d32:	f003 fe69 	bl	8005a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20004378 	.word	0x20004378

08001d40 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <OTG_HS_IRQHandler+0x10>)
 8001d46:	f000 ffa8 	bl	8002c9a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200044b4 	.word	0x200044b4

08001d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_kill>:

int _kill(int pid, int sig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d6e:	f006 fb4d 	bl	800840c <__errno>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2216      	movs	r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
  return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_exit>:

void _exit (int status)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ffe7 	bl	8001d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d96:	e7fe      	b.n	8001d96 <_exit+0x12>

08001d98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e00a      	b.n	8001dc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001daa:	f3af 8000 	nop.w
 8001dae:	4601      	mov	r1, r0
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	b2ca      	uxtb	r2, r1
 8001db8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf0      	blt.n	8001daa <_read+0x12>
  }

  return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e009      	b.n	8001df8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	60ba      	str	r2, [r7, #8]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f91f 	bl	8001030 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf1      	blt.n	8001de4 <_write+0x12>
  }
  return len;
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_close>:

int _close(int file)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e32:	605a      	str	r2, [r3, #4]
  return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_isatty>:

int _isatty(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <_sbrk+0x5c>)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <_sbrk+0x60>)
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <_sbrk+0x64>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <_sbrk+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d207      	bcs.n	8001eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea4:	f006 fab2 	bl	800840c <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	220c      	movs	r2, #12
 8001eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <_sbrk+0x64>)
 8001ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20030000 	.word	0x20030000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	200043c0 	.word	0x200043c0
 8001edc:	200047c8 	.word	0x200047c8

08001ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <SystemInit+0x20>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <SystemInit+0x20>)
 8001eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f0a:	490e      	ldr	r1, [pc, #56]	; (8001f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f20:	4c0b      	ldr	r4, [pc, #44]	; (8001f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f2e:	f7ff ffd7 	bl	8001ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f32:	f006 fa71 	bl	8008418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f36:	f7ff f89d 	bl	8001074 <main>
  bx  lr    
 8001f3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f48:	0800d284 	.word	0x0800d284
  ldr r2, =_sbss
 8001f4c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f50:	200047c8 	.word	0x200047c8

08001f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <HAL_Init+0x40>)
 8001f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <HAL_Init+0x40>)
 8001f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_Init+0x40>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f000 f8f6 	bl	8002172 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fe32 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8c:	f7ff fc26 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	200043c4 	.word	0x200043c4

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200043c4 	.word	0x200043c4

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0c      	blt.n	80020a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <__NVIC_ClearPendingIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	3360      	adds	r3, #96	; 0x60
 80020a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ff2e 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219a:	f7ff ff43 	bl	8002024 <__NVIC_GetPriorityGrouping>
 800219e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	6978      	ldr	r0, [r7, #20]
 80021a6:	f7ff ffb1 	bl	800210c <NVIC_EncodePriority>
 80021aa:	4602      	mov	r2, r0
 80021ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff80 	bl	80020b8 <__NVIC_SetPriority>
}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff36 	bl	8002040 <__NVIC_EnableIRQ>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff46 	bl	800207c <__NVIC_ClearPendingIRQ>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	795b      	ldrb	r3, [r3, #5]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fb0a 	bl	8001834 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff fec2 	bl	8001fc4 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e099      	b.n	8002380 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226c:	e00f      	b.n	800228e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800226e:	f7ff fea9 	bl	8001fc4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b05      	cmp	r3, #5
 800227a:	d908      	bls.n	800228e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2203      	movs	r2, #3
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e078      	b.n	8002380 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e8      	bne.n	800226e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <HAL_DMA_Init+0x158>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d107      	bne.n	80022f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	4313      	orrs	r3, r2
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0307 	bic.w	r3, r3, #7
 800230e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2b04      	cmp	r3, #4
 8002320:	d117      	bne.n	8002352 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00e      	beq.n	8002352 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fa6f 	bl	8002818 <DMA_CheckFifoParam>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800234e:	2301      	movs	r3, #1
 8002350:	e016      	b.n	8002380 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fa26 	bl	80027ac <DMA_CalcBaseAndBitshift>
 8002360:	4603      	mov	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	223f      	movs	r2, #63	; 0x3f
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	f010803f 	.word	0xf010803f

0800238c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_DMA_Start_IT+0x26>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e040      	b.n	8002434 <HAL_DMA_Start_IT+0xa8>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d12f      	bne.n	8002426 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f9b8 	bl	8002750 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	223f      	movs	r2, #63	; 0x3f
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0216 	orr.w	r2, r2, #22
 80023fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e005      	b.n	8002432 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002448:	4b8e      	ldr	r3, [pc, #568]	; (8002684 <HAL_DMA_IRQHandler+0x248>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a8e      	ldr	r2, [pc, #568]	; (8002688 <HAL_DMA_IRQHandler+0x24c>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0a9b      	lsrs	r3, r3, #10
 8002454:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	2208      	movs	r2, #8
 8002468:	409a      	lsls	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01a      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2208      	movs	r2, #8
 8002496:	409a      	lsls	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2201      	movs	r2, #1
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0202 	orr.w	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2204      	movs	r2, #4
 80024e4:	409a      	lsls	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d012      	beq.n	8002514 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2204      	movs	r2, #4
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0204 	orr.w	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2210      	movs	r2, #16
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d043      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d03c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	2210      	movs	r2, #16
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d018      	beq.n	800257e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d108      	bne.n	800256c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d024      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
 800256a:	e01f      	b.n	80025ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
 800257c:	e016      	b.n	80025ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	2220      	movs	r2, #32
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 808f 	beq.w	80026dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8087 	beq.w	80026dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	2220      	movs	r2, #32
 80025d4:	409a      	lsls	r2, r3
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d136      	bne.n	8002654 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0216 	bic.w	r2, r2, #22
 80025f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002604:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <HAL_DMA_IRQHandler+0x1da>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0208 	bic.w	r2, r2, #8
 8002624:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	223f      	movs	r2, #63	; 0x3f
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002646:	2b00      	cmp	r3, #0
 8002648:	d07e      	beq.n	8002748 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
        }
        return;
 8002652:	e079      	b.n	8002748 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01d      	beq.n	800269e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	2b00      	cmp	r3, #0
 8002676:	d031      	beq.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
 8002680:	e02c      	b.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
 8002682:	bf00      	nop
 8002684:	20000000 	.word	0x20000000
 8002688:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d023      	beq.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e01e      	b.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10f      	bne.n	80026cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0210 	bic.w	r2, r2, #16
 80026ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d032      	beq.n	800274a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2205      	movs	r2, #5
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3301      	adds	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	d307      	bcc.n	8002724 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f2      	bne.n	8002708 <HAL_DMA_IRQHandler+0x2cc>
 8002722:	e000      	b.n	8002726 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002724:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
 8002746:	e000      	b.n	800274a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002748:	bf00      	nop
    }
  }
}
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800276c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d108      	bne.n	8002790 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800278e:	e007      	b.n	80027a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3b10      	subs	r3, #16
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <DMA_CalcBaseAndBitshift+0x64>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <DMA_CalcBaseAndBitshift+0x68>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d909      	bls.n	80027ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	1d1a      	adds	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58
 80027ec:	e007      	b.n	80027fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	aaaaaaab 	.word	0xaaaaaaab
 8002814:	0800cdbc 	.word	0x0800cdbc

08002818 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d11f      	bne.n	8002872 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d856      	bhi.n	80028e6 <DMA_CheckFifoParam+0xce>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <DMA_CheckFifoParam+0x28>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002851 	.word	0x08002851
 8002844:	08002863 	.word	0x08002863
 8002848:	08002851 	.word	0x08002851
 800284c:	080028e7 	.word	0x080028e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d046      	beq.n	80028ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e043      	b.n	80028ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800286a:	d140      	bne.n	80028ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002870:	e03d      	b.n	80028ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287a:	d121      	bne.n	80028c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d837      	bhi.n	80028f2 <DMA_CheckFifoParam+0xda>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <DMA_CheckFifoParam+0x70>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	08002899 	.word	0x08002899
 800288c:	0800289f 	.word	0x0800289f
 8002890:	08002899 	.word	0x08002899
 8002894:	080028b1 	.word	0x080028b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      break;
 800289c:	e030      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d025      	beq.n	80028f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ae:	e022      	b.n	80028f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b8:	d11f      	bne.n	80028fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028be:	e01c      	b.n	80028fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d903      	bls.n	80028ce <DMA_CheckFifoParam+0xb6>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d003      	beq.n	80028d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028cc:	e018      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
      break;
 80028d2:	e015      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e00b      	b.n	80028fe <DMA_CheckFifoParam+0xe6>
      break;
 80028e6:	bf00      	nop
 80028e8:	e00a      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e008      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
 80028f0:	e006      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028f2:	bf00      	nop
 80028f4:	e004      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;   
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <DMA_CheckFifoParam+0xe8>
      break;
 80028fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e177      	b.n	8002c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	f040 8166 	bne.w	8002c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d005      	beq.n	8002962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295e:	2b02      	cmp	r3, #2
 8002960:	d130      	bne.n	80029c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 0201 	and.w	r2, r3, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d017      	beq.n	8002a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d123      	bne.n	8002a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	08da      	lsrs	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3208      	adds	r2, #8
 8002a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0203 	and.w	r2, r3, #3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80c0 	beq.w	8002c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_GPIO_Init+0x324>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_GPIO_Init+0x324>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_GPIO_Init+0x324>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ab2:	4a61      	ldr	r2, [pc, #388]	; (8002c38 <HAL_GPIO_Init+0x328>)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_GPIO_Init+0x32c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d037      	beq.n	8002b4e <HAL_GPIO_Init+0x23e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_GPIO_Init+0x330>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d031      	beq.n	8002b4a <HAL_GPIO_Init+0x23a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <HAL_GPIO_Init+0x334>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02b      	beq.n	8002b46 <HAL_GPIO_Init+0x236>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a55      	ldr	r2, [pc, #340]	; (8002c48 <HAL_GPIO_Init+0x338>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d025      	beq.n	8002b42 <HAL_GPIO_Init+0x232>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_GPIO_Init+0x33c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <HAL_GPIO_Init+0x22e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a53      	ldr	r2, [pc, #332]	; (8002c50 <HAL_GPIO_Init+0x340>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d019      	beq.n	8002b3a <HAL_GPIO_Init+0x22a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_GPIO_Init+0x344>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x226>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <HAL_GPIO_Init+0x348>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_Init+0x222>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_GPIO_Init+0x34c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x21e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x350>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_Init+0x21a>
 8002b26:	2309      	movs	r3, #9
 8002b28:	e012      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	e010      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	e00e      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e00c      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b36:	2306      	movs	r3, #6
 8002b38:	e00a      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	e008      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b3e:	2304      	movs	r3, #4
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e004      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_GPIO_Init+0x240>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	f002 0203 	and.w	r2, r2, #3
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b60:	4935      	ldr	r1, [pc, #212]	; (8002c38 <HAL_GPIO_Init+0x328>)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3302      	adds	r3, #2
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bbc:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be6:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_GPIO_Init+0x354>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b0f      	cmp	r3, #15
 8002c20:	f67f ae84 	bls.w	800292c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020400 	.word	0x40020400
 8002c44:	40020800 	.word	0x40020800
 8002c48:	40020c00 	.word	0x40020c00
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40021400 	.word	0x40021400
 8002c54:	40021800 	.word	0x40021800
 8002c58:	40021c00 	.word	0x40021c00
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40022400 	.word	0x40022400
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 ffe4 	bl	8006c7e <USB_GetMode>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 80f6 	bne.w	8002eaa <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 ffc8 	bl	8006c58 <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80ec 	beq.w	8002ea8 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 ffbf 	bl	8006c58 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ce4:	d104      	bne.n	8002cf0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002cee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 ffaf 	bl	8006c58 <USB_ReadInterrupts>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d04:	d104      	bne.n	8002d10 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 ff9f 	bl	8006c58 <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d24:	d104      	bne.n	8002d30 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 ff8f 	bl	8006c58 <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d103      	bne.n	8002d4c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f003 ff81 	bl	8006c58 <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d60:	d11c      	bne.n	8002d9c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d6a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	6938      	ldr	r0, [r7, #16]
 8002d80:	f003 feae 	bl	8006ae0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d84:	6938      	ldr	r0, [r7, #16]
 8002d86:	f003 fedf 	bl	8006b48 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 ff82 	bl	8006c9a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f005 fab4 	bl	8008304 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 ff59 	bl	8006c58 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db0:	d102      	bne.n	8002db8 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f001 f829 	bl	8003e0a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 ff4b 	bl	8006c58 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d106      	bne.n	8002dda <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f005 fa7d 	bl	80082cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 ff3a 	bl	8006c58 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d101      	bne.n	8002df2 <HAL_HCD_IRQHandler+0x158>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_HCD_IRQHandler+0x15a>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0210 	bic.w	r2, r2, #16
 8002e06:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 ff2c 	bl	8003c66 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0210 	orr.w	r2, r2, #16
 8002e1c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 ff18 	bl	8006c58 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e32:	d13a      	bne.n	8002eaa <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 ff68 	bl	8006d0e <USB_HC_ReadInterrupt>
 8002e3e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e025      	b.n	8002e92 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d018      	beq.n	8002e8c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d106      	bne.n	8002e80 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f836 	bl	8002eea <HCD_HC_IN_IRQHandler>
 8002e7e:	e005      	b.n	8002e8c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fb84 	bl	8003594 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d3d4      	bcc.n	8002e46 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea4:	615a      	str	r2, [r3, #20]
 8002ea6:	e000      	b.n	8002eaa <HAL_HCD_IRQHandler+0x210>
      return;
 8002ea8:	bf00      	nop
    }
  }
}
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_HCD_Stop+0x16>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e00d      	b.n	8002ee2 <HAL_HCD_Stop+0x32>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 f828 	bl	8006f28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d11a      	bne.n	8002f50 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	2304      	movs	r3, #4
 8002f2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3361      	adds	r3, #97	; 0x61
 8002f3a:	2206      	movs	r2, #6
 8002f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fef1 	bl	8006d30 <USB_HC_Halt>
 8002f4e:	e0af      	b.n	80030b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d11b      	bne.n	8002fa0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3361      	adds	r3, #97	; 0x61
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fec9 	bl	8006d30 <USB_HC_Halt>
 8002f9e:	e087      	b.n	80030b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d109      	bne.n	8002fca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	e072      	b.n	80030b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d11a      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	461a      	mov	r2, r3
 8002fee:	2308      	movs	r3, #8
 8002ff0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3361      	adds	r3, #97	; 0x61
 8003000:	2205      	movs	r2, #5
 8003002:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f003 fe8e 	bl	8006d30 <USB_HC_Halt>
 8003014:	e04c      	b.n	80030b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d11b      	bne.n	8003066 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	461a      	mov	r2, r3
 800303c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003040:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3361      	adds	r3, #97	; 0x61
 8003050:	2208      	movs	r2, #8
 8003052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f003 fe66 	bl	8006d30 <USB_HC_Halt>
 8003064:	e024      	b.n	80030b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d119      	bne.n	80030b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3361      	adds	r3, #97	; 0x61
 800309c:	2206      	movs	r2, #6
 800309e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fe40 	bl	8006d30 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c6:	d112      	bne.n	80030ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fe2c 	bl	8006d30 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80030ec:	e24e      	b.n	800358c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 80df 	bne.w	80032c4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d019      	beq.n	8003142 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3348      	adds	r3, #72	; 0x48
 800311c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0159      	lsls	r1, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	440b      	add	r3, r1
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003130:	1ad2      	subs	r2, r2, r3
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	202c      	movs	r0, #44	; 0x2c
 8003138:	fb00 f303 	mul.w	r3, r0, r3
 800313c:	440b      	add	r3, r1
 800313e:	3350      	adds	r3, #80	; 0x50
 8003140:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3361      	adds	r3, #97	; 0x61
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	335c      	adds	r3, #92	; 0x5c
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	2301      	movs	r3, #1
 8003176:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	333f      	adds	r3, #63	; 0x3f
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	333f      	adds	r3, #63	; 0x3f
 800319a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800319c:	2b02      	cmp	r3, #2
 800319e:	d111      	bne.n	80031c4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fdc0 	bl	8006d30 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2310      	movs	r3, #16
 80031c0:	6093      	str	r3, [r2, #8]
 80031c2:	e03a      	b.n	800323a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	333f      	adds	r3, #63	; 0x3f
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d009      	beq.n	80031ec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	333f      	adds	r3, #63	; 0x3f
 80031e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d126      	bne.n	800323a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	0151      	lsls	r1, r2, #5
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	440a      	add	r2, r1
 8003202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800320a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	b2d9      	uxtb	r1, r3
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	202c      	movs	r0, #44	; 0x2c
 8003228:	fb00 f303 	mul.w	r3, r0, r3
 800322c:	4413      	add	r3, r2
 800322e:	3360      	adds	r3, #96	; 0x60
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f005 f873 	bl	8008320 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d12b      	bne.n	800329a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3348      	adds	r3, #72	; 0x48
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	202c      	movs	r0, #44	; 0x2c
 8003258:	fb00 f202 	mul.w	r2, r0, r2
 800325c:	440a      	add	r2, r1
 800325e:	3240      	adds	r2, #64	; 0x40
 8003260:	8812      	ldrh	r2, [r2, #0]
 8003262:	fbb3 f3f2 	udiv	r3, r3, r2
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 818e 	beq.w	800358c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3354      	adds	r3, #84	; 0x54
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	f083 0301 	eor.w	r3, r3, #1
 8003284:	b2d8      	uxtb	r0, r3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3354      	adds	r3, #84	; 0x54
 8003294:	4602      	mov	r2, r0
 8003296:	701a      	strb	r2, [r3, #0]
}
 8003298:	e178      	b.n	800358c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3354      	adds	r3, #84	; 0x54
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	f083 0301 	eor.w	r3, r3, #1
 80032ae:	b2d8      	uxtb	r0, r3
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3354      	adds	r3, #84	; 0x54
 80032be:	4602      	mov	r2, r0
 80032c0:	701a      	strb	r2, [r3, #0]
}
 80032c2:	e163      	b.n	800358c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	f040 80f6 	bne.w	80034c8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3361      	adds	r3, #97	; 0x61
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d109      	bne.n	8003304 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3360      	adds	r3, #96	; 0x60
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e0c9      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3361      	adds	r3, #97	; 0x61
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d109      	bne.n	800332c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	2205      	movs	r2, #5
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e0b5      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3361      	adds	r3, #97	; 0x61
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d009      	beq.n	8003354 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3361      	adds	r3, #97	; 0x61
 800334e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003350:	2b08      	cmp	r3, #8
 8003352:	d150      	bne.n	80033f6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	335c      	adds	r3, #92	; 0x5c
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	202c      	movs	r0, #44	; 0x2c
 800336c:	fb00 f303 	mul.w	r3, r0, r3
 8003370:	440b      	add	r3, r1
 8003372:	335c      	adds	r3, #92	; 0x5c
 8003374:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	335c      	adds	r3, #92	; 0x5c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d912      	bls.n	80033b0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	335c      	adds	r3, #92	; 0x5c
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3360      	adds	r3, #96	; 0x60
 80033aa:	2204      	movs	r2, #4
 80033ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033ae:	e073      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033f4:	e050      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3361      	adds	r3, #97	; 0x61
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d122      	bne.n	8003450 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3360      	adds	r3, #96	; 0x60
 8003418:	2202      	movs	r2, #2
 800341a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003432:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800343a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e023      	b.n	8003498 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3361      	adds	r3, #97	; 0x61
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b07      	cmp	r3, #7
 8003462:	d119      	bne.n	8003498 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	335c      	adds	r3, #92	; 0x5c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	202c      	movs	r0, #44	; 0x2c
 800347c:	fb00 f303 	mul.w	r3, r0, r3
 8003480:	440b      	add	r3, r1
 8003482:	335c      	adds	r3, #92	; 0x5c
 8003484:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3360      	adds	r3, #96	; 0x60
 8003494:	2204      	movs	r2, #4
 8003496:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a4:	461a      	mov	r2, r3
 80034a6:	2302      	movs	r3, #2
 80034a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	b2d9      	uxtb	r1, r3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	202c      	movs	r0, #44	; 0x2c
 80034b4:	fb00 f303 	mul.w	r3, r0, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3360      	adds	r3, #96	; 0x60
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f004 ff2d 	bl	8008320 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034c6:	e061      	b.n	800358c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d156      	bne.n	800358c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	333f      	adds	r3, #63	; 0x3f
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d111      	bne.n	8003516 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f003 fc0e 	bl	8006d30 <USB_HC_Halt>
 8003514:	e031      	b.n	800357a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	333f      	adds	r3, #63	; 0x3f
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	333f      	adds	r3, #63	; 0x3f
 8003538:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800353a:	2b02      	cmp	r3, #2
 800353c:	d11d      	bne.n	800357a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	335c      	adds	r3, #92	; 0x5c
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d110      	bne.n	800357a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3361      	adds	r3, #97	; 0x61
 8003566:	2203      	movs	r2, #3
 8003568:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f003 fbdb 	bl	8006d30 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	2310      	movs	r3, #16
 800358a:	6093      	str	r3, [r2, #8]
}
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d11a      	bne.n	80035fa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	461a      	mov	r2, r3
 80035d2:	2304      	movs	r3, #4
 80035d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	3361      	adds	r3, #97	; 0x61
 80035e4:	2206      	movs	r2, #6
 80035e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fb9c 	bl	8006d30 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80035f8:	e331      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b20      	cmp	r3, #32
 800360e:	d12e      	bne.n	800366e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	2320      	movs	r3, #32
 8003620:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	333d      	adds	r3, #61	; 0x3d
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	f040 8313 	bne.w	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	333d      	adds	r3, #61	; 0x3d
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3360      	adds	r3, #96	; 0x60
 8003658:	2202      	movs	r2, #2
 800365a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f003 fb62 	bl	8006d30 <USB_HC_Halt>
}
 800366c:	e2f7      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003684:	d112      	bne.n	80036ac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003692:	461a      	mov	r2, r3
 8003694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003698:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f003 fb43 	bl	8006d30 <USB_HC_Halt>
}
 80036aa:	e2d8      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d140      	bne.n	8003744 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	335c      	adds	r3, #92	; 0x5c
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d111      	bne.n	800370e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	333d      	adds	r3, #61	; 0x3d
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	461a      	mov	r2, r3
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	2301      	movs	r3, #1
 800371e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3361      	adds	r3, #97	; 0x61
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f003 faf7 	bl	8006d30 <USB_HC_Halt>
}
 8003742:	e28c      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d12c      	bne.n	80037b4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	3361      	adds	r3, #97	; 0x61
 8003768:	2204      	movs	r2, #4
 800376a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	333d      	adds	r3, #61	; 0x3d
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	335c      	adds	r3, #92	; 0x5c
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f003 fac8 	bl	8006d30 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	461a      	mov	r2, r3
 80037ae:	2340      	movs	r3, #64	; 0x40
 80037b0:	6093      	str	r3, [r2, #8]
}
 80037b2:	e254      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d11a      	bne.n	8003800 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d6:	461a      	mov	r2, r3
 80037d8:	2308      	movs	r3, #8
 80037da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3361      	adds	r3, #97	; 0x61
 80037ea:	2205      	movs	r2, #5
 80037ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fa99 	bl	8006d30 <USB_HC_Halt>
}
 80037fe:	e22e      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d140      	bne.n	8003898 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	335c      	adds	r3, #92	; 0x5c
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3361      	adds	r3, #97	; 0x61
 8003836:	2203      	movs	r2, #3
 8003838:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	333d      	adds	r3, #61	; 0x3d
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d112      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	333c      	adds	r3, #60	; 0x3c
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	333d      	adds	r3, #61	; 0x3d
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fa56 	bl	8006d30 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	2310      	movs	r3, #16
 8003894:	6093      	str	r3, [r2, #8]
}
 8003896:	e1e2      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d164      	bne.n	8003978 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d111      	bne.n	80038da <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3361      	adds	r3, #97	; 0x61
 80038c4:	2206      	movs	r2, #6
 80038c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 fa2c 	bl	8006d30 <USB_HC_Halt>
 80038d8:	e044      	b.n	8003964 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	335c      	adds	r3, #92	; 0x5c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	202c      	movs	r0, #44	; 0x2c
 80038f2:	fb00 f303 	mul.w	r3, r0, r3
 80038f6:	440b      	add	r3, r1
 80038f8:	335c      	adds	r3, #92	; 0x5c
 80038fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	335c      	adds	r3, #92	; 0x5c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d920      	bls.n	8003952 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	335c      	adds	r3, #92	; 0x5c
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	3360      	adds	r3, #96	; 0x60
 8003930:	2204      	movs	r2, #4
 8003932:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	b2d9      	uxtb	r1, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	202c      	movs	r0, #44	; 0x2c
 800393e:	fb00 f303 	mul.w	r3, r0, r3
 8003942:	4413      	add	r3, r2
 8003944:	3360      	adds	r3, #96	; 0x60
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f004 fce8 	bl	8008320 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003950:	e008      	b.n	8003964 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	3360      	adds	r3, #96	; 0x60
 8003960:	2202      	movs	r2, #2
 8003962:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	461a      	mov	r2, r3
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	6093      	str	r3, [r2, #8]
}
 8003976:	e172      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d11b      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3361      	adds	r3, #97	; 0x61
 800399e:	2208      	movs	r2, #8
 80039a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f003 f9bf 	bl	8006d30 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039be:	461a      	mov	r2, r3
 80039c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c4:	6093      	str	r3, [r2, #8]
}
 80039c6:	e14a      	b.n	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	f040 813f 	bne.w	8003c5e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3361      	adds	r3, #97	; 0x61
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d17d      	bne.n	8003af0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3360      	adds	r3, #96	; 0x60
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	333f      	adds	r3, #63	; 0x3f
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d00a      	beq.n	8003a30 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	333f      	adds	r3, #63	; 0x3f
 8003a28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	f040 8100 	bne.w	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3355      	adds	r3, #85	; 0x55
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	f083 0301 	eor.w	r3, r3, #1
 8003a4c:	b2d8      	uxtb	r0, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3355      	adds	r3, #85	; 0x55
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 80e3 	bne.w	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	334c      	adds	r3, #76	; 0x4c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80d8 	beq.w	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	334c      	adds	r3, #76	; 0x4c
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	202c      	movs	r0, #44	; 0x2c
 8003a96:	fb00 f202 	mul.w	r2, r0, r2
 8003a9a:	440a      	add	r2, r1
 8003a9c:	3240      	adds	r2, #64	; 0x40
 8003a9e:	8812      	ldrh	r2, [r2, #0]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	202c      	movs	r0, #44	; 0x2c
 8003aaa:	fb00 f202 	mul.w	r2, r0, r2
 8003aae:	440a      	add	r2, r1
 8003ab0:	3240      	adds	r2, #64	; 0x40
 8003ab2:	8812      	ldrh	r2, [r2, #0]
 8003ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80b5 	beq.w	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3355      	adds	r3, #85	; 0x55
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	f083 0301 	eor.w	r3, r3, #1
 8003ada:	b2d8      	uxtb	r0, r3
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3355      	adds	r3, #85	; 0x55
 8003aea:	4602      	mov	r2, r0
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e09f      	b.n	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3361      	adds	r3, #97	; 0x61
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d109      	bne.n	8003b18 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3360      	adds	r3, #96	; 0x60
 8003b12:	2202      	movs	r2, #2
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	e08b      	b.n	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3361      	adds	r3, #97	; 0x61
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d109      	bne.n	8003b40 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3360      	adds	r3, #96	; 0x60
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e077      	b.n	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3361      	adds	r3, #97	; 0x61
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d109      	bne.n	8003b68 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3360      	adds	r3, #96	; 0x60
 8003b62:	2205      	movs	r2, #5
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e063      	b.n	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3361      	adds	r3, #97	; 0x61
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d009      	beq.n	8003b90 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3361      	adds	r3, #97	; 0x61
 8003b8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d14f      	bne.n	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	335c      	adds	r3, #92	; 0x5c
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	202c      	movs	r0, #44	; 0x2c
 8003ba8:	fb00 f303 	mul.w	r3, r0, r3
 8003bac:	440b      	add	r3, r1
 8003bae:	335c      	adds	r3, #92	; 0x5c
 8003bb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	335c      	adds	r3, #92	; 0x5c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d912      	bls.n	8003bec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	335c      	adds	r3, #92	; 0x5c
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	3360      	adds	r3, #96	; 0x60
 8003be6:	2204      	movs	r2, #4
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e021      	b.n	8003c30 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3360      	adds	r3, #96	; 0x60
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c14:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c1c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2302      	movs	r3, #2
 8003c40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	b2d9      	uxtb	r1, r3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	202c      	movs	r0, #44	; 0x2c
 8003c4c:	fb00 f303 	mul.w	r3, r0, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3360      	adds	r3, #96	; 0x60
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f004 fb61 	bl	8008320 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c5e:	bf00      	nop
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08a      	sub	sp, #40	; 0x28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	0c5b      	lsrs	r3, r3, #17
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c9a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d004      	beq.n	8003cac <HCD_RXQLVL_IRQHandler+0x46>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	f000 80a9 	beq.w	8003dfc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003caa:	e0aa      	b.n	8003e02 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80a6 	beq.w	8003e00 <HCD_RXQLVL_IRQHandler+0x19a>
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3344      	adds	r3, #68	; 0x44
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 809b 	beq.w	8003e00 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3350      	adds	r3, #80	; 0x50
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	441a      	add	r2, r3
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	202c      	movs	r0, #44	; 0x2c
 8003ce4:	fb00 f303 	mul.w	r3, r0, r3
 8003ce8:	440b      	add	r3, r1
 8003cea:	334c      	adds	r3, #76	; 0x4c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d87a      	bhi.n	8003de8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	3344      	adds	r3, #68	; 0x44
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	b292      	uxth	r2, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f002 ff4c 	bl	8006ba8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3344      	adds	r3, #68	; 0x44
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	441a      	add	r2, r3
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	202c      	movs	r0, #44	; 0x2c
 8003d2a:	fb00 f303 	mul.w	r3, r0, r3
 8003d2e:	440b      	add	r3, r1
 8003d30:	3344      	adds	r3, #68	; 0x44
 8003d32:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3350      	adds	r3, #80	; 0x50
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	441a      	add	r2, r3
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	202c      	movs	r0, #44	; 0x2c
 8003d4e:	fb00 f303 	mul.w	r3, r0, r3
 8003d52:	440b      	add	r3, r1
 8003d54:	3350      	adds	r3, #80	; 0x50
 8003d56:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	0cdb      	lsrs	r3, r3, #19
 8003d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3340      	adds	r3, #64	; 0x40
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d13c      	bne.n	8003e00 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d039      	beq.n	8003e00 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003da2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003daa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3354      	adds	r3, #84	; 0x54
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f083 0301 	eor.w	r3, r3, #1
 8003dd2:	b2d8      	uxtb	r0, r3
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3354      	adds	r3, #84	; 0x54
 8003de2:	4602      	mov	r2, r0
 8003de4:	701a      	strb	r2, [r3, #0]
      break;
 8003de6:	e00b      	b.n	8003e00 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3360      	adds	r3, #96	; 0x60
 8003df6:	2204      	movs	r2, #4
 8003df8:	701a      	strb	r2, [r3, #0]
      break;
 8003dfa:	e001      	b.n	8003e00 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003e00:	bf00      	nop
  }
}
 8003e02:	bf00      	nop
 8003e04:	3728      	adds	r7, #40	; 0x28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e36:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d10b      	bne.n	8003e5a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d102      	bne.n	8003e52 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f004 fa4b 	bl	80082e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d132      	bne.n	8003eca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d126      	bne.n	8003ec4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d113      	bne.n	8003ea6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e88:	d106      	bne.n	8003e98 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f002 ff02 	bl	8006c9a <USB_InitFSLSPClkSel>
 8003e96:	e011      	b.n	8003ebc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f002 fefb 	bl	8006c9a <USB_InitFSLSPClkSel>
 8003ea4:	e00a      	b.n	8003ebc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d106      	bne.n	8003ebc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003eba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f004 fa41 	bl	8008344 <HAL_HCD_PortEnabled_Callback>
 8003ec2:	e002      	b.n	8003eca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f004 fa4b 	bl	8008360 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d103      	bne.n	8003edc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f043 0320 	orr.w	r3, r3, #32
 8003eda:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e128      	b.n	8004154 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a90      	ldr	r2, [pc, #576]	; (800415c <HAL_I2S_Init+0x26c>)
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fd fcab 	bl	8001878 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f38:	f023 030f 	bic.w	r3, r3, #15
 8003f3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2202      	movs	r2, #2
 8003f44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d060      	beq.n	8004010 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f56:	2310      	movs	r3, #16
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e001      	b.n	8003f60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d802      	bhi.n	8003f6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f001 fbf8 	bl	8005764 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f74:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7e:	d125      	bne.n	8003fcc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	3305      	adds	r3, #5
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	e01f      	b.n	8003fea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	3305      	adds	r3, #5
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	e00e      	b.n	8003fea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	3305      	adds	r3, #5
 8003fe8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4a5c      	ldr	r2, [pc, #368]	; (8004160 <HAL_I2S_Init+0x270>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	08db      	lsrs	r3, r3, #3
 8003ff4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e003      	b.n	8004018 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004010:	2302      	movs	r3, #2
 8004012:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d902      	bls.n	8004024 <HAL_I2S_Init+0x134>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2bff      	cmp	r3, #255	; 0xff
 8004022:	d907      	bls.n	8004034 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	f043 0210 	orr.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e08f      	b.n	8004154 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	ea42 0103 	orr.w	r1, r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	430a      	orrs	r2, r1
 8004046:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004052:	f023 030f 	bic.w	r3, r3, #15
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6851      	ldr	r1, [r2, #4]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6892      	ldr	r2, [r2, #8]
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68d2      	ldr	r2, [r2, #12]
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6992      	ldr	r2, [r2, #24]
 800406a:	430a      	orrs	r2, r1
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004076:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d161      	bne.n	8004144 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a38      	ldr	r2, [pc, #224]	; (8004164 <HAL_I2S_Init+0x274>)
 8004084:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a37      	ldr	r2, [pc, #220]	; (8004168 <HAL_I2S_Init+0x278>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_I2S_Init+0x1a4>
 8004090:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_I2S_Init+0x27c>)
 8004092:	e001      	b.n	8004098 <HAL_I2S_Init+0x1a8>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4932      	ldr	r1, [pc, #200]	; (8004168 <HAL_I2S_Init+0x278>)
 80040a0:	428a      	cmp	r2, r1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2S_Init+0x1b8>
 80040a4:	4a31      	ldr	r2, [pc, #196]	; (800416c <HAL_I2S_Init+0x27c>)
 80040a6:	e001      	b.n	80040ac <HAL_I2S_Init+0x1bc>
 80040a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80040ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040b0:	f023 030f 	bic.w	r3, r3, #15
 80040b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <HAL_I2S_Init+0x278>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <HAL_I2S_Init+0x1d4>
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_I2S_Init+0x27c>)
 80040c2:	e001      	b.n	80040c8 <HAL_I2S_Init+0x1d8>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c8:	2202      	movs	r2, #2
 80040ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a25      	ldr	r2, [pc, #148]	; (8004168 <HAL_I2S_Init+0x278>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <HAL_I2S_Init+0x1ea>
 80040d6:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_I2S_Init+0x27c>)
 80040d8:	e001      	b.n	80040de <HAL_I2S_Init+0x1ee>
 80040da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ea:	d003      	beq.n	80040f4 <HAL_I2S_Init+0x204>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80040f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e001      	b.n	8004100 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800410a:	4313      	orrs	r3, r2
 800410c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004114:	4313      	orrs	r3, r2
 8004116:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800411e:	4313      	orrs	r3, r2
 8004120:	b29a      	uxth	r2, r3
 8004122:	897b      	ldrh	r3, [r7, #10]
 8004124:	4313      	orrs	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800412c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <HAL_I2S_Init+0x278>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_I2S_Init+0x24c>
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_I2S_Init+0x27c>)
 800413a:	e001      	b.n	8004140 <HAL_I2S_Init+0x250>
 800413c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004140:	897a      	ldrh	r2, [r7, #10]
 8004142:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	08004489 	.word	0x08004489
 8004160:	cccccccd 	.word	0xcccccccd
 8004164:	0800459d 	.word	0x0800459d
 8004168:	40003800 	.word	0x40003800
 800416c:	40003400 	.word	0x40003400

08004170 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_I2S_Receive_DMA+0x1a>
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0a1      	b.n	80042d2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_I2S_Receive_DMA+0x2e>
 800419a:	2302      	movs	r3, #2
 800419c:	e099      	b.n	80042d2 <HAL_I2S_Receive_DMA+0x162>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d005      	beq.n	80041be <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
 80041bc:	e089      	b.n	80042d2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2204      	movs	r2, #4
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d002      	beq.n	80041ea <HAL_I2S_Receive_DMA+0x7a>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d10a      	bne.n	8004200 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	865a      	strh	r2, [r3, #50]	; 0x32
 80041fe:	e005      	b.n	800420c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	4a32      	ldr	r2, [pc, #200]	; (80042dc <HAL_I2S_Receive_DMA+0x16c>)
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	4a31      	ldr	r2, [pc, #196]	; (80042e0 <HAL_I2S_Receive_DMA+0x170>)
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	4a30      	ldr	r2, [pc, #192]	; (80042e4 <HAL_I2S_Receive_DMA+0x174>)
 8004222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	d10a      	bne.n	800424a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	4619      	mov	r1, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004260:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004262:	f7fe f893 	bl	800238c <HAL_DMA_Start_IT>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00f      	beq.n	800428c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	f043 0208 	orr.w	r2, r3, #8
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e022      	b.n	80042d2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	08004367 	.word	0x08004367
 80042e0:	08004325 	.word	0x08004325
 80042e4:	08004383 	.word	0x08004383

080042e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10e      	bne.n	8004358 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7fc fe7b 	bl	8001054 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff ffc1 	bl	80042fc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0203 	bic.w	r2, r2, #3
 800439e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b8:	f043 0208 	orr.w	r2, r3, #8
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff ffa5 	bl	8004310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	881a      	ldrh	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c9a      	adds	r2, r3, #2
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10e      	bne.n	8004422 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004412:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff63 	bl	80042e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	b292      	uxth	r2, r2
 800443e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10e      	bne.n	8004480 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004470:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc fdea 	bl	8001054 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d13a      	bne.n	800451a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d109      	bne.n	80044c2 <I2S_IRQHandler+0x3a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d102      	bne.n	80044c2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ffb4 	bl	800442a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d126      	bne.n	800451a <I2S_IRQHandler+0x92>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d11f      	bne.n	800451a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044e8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f043 0202 	orr.w	r2, r3, #2
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fefb 	bl	8004310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d136      	bne.n	8004594 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d109      	bne.n	8004544 <I2S_IRQHandler+0xbc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d102      	bne.n	8004544 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ff45 	bl	80043ce <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b08      	cmp	r3, #8
 800454c:	d122      	bne.n	8004594 <I2S_IRQHandler+0x10c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b20      	cmp	r3, #32
 800455a:	d11b      	bne.n	8004594 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800456a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f043 0204 	orr.w	r2, r3, #4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff febe 	bl	8004310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004594:	bf00      	nop
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a92      	ldr	r2, [pc, #584]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045b6:	4b92      	ldr	r3, [pc, #584]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045b8:	e001      	b.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a8b      	ldr	r2, [pc, #556]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045d4:	4b8a      	ldr	r3, [pc, #552]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d6:	e001      	b.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80045d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e8:	d004      	beq.n	80045f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 8099 	bne.w	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f925 	bl	8004858 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d107      	bne.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9c8 	bl	80049b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d13a      	bne.n	80046a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d035      	beq.n	80046a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6e      	ldr	r2, [pc, #440]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004646:	4b6e      	ldr	r3, [pc, #440]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004648:	e001      	b.n	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800464a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4969      	ldr	r1, [pc, #420]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004656:	428b      	cmp	r3, r1
 8004658:	d101      	bne.n	800465e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800465a:	4b69      	ldr	r3, [pc, #420]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800465c:	e001      	b.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800465e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004666:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004676:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fe34 	bl	8004310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	f040 80c3 	bne.w	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80bd 	beq.w	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a49      	ldr	r2, [pc, #292]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80046da:	4b49      	ldr	r3, [pc, #292]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046dc:	e001      	b.n	80046e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80046de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4944      	ldr	r1, [pc, #272]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ea:	428b      	cmp	r3, r1
 80046ec:	d101      	bne.n	80046f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80046ee:	4b44      	ldr	r3, [pc, #272]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046f0:	e001      	b.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fdf6 	bl	8004310 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004724:	e089      	b.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d107      	bne.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8be 	bl	80048bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f8fd 	bl	8004954 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d12f      	bne.n	80047c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02a      	beq.n	80047c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800477c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004788:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800478a:	e001      	b.n	8004790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800478c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4919      	ldr	r1, [pc, #100]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004798:	428b      	cmp	r3, r1
 800479a:	d101      	bne.n	80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800479e:	e001      	b.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f043 0202 	orr.w	r2, r3, #2
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fda6 	bl	8004310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d136      	bne.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d031      	beq.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a07      	ldr	r2, [pc, #28]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047e4:	e001      	b.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80047e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4902      	ldr	r1, [pc, #8]	; (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047f2:	428b      	cmp	r3, r1
 80047f4:	d106      	bne.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80047f6:	4b02      	ldr	r3, [pc, #8]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047f8:	e006      	b.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80047fa:	bf00      	nop
 80047fc:	40003800 	.word	0x40003800
 8004800:	40003400 	.word	0x40003400
 8004804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800480c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800481c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff fd6c 	bl	8004310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004838:	e000      	b.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800483a:	bf00      	nop
}
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c99      	adds	r1, r3, #2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6251      	str	r1, [r2, #36]	; 0x24
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d113      	bne.n	80048b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004898:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ffc9 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c99      	adds	r1, r3, #2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6251      	str	r1, [r2, #36]	; 0x24
 80048ce:	8819      	ldrh	r1, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <I2SEx_TxISR_I2SExt+0x90>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <I2SEx_TxISR_I2SExt+0x22>
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <I2SEx_TxISR_I2SExt+0x94>)
 80048dc:	e001      	b.n	80048e2 <I2SEx_TxISR_I2SExt+0x26>
 80048de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e2:	460a      	mov	r2, r1
 80048e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d121      	bne.n	8004942 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <I2SEx_TxISR_I2SExt+0x90>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <I2SEx_TxISR_I2SExt+0x50>
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <I2SEx_TxISR_I2SExt+0x94>)
 800490a:	e001      	b.n	8004910 <I2SEx_TxISR_I2SExt+0x54>
 800490c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	490d      	ldr	r1, [pc, #52]	; (800494c <I2SEx_TxISR_I2SExt+0x90>)
 8004918:	428b      	cmp	r3, r1
 800491a:	d101      	bne.n	8004920 <I2SEx_TxISR_I2SExt+0x64>
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <I2SEx_TxISR_I2SExt+0x94>)
 800491e:	e001      	b.n	8004924 <I2SEx_TxISR_I2SExt+0x68>
 8004920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004928:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff81 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40003800 	.word	0x40003800
 8004950:	40003400 	.word	0x40003400

08004954 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68d8      	ldr	r0, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	1c99      	adds	r1, r3, #2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800496c:	b282      	uxth	r2, r0
 800496e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d113      	bne.n	80049b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004996:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ff4a 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <I2SEx_RxISR_I2SExt+0x90>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <I2SEx_RxISR_I2SExt+0x16>
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <I2SEx_RxISR_I2SExt+0x94>)
 80049cc:	e001      	b.n	80049d2 <I2SEx_RxISR_I2SExt+0x1a>
 80049ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049d2:	68d8      	ldr	r0, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	1c99      	adds	r1, r3, #2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049de:	b282      	uxth	r2, r0
 80049e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d121      	bne.n	8004a3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <I2SEx_RxISR_I2SExt+0x90>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <I2SEx_RxISR_I2SExt+0x50>
 8004a04:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <I2SEx_RxISR_I2SExt+0x94>)
 8004a06:	e001      	b.n	8004a0c <I2SEx_RxISR_I2SExt+0x54>
 8004a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	490d      	ldr	r1, [pc, #52]	; (8004a48 <I2SEx_RxISR_I2SExt+0x90>)
 8004a14:	428b      	cmp	r3, r1
 8004a16:	d101      	bne.n	8004a1c <I2SEx_RxISR_I2SExt+0x64>
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <I2SEx_RxISR_I2SExt+0x94>)
 8004a1a:	e001      	b.n	8004a20 <I2SEx_RxISR_I2SExt+0x68>
 8004a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ff03 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40003800 	.word	0x40003800
 8004a4c:	40003400 	.word	0x40003400

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e267      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d075      	beq.n	8004b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a6e:	4b88      	ldr	r3, [pc, #544]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4b85      	ldr	r3, [pc, #532]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4b82      	ldr	r3, [pc, #520]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a92:	d10b      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b7e      	ldr	r3, [pc, #504]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05b      	beq.n	8004b58 <HAL_RCC_OscConfig+0x108>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e242      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x74>
 8004ab6:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a75      	ldr	r2, [pc, #468]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x98>
 8004ace:	4b70      	ldr	r3, [pc, #448]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6f      	ldr	r2, [pc, #444]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b6d      	ldr	r3, [pc, #436]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6c      	ldr	r2, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	4b69      	ldr	r3, [pc, #420]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a68      	ldr	r2, [pc, #416]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b66      	ldr	r3, [pc, #408]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a65      	ldr	r2, [pc, #404]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fd fa5c 	bl	8001fc4 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fd fa58 	bl	8001fc4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e207      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd fa48 	bl	8001fc4 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fd fa44 	bl	8001fc4 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1f3      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0xe8>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b44      	ldr	r3, [pc, #272]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1c7      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4937      	ldr	r1, [pc, #220]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCC_OscConfig+0x244>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fd f9fd 	bl	8001fc4 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fd f9f9 	bl	8001fc4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1a8      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4925      	ldr	r1, [pc, #148]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCC_OscConfig+0x244>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fd f9dc 	bl	8001fc4 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fd f9d8 	bl	8001fc4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e187      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d036      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0x248>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fd f9bc 	bl	8001fc4 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fd f9b8 	bl	8001fc4 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e167      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x200>
 8004c6e:	e01b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_OscConfig+0x248>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fd f9a5 	bl	8001fc4 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fd f9a1 	bl	8001fc4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d907      	bls.n	8004c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e150      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
 8004c90:	40023800 	.word	0x40023800
 8004c94:	42470000 	.word	0x42470000
 8004c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	4b88      	ldr	r3, [pc, #544]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ea      	bne.n	8004c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8097 	beq.w	8004de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b81      	ldr	r3, [pc, #516]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b7d      	ldr	r3, [pc, #500]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a7c      	ldr	r2, [pc, #496]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd6:	4b7a      	ldr	r3, [pc, #488]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b77      	ldr	r3, [pc, #476]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b74      	ldr	r3, [pc, #464]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a73      	ldr	r2, [pc, #460]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd f961 	bl	8001fc4 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fd f95d 	bl	8001fc4 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e10c      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2ea>
 8004d2c:	4b64      	ldr	r3, [pc, #400]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a63      	ldr	r2, [pc, #396]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x324>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x30c>
 8004d42:	4b5f      	ldr	r3, [pc, #380]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a5e      	ldr	r2, [pc, #376]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a5b      	ldr	r2, [pc, #364]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x324>
 8004d5c:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	4a57      	ldr	r2, [pc, #348]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70
 8004d68:	4b55      	ldr	r3, [pc, #340]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	4a54      	ldr	r2, [pc, #336]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	f023 0304 	bic.w	r3, r3, #4
 8004d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd f922 	bl	8001fc4 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd f91e 	bl	8001fc4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0cb      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	4b49      	ldr	r3, [pc, #292]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RCC_OscConfig+0x334>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da8:	f7fd f90c 	bl	8001fc4 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fd f908 	bl	8001fc4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0b5      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ee      	bne.n	8004db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	4a38      	ldr	r2, [pc, #224]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80a1 	beq.w	8004f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dee:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d05c      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d141      	bne.n	8004e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fd f8dc 	bl	8001fc4 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fd f8d8 	bl	8001fc4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e087      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	491b      	ldr	r1, [pc, #108]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e58:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fd f8b1 	bl	8001fc4 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fd f8ad 	bl	8001fc4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e05c      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x416>
 8004e84:	e054      	b.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd f89a 	bl	8001fc4 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd f896 	bl	8001fc4 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e045      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x444>
 8004eb2:	e03d      	b.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e038      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_RCC_OscConfig+0x4ec>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d028      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d121      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d11a      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d111      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	3b01      	subs	r3, #1
 8004f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800

08004f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0cc      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f54:	4b68      	ldr	r3, [pc, #416]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d90c      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b65      	ldr	r3, [pc, #404]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0b8      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d020      	beq.n	8004fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4a58      	ldr	r2, [pc, #352]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fac:	4b53      	ldr	r3, [pc, #332]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a52      	ldr	r2, [pc, #328]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b50      	ldr	r3, [pc, #320]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	494d      	ldr	r1, [pc, #308]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d044      	beq.n	8005060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	4b47      	ldr	r3, [pc, #284]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d119      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e07f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e06f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e067      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501e:	4b37      	ldr	r3, [pc, #220]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 0203 	bic.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4934      	ldr	r1, [pc, #208]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005030:	f7fc ffc8 	bl	8001fc4 <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	e00a      	b.n	800504e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005038:	f7fc ffc4 	bl	8001fc4 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	; 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e04f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 020c 	and.w	r2, r3, #12
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	429a      	cmp	r2, r3
 800505e:	d1eb      	bne.n	8005038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005060:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d20c      	bcs.n	8005088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e032      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4916      	ldr	r1, [pc, #88]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	490e      	ldr	r1, [pc, #56]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050c6:	f000 f821 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	490a      	ldr	r1, [pc, #40]	; (8005100 <HAL_RCC_ClockConfig+0x1c0>)
 80050d8:	5ccb      	ldrb	r3, [r1, r3]
 80050da:	fa22 f303 	lsr.w	r3, r2, r3
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <HAL_RCC_ClockConfig+0x1c8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fc fd82 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023c00 	.word	0x40023c00
 80050fc:	40023800 	.word	0x40023800
 8005100:	0800cda4 	.word	0x0800cda4
 8005104:	20000000 	.word	0x20000000
 8005108:	20000004 	.word	0x20000004

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005110:	b094      	sub	sp, #80	; 0x50
 8005112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	647b      	str	r3, [r7, #68]	; 0x44
 8005118:	2300      	movs	r3, #0
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	2300      	movs	r3, #0
 800511e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005124:	4b79      	ldr	r3, [pc, #484]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b08      	cmp	r3, #8
 800512e:	d00d      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x40>
 8005130:	2b08      	cmp	r3, #8
 8005132:	f200 80e1 	bhi.w	80052f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x34>
 800513a:	2b04      	cmp	r3, #4
 800513c:	d003      	beq.n	8005146 <HAL_RCC_GetSysClockFreq+0x3a>
 800513e:	e0db      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b73      	ldr	r3, [pc, #460]	; (8005310 <HAL_RCC_GetSysClockFreq+0x204>)
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005144:	e0db      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005146:	4b73      	ldr	r3, [pc, #460]	; (8005314 <HAL_RCC_GetSysClockFreq+0x208>)
 8005148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800514a:	e0d8      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800514c:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005156:	4b6d      	ldr	r3, [pc, #436]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d063      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	2200      	movs	r2, #0
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
 800516c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005174:	633b      	str	r3, [r7, #48]	; 0x30
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
 800517a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800517e:	4622      	mov	r2, r4
 8005180:	462b      	mov	r3, r5
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	0159      	lsls	r1, r3, #5
 800518c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005190:	0150      	lsls	r0, r2, #5
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4621      	mov	r1, r4
 8005198:	1a51      	subs	r1, r2, r1
 800519a:	6139      	str	r1, [r7, #16]
 800519c:	4629      	mov	r1, r5
 800519e:	eb63 0301 	sbc.w	r3, r3, r1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051b0:	4659      	mov	r1, fp
 80051b2:	018b      	lsls	r3, r1, #6
 80051b4:	4651      	mov	r1, sl
 80051b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ba:	4651      	mov	r1, sl
 80051bc:	018a      	lsls	r2, r1, #6
 80051be:	4651      	mov	r1, sl
 80051c0:	ebb2 0801 	subs.w	r8, r2, r1
 80051c4:	4659      	mov	r1, fp
 80051c6:	eb63 0901 	sbc.w	r9, r3, r1
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051de:	4690      	mov	r8, r2
 80051e0:	4699      	mov	r9, r3
 80051e2:	4623      	mov	r3, r4
 80051e4:	eb18 0303 	adds.w	r3, r8, r3
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	462b      	mov	r3, r5
 80051ec:	eb49 0303 	adc.w	r3, r9, r3
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051fe:	4629      	mov	r1, r5
 8005200:	024b      	lsls	r3, r1, #9
 8005202:	4621      	mov	r1, r4
 8005204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005208:	4621      	mov	r1, r4
 800520a:	024a      	lsls	r2, r1, #9
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005212:	2200      	movs	r2, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
 8005216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800521c:	f7fb fd44 	bl	8000ca8 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005228:	e058      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522a:	4b38      	ldr	r3, [pc, #224]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	2200      	movs	r2, #0
 8005232:	4618      	mov	r0, r3
 8005234:	4611      	mov	r1, r2
 8005236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800523a:	623b      	str	r3, [r7, #32]
 800523c:	2300      	movs	r3, #0
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
 8005240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	0159      	lsls	r1, r3, #5
 8005252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005256:	0150      	lsls	r0, r2, #5
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4641      	mov	r1, r8
 800525e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb63 0b01 	sbc.w	fp, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800527c:	ebb2 040a 	subs.w	r4, r2, sl
 8005280:	eb63 050b 	sbc.w	r5, r3, fp
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	00eb      	lsls	r3, r5, #3
 800528e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005292:	00e2      	lsls	r2, r4, #3
 8005294:	4614      	mov	r4, r2
 8005296:	461d      	mov	r5, r3
 8005298:	4643      	mov	r3, r8
 800529a:	18e3      	adds	r3, r4, r3
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	464b      	mov	r3, r9
 80052a0:	eb45 0303 	adc.w	r3, r5, r3
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052b2:	4629      	mov	r1, r5
 80052b4:	028b      	lsls	r3, r1, #10
 80052b6:	4621      	mov	r1, r4
 80052b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052bc:	4621      	mov	r1, r4
 80052be:	028a      	lsls	r2, r1, #10
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	61fa      	str	r2, [r7, #28]
 80052cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d0:	f7fb fcea 	bl	8000ca8 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	3301      	adds	r3, #1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052f6:	e002      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetSysClockFreq+0x204>)
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005300:	4618      	mov	r0, r3
 8005302:	3750      	adds	r7, #80	; 0x50
 8005304:	46bd      	mov	sp, r7
 8005306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	00f42400 	.word	0x00f42400
 8005314:	007a1200 	.word	0x007a1200

08005318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_RCC_GetHCLKFreq+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000000 	.word	0x20000000

08005330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005334:	f7ff fff0 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b05      	ldr	r3, [pc, #20]	; (8005350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0a9b      	lsrs	r3, r3, #10
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4903      	ldr	r1, [pc, #12]	; (8005354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40023800 	.word	0x40023800
 8005354:	0800cdb4 	.word	0x0800cdb4

08005358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800535c:	f7ff ffdc 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0b5b      	lsrs	r3, r3, #13
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4903      	ldr	r1, [pc, #12]	; (800537c <HAL_RCC_GetPCLK2Freq+0x24>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005374:	4618      	mov	r0, r3
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40023800 	.word	0x40023800
 800537c:	0800cdb4 	.word	0x0800cdb4

08005380 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	220f      	movs	r2, #15
 800538e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005390:	4b12      	ldr	r3, [pc, #72]	; (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0203 	and.w	r2, r3, #3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053b4:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	08db      	lsrs	r3, r3, #3
 80053ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <HAL_RCC_GetClockConfig+0x60>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 020f 	and.w	r2, r3, #15
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40023c00 	.word	0x40023c00

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005414:	2b00      	cmp	r3, #0
 8005416:	d075      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005418:	4b91      	ldr	r3, [pc, #580]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800541e:	f7fc fdd1 	bl	8001fc4 <HAL_GetTick>
 8005422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005426:	f7fc fdcd 	bl	8001fc4 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e189      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005438:	4b8a      	ldr	r3, [pc, #552]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f0      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d009      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	019a      	lsls	r2, r3, #6
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	071b      	lsls	r3, r3, #28
 800545c:	4981      	ldr	r1, [pc, #516]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01f      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005470:	4b7c      	ldr	r3, [pc, #496]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005476:	0f1b      	lsrs	r3, r3, #28
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	019a      	lsls	r2, r3, #6
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	431a      	orrs	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	071b      	lsls	r3, r3, #28
 8005490:	4974      	ldr	r1, [pc, #464]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005498:	4b72      	ldr	r3, [pc, #456]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549e:	f023 021f 	bic.w	r2, r3, #31
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	496e      	ldr	r1, [pc, #440]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00d      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	019a      	lsls	r2, r3, #6
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	061b      	lsls	r3, r3, #24
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	071b      	lsls	r3, r3, #28
 80054d0:	4964      	ldr	r1, [pc, #400]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054d8:	4b61      	ldr	r3, [pc, #388]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054de:	f7fc fd71 	bl	8001fc4 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054e6:	f7fc fd6d 	bl	8001fc4 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e129      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f8:	4b5a      	ldr	r3, [pc, #360]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005518:	2b00      	cmp	r3, #0
 800551a:	d079      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800551c:	4b52      	ldr	r3, [pc, #328]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005522:	f7fc fd4f 	bl	8001fc4 <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005528:	e008      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800552a:	f7fc fd4b 	bl	8001fc4 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e107      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800553c:	4b49      	ldr	r3, [pc, #292]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005548:	d0ef      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d020      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005556:	4b43      	ldr	r3, [pc, #268]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	0f1b      	lsrs	r3, r3, #28
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	019a      	lsls	r2, r3, #6
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	061b      	lsls	r3, r3, #24
 8005570:	431a      	orrs	r2, r3
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	071b      	lsls	r3, r3, #28
 8005576:	493b      	ldr	r1, [pc, #236]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800557e:	4b39      	ldr	r3, [pc, #228]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005584:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	3b01      	subs	r3, #1
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	4934      	ldr	r1, [pc, #208]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01e      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055a4:	4b2f      	ldr	r3, [pc, #188]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	0e1b      	lsrs	r3, r3, #24
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	019a      	lsls	r2, r3, #6
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	061b      	lsls	r3, r3, #24
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	071b      	lsls	r3, r3, #28
 80055c4:	4927      	ldr	r1, [pc, #156]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055cc:	4b25      	ldr	r3, [pc, #148]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	4922      	ldr	r1, [pc, #136]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055e2:	4b21      	ldr	r3, [pc, #132]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055e8:	f7fc fcec 	bl	8001fc4 <HAL_GetTick>
 80055ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80055f0:	f7fc fce8 	bl	8001fc4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0a4      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005602:	4b18      	ldr	r3, [pc, #96]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800560a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560e:	d1ef      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 808b 	beq.w	8005734 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562c:	6413      	str	r3, [r2, #64]	; 0x40
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a0b      	ldr	r2, [pc, #44]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005646:	f7fc fcbd 	bl	8001fc4 <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800564c:	e010      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fc fcb9 	bl	8001fc4 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d909      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e075      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005660:	42470068 	.word	0x42470068
 8005664:	40023800 	.word	0x40023800
 8005668:	42470070 	.word	0x42470070
 800566c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005670:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0e8      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800567c:	4b36      	ldr	r3, [pc, #216]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005684:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x308>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	429a      	cmp	r2, r3
 8005698:	d028      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800569a:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056a4:	4b2d      	ldr	r3, [pc, #180]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056aa:	4b2c      	ldr	r3, [pc, #176]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056b0:	4a29      	ldr	r2, [pc, #164]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056b6:	4b28      	ldr	r3, [pc, #160]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d114      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056c2:	f7fc fc7f 	bl	8001fc4 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c8:	e00a      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ca:	f7fc fc7b 	bl	8001fc4 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d8:	4293      	cmp	r3, r2
 80056da:	d901      	bls.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e035      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ee      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f8:	d10d      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	4912      	ldr	r1, [pc, #72]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005710:	4313      	orrs	r3, r2
 8005712:	608b      	str	r3, [r1, #8]
 8005714:	e005      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800571c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005720:	6093      	str	r3, [r2, #8]
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572e:	490a      	ldr	r1, [pc, #40]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005730:	4313      	orrs	r3, r2
 8005732:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005748:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40007000 	.word	0x40007000
 8005758:	40023800 	.word	0x40023800
 800575c:	42470e40 	.word	0x42470e40
 8005760:	424711e0 	.word	0x424711e0

08005764 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d13e      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005782:	4b23      	ldr	r3, [pc, #140]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d12f      	bne.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800579a:	617b      	str	r3, [r7, #20]
          break;
 800579c:	e02f      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800579e:	4b1c      	ldr	r3, [pc, #112]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057aa:	d108      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80057b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	e007      	b.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d4:	099b      	lsrs	r3, r3, #6
 80057d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e8:	0f1b      	lsrs	r3, r3, #28
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f4:	617b      	str	r3, [r7, #20]
          break;
 80057f6:	e002      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
          break;
 80057fc:	bf00      	nop
        }
      }
      break;
 80057fe:	bf00      	nop
    }
  }
  return frequency;
 8005800:	697b      	ldr	r3, [r7, #20]
}
 8005802:	4618      	mov	r0, r3
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800
 8005814:	00bb8000 	.word	0x00bb8000
 8005818:	007a1200 	.word	0x007a1200
 800581c:	00f42400 	.word	0x00f42400

08005820 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e025      	b.n	8005880 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fc f9c7 	bl	8001bdc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f001 f855 	bl	8006910 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	461a      	mov	r2, r3
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	f001 f8aa 	bl	80069ca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e041      	b.n	800591e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc f898 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f000 fa96 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d001      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e04e      	b.n	80059de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_TIM_Base_Start_IT+0xc4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d01d      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d111      	bne.n	80059cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d010      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	e007      	b.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40010400 	.word	0x40010400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40001800 	.word	0x40001800

08005a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0202 	mvn.w	r2, #2
 8005a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9b5 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f9a7 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f9b8 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0204 	mvn.w	r2, #4
 8005a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f98b 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f97d 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f98e 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d122      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0208 	mvn.w	r2, #8
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f961 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f953 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f964 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d122      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d11b      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0210 	mvn.w	r2, #16
 8005b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2208      	movs	r2, #8
 8005b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f937 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f929 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f93a 	bl	8005dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10e      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0201 	mvn.w	r2, #1
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb fe10 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fae0 	bl	8006178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f8ff 	bl	8005de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 faaa 	bl	8006164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIM_ConfigClockSource+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e0b4      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x186>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6c:	d03e      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0xd4>
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	f200 8087 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_TIM_ConfigClockSource+0x172>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	d87f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b70      	cmp	r3, #112	; 0x70
 8005c86:	d01a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xa6>
 8005c88:	2b70      	cmp	r3, #112	; 0x70
 8005c8a:	d87b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b60      	cmp	r3, #96	; 0x60
 8005c8e:	d050      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x11a>
 8005c90:	2b60      	cmp	r3, #96	; 0x60
 8005c92:	d877      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b50      	cmp	r3, #80	; 0x50
 8005c96:	d03c      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0xfa>
 8005c98:	2b50      	cmp	r3, #80	; 0x50
 8005c9a:	d873      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d058      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x13a>
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d86f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b30      	cmp	r3, #48	; 0x30
 8005ca6:	d064      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	d86b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d060      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d867      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d05a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cbc:	e062      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f000 f9ad 	bl	800602c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	609a      	str	r2, [r3, #8]
      break;
 8005cea:	e04f      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f000 f996 	bl	800602c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e03c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 f90a 	bl	8005f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2150      	movs	r1, #80	; 0x50
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f963 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005d30:	e02c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 f929 	bl	8005f96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2160      	movs	r1, #96	; 0x60
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f953 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005d50:	e01c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 f8ea 	bl	8005f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2140      	movs	r1, #64	; 0x40
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f943 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 f93a 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a40      	ldr	r2, [pc, #256]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3d      	ldr	r2, [pc, #244]	; (8005f10 <TIM_Base_SetConfig+0x118>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3c      	ldr	r2, [pc, #240]	; (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3b      	ldr	r2, [pc, #236]	; (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a3a      	ldr	r2, [pc, #232]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2f      	ldr	r2, [pc, #188]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d02b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d027      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2c      	ldr	r2, [pc, #176]	; (8005f10 <TIM_Base_SetConfig+0x118>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d023      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d017      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <TIM_Base_SetConfig+0x128>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <TIM_Base_SetConfig+0x134>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <TIM_Base_SetConfig+0x138>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <TIM_Base_SetConfig+0x13c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d108      	bne.n	8005ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_Base_SetConfig+0xf8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d103      	bne.n	8005ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	615a      	str	r2, [r3, #20]
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800
 8005f2c:	40001800 	.word	0x40001800
 8005f30:	40001c00 	.word	0x40001c00
 8005f34:	40002000 	.word	0x40002000

08005f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 030a 	bic.w	r3, r3, #10
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f023 0210 	bic.w	r2, r3, #16
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	031b      	lsls	r3, r3, #12
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	f043 0307 	orr.w	r3, r3, #7
 8006018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	431a      	orrs	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006080:	2302      	movs	r3, #2
 8006082:	e05a      	b.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a21      	ldr	r2, [pc, #132]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d022      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d0:	d01d      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1d      	ldr	r2, [pc, #116]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d018      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1a      	ldr	r2, [pc, #104]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a17      	ldr	r2, [pc, #92]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a15      	ldr	r2, [pc, #84]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10c      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40010400 	.word	0x40010400
 800615c:	40014000 	.word	0x40014000
 8006160:	40001800 	.word	0x40001800

08006164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e03f      	b.n	800621e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb fc38 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f929 	bl	8006428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b08a      	sub	sp, #40	; 0x28
 800622a:	af02      	add	r7, sp, #8
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b20      	cmp	r3, #32
 8006244:	d17c      	bne.n	8006340 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_UART_Transmit+0x2c>
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e075      	b.n	8006342 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_UART_Transmit+0x3e>
 8006260:	2302      	movs	r3, #2
 8006262:	e06e      	b.n	8006342 <HAL_UART_Transmit+0x11c>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2221      	movs	r2, #33	; 0x21
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800627a:	f7fb fea3 	bl	8001fc4 <HAL_GetTick>
 800627e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	88fa      	ldrh	r2, [r7, #6]
 8006284:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006294:	d108      	bne.n	80062a8 <HAL_UART_Transmit+0x82>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e003      	b.n	80062b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062b8:	e02a      	b.n	8006310 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f840 	bl	800634a <UART_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e036      	b.n	8006342 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	3302      	adds	r3, #2
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e007      	b.n	8006302 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	781a      	ldrb	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	3301      	adds	r3, #1
 8006300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1cf      	bne.n	80062ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	2140      	movs	r1, #64	; 0x40
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f810 	bl	800634a <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e006      	b.n	8006342 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	e000      	b.n	8006342 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006340:	2302      	movs	r3, #2
  }
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b090      	sub	sp, #64	; 0x40
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	603b      	str	r3, [r7, #0]
 8006356:	4613      	mov	r3, r2
 8006358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635a:	e050      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d04c      	beq.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0x30>
 800636a:	f7fb fe2b 	bl	8001fc4 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006376:	429a      	cmp	r2, r3
 8006378:	d241      	bcs.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800639a:	637a      	str	r2, [r7, #52]	; 0x34
 800639c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3314      	adds	r3, #20
 80063b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ce:	623a      	str	r2, [r7, #32]
 80063d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	69f9      	ldr	r1, [r7, #28]
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	61bb      	str	r3, [r7, #24]
   return(result);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e5      	bne.n	80063ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e00f      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4013      	ands	r3, r2
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	429a      	cmp	r2, r3
 800641a:	d09f      	beq.n	800635c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3740      	adds	r7, #64	; 0x40
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b0c0      	sub	sp, #256	; 0x100
 800642e:	af00      	add	r7, sp, #0
 8006430:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006444:	68d9      	ldr	r1, [r3, #12]
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	ea40 0301 	orr.w	r3, r0, r1
 8006450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	431a      	orrs	r2, r3
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	431a      	orrs	r2, r3
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006480:	f021 010c 	bic.w	r1, r1, #12
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800648e:	430b      	orrs	r3, r1
 8006490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	6999      	ldr	r1, [r3, #24]
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	ea40 0301 	orr.w	r3, r0, r1
 80064ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b8f      	ldr	r3, [pc, #572]	; (80066f4 <UART_SetConfig+0x2cc>)
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d005      	beq.n	80064c8 <UART_SetConfig+0xa0>
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b8d      	ldr	r3, [pc, #564]	; (80066f8 <UART_SetConfig+0x2d0>)
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d104      	bne.n	80064d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064c8:	f7fe ff46 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 80064cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064d0:	e003      	b.n	80064da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064d2:	f7fe ff2d 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 80064d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e4:	f040 810c 	bne.w	8006700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064fa:	4622      	mov	r2, r4
 80064fc:	462b      	mov	r3, r5
 80064fe:	1891      	adds	r1, r2, r2
 8006500:	65b9      	str	r1, [r7, #88]	; 0x58
 8006502:	415b      	adcs	r3, r3
 8006504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800650a:	4621      	mov	r1, r4
 800650c:	eb12 0801 	adds.w	r8, r2, r1
 8006510:	4629      	mov	r1, r5
 8006512:	eb43 0901 	adc.w	r9, r3, r1
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800652a:	4690      	mov	r8, r2
 800652c:	4699      	mov	r9, r3
 800652e:	4623      	mov	r3, r4
 8006530:	eb18 0303 	adds.w	r3, r8, r3
 8006534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006538:	462b      	mov	r3, r5
 800653a:	eb49 0303 	adc.w	r3, r9, r3
 800653e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800654e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006556:	460b      	mov	r3, r1
 8006558:	18db      	adds	r3, r3, r3
 800655a:	653b      	str	r3, [r7, #80]	; 0x50
 800655c:	4613      	mov	r3, r2
 800655e:	eb42 0303 	adc.w	r3, r2, r3
 8006562:	657b      	str	r3, [r7, #84]	; 0x54
 8006564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800656c:	f7fa fb9c 	bl	8000ca8 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4b61      	ldr	r3, [pc, #388]	; (80066fc <UART_SetConfig+0x2d4>)
 8006576:	fba3 2302 	umull	r2, r3, r3, r2
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	011c      	lsls	r4, r3, #4
 800657e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006582:	2200      	movs	r2, #0
 8006584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006588:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800658c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	1891      	adds	r1, r2, r2
 8006596:	64b9      	str	r1, [r7, #72]	; 0x48
 8006598:	415b      	adcs	r3, r3
 800659a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800659c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065a0:	4641      	mov	r1, r8
 80065a2:	eb12 0a01 	adds.w	sl, r2, r1
 80065a6:	4649      	mov	r1, r9
 80065a8:	eb43 0b01 	adc.w	fp, r3, r1
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065c0:	4692      	mov	sl, r2
 80065c2:	469b      	mov	fp, r3
 80065c4:	4643      	mov	r3, r8
 80065c6:	eb1a 0303 	adds.w	r3, sl, r3
 80065ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ce:	464b      	mov	r3, r9
 80065d0:	eb4b 0303 	adc.w	r3, fp, r3
 80065d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065ec:	460b      	mov	r3, r1
 80065ee:	18db      	adds	r3, r3, r3
 80065f0:	643b      	str	r3, [r7, #64]	; 0x40
 80065f2:	4613      	mov	r3, r2
 80065f4:	eb42 0303 	adc.w	r3, r2, r3
 80065f8:	647b      	str	r3, [r7, #68]	; 0x44
 80065fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006602:	f7fa fb51 	bl	8000ca8 <__aeabi_uldivmod>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4611      	mov	r1, r2
 800660c:	4b3b      	ldr	r3, [pc, #236]	; (80066fc <UART_SetConfig+0x2d4>)
 800660e:	fba3 2301 	umull	r2, r3, r3, r1
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	2264      	movs	r2, #100	; 0x64
 8006616:	fb02 f303 	mul.w	r3, r2, r3
 800661a:	1acb      	subs	r3, r1, r3
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006622:	4b36      	ldr	r3, [pc, #216]	; (80066fc <UART_SetConfig+0x2d4>)
 8006624:	fba3 2302 	umull	r2, r3, r3, r2
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006630:	441c      	add	r4, r3
 8006632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800663c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	1891      	adds	r1, r2, r2
 800664a:	63b9      	str	r1, [r7, #56]	; 0x38
 800664c:	415b      	adcs	r3, r3
 800664e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006654:	4641      	mov	r1, r8
 8006656:	1851      	adds	r1, r2, r1
 8006658:	6339      	str	r1, [r7, #48]	; 0x30
 800665a:	4649      	mov	r1, r9
 800665c:	414b      	adcs	r3, r1
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800666c:	4659      	mov	r1, fp
 800666e:	00cb      	lsls	r3, r1, #3
 8006670:	4651      	mov	r1, sl
 8006672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006676:	4651      	mov	r1, sl
 8006678:	00ca      	lsls	r2, r1, #3
 800667a:	4610      	mov	r0, r2
 800667c:	4619      	mov	r1, r3
 800667e:	4603      	mov	r3, r0
 8006680:	4642      	mov	r2, r8
 8006682:	189b      	adds	r3, r3, r2
 8006684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006688:	464b      	mov	r3, r9
 800668a:	460a      	mov	r2, r1
 800668c:	eb42 0303 	adc.w	r3, r2, r3
 8006690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066a8:	460b      	mov	r3, r1
 80066aa:	18db      	adds	r3, r3, r3
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ae:	4613      	mov	r3, r2
 80066b0:	eb42 0303 	adc.w	r3, r2, r3
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066be:	f7fa faf3 	bl	8000ca8 <__aeabi_uldivmod>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <UART_SetConfig+0x2d4>)
 80066c8:	fba3 1302 	umull	r1, r3, r3, r2
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	2164      	movs	r1, #100	; 0x64
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	3332      	adds	r3, #50	; 0x32
 80066da:	4a08      	ldr	r2, [pc, #32]	; (80066fc <UART_SetConfig+0x2d4>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	f003 0207 	and.w	r2, r3, #7
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4422      	add	r2, r4
 80066ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066f0:	e105      	b.n	80068fe <UART_SetConfig+0x4d6>
 80066f2:	bf00      	nop
 80066f4:	40011000 	.word	0x40011000
 80066f8:	40011400 	.word	0x40011400
 80066fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006704:	2200      	movs	r2, #0
 8006706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800670a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800670e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006712:	4642      	mov	r2, r8
 8006714:	464b      	mov	r3, r9
 8006716:	1891      	adds	r1, r2, r2
 8006718:	6239      	str	r1, [r7, #32]
 800671a:	415b      	adcs	r3, r3
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
 800671e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006722:	4641      	mov	r1, r8
 8006724:	1854      	adds	r4, r2, r1
 8006726:	4649      	mov	r1, r9
 8006728:	eb43 0501 	adc.w	r5, r3, r1
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	00eb      	lsls	r3, r5, #3
 8006736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800673a:	00e2      	lsls	r2, r4, #3
 800673c:	4614      	mov	r4, r2
 800673e:	461d      	mov	r5, r3
 8006740:	4643      	mov	r3, r8
 8006742:	18e3      	adds	r3, r4, r3
 8006744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006748:	464b      	mov	r3, r9
 800674a:	eb45 0303 	adc.w	r3, r5, r3
 800674e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800675e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800676e:	4629      	mov	r1, r5
 8006770:	008b      	lsls	r3, r1, #2
 8006772:	4621      	mov	r1, r4
 8006774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006778:	4621      	mov	r1, r4
 800677a:	008a      	lsls	r2, r1, #2
 800677c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006780:	f7fa fa92 	bl	8000ca8 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4b60      	ldr	r3, [pc, #384]	; (800690c <UART_SetConfig+0x4e4>)
 800678a:	fba3 2302 	umull	r2, r3, r3, r2
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	011c      	lsls	r4, r3, #4
 8006792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006796:	2200      	movs	r2, #0
 8006798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800679c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	1891      	adds	r1, r2, r2
 80067aa:	61b9      	str	r1, [r7, #24]
 80067ac:	415b      	adcs	r3, r3
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067b4:	4641      	mov	r1, r8
 80067b6:	1851      	adds	r1, r2, r1
 80067b8:	6139      	str	r1, [r7, #16]
 80067ba:	4649      	mov	r1, r9
 80067bc:	414b      	adcs	r3, r1
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067cc:	4659      	mov	r1, fp
 80067ce:	00cb      	lsls	r3, r1, #3
 80067d0:	4651      	mov	r1, sl
 80067d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067d6:	4651      	mov	r1, sl
 80067d8:	00ca      	lsls	r2, r1, #3
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	4603      	mov	r3, r0
 80067e0:	4642      	mov	r2, r8
 80067e2:	189b      	adds	r3, r3, r2
 80067e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067e8:	464b      	mov	r3, r9
 80067ea:	460a      	mov	r2, r1
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80067fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800680c:	4649      	mov	r1, r9
 800680e:	008b      	lsls	r3, r1, #2
 8006810:	4641      	mov	r1, r8
 8006812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006816:	4641      	mov	r1, r8
 8006818:	008a      	lsls	r2, r1, #2
 800681a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800681e:	f7fa fa43 	bl	8000ca8 <__aeabi_uldivmod>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4b39      	ldr	r3, [pc, #228]	; (800690c <UART_SetConfig+0x4e4>)
 8006828:	fba3 1302 	umull	r1, r3, r3, r2
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	2164      	movs	r1, #100	; 0x64
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	3332      	adds	r3, #50	; 0x32
 800683a:	4a34      	ldr	r2, [pc, #208]	; (800690c <UART_SetConfig+0x4e4>)
 800683c:	fba2 2303 	umull	r2, r3, r2, r3
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006846:	441c      	add	r4, r3
 8006848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684c:	2200      	movs	r2, #0
 800684e:	673b      	str	r3, [r7, #112]	; 0x70
 8006850:	677a      	str	r2, [r7, #116]	; 0x74
 8006852:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006856:	4642      	mov	r2, r8
 8006858:	464b      	mov	r3, r9
 800685a:	1891      	adds	r1, r2, r2
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	415b      	adcs	r3, r3
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006866:	4641      	mov	r1, r8
 8006868:	1851      	adds	r1, r2, r1
 800686a:	6039      	str	r1, [r7, #0]
 800686c:	4649      	mov	r1, r9
 800686e:	414b      	adcs	r3, r1
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800687e:	4659      	mov	r1, fp
 8006880:	00cb      	lsls	r3, r1, #3
 8006882:	4651      	mov	r1, sl
 8006884:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006888:	4651      	mov	r1, sl
 800688a:	00ca      	lsls	r2, r1, #3
 800688c:	4610      	mov	r0, r2
 800688e:	4619      	mov	r1, r3
 8006890:	4603      	mov	r3, r0
 8006892:	4642      	mov	r2, r8
 8006894:	189b      	adds	r3, r3, r2
 8006896:	66bb      	str	r3, [r7, #104]	; 0x68
 8006898:	464b      	mov	r3, r9
 800689a:	460a      	mov	r2, r1
 800689c:	eb42 0303 	adc.w	r3, r2, r3
 80068a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	663b      	str	r3, [r7, #96]	; 0x60
 80068ac:	667a      	str	r2, [r7, #100]	; 0x64
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068ba:	4649      	mov	r1, r9
 80068bc:	008b      	lsls	r3, r1, #2
 80068be:	4641      	mov	r1, r8
 80068c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c4:	4641      	mov	r1, r8
 80068c6:	008a      	lsls	r2, r1, #2
 80068c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068cc:	f7fa f9ec 	bl	8000ca8 <__aeabi_uldivmod>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4b0d      	ldr	r3, [pc, #52]	; (800690c <UART_SetConfig+0x4e4>)
 80068d6:	fba3 1302 	umull	r1, r3, r3, r2
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2164      	movs	r1, #100	; 0x64
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	; 0x32
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <UART_SetConfig+0x4e4>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4422      	add	r2, r4
 80068fc:	609a      	str	r2, [r3, #8]
}
 80068fe:	bf00      	nop
 8006900:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006904:	46bd      	mov	sp, r7
 8006906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800690a:	bf00      	nop
 800690c:	51eb851f 	.word	0x51eb851f

08006910 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d123      	bne.n	800696a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800692a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	6851      	ldr	r1, [r2, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	6892      	ldr	r2, [r2, #8]
 8006936:	4311      	orrs	r1, r2
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	68d2      	ldr	r2, [r2, #12]
 800693c:	4311      	orrs	r1, r2
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	6912      	ldr	r2, [r2, #16]
 8006942:	4311      	orrs	r1, r2
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	6952      	ldr	r2, [r2, #20]
 8006948:	4311      	orrs	r1, r2
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	6992      	ldr	r2, [r2, #24]
 800694e:	4311      	orrs	r1, r2
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	69d2      	ldr	r2, [r2, #28]
 8006954:	4311      	orrs	r1, r2
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	6a12      	ldr	r2, [r2, #32]
 800695a:	4311      	orrs	r1, r2
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006960:	430a      	orrs	r2, r1
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e028      	b.n	80069bc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	69d9      	ldr	r1, [r3, #28]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	4319      	orrs	r1, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	430b      	orrs	r3, r1
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006990:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	6851      	ldr	r1, [r2, #4]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	6892      	ldr	r2, [r2, #8]
 800699c:	4311      	orrs	r1, r2
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	68d2      	ldr	r2, [r2, #12]
 80069a2:	4311      	orrs	r1, r2
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	6912      	ldr	r2, [r2, #16]
 80069a8:	4311      	orrs	r1, r2
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	6952      	ldr	r2, [r2, #20]
 80069ae:	4311      	orrs	r1, r2
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	6992      	ldr	r2, [r2, #24]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d128      	bne.n	8006a2e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	1e59      	subs	r1, r3, #1
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	4319      	orrs	r1, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	4319      	orrs	r1, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	031b      	lsls	r3, r3, #12
 8006a06:	4319      	orrs	r1, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	041b      	lsls	r3, r3, #16
 8006a10:	4319      	orrs	r1, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	051b      	lsls	r3, r3, #20
 8006a1a:	4319      	orrs	r1, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	061b      	lsls	r3, r3, #24
 8006a24:	430b      	orrs	r3, r1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	609a      	str	r2, [r3, #8]
 8006a2c:	e02f      	b.n	8006a8e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	68d2      	ldr	r2, [r2, #12]
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	0311      	lsls	r1, r2, #12
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	6952      	ldr	r2, [r2, #20]
 8006a46:	3a01      	subs	r2, #1
 8006a48:	0512      	lsls	r2, r2, #20
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	1e59      	subs	r1, r3, #1
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	4319      	orrs	r1, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	4319      	orrs	r1, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	4319      	orrs	r1, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	061b      	lsls	r3, r3, #24
 8006a86:	430b      	orrs	r3, r1
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <USB_FlushTxFifo+0x64>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e01b      	b.n	8006b38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	daf2      	bge.n	8006aee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	019b      	lsls	r3, r3, #6
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a08      	ldr	r2, [pc, #32]	; (8006b44 <USB_FlushTxFifo+0x64>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e006      	b.n	8006b38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d0f0      	beq.n	8006b18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	00030d40 	.word	0x00030d40

08006b48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <USB_FlushRxFifo+0x5c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e018      	b.n	8006b98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	daf2      	bge.n	8006b54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2210      	movs	r2, #16
 8006b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <USB_FlushRxFifo+0x5c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e006      	b.n	8006b98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b10      	cmp	r3, #16
 8006b94:	d0f0      	beq.n	8006b78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	00030d40 	.word	0x00030d40

08006ba8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08b      	sub	sp, #44	; 0x2c
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	089b      	lsrs	r3, r3, #2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	f003 0303 	and.w	r3, r3, #3
 8006bcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	623b      	str	r3, [r7, #32]
 8006bd2:	e014      	b.n	8006bfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	3301      	adds	r3, #1
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	3301      	adds	r3, #1
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	3301      	adds	r3, #1
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d3e6      	bcc.n	8006bd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c06:	8bfb      	ldrh	r3, [r7, #30]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01e      	beq.n	8006c4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c16:	461a      	mov	r2, r3
 8006c18:	f107 0310 	add.w	r3, r7, #16
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	701a      	strb	r2, [r3, #0]
      i++;
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	3301      	adds	r3, #1
 8006c36:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c3e:	8bfb      	ldrh	r3, [r7, #30]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c44:	8bfb      	ldrh	r3, [r7, #30]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1ea      	bne.n	8006c20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	372c      	adds	r7, #44	; 0x2c
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cb8:	f023 0303 	bic.w	r3, r3, #3
 8006cbc:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	68f9      	ldr	r1, [r7, #12]
 8006cce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d107      	bne.n	8006cec <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	e009      	b.n	8006d00 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d106      	bne.n	8006d00 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f241 7370 	movw	r3, #6000	; 0x1770
 8006cfe:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	b29b      	uxth	r3, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b089      	sub	sp, #36	; 0x24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	0c9b      	lsrs	r3, r3, #18
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	0fdb      	lsrs	r3, r3, #31
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d104      	bne.n	8006d8a <USB_HC_Halt+0x5a>
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	e0c8      	b.n	8006f1c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <USB_HC_Halt+0x66>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d163      	bne.n	8006e5e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006db4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 80ab 	bne.w	8006f1a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d133      	bne.n	8006e38 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	0151      	lsls	r1, r2, #5
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	440a      	add	r2, r1
 8006de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dee:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e0e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e1c:	d81d      	bhi.n	8006e5a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e34:	d0ec      	beq.n	8006e10 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e36:	e070      	b.n	8006f1a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e56:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e58:	e05f      	b.n	8006f1a <USB_HC_Halt+0x1ea>
            break;
 8006e5a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e5c:	e05d      	b.n	8006f1a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d133      	bne.n	8006ef6 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ecc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eda:	d81d      	bhi.n	8006f18 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef2:	d0ec      	beq.n	8006ece <USB_HC_Halt+0x19e>
 8006ef4:	e011      	b.n	8006f1a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e000      	b.n	8006f1a <USB_HC_Halt+0x1ea>
          break;
 8006f18:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3724      	adds	r7, #36	; 0x24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff fdbe 	bl	8006abe <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f42:	2110      	movs	r1, #16
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fdcb 	bl	8006ae0 <USB_FlushTxFifo>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fdf7 	bl	8006b48 <USB_FlushRxFifo>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	e01f      	b.n	8006faa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d9dc      	bls.n	8006f6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	e034      	b.n	8007020 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fcc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fdc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	461a      	mov	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ffc:	d80c      	bhi.n	8007018 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007014:	d0ec      	beq.n	8006ff0 <USB_StopHost+0xc8>
 8007016:	e000      	b.n	800701a <USB_StopHost+0xf2>
        break;
 8007018:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3301      	adds	r3, #1
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b0f      	cmp	r3, #15
 8007024:	d9c7      	bls.n	8006fb6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702c:	461a      	mov	r2, r3
 800702e:	f04f 33ff 	mov.w	r3, #4294967295
 8007032:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f04f 32ff 	mov.w	r2, #4294967295
 800703a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fd2d 	bl	8006a9c <USB_EnableGlobalInt>

  return ret;
 8007042:	7ffb      	ldrb	r3, [r7, #31]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f804 	bl	8007070 <USBH_HandleSof>
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b0b      	cmp	r3, #11
 8007080:	d10a      	bne.n	8007098 <USBH_HandleSof+0x28>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
  }
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80070c4:	2200      	movs	r2, #0
 80070c6:	4619      	mov	r1, r3
 80070c8:	f000 f8ae 	bl	8007228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80070cc:	bf00      	nop
}
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070e4:	bf00      	nop
}
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007124:	2200      	movs	r2, #0
 8007126:	4619      	mov	r1, r3
 8007128:	f000 f87e 	bl	8007228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f910 	bl	800837c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	791b      	ldrb	r3, [r3, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f830 	bl	80071c8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	795b      	ldrb	r3, [r3, #5]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f82a 	bl	80071c8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007188:	2200      	movs	r2, #0
 800718a:	4619      	mov	r1, r3
 800718c:	f000 f84c 	bl	8007228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80071b6:	2200      	movs	r2, #0
 80071b8:	4619      	mov	r1, r3
 80071ba:	f000 f835 	bl	8007228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d80d      	bhi.n	80071f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	33e0      	adds	r3, #224	; 0xe0
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	33e0      	adds	r3, #224	; 0xe0
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	440b      	add	r3, r1
 80071f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800720a:	f3ef 8305 	mrs	r3, IPSR
 800720e:	607b      	str	r3, [r7, #4]
  return(result);
 8007210:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007212:	2b00      	cmp	r3, #0
 8007214:	bf14      	ite	ne
 8007216:	2301      	movne	r3, #1
 8007218:	2300      	moveq	r3, #0
 800721a:	b2db      	uxtb	r3, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <osMessagePut+0x1e>
    ticks = 1;
 8007242:	2301      	movs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007246:	f7ff ffdd 	bl	8007204 <inHandlerMode>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d018      	beq.n	8007282 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007250:	f107 0210 	add.w	r2, r7, #16
 8007254:	f107 0108 	add.w	r1, r7, #8
 8007258:	2300      	movs	r3, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f9aa 	bl	80075b4 <xQueueGenericSendFromISR>
 8007260:	4603      	mov	r3, r0
 8007262:	2b01      	cmp	r3, #1
 8007264:	d001      	beq.n	800726a <osMessagePut+0x42>
      return osErrorOS;
 8007266:	23ff      	movs	r3, #255	; 0xff
 8007268:	e018      	b.n	800729c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d014      	beq.n	800729a <osMessagePut+0x72>
 8007270:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <osMessagePut+0x7c>)
 8007272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	e00b      	b.n	800729a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007282:	f107 0108 	add.w	r1, r7, #8
 8007286:	2300      	movs	r3, #0
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f894 	bl	80073b8 <xQueueGenericSend>
 8007290:	4603      	mov	r3, r0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d001      	beq.n	800729a <osMessagePut+0x72>
      return osErrorOS;
 8007296:	23ff      	movs	r3, #255	; 0xff
 8007298:	e000      	b.n	800729c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007306:	d103      	bne.n	8007310 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e00c      	b.n	800732a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3308      	adds	r3, #8
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e002      	b.n	800731e <vListInsert+0x2e>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	d2f6      	bcs.n	8007318 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6892      	ldr	r2, [r2, #8]
 8007378:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6852      	ldr	r2, [r2, #4]
 8007382:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d103      	bne.n	8007396 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	1e5a      	subs	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08e      	sub	sp, #56	; 0x38
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073c6:	2300      	movs	r3, #0
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <xQueueGenericSend+0x40>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <xQueueGenericSend+0x44>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <xQueueGenericSend+0x46>
 80073fc:	2300      	movs	r3, #0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <xQueueGenericSend+0x60>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d103      	bne.n	8007426 <xQueueGenericSend+0x6e>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <xQueueGenericSend+0x72>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <xQueueGenericSend+0x74>
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xQueueGenericSend+0x8e>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	623b      	str	r3, [r7, #32]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007446:	f000 fd31 	bl	8007eac <xTaskGetSchedulerState>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d102      	bne.n	8007456 <xQueueGenericSend+0x9e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <xQueueGenericSend+0xa2>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <xQueueGenericSend+0xa4>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <xQueueGenericSend+0xbe>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	61fb      	str	r3, [r7, #28]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007476:	f000 fe37 	bl	80080e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	429a      	cmp	r2, r3
 8007484:	d302      	bcc.n	800748c <xQueueGenericSend+0xd4>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d129      	bne.n	80074e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007492:	f000 f92a 	bl	80076ea <prvCopyDataToQueue>
 8007496:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	d010      	beq.n	80074c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fbfb 	bl	8007ca0 <xTaskRemoveFromEventList>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d013      	beq.n	80074d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074b0:	4b3f      	ldr	r3, [pc, #252]	; (80075b0 <xQueueGenericSend+0x1f8>)
 80074b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	e00a      	b.n	80074d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074c8:	4b39      	ldr	r3, [pc, #228]	; (80075b0 <xQueueGenericSend+0x1f8>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074d8:	f000 fe36 	bl	8008148 <vPortExitCritical>
				return pdPASS;
 80074dc:	2301      	movs	r3, #1
 80074de:	e063      	b.n	80075a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074e6:	f000 fe2f 	bl	8008148 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	e05c      	b.n	80075a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fc33 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074fe:	2301      	movs	r3, #1
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007502:	f000 fe21 	bl	8008148 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007506:	f000 f9c5 	bl	8007894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800750a:	f000 fded 	bl	80080e8 <vPortEnterCritical>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007514:	b25b      	sxtb	r3, r3
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d103      	bne.n	8007524 <xQueueGenericSend+0x16c>
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800752a:	b25b      	sxtb	r3, r3
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d103      	bne.n	800753a <xQueueGenericSend+0x182>
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800753a:	f000 fe05 	bl	8008148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800753e:	1d3a      	adds	r2, r7, #4
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fc22 	bl	8007d90 <xTaskCheckForTimeOut>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d124      	bne.n	800759c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007554:	f000 f985 	bl	8007862 <prvIsQueueFull>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d018      	beq.n	8007590 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	3310      	adds	r3, #16
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fb76 	bl	8007c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800756c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800756e:	f000 f926 	bl	80077be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007572:	f000 f99d 	bl	80078b0 <xTaskResumeAll>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f47f af7c 	bne.w	8007476 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800757e:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <xQueueGenericSend+0x1f8>)
 8007580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	e772      	b.n	8007476 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007592:	f000 f914 	bl	80077be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007596:	f000 f98b 	bl	80078b0 <xTaskResumeAll>
 800759a:	e76c      	b.n	8007476 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800759c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800759e:	f000 f90e 	bl	80077be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075a2:	f000 f985 	bl	80078b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3738      	adds	r7, #56	; 0x38
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b090      	sub	sp, #64	; 0x40
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <xQueueGenericSendFromISR+0x3c>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <xQueueGenericSendFromISR+0x40>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <xQueueGenericSendFromISR+0x42>
 80075f4:	2300      	movs	r3, #0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d103      	bne.n	800761e <xQueueGenericSendFromISR+0x6a>
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <xQueueGenericSendFromISR+0x6e>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <xQueueGenericSendFromISR+0x70>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	623b      	str	r3, [r7, #32]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800763e:	f000 fe05 	bl	800824c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007642:	f3ef 8211 	mrs	r2, BASEPRI
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	61fa      	str	r2, [r7, #28]
 8007658:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800765a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	429a      	cmp	r2, r3
 8007668:	d302      	bcc.n	8007670 <xQueueGenericSendFromISR+0xbc>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d12f      	bne.n	80076d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007686:	f000 f830 	bl	80076ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800768a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d112      	bne.n	80076ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	d016      	beq.n	80076ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	3324      	adds	r3, #36	; 0x24
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fafd 	bl	8007ca0 <xTaskRemoveFromEventList>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00e      	beq.n	80076ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e007      	b.n	80076ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076be:	3301      	adds	r3, #1
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	b25a      	sxtb	r2, r3
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80076ca:	2301      	movs	r3, #1
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80076ce:	e001      	b.n	80076d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3740      	adds	r7, #64	; 0x40
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10d      	bne.n	8007724 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d14d      	bne.n	80077ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fbe7 	bl	8007ee8 <xTaskPriorityDisinherit>
 800771a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	609a      	str	r2, [r3, #8]
 8007722:	e043      	b.n	80077ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d119      	bne.n	800775e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6858      	ldr	r0, [r3, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	461a      	mov	r2, r3
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	f000 fe9b 	bl	8008470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	441a      	add	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d32b      	bcc.n	80077ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	e026      	b.n	80077ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	68d8      	ldr	r0, [r3, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	461a      	mov	r2, r3
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	f000 fe81 	bl	8008470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	425b      	negs	r3, r3
 8007778:	441a      	add	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d207      	bcs.n	800779a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	425b      	negs	r3, r3
 8007794:	441a      	add	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d105      	bne.n	80077ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077b4:	697b      	ldr	r3, [r7, #20]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077c6:	f000 fc8f 	bl	80080e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077d2:	e011      	b.n	80077f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d012      	beq.n	8007802 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3324      	adds	r3, #36	; 0x24
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fa5d 	bl	8007ca0 <xTaskRemoveFromEventList>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077ec:	f000 fb32 	bl	8007e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dce9      	bgt.n	80077d4 <prvUnlockQueue+0x16>
 8007800:	e000      	b.n	8007804 <prvUnlockQueue+0x46>
					break;
 8007802:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	22ff      	movs	r2, #255	; 0xff
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800780c:	f000 fc9c 	bl	8008148 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007810:	f000 fc6a 	bl	80080e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800781a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800781c:	e011      	b.n	8007842 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d012      	beq.n	800784c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3310      	adds	r3, #16
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fa38 	bl	8007ca0 <xTaskRemoveFromEventList>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007836:	f000 fb0d 	bl	8007e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	3b01      	subs	r3, #1
 800783e:	b2db      	uxtb	r3, r3
 8007840:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	dce9      	bgt.n	800781e <prvUnlockQueue+0x60>
 800784a:	e000      	b.n	800784e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800784c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	22ff      	movs	r2, #255	; 0xff
 8007852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007856:	f000 fc77 	bl	8008148 <vPortExitCritical>
}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800786a:	f000 fc3d 	bl	80080e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	429a      	cmp	r2, r3
 8007878:	d102      	bne.n	8007880 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	e001      	b.n	8007884 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007884:	f000 fc60 	bl	8008148 <vPortExitCritical>

	return xReturn;
 8007888:	68fb      	ldr	r3, [r7, #12]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007898:	4b04      	ldr	r3, [pc, #16]	; (80078ac <vTaskSuspendAll+0x18>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3301      	adds	r3, #1
 800789e:	4a03      	ldr	r2, [pc, #12]	; (80078ac <vTaskSuspendAll+0x18>)
 80078a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078a2:	bf00      	nop
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	200044a8 	.word	0x200044a8

080078b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078be:	4b41      	ldr	r3, [pc, #260]	; (80079c4 <xTaskResumeAll+0x114>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <xTaskResumeAll+0x2c>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	603b      	str	r3, [r7, #0]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078dc:	f000 fc04 	bl	80080e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078e0:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <xTaskResumeAll+0x114>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	4a37      	ldr	r2, [pc, #220]	; (80079c4 <xTaskResumeAll+0x114>)
 80078e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ea:	4b36      	ldr	r3, [pc, #216]	; (80079c4 <xTaskResumeAll+0x114>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d161      	bne.n	80079b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078f2:	4b35      	ldr	r3, [pc, #212]	; (80079c8 <xTaskResumeAll+0x118>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d05d      	beq.n	80079b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078fa:	e02e      	b.n	800795a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fc:	4b33      	ldr	r3, [pc, #204]	; (80079cc <xTaskResumeAll+0x11c>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3318      	adds	r3, #24
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fd2a 	bl	8007362 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff fd25 	bl	8007362 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	2201      	movs	r2, #1
 800791e:	409a      	lsls	r2, r3
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <xTaskResumeAll+0x120>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4313      	orrs	r3, r2
 8007926:	4a2a      	ldr	r2, [pc, #168]	; (80079d0 <xTaskResumeAll+0x120>)
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a27      	ldr	r2, [pc, #156]	; (80079d4 <xTaskResumeAll+0x124>)
 8007938:	441a      	add	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7ff fcb1 	bl	80072a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b23      	ldr	r3, [pc, #140]	; (80079d8 <xTaskResumeAll+0x128>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d302      	bcc.n	800795a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007954:	4b21      	ldr	r3, [pc, #132]	; (80079dc <xTaskResumeAll+0x12c>)
 8007956:	2201      	movs	r2, #1
 8007958:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800795a:	4b1c      	ldr	r3, [pc, #112]	; (80079cc <xTaskResumeAll+0x11c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1cc      	bne.n	80078fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007968:	f000 fa80 	bl	8007e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800796c:	4b1c      	ldr	r3, [pc, #112]	; (80079e0 <xTaskResumeAll+0x130>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d010      	beq.n	800799a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007978:	f000 f836 	bl	80079e8 <xTaskIncrementTick>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007982:	4b16      	ldr	r3, [pc, #88]	; (80079dc <xTaskResumeAll+0x12c>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3b01      	subs	r3, #1
 800798c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1f1      	bne.n	8007978 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007994:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <xTaskResumeAll+0x130>)
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <xTaskResumeAll+0x12c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079a6:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <xTaskResumeAll+0x134>)
 80079a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079b6:	f000 fbc7 	bl	8008148 <vPortExitCritical>

	return xAlreadyYielded;
 80079ba:	68bb      	ldr	r3, [r7, #8]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200044a8 	.word	0x200044a8
 80079c8:	20004488 	.word	0x20004488
 80079cc:	20004460 	.word	0x20004460
 80079d0:	20004490 	.word	0x20004490
 80079d4:	200043cc 	.word	0x200043cc
 80079d8:	200043c8 	.word	0x200043c8
 80079dc:	2000449c 	.word	0x2000449c
 80079e0:	20004498 	.word	0x20004498
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f2:	4b4e      	ldr	r3, [pc, #312]	; (8007b2c <xTaskIncrementTick+0x144>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f040 808e 	bne.w	8007b18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079fc:	4b4c      	ldr	r3, [pc, #304]	; (8007b30 <xTaskIncrementTick+0x148>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a04:	4a4a      	ldr	r2, [pc, #296]	; (8007b30 <xTaskIncrementTick+0x148>)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d120      	bne.n	8007a52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a10:	4b48      	ldr	r3, [pc, #288]	; (8007b34 <xTaskIncrementTick+0x14c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	603b      	str	r3, [r7, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <xTaskIncrementTick+0x46>
 8007a30:	4b40      	ldr	r3, [pc, #256]	; (8007b34 <xTaskIncrementTick+0x14c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	4b40      	ldr	r3, [pc, #256]	; (8007b38 <xTaskIncrementTick+0x150>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a3e      	ldr	r2, [pc, #248]	; (8007b34 <xTaskIncrementTick+0x14c>)
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	4a3e      	ldr	r2, [pc, #248]	; (8007b38 <xTaskIncrementTick+0x150>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	4b3d      	ldr	r3, [pc, #244]	; (8007b3c <xTaskIncrementTick+0x154>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	4a3c      	ldr	r2, [pc, #240]	; (8007b3c <xTaskIncrementTick+0x154>)
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	f000 fa0d 	bl	8007e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a52:	4b3b      	ldr	r3, [pc, #236]	; (8007b40 <xTaskIncrementTick+0x158>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d348      	bcc.n	8007aee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a5c:	4b35      	ldr	r3, [pc, #212]	; (8007b34 <xTaskIncrementTick+0x14c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a66:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <xTaskIncrementTick+0x158>)
 8007a68:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6c:	601a      	str	r2, [r3, #0]
					break;
 8007a6e:	e03e      	b.n	8007aee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a70:	4b30      	ldr	r3, [pc, #192]	; (8007b34 <xTaskIncrementTick+0x14c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d203      	bcs.n	8007a90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a88:	4a2d      	ldr	r2, [pc, #180]	; (8007b40 <xTaskIncrementTick+0x158>)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a8e:	e02e      	b.n	8007aee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff fc64 	bl	8007362 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	3318      	adds	r3, #24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fc5b 	bl	8007362 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <xTaskIncrementTick+0x15c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	4a22      	ldr	r2, [pc, #136]	; (8007b44 <xTaskIncrementTick+0x15c>)
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <xTaskIncrementTick+0x160>)
 8007acc:	441a      	add	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f7ff fbe7 	bl	80072a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ade:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <xTaskIncrementTick+0x164>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d3b9      	bcc.n	8007a5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aec:	e7b6      	b.n	8007a5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007aee:	4b17      	ldr	r3, [pc, #92]	; (8007b4c <xTaskIncrementTick+0x164>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4914      	ldr	r1, [pc, #80]	; (8007b48 <xTaskIncrementTick+0x160>)
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d901      	bls.n	8007b0a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b06:	2301      	movs	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b0a:	4b11      	ldr	r3, [pc, #68]	; (8007b50 <xTaskIncrementTick+0x168>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	e004      	b.n	8007b22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b18:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <xTaskIncrementTick+0x16c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <xTaskIncrementTick+0x16c>)
 8007b20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b22:	697b      	ldr	r3, [r7, #20]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	200044a8 	.word	0x200044a8
 8007b30:	2000448c 	.word	0x2000448c
 8007b34:	20004458 	.word	0x20004458
 8007b38:	2000445c 	.word	0x2000445c
 8007b3c:	200044a0 	.word	0x200044a0
 8007b40:	200044a4 	.word	0x200044a4
 8007b44:	20004490 	.word	0x20004490
 8007b48:	200043cc 	.word	0x200043cc
 8007b4c:	200043c8 	.word	0x200043c8
 8007b50:	2000449c 	.word	0x2000449c
 8007b54:	20004498 	.word	0x20004498

08007b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b5e:	4b39      	ldr	r3, [pc, #228]	; (8007c44 <vTaskSwitchContext+0xec>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b66:	4b38      	ldr	r3, [pc, #224]	; (8007c48 <vTaskSwitchContext+0xf0>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b6c:	e066      	b.n	8007c3c <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8007b6e:	4b36      	ldr	r3, [pc, #216]	; (8007c48 <vTaskSwitchContext+0xf0>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007b74:	4b35      	ldr	r3, [pc, #212]	; (8007c4c <vTaskSwitchContext+0xf4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	61fb      	str	r3, [r7, #28]
 8007b7c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d111      	bne.n	8007bb0 <vTaskSwitchContext+0x58>
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d10b      	bne.n	8007bb0 <vTaskSwitchContext+0x58>
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d105      	bne.n	8007bb0 <vTaskSwitchContext+0x58>
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d008      	beq.n	8007bc2 <vTaskSwitchContext+0x6a>
 8007bb0:	4b26      	ldr	r3, [pc, #152]	; (8007c4c <vTaskSwitchContext+0xf4>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <vTaskSwitchContext+0xf4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3334      	adds	r3, #52	; 0x34
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7f9 fa2b 	bl	8001018 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc2:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <vTaskSwitchContext+0xf8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	fab3 f383 	clz	r3, r3
 8007bce:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	f1c3 031f 	rsb	r3, r3, #31
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	491e      	ldr	r1, [pc, #120]	; (8007c54 <vTaskSwitchContext+0xfc>)
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <vTaskSwitchContext+0xaa>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	607b      	str	r3, [r7, #4]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <vTaskSwitchContext+0xa8>
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a11      	ldr	r2, [pc, #68]	; (8007c54 <vTaskSwitchContext+0xfc>)
 8007c0e:	4413      	add	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3308      	adds	r3, #8
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d104      	bne.n	8007c32 <vTaskSwitchContext+0xda>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	4a04      	ldr	r2, [pc, #16]	; (8007c4c <vTaskSwitchContext+0xf4>)
 8007c3a:	6013      	str	r3, [r2, #0]
}
 8007c3c:	bf00      	nop
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	200044a8 	.word	0x200044a8
 8007c48:	2000449c 	.word	0x2000449c
 8007c4c:	200043c8 	.word	0x200043c8
 8007c50:	20004490 	.word	0x20004490
 8007c54:	200043cc 	.word	0x200043cc

08007c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60fb      	str	r3, [r7, #12]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <vTaskPlaceOnEventList+0x44>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3318      	adds	r3, #24
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff fb32 	bl	80072f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	6838      	ldr	r0, [r7, #0]
 8007c90:	f000 f9b0 	bl	8007ff4 <prvAddCurrentTaskToDelayedList>
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	200043c8 	.word	0x200043c8

08007ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	3318      	adds	r3, #24
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fb46 	bl	8007362 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <xTaskRemoveFromEventList+0xac>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d11c      	bne.n	8007d18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fb3d 	bl	8007362 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	2201      	movs	r2, #1
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <xTaskRemoveFromEventList+0xb0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <xTaskRemoveFromEventList+0xb0>)
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <xTaskRemoveFromEventList+0xb4>)
 8007d08:	441a      	add	r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7ff fac9 	bl	80072a8 <vListInsertEnd>
 8007d16:	e005      	b.n	8007d24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	480e      	ldr	r0, [pc, #56]	; (8007d58 <xTaskRemoveFromEventList+0xb8>)
 8007d20:	f7ff fac2 	bl	80072a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <xTaskRemoveFromEventList+0xbc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d905      	bls.n	8007d3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <xTaskRemoveFromEventList+0xc0>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	e001      	b.n	8007d42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d42:	697b      	ldr	r3, [r7, #20]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	200044a8 	.word	0x200044a8
 8007d50:	20004490 	.word	0x20004490
 8007d54:	200043cc 	.word	0x200043cc
 8007d58:	20004460 	.word	0x20004460
 8007d5c:	200043c8 	.word	0x200043c8
 8007d60:	2000449c 	.word	0x2000449c

08007d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <vTaskInternalSetTimeOutState+0x24>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <vTaskInternalSetTimeOutState+0x28>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	200044a0 	.word	0x200044a0
 8007d8c:	2000448c 	.word	0x2000448c

08007d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	613b      	str	r3, [r7, #16]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	60fb      	str	r3, [r7, #12]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dd2:	f000 f989 	bl	80080e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <xTaskCheckForTimeOut+0xbc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dee:	d102      	bne.n	8007df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e023      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <xTaskCheckForTimeOut+0xc0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d007      	beq.n	8007e12 <xTaskCheckForTimeOut+0x82>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d302      	bcc.n	8007e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e015      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d20b      	bcs.n	8007e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad2      	subs	r2, r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff ff9b 	bl	8007d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	e004      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e3e:	f000 f983 	bl	8008148 <vPortExitCritical>

	return xReturn;
 8007e42:	69fb      	ldr	r3, [r7, #28]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3720      	adds	r7, #32
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	2000448c 	.word	0x2000448c
 8007e50:	200044a0 	.word	0x200044a0

08007e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e58:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <vTaskMissedYield+0x14>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	2000449c 	.word	0x2000449c

08007e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e72:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <prvResetNextTaskUnblockTime+0x38>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e84:	e008      	b.n	8007e98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e86:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <prvResetNextTaskUnblockTime+0x38>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	4a04      	ldr	r2, [pc, #16]	; (8007ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8007e96:	6013      	str	r3, [r2, #0]
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	20004458 	.word	0x20004458
 8007ea8:	200044a4 	.word	0x200044a4

08007eac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <xTaskGetSchedulerState+0x34>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d102      	bne.n	8007ec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	e008      	b.n	8007ed2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ec0:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <xTaskGetSchedulerState+0x38>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	607b      	str	r3, [r7, #4]
 8007ecc:	e001      	b.n	8007ed2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ed2:	687b      	ldr	r3, [r7, #4]
	}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	20004494 	.word	0x20004494
 8007ee4:	200044a8 	.word	0x200044a8

08007ee8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d06e      	beq.n	8007fdc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007efe:	4b3a      	ldr	r3, [pc, #232]	; (8007fe8 <xTaskPriorityDisinherit+0x100>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d00a      	beq.n	8007f1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	60fb      	str	r3, [r7, #12]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	60bb      	str	r3, [r7, #8]
}
 8007f38:	bf00      	nop
 8007f3a:	e7fe      	b.n	8007f3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f40:	1e5a      	subs	r2, r3, #1
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d044      	beq.n	8007fdc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d140      	bne.n	8007fdc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff f9ff 	bl	8007362 <uxListRemove>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d115      	bne.n	8007f96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6e:	491f      	ldr	r1, [pc, #124]	; (8007fec <xTaskPriorityDisinherit+0x104>)
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xTaskPriorityDisinherit+0xae>
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	2201      	movs	r2, #1
 8007f86:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8a:	43da      	mvns	r2, r3
 8007f8c:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <xTaskPriorityDisinherit+0x108>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4013      	ands	r3, r2
 8007f92:	4a17      	ldr	r2, [pc, #92]	; (8007ff0 <xTaskPriorityDisinherit+0x108>)
 8007f94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	f1c3 0207 	rsb	r2, r3, #7
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	2201      	movs	r2, #1
 8007fb0:	409a      	lsls	r2, r3
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <xTaskPriorityDisinherit+0x108>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	4a0d      	ldr	r2, [pc, #52]	; (8007ff0 <xTaskPriorityDisinherit+0x108>)
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4a08      	ldr	r2, [pc, #32]	; (8007fec <xTaskPriorityDisinherit+0x104>)
 8007fca:	441a      	add	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f7ff f968 	bl	80072a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fdc:	697b      	ldr	r3, [r7, #20]
	}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200043c8 	.word	0x200043c8
 8007fec:	200043cc 	.word	0x200043cc
 8007ff0:	20004490 	.word	0x20004490

08007ff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ffe:	4b29      	ldr	r3, [pc, #164]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008004:	4b28      	ldr	r3, [pc, #160]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3304      	adds	r3, #4
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff f9a9 	bl	8007362 <uxListRemove>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008016:	4b24      	ldr	r3, [pc, #144]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	2201      	movs	r2, #1
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	43da      	mvns	r2, r3
 8008024:	4b21      	ldr	r3, [pc, #132]	; (80080ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4013      	ands	r3, r2
 800802a:	4a20      	ldr	r2, [pc, #128]	; (80080ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800802c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008034:	d10a      	bne.n	800804c <prvAddCurrentTaskToDelayedList+0x58>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d007      	beq.n	800804c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800803c:	4b1a      	ldr	r3, [pc, #104]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	481a      	ldr	r0, [pc, #104]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008046:	f7ff f92f 	bl	80072a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800804a:	e026      	b.n	800809a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008054:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	429a      	cmp	r2, r3
 8008062:	d209      	bcs.n	8008078 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008064:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3304      	adds	r3, #4
 800806e:	4619      	mov	r1, r3
 8008070:	4610      	mov	r0, r2
 8008072:	f7ff f93d 	bl	80072f0 <vListInsert>
}
 8008076:	e010      	b.n	800809a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008078:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3304      	adds	r3, #4
 8008082:	4619      	mov	r1, r3
 8008084:	4610      	mov	r0, r2
 8008086:	f7ff f933 	bl	80072f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	429a      	cmp	r2, r3
 8008092:	d202      	bcs.n	800809a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008094:	4a09      	ldr	r2, [pc, #36]	; (80080bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	6013      	str	r3, [r2, #0]
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	2000448c 	.word	0x2000448c
 80080a8:	200043c8 	.word	0x200043c8
 80080ac:	20004490 	.word	0x20004490
 80080b0:	20004474 	.word	0x20004474
 80080b4:	2000445c 	.word	0x2000445c
 80080b8:	20004458 	.word	0x20004458
 80080bc:	200044a4 	.word	0x200044a4

080080c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <pxCurrentTCBConst2>)
 80080c2:	6819      	ldr	r1, [r3, #0]
 80080c4:	6808      	ldr	r0, [r1, #0]
 80080c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	f380 8809 	msr	PSP, r0
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8811 	msr	BASEPRI, r0
 80080da:	4770      	bx	lr
 80080dc:	f3af 8000 	nop.w

080080e0 <pxCurrentTCBConst2>:
 80080e0:	200043c8 	.word	0x200043c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop

080080e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	607b      	str	r3, [r7, #4]
}
 8008100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008102:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <vPortEnterCritical+0x58>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3301      	adds	r3, #1
 8008108:	4a0d      	ldr	r2, [pc, #52]	; (8008140 <vPortEnterCritical+0x58>)
 800810a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <vPortEnterCritical+0x58>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d10f      	bne.n	8008134 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008114:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <vPortEnterCritical+0x5c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <vPortEnterCritical+0x4c>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	603b      	str	r3, [r7, #0]
}
 8008130:	bf00      	nop
 8008132:	e7fe      	b.n	8008132 <vPortEnterCritical+0x4a>
	}
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	2000000c 	.word	0x2000000c
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <vPortExitCritical+0x50>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <vPortExitCritical+0x24>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	607b      	str	r3, [r7, #4]
}
 8008168:	bf00      	nop
 800816a:	e7fe      	b.n	800816a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <vPortExitCritical+0x50>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	4a09      	ldr	r2, [pc, #36]	; (8008198 <vPortExitCritical+0x50>)
 8008174:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008176:	4b08      	ldr	r3, [pc, #32]	; (8008198 <vPortExitCritical+0x50>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d105      	bne.n	800818a <vPortExitCritical+0x42>
 800817e:	2300      	movs	r3, #0
 8008180:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	f383 8811 	msr	BASEPRI, r3
}
 8008188:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	2000000c 	.word	0x2000000c
 800819c:	00000000 	.word	0x00000000

080081a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081a0:	f3ef 8009 	mrs	r0, PSP
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4b15      	ldr	r3, [pc, #84]	; (8008200 <pxCurrentTCBConst>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	f01e 0f10 	tst.w	lr, #16
 80081b0:	bf08      	it	eq
 80081b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	6010      	str	r0, [r2, #0]
 80081bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081c4:	f380 8811 	msr	BASEPRI, r0
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f7ff fcc2 	bl	8007b58 <vTaskSwitchContext>
 80081d4:	f04f 0000 	mov.w	r0, #0
 80081d8:	f380 8811 	msr	BASEPRI, r0
 80081dc:	bc09      	pop	{r0, r3}
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	6808      	ldr	r0, [r1, #0]
 80081e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e6:	f01e 0f10 	tst.w	lr, #16
 80081ea:	bf08      	it	eq
 80081ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081f0:	f380 8809 	msr	PSP, r0
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w

08008200 <pxCurrentTCBConst>:
 8008200:	200043c8 	.word	0x200043c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop

08008208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
}
 8008220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008222:	f7ff fbe1 	bl	80079e8 <xTaskIncrementTick>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <SysTick_Handler+0x40>)
 800822e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f383 8811 	msr	BASEPRI, r3
}
 800823e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	e000ed04 	.word	0xe000ed04

0800824c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008252:	f3ef 8305 	mrs	r3, IPSR
 8008256:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b0f      	cmp	r3, #15
 800825c:	d914      	bls.n	8008288 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800825e:	4a17      	ldr	r2, [pc, #92]	; (80082bc <vPortValidateInterruptPriority+0x70>)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008268:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <vPortValidateInterruptPriority+0x74>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	7afa      	ldrb	r2, [r7, #11]
 800826e:	429a      	cmp	r2, r3
 8008270:	d20a      	bcs.n	8008288 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	607b      	str	r3, [r7, #4]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008288:	4b0e      	ldr	r3, [pc, #56]	; (80082c4 <vPortValidateInterruptPriority+0x78>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008290:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <vPortValidateInterruptPriority+0x7c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d90a      	bls.n	80082ae <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	603b      	str	r3, [r7, #0]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <vPortValidateInterruptPriority+0x60>
	}
 80082ae:	bf00      	nop
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	e000e3f0 	.word	0xe000e3f0
 80082c0:	200044ac 	.word	0x200044ac
 80082c4:	e000ed0c 	.word	0xe000ed0c
 80082c8:	200044b0 	.word	0x200044b0

080082cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe feb6 	bl	800704c <USBH_LL_IncTimer>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fefa 	bl	80070f0 <USBH_LL_Connect>
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe ff0f 	bl	8007136 <USBH_LL_Disconnect>
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
 800832c:	4613      	mov	r3, r2
 800832e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe ff2f 	bl	800719a <USBH_LL_NotifyURBChange>
#endif
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fea4 	bl	80070a0 <USBH_LL_PortEnabled>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe feb0 	bl	80070d4 <USBH_LL_PortDisabled>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008392:	4618      	mov	r0, r3
 8008394:	f7fa fd8c 	bl	8002eb0 <HAL_HCD_Stop>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f808 	bl	80083b4 <USBH_Get_USB_Status>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d817      	bhi.n	80083f8 <USBH_Get_USB_Status+0x44>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <USBH_Get_USB_Status+0x1c>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083e7 	.word	0x080083e7
 80083d8:	080083ed 	.word	0x080083ed
 80083dc:	080083f3 	.word	0x080083f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	e00b      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083e6:	2302      	movs	r3, #2
 80083e8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ea:	e008      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
    break;
 80083f0:	e005      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083f2:	2302      	movs	r3, #2
 80083f4:	73fb      	strb	r3, [r7, #15]
    break;
 80083f6:	e002      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083f8:	2302      	movs	r3, #2
 80083fa:	73fb      	strb	r3, [r7, #15]
    break;
 80083fc:	bf00      	nop
  }
  return usb_status;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <__errno>:
 800840c:	4b01      	ldr	r3, [pc, #4]	; (8008414 <__errno+0x8>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20000010 	.word	0x20000010

08008418 <__libc_init_array>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4d0d      	ldr	r5, [pc, #52]	; (8008450 <__libc_init_array+0x38>)
 800841c:	4c0d      	ldr	r4, [pc, #52]	; (8008454 <__libc_init_array+0x3c>)
 800841e:	1b64      	subs	r4, r4, r5
 8008420:	10a4      	asrs	r4, r4, #2
 8008422:	2600      	movs	r6, #0
 8008424:	42a6      	cmp	r6, r4
 8008426:	d109      	bne.n	800843c <__libc_init_array+0x24>
 8008428:	4d0b      	ldr	r5, [pc, #44]	; (8008458 <__libc_init_array+0x40>)
 800842a:	4c0c      	ldr	r4, [pc, #48]	; (800845c <__libc_init_array+0x44>)
 800842c:	f004 fca8 	bl	800cd80 <_init>
 8008430:	1b64      	subs	r4, r4, r5
 8008432:	10a4      	asrs	r4, r4, #2
 8008434:	2600      	movs	r6, #0
 8008436:	42a6      	cmp	r6, r4
 8008438:	d105      	bne.n	8008446 <__libc_init_array+0x2e>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008440:	4798      	blx	r3
 8008442:	3601      	adds	r6, #1
 8008444:	e7ee      	b.n	8008424 <__libc_init_array+0xc>
 8008446:	f855 3b04 	ldr.w	r3, [r5], #4
 800844a:	4798      	blx	r3
 800844c:	3601      	adds	r6, #1
 800844e:	e7f2      	b.n	8008436 <__libc_init_array+0x1e>
 8008450:	0800d27c 	.word	0x0800d27c
 8008454:	0800d27c 	.word	0x0800d27c
 8008458:	0800d27c 	.word	0x0800d27c
 800845c:	0800d280 	.word	0x0800d280

08008460 <malloc>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <malloc+0xc>)
 8008462:	4601      	mov	r1, r0
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f000 b885 	b.w	8008574 <_malloc_r>
 800846a:	bf00      	nop
 800846c:	20000010 	.word	0x20000010

08008470 <memcpy>:
 8008470:	440a      	add	r2, r1
 8008472:	4291      	cmp	r1, r2
 8008474:	f100 33ff 	add.w	r3, r0, #4294967295
 8008478:	d100      	bne.n	800847c <memcpy+0xc>
 800847a:	4770      	bx	lr
 800847c:	b510      	push	{r4, lr}
 800847e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008486:	4291      	cmp	r1, r2
 8008488:	d1f9      	bne.n	800847e <memcpy+0xe>
 800848a:	bd10      	pop	{r4, pc}

0800848c <memset>:
 800848c:	4402      	add	r2, r0
 800848e:	4603      	mov	r3, r0
 8008490:	4293      	cmp	r3, r2
 8008492:	d100      	bne.n	8008496 <memset+0xa>
 8008494:	4770      	bx	lr
 8008496:	f803 1b01 	strb.w	r1, [r3], #1
 800849a:	e7f9      	b.n	8008490 <memset+0x4>

0800849c <_free_r>:
 800849c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800849e:	2900      	cmp	r1, #0
 80084a0:	d044      	beq.n	800852c <_free_r+0x90>
 80084a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a6:	9001      	str	r0, [sp, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f1a1 0404 	sub.w	r4, r1, #4
 80084ae:	bfb8      	it	lt
 80084b0:	18e4      	addlt	r4, r4, r3
 80084b2:	f003 f941 	bl	800b738 <__malloc_lock>
 80084b6:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <_free_r+0x94>)
 80084b8:	9801      	ldr	r0, [sp, #4]
 80084ba:	6813      	ldr	r3, [r2, #0]
 80084bc:	b933      	cbnz	r3, 80084cc <_free_r+0x30>
 80084be:	6063      	str	r3, [r4, #4]
 80084c0:	6014      	str	r4, [r2, #0]
 80084c2:	b003      	add	sp, #12
 80084c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084c8:	f003 b93c 	b.w	800b744 <__malloc_unlock>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d908      	bls.n	80084e2 <_free_r+0x46>
 80084d0:	6825      	ldr	r5, [r4, #0]
 80084d2:	1961      	adds	r1, r4, r5
 80084d4:	428b      	cmp	r3, r1
 80084d6:	bf01      	itttt	eq
 80084d8:	6819      	ldreq	r1, [r3, #0]
 80084da:	685b      	ldreq	r3, [r3, #4]
 80084dc:	1949      	addeq	r1, r1, r5
 80084de:	6021      	streq	r1, [r4, #0]
 80084e0:	e7ed      	b.n	80084be <_free_r+0x22>
 80084e2:	461a      	mov	r2, r3
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b10b      	cbz	r3, 80084ec <_free_r+0x50>
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d9fa      	bls.n	80084e2 <_free_r+0x46>
 80084ec:	6811      	ldr	r1, [r2, #0]
 80084ee:	1855      	adds	r5, r2, r1
 80084f0:	42a5      	cmp	r5, r4
 80084f2:	d10b      	bne.n	800850c <_free_r+0x70>
 80084f4:	6824      	ldr	r4, [r4, #0]
 80084f6:	4421      	add	r1, r4
 80084f8:	1854      	adds	r4, r2, r1
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	6011      	str	r1, [r2, #0]
 80084fe:	d1e0      	bne.n	80084c2 <_free_r+0x26>
 8008500:	681c      	ldr	r4, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	6053      	str	r3, [r2, #4]
 8008506:	4421      	add	r1, r4
 8008508:	6011      	str	r1, [r2, #0]
 800850a:	e7da      	b.n	80084c2 <_free_r+0x26>
 800850c:	d902      	bls.n	8008514 <_free_r+0x78>
 800850e:	230c      	movs	r3, #12
 8008510:	6003      	str	r3, [r0, #0]
 8008512:	e7d6      	b.n	80084c2 <_free_r+0x26>
 8008514:	6825      	ldr	r5, [r4, #0]
 8008516:	1961      	adds	r1, r4, r5
 8008518:	428b      	cmp	r3, r1
 800851a:	bf04      	itt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	6063      	str	r3, [r4, #4]
 8008522:	bf04      	itt	eq
 8008524:	1949      	addeq	r1, r1, r5
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	6054      	str	r4, [r2, #4]
 800852a:	e7ca      	b.n	80084c2 <_free_r+0x26>
 800852c:	b003      	add	sp, #12
 800852e:	bd30      	pop	{r4, r5, pc}
 8008530:	200047b8 	.word	0x200047b8

08008534 <sbrk_aligned>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4e0e      	ldr	r6, [pc, #56]	; (8008570 <sbrk_aligned+0x3c>)
 8008538:	460c      	mov	r4, r1
 800853a:	6831      	ldr	r1, [r6, #0]
 800853c:	4605      	mov	r5, r0
 800853e:	b911      	cbnz	r1, 8008546 <sbrk_aligned+0x12>
 8008540:	f000 ff1e 	bl	8009380 <_sbrk_r>
 8008544:	6030      	str	r0, [r6, #0]
 8008546:	4621      	mov	r1, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f000 ff19 	bl	8009380 <_sbrk_r>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d00a      	beq.n	8008568 <sbrk_aligned+0x34>
 8008552:	1cc4      	adds	r4, r0, #3
 8008554:	f024 0403 	bic.w	r4, r4, #3
 8008558:	42a0      	cmp	r0, r4
 800855a:	d007      	beq.n	800856c <sbrk_aligned+0x38>
 800855c:	1a21      	subs	r1, r4, r0
 800855e:	4628      	mov	r0, r5
 8008560:	f000 ff0e 	bl	8009380 <_sbrk_r>
 8008564:	3001      	adds	r0, #1
 8008566:	d101      	bne.n	800856c <sbrk_aligned+0x38>
 8008568:	f04f 34ff 	mov.w	r4, #4294967295
 800856c:	4620      	mov	r0, r4
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	200047bc 	.word	0x200047bc

08008574 <_malloc_r>:
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	1ccd      	adds	r5, r1, #3
 800857a:	f025 0503 	bic.w	r5, r5, #3
 800857e:	3508      	adds	r5, #8
 8008580:	2d0c      	cmp	r5, #12
 8008582:	bf38      	it	cc
 8008584:	250c      	movcc	r5, #12
 8008586:	2d00      	cmp	r5, #0
 8008588:	4607      	mov	r7, r0
 800858a:	db01      	blt.n	8008590 <_malloc_r+0x1c>
 800858c:	42a9      	cmp	r1, r5
 800858e:	d905      	bls.n	800859c <_malloc_r+0x28>
 8008590:	230c      	movs	r3, #12
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	2600      	movs	r6, #0
 8008596:	4630      	mov	r0, r6
 8008598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859c:	4e2e      	ldr	r6, [pc, #184]	; (8008658 <_malloc_r+0xe4>)
 800859e:	f003 f8cb 	bl	800b738 <__malloc_lock>
 80085a2:	6833      	ldr	r3, [r6, #0]
 80085a4:	461c      	mov	r4, r3
 80085a6:	bb34      	cbnz	r4, 80085f6 <_malloc_r+0x82>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4638      	mov	r0, r7
 80085ac:	f7ff ffc2 	bl	8008534 <sbrk_aligned>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	4604      	mov	r4, r0
 80085b4:	d14d      	bne.n	8008652 <_malloc_r+0xde>
 80085b6:	6834      	ldr	r4, [r6, #0]
 80085b8:	4626      	mov	r6, r4
 80085ba:	2e00      	cmp	r6, #0
 80085bc:	d140      	bne.n	8008640 <_malloc_r+0xcc>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	4631      	mov	r1, r6
 80085c2:	4638      	mov	r0, r7
 80085c4:	eb04 0803 	add.w	r8, r4, r3
 80085c8:	f000 feda 	bl	8009380 <_sbrk_r>
 80085cc:	4580      	cmp	r8, r0
 80085ce:	d13a      	bne.n	8008646 <_malloc_r+0xd2>
 80085d0:	6821      	ldr	r1, [r4, #0]
 80085d2:	3503      	adds	r5, #3
 80085d4:	1a6d      	subs	r5, r5, r1
 80085d6:	f025 0503 	bic.w	r5, r5, #3
 80085da:	3508      	adds	r5, #8
 80085dc:	2d0c      	cmp	r5, #12
 80085de:	bf38      	it	cc
 80085e0:	250c      	movcc	r5, #12
 80085e2:	4629      	mov	r1, r5
 80085e4:	4638      	mov	r0, r7
 80085e6:	f7ff ffa5 	bl	8008534 <sbrk_aligned>
 80085ea:	3001      	adds	r0, #1
 80085ec:	d02b      	beq.n	8008646 <_malloc_r+0xd2>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	442b      	add	r3, r5
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	e00e      	b.n	8008614 <_malloc_r+0xa0>
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	1b52      	subs	r2, r2, r5
 80085fa:	d41e      	bmi.n	800863a <_malloc_r+0xc6>
 80085fc:	2a0b      	cmp	r2, #11
 80085fe:	d916      	bls.n	800862e <_malloc_r+0xba>
 8008600:	1961      	adds	r1, r4, r5
 8008602:	42a3      	cmp	r3, r4
 8008604:	6025      	str	r5, [r4, #0]
 8008606:	bf18      	it	ne
 8008608:	6059      	strne	r1, [r3, #4]
 800860a:	6863      	ldr	r3, [r4, #4]
 800860c:	bf08      	it	eq
 800860e:	6031      	streq	r1, [r6, #0]
 8008610:	5162      	str	r2, [r4, r5]
 8008612:	604b      	str	r3, [r1, #4]
 8008614:	4638      	mov	r0, r7
 8008616:	f104 060b 	add.w	r6, r4, #11
 800861a:	f003 f893 	bl	800b744 <__malloc_unlock>
 800861e:	f026 0607 	bic.w	r6, r6, #7
 8008622:	1d23      	adds	r3, r4, #4
 8008624:	1af2      	subs	r2, r6, r3
 8008626:	d0b6      	beq.n	8008596 <_malloc_r+0x22>
 8008628:	1b9b      	subs	r3, r3, r6
 800862a:	50a3      	str	r3, [r4, r2]
 800862c:	e7b3      	b.n	8008596 <_malloc_r+0x22>
 800862e:	6862      	ldr	r2, [r4, #4]
 8008630:	42a3      	cmp	r3, r4
 8008632:	bf0c      	ite	eq
 8008634:	6032      	streq	r2, [r6, #0]
 8008636:	605a      	strne	r2, [r3, #4]
 8008638:	e7ec      	b.n	8008614 <_malloc_r+0xa0>
 800863a:	4623      	mov	r3, r4
 800863c:	6864      	ldr	r4, [r4, #4]
 800863e:	e7b2      	b.n	80085a6 <_malloc_r+0x32>
 8008640:	4634      	mov	r4, r6
 8008642:	6876      	ldr	r6, [r6, #4]
 8008644:	e7b9      	b.n	80085ba <_malloc_r+0x46>
 8008646:	230c      	movs	r3, #12
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	4638      	mov	r0, r7
 800864c:	f003 f87a 	bl	800b744 <__malloc_unlock>
 8008650:	e7a1      	b.n	8008596 <_malloc_r+0x22>
 8008652:	6025      	str	r5, [r4, #0]
 8008654:	e7de      	b.n	8008614 <_malloc_r+0xa0>
 8008656:	bf00      	nop
 8008658:	200047b8 	.word	0x200047b8

0800865c <__cvt>:
 800865c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	ec55 4b10 	vmov	r4, r5, d0
 8008664:	2d00      	cmp	r5, #0
 8008666:	460e      	mov	r6, r1
 8008668:	4619      	mov	r1, r3
 800866a:	462b      	mov	r3, r5
 800866c:	bfbb      	ittet	lt
 800866e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008672:	461d      	movlt	r5, r3
 8008674:	2300      	movge	r3, #0
 8008676:	232d      	movlt	r3, #45	; 0x2d
 8008678:	700b      	strb	r3, [r1, #0]
 800867a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800867c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008680:	4691      	mov	r9, r2
 8008682:	f023 0820 	bic.w	r8, r3, #32
 8008686:	bfbc      	itt	lt
 8008688:	4622      	movlt	r2, r4
 800868a:	4614      	movlt	r4, r2
 800868c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008690:	d005      	beq.n	800869e <__cvt+0x42>
 8008692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008696:	d100      	bne.n	800869a <__cvt+0x3e>
 8008698:	3601      	adds	r6, #1
 800869a:	2102      	movs	r1, #2
 800869c:	e000      	b.n	80086a0 <__cvt+0x44>
 800869e:	2103      	movs	r1, #3
 80086a0:	ab03      	add	r3, sp, #12
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	ab02      	add	r3, sp, #8
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	ec45 4b10 	vmov	d0, r4, r5
 80086ac:	4653      	mov	r3, sl
 80086ae:	4632      	mov	r2, r6
 80086b0:	f001 fdd6 	bl	800a260 <_dtoa_r>
 80086b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086b8:	4607      	mov	r7, r0
 80086ba:	d102      	bne.n	80086c2 <__cvt+0x66>
 80086bc:	f019 0f01 	tst.w	r9, #1
 80086c0:	d022      	beq.n	8008708 <__cvt+0xac>
 80086c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086c6:	eb07 0906 	add.w	r9, r7, r6
 80086ca:	d110      	bne.n	80086ee <__cvt+0x92>
 80086cc:	783b      	ldrb	r3, [r7, #0]
 80086ce:	2b30      	cmp	r3, #48	; 0x30
 80086d0:	d10a      	bne.n	80086e8 <__cvt+0x8c>
 80086d2:	2200      	movs	r2, #0
 80086d4:	2300      	movs	r3, #0
 80086d6:	4620      	mov	r0, r4
 80086d8:	4629      	mov	r1, r5
 80086da:	f7f8 fa05 	bl	8000ae8 <__aeabi_dcmpeq>
 80086de:	b918      	cbnz	r0, 80086e8 <__cvt+0x8c>
 80086e0:	f1c6 0601 	rsb	r6, r6, #1
 80086e4:	f8ca 6000 	str.w	r6, [sl]
 80086e8:	f8da 3000 	ldr.w	r3, [sl]
 80086ec:	4499      	add	r9, r3
 80086ee:	2200      	movs	r2, #0
 80086f0:	2300      	movs	r3, #0
 80086f2:	4620      	mov	r0, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f8 f9f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80086fa:	b108      	cbz	r0, 8008700 <__cvt+0xa4>
 80086fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008700:	2230      	movs	r2, #48	; 0x30
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	454b      	cmp	r3, r9
 8008706:	d307      	bcc.n	8008718 <__cvt+0xbc>
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800870c:	1bdb      	subs	r3, r3, r7
 800870e:	4638      	mov	r0, r7
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	b004      	add	sp, #16
 8008714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008718:	1c59      	adds	r1, r3, #1
 800871a:	9103      	str	r1, [sp, #12]
 800871c:	701a      	strb	r2, [r3, #0]
 800871e:	e7f0      	b.n	8008702 <__cvt+0xa6>

08008720 <__exponent>:
 8008720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008722:	4603      	mov	r3, r0
 8008724:	2900      	cmp	r1, #0
 8008726:	bfb8      	it	lt
 8008728:	4249      	neglt	r1, r1
 800872a:	f803 2b02 	strb.w	r2, [r3], #2
 800872e:	bfb4      	ite	lt
 8008730:	222d      	movlt	r2, #45	; 0x2d
 8008732:	222b      	movge	r2, #43	; 0x2b
 8008734:	2909      	cmp	r1, #9
 8008736:	7042      	strb	r2, [r0, #1]
 8008738:	dd2a      	ble.n	8008790 <__exponent+0x70>
 800873a:	f10d 0407 	add.w	r4, sp, #7
 800873e:	46a4      	mov	ip, r4
 8008740:	270a      	movs	r7, #10
 8008742:	46a6      	mov	lr, r4
 8008744:	460a      	mov	r2, r1
 8008746:	fb91 f6f7 	sdiv	r6, r1, r7
 800874a:	fb07 1516 	mls	r5, r7, r6, r1
 800874e:	3530      	adds	r5, #48	; 0x30
 8008750:	2a63      	cmp	r2, #99	; 0x63
 8008752:	f104 34ff 	add.w	r4, r4, #4294967295
 8008756:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800875a:	4631      	mov	r1, r6
 800875c:	dcf1      	bgt.n	8008742 <__exponent+0x22>
 800875e:	3130      	adds	r1, #48	; 0x30
 8008760:	f1ae 0502 	sub.w	r5, lr, #2
 8008764:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008768:	1c44      	adds	r4, r0, #1
 800876a:	4629      	mov	r1, r5
 800876c:	4561      	cmp	r1, ip
 800876e:	d30a      	bcc.n	8008786 <__exponent+0x66>
 8008770:	f10d 0209 	add.w	r2, sp, #9
 8008774:	eba2 020e 	sub.w	r2, r2, lr
 8008778:	4565      	cmp	r5, ip
 800877a:	bf88      	it	hi
 800877c:	2200      	movhi	r2, #0
 800877e:	4413      	add	r3, r2
 8008780:	1a18      	subs	r0, r3, r0
 8008782:	b003      	add	sp, #12
 8008784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800878a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800878e:	e7ed      	b.n	800876c <__exponent+0x4c>
 8008790:	2330      	movs	r3, #48	; 0x30
 8008792:	3130      	adds	r1, #48	; 0x30
 8008794:	7083      	strb	r3, [r0, #2]
 8008796:	70c1      	strb	r1, [r0, #3]
 8008798:	1d03      	adds	r3, r0, #4
 800879a:	e7f1      	b.n	8008780 <__exponent+0x60>

0800879c <_printf_float>:
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	ed2d 8b02 	vpush	{d8}
 80087a4:	b08d      	sub	sp, #52	; 0x34
 80087a6:	460c      	mov	r4, r1
 80087a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087ac:	4616      	mov	r6, r2
 80087ae:	461f      	mov	r7, r3
 80087b0:	4605      	mov	r5, r0
 80087b2:	f002 ffa7 	bl	800b704 <_localeconv_r>
 80087b6:	f8d0 a000 	ldr.w	sl, [r0]
 80087ba:	4650      	mov	r0, sl
 80087bc:	f7f7 fd18 	bl	80001f0 <strlen>
 80087c0:	2300      	movs	r3, #0
 80087c2:	930a      	str	r3, [sp, #40]	; 0x28
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	9305      	str	r3, [sp, #20]
 80087c8:	f8d8 3000 	ldr.w	r3, [r8]
 80087cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087d0:	3307      	adds	r3, #7
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	f103 0208 	add.w	r2, r3, #8
 80087da:	f8c8 2000 	str.w	r2, [r8]
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087ee:	9307      	str	r3, [sp, #28]
 80087f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087f4:	ee08 0a10 	vmov	s16, r0
 80087f8:	4b9f      	ldr	r3, [pc, #636]	; (8008a78 <_printf_float+0x2dc>)
 80087fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	f7f8 f9a3 	bl	8000b4c <__aeabi_dcmpun>
 8008806:	bb88      	cbnz	r0, 800886c <_printf_float+0xd0>
 8008808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800880c:	4b9a      	ldr	r3, [pc, #616]	; (8008a78 <_printf_float+0x2dc>)
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	f7f8 f97d 	bl	8000b10 <__aeabi_dcmple>
 8008816:	bb48      	cbnz	r0, 800886c <_printf_float+0xd0>
 8008818:	2200      	movs	r2, #0
 800881a:	2300      	movs	r3, #0
 800881c:	4640      	mov	r0, r8
 800881e:	4649      	mov	r1, r9
 8008820:	f7f8 f96c 	bl	8000afc <__aeabi_dcmplt>
 8008824:	b110      	cbz	r0, 800882c <_printf_float+0x90>
 8008826:	232d      	movs	r3, #45	; 0x2d
 8008828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882c:	4b93      	ldr	r3, [pc, #588]	; (8008a7c <_printf_float+0x2e0>)
 800882e:	4894      	ldr	r0, [pc, #592]	; (8008a80 <_printf_float+0x2e4>)
 8008830:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008834:	bf94      	ite	ls
 8008836:	4698      	movls	r8, r3
 8008838:	4680      	movhi	r8, r0
 800883a:	2303      	movs	r3, #3
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	9b05      	ldr	r3, [sp, #20]
 8008840:	f023 0204 	bic.w	r2, r3, #4
 8008844:	6022      	str	r2, [r4, #0]
 8008846:	f04f 0900 	mov.w	r9, #0
 800884a:	9700      	str	r7, [sp, #0]
 800884c:	4633      	mov	r3, r6
 800884e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008850:	4621      	mov	r1, r4
 8008852:	4628      	mov	r0, r5
 8008854:	f000 f9d8 	bl	8008c08 <_printf_common>
 8008858:	3001      	adds	r0, #1
 800885a:	f040 8090 	bne.w	800897e <_printf_float+0x1e2>
 800885e:	f04f 30ff 	mov.w	r0, #4294967295
 8008862:	b00d      	add	sp, #52	; 0x34
 8008864:	ecbd 8b02 	vpop	{d8}
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	4642      	mov	r2, r8
 800886e:	464b      	mov	r3, r9
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f8 f96a 	bl	8000b4c <__aeabi_dcmpun>
 8008878:	b140      	cbz	r0, 800888c <_printf_float+0xf0>
 800887a:	464b      	mov	r3, r9
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfbc      	itt	lt
 8008880:	232d      	movlt	r3, #45	; 0x2d
 8008882:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008886:	487f      	ldr	r0, [pc, #508]	; (8008a84 <_printf_float+0x2e8>)
 8008888:	4b7f      	ldr	r3, [pc, #508]	; (8008a88 <_printf_float+0x2ec>)
 800888a:	e7d1      	b.n	8008830 <_printf_float+0x94>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008892:	9206      	str	r2, [sp, #24]
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	d13f      	bne.n	8008918 <_printf_float+0x17c>
 8008898:	2306      	movs	r3, #6
 800889a:	6063      	str	r3, [r4, #4]
 800889c:	9b05      	ldr	r3, [sp, #20]
 800889e:	6861      	ldr	r1, [r4, #4]
 80088a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088a4:	2300      	movs	r3, #0
 80088a6:	9303      	str	r3, [sp, #12]
 80088a8:	ab0a      	add	r3, sp, #40	; 0x28
 80088aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088ae:	ab09      	add	r3, sp, #36	; 0x24
 80088b0:	ec49 8b10 	vmov	d0, r8, r9
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	6022      	str	r2, [r4, #0]
 80088b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088bc:	4628      	mov	r0, r5
 80088be:	f7ff fecd 	bl	800865c <__cvt>
 80088c2:	9b06      	ldr	r3, [sp, #24]
 80088c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088c6:	2b47      	cmp	r3, #71	; 0x47
 80088c8:	4680      	mov	r8, r0
 80088ca:	d108      	bne.n	80088de <_printf_float+0x142>
 80088cc:	1cc8      	adds	r0, r1, #3
 80088ce:	db02      	blt.n	80088d6 <_printf_float+0x13a>
 80088d0:	6863      	ldr	r3, [r4, #4]
 80088d2:	4299      	cmp	r1, r3
 80088d4:	dd41      	ble.n	800895a <_printf_float+0x1be>
 80088d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80088da:	fa5f fb8b 	uxtb.w	fp, fp
 80088de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088e2:	d820      	bhi.n	8008926 <_printf_float+0x18a>
 80088e4:	3901      	subs	r1, #1
 80088e6:	465a      	mov	r2, fp
 80088e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088ec:	9109      	str	r1, [sp, #36]	; 0x24
 80088ee:	f7ff ff17 	bl	8008720 <__exponent>
 80088f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088f4:	1813      	adds	r3, r2, r0
 80088f6:	2a01      	cmp	r2, #1
 80088f8:	4681      	mov	r9, r0
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	dc02      	bgt.n	8008904 <_printf_float+0x168>
 80088fe:	6822      	ldr	r2, [r4, #0]
 8008900:	07d2      	lsls	r2, r2, #31
 8008902:	d501      	bpl.n	8008908 <_printf_float+0x16c>
 8008904:	3301      	adds	r3, #1
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800890c:	2b00      	cmp	r3, #0
 800890e:	d09c      	beq.n	800884a <_printf_float+0xae>
 8008910:	232d      	movs	r3, #45	; 0x2d
 8008912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008916:	e798      	b.n	800884a <_printf_float+0xae>
 8008918:	9a06      	ldr	r2, [sp, #24]
 800891a:	2a47      	cmp	r2, #71	; 0x47
 800891c:	d1be      	bne.n	800889c <_printf_float+0x100>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1bc      	bne.n	800889c <_printf_float+0x100>
 8008922:	2301      	movs	r3, #1
 8008924:	e7b9      	b.n	800889a <_printf_float+0xfe>
 8008926:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800892a:	d118      	bne.n	800895e <_printf_float+0x1c2>
 800892c:	2900      	cmp	r1, #0
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	dd0b      	ble.n	800894a <_printf_float+0x1ae>
 8008932:	6121      	str	r1, [r4, #16]
 8008934:	b913      	cbnz	r3, 800893c <_printf_float+0x1a0>
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	07d0      	lsls	r0, r2, #31
 800893a:	d502      	bpl.n	8008942 <_printf_float+0x1a6>
 800893c:	3301      	adds	r3, #1
 800893e:	440b      	add	r3, r1
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	65a1      	str	r1, [r4, #88]	; 0x58
 8008944:	f04f 0900 	mov.w	r9, #0
 8008948:	e7de      	b.n	8008908 <_printf_float+0x16c>
 800894a:	b913      	cbnz	r3, 8008952 <_printf_float+0x1b6>
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	07d2      	lsls	r2, r2, #31
 8008950:	d501      	bpl.n	8008956 <_printf_float+0x1ba>
 8008952:	3302      	adds	r3, #2
 8008954:	e7f4      	b.n	8008940 <_printf_float+0x1a4>
 8008956:	2301      	movs	r3, #1
 8008958:	e7f2      	b.n	8008940 <_printf_float+0x1a4>
 800895a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800895e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008960:	4299      	cmp	r1, r3
 8008962:	db05      	blt.n	8008970 <_printf_float+0x1d4>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	6121      	str	r1, [r4, #16]
 8008968:	07d8      	lsls	r0, r3, #31
 800896a:	d5ea      	bpl.n	8008942 <_printf_float+0x1a6>
 800896c:	1c4b      	adds	r3, r1, #1
 800896e:	e7e7      	b.n	8008940 <_printf_float+0x1a4>
 8008970:	2900      	cmp	r1, #0
 8008972:	bfd4      	ite	le
 8008974:	f1c1 0202 	rsble	r2, r1, #2
 8008978:	2201      	movgt	r2, #1
 800897a:	4413      	add	r3, r2
 800897c:	e7e0      	b.n	8008940 <_printf_float+0x1a4>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	055a      	lsls	r2, r3, #21
 8008982:	d407      	bmi.n	8008994 <_printf_float+0x1f8>
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	4642      	mov	r2, r8
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	d12c      	bne.n	80089ec <_printf_float+0x250>
 8008992:	e764      	b.n	800885e <_printf_float+0xc2>
 8008994:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008998:	f240 80e0 	bls.w	8008b5c <_printf_float+0x3c0>
 800899c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089a0:	2200      	movs	r2, #0
 80089a2:	2300      	movs	r3, #0
 80089a4:	f7f8 f8a0 	bl	8000ae8 <__aeabi_dcmpeq>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d034      	beq.n	8008a16 <_printf_float+0x27a>
 80089ac:	4a37      	ldr	r2, [pc, #220]	; (8008a8c <_printf_float+0x2f0>)
 80089ae:	2301      	movs	r3, #1
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f af51 	beq.w	800885e <_printf_float+0xc2>
 80089bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089c0:	429a      	cmp	r2, r3
 80089c2:	db02      	blt.n	80089ca <_printf_float+0x22e>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	07d8      	lsls	r0, r3, #31
 80089c8:	d510      	bpl.n	80089ec <_printf_float+0x250>
 80089ca:	ee18 3a10 	vmov	r3, s16
 80089ce:	4652      	mov	r2, sl
 80089d0:	4631      	mov	r1, r6
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f af41 	beq.w	800885e <_printf_float+0xc2>
 80089dc:	f04f 0800 	mov.w	r8, #0
 80089e0:	f104 091a 	add.w	r9, r4, #26
 80089e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e6:	3b01      	subs	r3, #1
 80089e8:	4543      	cmp	r3, r8
 80089ea:	dc09      	bgt.n	8008a00 <_printf_float+0x264>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	079b      	lsls	r3, r3, #30
 80089f0:	f100 8105 	bmi.w	8008bfe <_printf_float+0x462>
 80089f4:	68e0      	ldr	r0, [r4, #12]
 80089f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f8:	4298      	cmp	r0, r3
 80089fa:	bfb8      	it	lt
 80089fc:	4618      	movlt	r0, r3
 80089fe:	e730      	b.n	8008862 <_printf_float+0xc6>
 8008a00:	2301      	movs	r3, #1
 8008a02:	464a      	mov	r2, r9
 8008a04:	4631      	mov	r1, r6
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b8      	blx	r7
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	f43f af27 	beq.w	800885e <_printf_float+0xc2>
 8008a10:	f108 0801 	add.w	r8, r8, #1
 8008a14:	e7e6      	b.n	80089e4 <_printf_float+0x248>
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dc39      	bgt.n	8008a90 <_printf_float+0x2f4>
 8008a1c:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <_printf_float+0x2f0>)
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f af19 	beq.w	800885e <_printf_float+0xc2>
 8008a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a30:	4313      	orrs	r3, r2
 8008a32:	d102      	bne.n	8008a3a <_printf_float+0x29e>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	07d9      	lsls	r1, r3, #31
 8008a38:	d5d8      	bpl.n	80089ec <_printf_float+0x250>
 8008a3a:	ee18 3a10 	vmov	r3, s16
 8008a3e:	4652      	mov	r2, sl
 8008a40:	4631      	mov	r1, r6
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b8      	blx	r7
 8008a46:	3001      	adds	r0, #1
 8008a48:	f43f af09 	beq.w	800885e <_printf_float+0xc2>
 8008a4c:	f04f 0900 	mov.w	r9, #0
 8008a50:	f104 0a1a 	add.w	sl, r4, #26
 8008a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a56:	425b      	negs	r3, r3
 8008a58:	454b      	cmp	r3, r9
 8008a5a:	dc01      	bgt.n	8008a60 <_printf_float+0x2c4>
 8008a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a5e:	e792      	b.n	8008986 <_printf_float+0x1ea>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4652      	mov	r2, sl
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	47b8      	blx	r7
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	f43f aef7 	beq.w	800885e <_printf_float+0xc2>
 8008a70:	f109 0901 	add.w	r9, r9, #1
 8008a74:	e7ee      	b.n	8008a54 <_printf_float+0x2b8>
 8008a76:	bf00      	nop
 8008a78:	7fefffff 	.word	0x7fefffff
 8008a7c:	0800cdc8 	.word	0x0800cdc8
 8008a80:	0800cdcc 	.word	0x0800cdcc
 8008a84:	0800cdd4 	.word	0x0800cdd4
 8008a88:	0800cdd0 	.word	0x0800cdd0
 8008a8c:	0800cdd8 	.word	0x0800cdd8
 8008a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a94:	429a      	cmp	r2, r3
 8008a96:	bfa8      	it	ge
 8008a98:	461a      	movge	r2, r3
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	4691      	mov	r9, r2
 8008a9e:	dc37      	bgt.n	8008b10 <_printf_float+0x374>
 8008aa0:	f04f 0b00 	mov.w	fp, #0
 8008aa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aa8:	f104 021a 	add.w	r2, r4, #26
 8008aac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aae:	9305      	str	r3, [sp, #20]
 8008ab0:	eba3 0309 	sub.w	r3, r3, r9
 8008ab4:	455b      	cmp	r3, fp
 8008ab6:	dc33      	bgt.n	8008b20 <_printf_float+0x384>
 8008ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008abc:	429a      	cmp	r2, r3
 8008abe:	db3b      	blt.n	8008b38 <_printf_float+0x39c>
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	07da      	lsls	r2, r3, #31
 8008ac4:	d438      	bmi.n	8008b38 <_printf_float+0x39c>
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	9a05      	ldr	r2, [sp, #20]
 8008aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008acc:	1a9a      	subs	r2, r3, r2
 8008ace:	eba3 0901 	sub.w	r9, r3, r1
 8008ad2:	4591      	cmp	r9, r2
 8008ad4:	bfa8      	it	ge
 8008ad6:	4691      	movge	r9, r2
 8008ad8:	f1b9 0f00 	cmp.w	r9, #0
 8008adc:	dc35      	bgt.n	8008b4a <_printf_float+0x3ae>
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ae6:	f104 0a1a 	add.w	sl, r4, #26
 8008aea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	eba3 0309 	sub.w	r3, r3, r9
 8008af4:	4543      	cmp	r3, r8
 8008af6:	f77f af79 	ble.w	80089ec <_printf_float+0x250>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4652      	mov	r2, sl
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	f43f aeaa 	beq.w	800885e <_printf_float+0xc2>
 8008b0a:	f108 0801 	add.w	r8, r8, #1
 8008b0e:	e7ec      	b.n	8008aea <_printf_float+0x34e>
 8008b10:	4613      	mov	r3, r2
 8008b12:	4631      	mov	r1, r6
 8008b14:	4642      	mov	r2, r8
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d1c0      	bne.n	8008aa0 <_printf_float+0x304>
 8008b1e:	e69e      	b.n	800885e <_printf_float+0xc2>
 8008b20:	2301      	movs	r3, #1
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	9205      	str	r2, [sp, #20]
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f ae97 	beq.w	800885e <_printf_float+0xc2>
 8008b30:	9a05      	ldr	r2, [sp, #20]
 8008b32:	f10b 0b01 	add.w	fp, fp, #1
 8008b36:	e7b9      	b.n	8008aac <_printf_float+0x310>
 8008b38:	ee18 3a10 	vmov	r3, s16
 8008b3c:	4652      	mov	r2, sl
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	d1be      	bne.n	8008ac6 <_printf_float+0x32a>
 8008b48:	e689      	b.n	800885e <_printf_float+0xc2>
 8008b4a:	9a05      	ldr	r2, [sp, #20]
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	4442      	add	r2, r8
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	d1c1      	bne.n	8008ade <_printf_float+0x342>
 8008b5a:	e680      	b.n	800885e <_printf_float+0xc2>
 8008b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b5e:	2a01      	cmp	r2, #1
 8008b60:	dc01      	bgt.n	8008b66 <_printf_float+0x3ca>
 8008b62:	07db      	lsls	r3, r3, #31
 8008b64:	d538      	bpl.n	8008bd8 <_printf_float+0x43c>
 8008b66:	2301      	movs	r3, #1
 8008b68:	4642      	mov	r2, r8
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b8      	blx	r7
 8008b70:	3001      	adds	r0, #1
 8008b72:	f43f ae74 	beq.w	800885e <_printf_float+0xc2>
 8008b76:	ee18 3a10 	vmov	r3, s16
 8008b7a:	4652      	mov	r2, sl
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	f43f ae6b 	beq.w	800885e <_printf_float+0xc2>
 8008b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f7f7 ffaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b94:	b9d8      	cbnz	r0, 8008bce <_printf_float+0x432>
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	f108 0201 	add.w	r2, r8, #1
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d10e      	bne.n	8008bc6 <_printf_float+0x42a>
 8008ba8:	e659      	b.n	800885e <_printf_float+0xc2>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4652      	mov	r2, sl
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b8      	blx	r7
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	f43f ae52 	beq.w	800885e <_printf_float+0xc2>
 8008bba:	f108 0801 	add.w	r8, r8, #1
 8008bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	4543      	cmp	r3, r8
 8008bc4:	dcf1      	bgt.n	8008baa <_printf_float+0x40e>
 8008bc6:	464b      	mov	r3, r9
 8008bc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bcc:	e6dc      	b.n	8008988 <_printf_float+0x1ec>
 8008bce:	f04f 0800 	mov.w	r8, #0
 8008bd2:	f104 0a1a 	add.w	sl, r4, #26
 8008bd6:	e7f2      	b.n	8008bbe <_printf_float+0x422>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4642      	mov	r2, r8
 8008bdc:	e7df      	b.n	8008b9e <_printf_float+0x402>
 8008bde:	2301      	movs	r3, #1
 8008be0:	464a      	mov	r2, r9
 8008be2:	4631      	mov	r1, r6
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b8      	blx	r7
 8008be8:	3001      	adds	r0, #1
 8008bea:	f43f ae38 	beq.w	800885e <_printf_float+0xc2>
 8008bee:	f108 0801 	add.w	r8, r8, #1
 8008bf2:	68e3      	ldr	r3, [r4, #12]
 8008bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bf6:	1a5b      	subs	r3, r3, r1
 8008bf8:	4543      	cmp	r3, r8
 8008bfa:	dcf0      	bgt.n	8008bde <_printf_float+0x442>
 8008bfc:	e6fa      	b.n	80089f4 <_printf_float+0x258>
 8008bfe:	f04f 0800 	mov.w	r8, #0
 8008c02:	f104 0919 	add.w	r9, r4, #25
 8008c06:	e7f4      	b.n	8008bf2 <_printf_float+0x456>

08008c08 <_printf_common>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	4699      	mov	r9, r3
 8008c10:	688a      	ldr	r2, [r1, #8]
 8008c12:	690b      	ldr	r3, [r1, #16]
 8008c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	bfb8      	it	lt
 8008c1c:	4613      	movlt	r3, r2
 8008c1e:	6033      	str	r3, [r6, #0]
 8008c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c24:	4607      	mov	r7, r0
 8008c26:	460c      	mov	r4, r1
 8008c28:	b10a      	cbz	r2, 8008c2e <_printf_common+0x26>
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	6033      	str	r3, [r6, #0]
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	0699      	lsls	r1, r3, #26
 8008c32:	bf42      	ittt	mi
 8008c34:	6833      	ldrmi	r3, [r6, #0]
 8008c36:	3302      	addmi	r3, #2
 8008c38:	6033      	strmi	r3, [r6, #0]
 8008c3a:	6825      	ldr	r5, [r4, #0]
 8008c3c:	f015 0506 	ands.w	r5, r5, #6
 8008c40:	d106      	bne.n	8008c50 <_printf_common+0x48>
 8008c42:	f104 0a19 	add.w	sl, r4, #25
 8008c46:	68e3      	ldr	r3, [r4, #12]
 8008c48:	6832      	ldr	r2, [r6, #0]
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	42ab      	cmp	r3, r5
 8008c4e:	dc26      	bgt.n	8008c9e <_printf_common+0x96>
 8008c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c54:	1e13      	subs	r3, r2, #0
 8008c56:	6822      	ldr	r2, [r4, #0]
 8008c58:	bf18      	it	ne
 8008c5a:	2301      	movne	r3, #1
 8008c5c:	0692      	lsls	r2, r2, #26
 8008c5e:	d42b      	bmi.n	8008cb8 <_printf_common+0xb0>
 8008c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c64:	4649      	mov	r1, r9
 8008c66:	4638      	mov	r0, r7
 8008c68:	47c0      	blx	r8
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d01e      	beq.n	8008cac <_printf_common+0xa4>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	68e5      	ldr	r5, [r4, #12]
 8008c72:	6832      	ldr	r2, [r6, #0]
 8008c74:	f003 0306 	and.w	r3, r3, #6
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	bf08      	it	eq
 8008c7c:	1aad      	subeq	r5, r5, r2
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	6922      	ldr	r2, [r4, #16]
 8008c82:	bf0c      	ite	eq
 8008c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c88:	2500      	movne	r5, #0
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	bfc4      	itt	gt
 8008c8e:	1a9b      	subgt	r3, r3, r2
 8008c90:	18ed      	addgt	r5, r5, r3
 8008c92:	2600      	movs	r6, #0
 8008c94:	341a      	adds	r4, #26
 8008c96:	42b5      	cmp	r5, r6
 8008c98:	d11a      	bne.n	8008cd0 <_printf_common+0xc8>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e008      	b.n	8008cb0 <_printf_common+0xa8>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4652      	mov	r2, sl
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	47c0      	blx	r8
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d103      	bne.n	8008cb4 <_printf_common+0xac>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	e7c6      	b.n	8008c46 <_printf_common+0x3e>
 8008cb8:	18e1      	adds	r1, r4, r3
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	2030      	movs	r0, #48	; 0x30
 8008cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cc2:	4422      	add	r2, r4
 8008cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ccc:	3302      	adds	r3, #2
 8008cce:	e7c7      	b.n	8008c60 <_printf_common+0x58>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	47c0      	blx	r8
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d0e6      	beq.n	8008cac <_printf_common+0xa4>
 8008cde:	3601      	adds	r6, #1
 8008ce0:	e7d9      	b.n	8008c96 <_printf_common+0x8e>
	...

08008ce4 <_printf_i>:
 8008ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	7e0f      	ldrb	r7, [r1, #24]
 8008cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cec:	2f78      	cmp	r7, #120	; 0x78
 8008cee:	4691      	mov	r9, r2
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	469a      	mov	sl, r3
 8008cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cfa:	d807      	bhi.n	8008d0c <_printf_i+0x28>
 8008cfc:	2f62      	cmp	r7, #98	; 0x62
 8008cfe:	d80a      	bhi.n	8008d16 <_printf_i+0x32>
 8008d00:	2f00      	cmp	r7, #0
 8008d02:	f000 80d8 	beq.w	8008eb6 <_printf_i+0x1d2>
 8008d06:	2f58      	cmp	r7, #88	; 0x58
 8008d08:	f000 80a3 	beq.w	8008e52 <_printf_i+0x16e>
 8008d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d14:	e03a      	b.n	8008d8c <_printf_i+0xa8>
 8008d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d1a:	2b15      	cmp	r3, #21
 8008d1c:	d8f6      	bhi.n	8008d0c <_printf_i+0x28>
 8008d1e:	a101      	add	r1, pc, #4	; (adr r1, 8008d24 <_printf_i+0x40>)
 8008d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d24:	08008d7d 	.word	0x08008d7d
 8008d28:	08008d91 	.word	0x08008d91
 8008d2c:	08008d0d 	.word	0x08008d0d
 8008d30:	08008d0d 	.word	0x08008d0d
 8008d34:	08008d0d 	.word	0x08008d0d
 8008d38:	08008d0d 	.word	0x08008d0d
 8008d3c:	08008d91 	.word	0x08008d91
 8008d40:	08008d0d 	.word	0x08008d0d
 8008d44:	08008d0d 	.word	0x08008d0d
 8008d48:	08008d0d 	.word	0x08008d0d
 8008d4c:	08008d0d 	.word	0x08008d0d
 8008d50:	08008e9d 	.word	0x08008e9d
 8008d54:	08008dc1 	.word	0x08008dc1
 8008d58:	08008e7f 	.word	0x08008e7f
 8008d5c:	08008d0d 	.word	0x08008d0d
 8008d60:	08008d0d 	.word	0x08008d0d
 8008d64:	08008ebf 	.word	0x08008ebf
 8008d68:	08008d0d 	.word	0x08008d0d
 8008d6c:	08008dc1 	.word	0x08008dc1
 8008d70:	08008d0d 	.word	0x08008d0d
 8008d74:	08008d0d 	.word	0x08008d0d
 8008d78:	08008e87 	.word	0x08008e87
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	1d1a      	adds	r2, r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	602a      	str	r2, [r5, #0]
 8008d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0a3      	b.n	8008ed8 <_printf_i+0x1f4>
 8008d90:	6820      	ldr	r0, [r4, #0]
 8008d92:	6829      	ldr	r1, [r5, #0]
 8008d94:	0606      	lsls	r6, r0, #24
 8008d96:	f101 0304 	add.w	r3, r1, #4
 8008d9a:	d50a      	bpl.n	8008db2 <_printf_i+0xce>
 8008d9c:	680e      	ldr	r6, [r1, #0]
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	2e00      	cmp	r6, #0
 8008da2:	da03      	bge.n	8008dac <_printf_i+0xc8>
 8008da4:	232d      	movs	r3, #45	; 0x2d
 8008da6:	4276      	negs	r6, r6
 8008da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dac:	485e      	ldr	r0, [pc, #376]	; (8008f28 <_printf_i+0x244>)
 8008dae:	230a      	movs	r3, #10
 8008db0:	e019      	b.n	8008de6 <_printf_i+0x102>
 8008db2:	680e      	ldr	r6, [r1, #0]
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dba:	bf18      	it	ne
 8008dbc:	b236      	sxthne	r6, r6
 8008dbe:	e7ef      	b.n	8008da0 <_printf_i+0xbc>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	6820      	ldr	r0, [r4, #0]
 8008dc4:	1d19      	adds	r1, r3, #4
 8008dc6:	6029      	str	r1, [r5, #0]
 8008dc8:	0601      	lsls	r1, r0, #24
 8008dca:	d501      	bpl.n	8008dd0 <_printf_i+0xec>
 8008dcc:	681e      	ldr	r6, [r3, #0]
 8008dce:	e002      	b.n	8008dd6 <_printf_i+0xf2>
 8008dd0:	0646      	lsls	r6, r0, #25
 8008dd2:	d5fb      	bpl.n	8008dcc <_printf_i+0xe8>
 8008dd4:	881e      	ldrh	r6, [r3, #0]
 8008dd6:	4854      	ldr	r0, [pc, #336]	; (8008f28 <_printf_i+0x244>)
 8008dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dda:	bf0c      	ite	eq
 8008ddc:	2308      	moveq	r3, #8
 8008dde:	230a      	movne	r3, #10
 8008de0:	2100      	movs	r1, #0
 8008de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008de6:	6865      	ldr	r5, [r4, #4]
 8008de8:	60a5      	str	r5, [r4, #8]
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	bfa2      	ittt	ge
 8008dee:	6821      	ldrge	r1, [r4, #0]
 8008df0:	f021 0104 	bicge.w	r1, r1, #4
 8008df4:	6021      	strge	r1, [r4, #0]
 8008df6:	b90e      	cbnz	r6, 8008dfc <_printf_i+0x118>
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	d04d      	beq.n	8008e98 <_printf_i+0x1b4>
 8008dfc:	4615      	mov	r5, r2
 8008dfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e02:	fb03 6711 	mls	r7, r3, r1, r6
 8008e06:	5dc7      	ldrb	r7, [r0, r7]
 8008e08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e0c:	4637      	mov	r7, r6
 8008e0e:	42bb      	cmp	r3, r7
 8008e10:	460e      	mov	r6, r1
 8008e12:	d9f4      	bls.n	8008dfe <_printf_i+0x11a>
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d10b      	bne.n	8008e30 <_printf_i+0x14c>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	07de      	lsls	r6, r3, #31
 8008e1c:	d508      	bpl.n	8008e30 <_printf_i+0x14c>
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	6861      	ldr	r1, [r4, #4]
 8008e22:	4299      	cmp	r1, r3
 8008e24:	bfde      	ittt	le
 8008e26:	2330      	movle	r3, #48	; 0x30
 8008e28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e30:	1b52      	subs	r2, r2, r5
 8008e32:	6122      	str	r2, [r4, #16]
 8008e34:	f8cd a000 	str.w	sl, [sp]
 8008e38:	464b      	mov	r3, r9
 8008e3a:	aa03      	add	r2, sp, #12
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f7ff fee2 	bl	8008c08 <_printf_common>
 8008e44:	3001      	adds	r0, #1
 8008e46:	d14c      	bne.n	8008ee2 <_printf_i+0x1fe>
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	b004      	add	sp, #16
 8008e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e52:	4835      	ldr	r0, [pc, #212]	; (8008f28 <_printf_i+0x244>)
 8008e54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e58:	6829      	ldr	r1, [r5, #0]
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e60:	6029      	str	r1, [r5, #0]
 8008e62:	061d      	lsls	r5, r3, #24
 8008e64:	d514      	bpl.n	8008e90 <_printf_i+0x1ac>
 8008e66:	07df      	lsls	r7, r3, #31
 8008e68:	bf44      	itt	mi
 8008e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e6e:	6023      	strmi	r3, [r4, #0]
 8008e70:	b91e      	cbnz	r6, 8008e7a <_printf_i+0x196>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	f023 0320 	bic.w	r3, r3, #32
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	2310      	movs	r3, #16
 8008e7c:	e7b0      	b.n	8008de0 <_printf_i+0xfc>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	f043 0320 	orr.w	r3, r3, #32
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	2378      	movs	r3, #120	; 0x78
 8008e88:	4828      	ldr	r0, [pc, #160]	; (8008f2c <_printf_i+0x248>)
 8008e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e8e:	e7e3      	b.n	8008e58 <_printf_i+0x174>
 8008e90:	0659      	lsls	r1, r3, #25
 8008e92:	bf48      	it	mi
 8008e94:	b2b6      	uxthmi	r6, r6
 8008e96:	e7e6      	b.n	8008e66 <_printf_i+0x182>
 8008e98:	4615      	mov	r5, r2
 8008e9a:	e7bb      	b.n	8008e14 <_printf_i+0x130>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	6826      	ldr	r6, [r4, #0]
 8008ea0:	6961      	ldr	r1, [r4, #20]
 8008ea2:	1d18      	adds	r0, r3, #4
 8008ea4:	6028      	str	r0, [r5, #0]
 8008ea6:	0635      	lsls	r5, r6, #24
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	d501      	bpl.n	8008eb0 <_printf_i+0x1cc>
 8008eac:	6019      	str	r1, [r3, #0]
 8008eae:	e002      	b.n	8008eb6 <_printf_i+0x1d2>
 8008eb0:	0670      	lsls	r0, r6, #25
 8008eb2:	d5fb      	bpl.n	8008eac <_printf_i+0x1c8>
 8008eb4:	8019      	strh	r1, [r3, #0]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	4615      	mov	r5, r2
 8008ebc:	e7ba      	b.n	8008e34 <_printf_i+0x150>
 8008ebe:	682b      	ldr	r3, [r5, #0]
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	602a      	str	r2, [r5, #0]
 8008ec4:	681d      	ldr	r5, [r3, #0]
 8008ec6:	6862      	ldr	r2, [r4, #4]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7f7 f998 	bl	8000200 <memchr>
 8008ed0:	b108      	cbz	r0, 8008ed6 <_printf_i+0x1f2>
 8008ed2:	1b40      	subs	r0, r0, r5
 8008ed4:	6060      	str	r0, [r4, #4]
 8008ed6:	6863      	ldr	r3, [r4, #4]
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	2300      	movs	r3, #0
 8008edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ee0:	e7a8      	b.n	8008e34 <_printf_i+0x150>
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4640      	mov	r0, r8
 8008eea:	47d0      	blx	sl
 8008eec:	3001      	adds	r0, #1
 8008eee:	d0ab      	beq.n	8008e48 <_printf_i+0x164>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	079b      	lsls	r3, r3, #30
 8008ef4:	d413      	bmi.n	8008f1e <_printf_i+0x23a>
 8008ef6:	68e0      	ldr	r0, [r4, #12]
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	4298      	cmp	r0, r3
 8008efc:	bfb8      	it	lt
 8008efe:	4618      	movlt	r0, r3
 8008f00:	e7a4      	b.n	8008e4c <_printf_i+0x168>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4632      	mov	r2, r6
 8008f06:	4649      	mov	r1, r9
 8008f08:	4640      	mov	r0, r8
 8008f0a:	47d0      	blx	sl
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d09b      	beq.n	8008e48 <_printf_i+0x164>
 8008f10:	3501      	adds	r5, #1
 8008f12:	68e3      	ldr	r3, [r4, #12]
 8008f14:	9903      	ldr	r1, [sp, #12]
 8008f16:	1a5b      	subs	r3, r3, r1
 8008f18:	42ab      	cmp	r3, r5
 8008f1a:	dcf2      	bgt.n	8008f02 <_printf_i+0x21e>
 8008f1c:	e7eb      	b.n	8008ef6 <_printf_i+0x212>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	f104 0619 	add.w	r6, r4, #25
 8008f24:	e7f5      	b.n	8008f12 <_printf_i+0x22e>
 8008f26:	bf00      	nop
 8008f28:	0800cdda 	.word	0x0800cdda
 8008f2c:	0800cdeb 	.word	0x0800cdeb

08008f30 <_scanf_float>:
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	b087      	sub	sp, #28
 8008f36:	4617      	mov	r7, r2
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	688b      	ldr	r3, [r1, #8]
 8008f3c:	1e5a      	subs	r2, r3, #1
 8008f3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f42:	bf83      	ittte	hi
 8008f44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f48:	195b      	addhi	r3, r3, r5
 8008f4a:	9302      	strhi	r3, [sp, #8]
 8008f4c:	2300      	movls	r3, #0
 8008f4e:	bf86      	itte	hi
 8008f50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f54:	608b      	strhi	r3, [r1, #8]
 8008f56:	9302      	strls	r3, [sp, #8]
 8008f58:	680b      	ldr	r3, [r1, #0]
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	2500      	movs	r5, #0
 8008f5e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f62:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	465e      	mov	r6, fp
 8008f70:	46aa      	mov	sl, r5
 8008f72:	46a9      	mov	r9, r5
 8008f74:	9501      	str	r5, [sp, #4]
 8008f76:	68a2      	ldr	r2, [r4, #8]
 8008f78:	b152      	cbz	r2, 8008f90 <_scanf_float+0x60>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b4e      	cmp	r3, #78	; 0x4e
 8008f80:	d864      	bhi.n	800904c <_scanf_float+0x11c>
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d83c      	bhi.n	8009000 <_scanf_float+0xd0>
 8008f86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f8a:	b2c8      	uxtb	r0, r1
 8008f8c:	280e      	cmp	r0, #14
 8008f8e:	d93a      	bls.n	8009006 <_scanf_float+0xd6>
 8008f90:	f1b9 0f00 	cmp.w	r9, #0
 8008f94:	d003      	beq.n	8008f9e <_scanf_float+0x6e>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fa2:	f1ba 0f01 	cmp.w	sl, #1
 8008fa6:	f200 8113 	bhi.w	80091d0 <_scanf_float+0x2a0>
 8008faa:	455e      	cmp	r6, fp
 8008fac:	f200 8105 	bhi.w	80091ba <_scanf_float+0x28a>
 8008fb0:	2501      	movs	r5, #1
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	b007      	add	sp, #28
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fbe:	2a0d      	cmp	r2, #13
 8008fc0:	d8e6      	bhi.n	8008f90 <_scanf_float+0x60>
 8008fc2:	a101      	add	r1, pc, #4	; (adr r1, 8008fc8 <_scanf_float+0x98>)
 8008fc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fc8:	08009107 	.word	0x08009107
 8008fcc:	08008f91 	.word	0x08008f91
 8008fd0:	08008f91 	.word	0x08008f91
 8008fd4:	08008f91 	.word	0x08008f91
 8008fd8:	08009167 	.word	0x08009167
 8008fdc:	0800913f 	.word	0x0800913f
 8008fe0:	08008f91 	.word	0x08008f91
 8008fe4:	08008f91 	.word	0x08008f91
 8008fe8:	08009115 	.word	0x08009115
 8008fec:	08008f91 	.word	0x08008f91
 8008ff0:	08008f91 	.word	0x08008f91
 8008ff4:	08008f91 	.word	0x08008f91
 8008ff8:	08008f91 	.word	0x08008f91
 8008ffc:	080090cd 	.word	0x080090cd
 8009000:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009004:	e7db      	b.n	8008fbe <_scanf_float+0x8e>
 8009006:	290e      	cmp	r1, #14
 8009008:	d8c2      	bhi.n	8008f90 <_scanf_float+0x60>
 800900a:	a001      	add	r0, pc, #4	; (adr r0, 8009010 <_scanf_float+0xe0>)
 800900c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009010:	080090bf 	.word	0x080090bf
 8009014:	08008f91 	.word	0x08008f91
 8009018:	080090bf 	.word	0x080090bf
 800901c:	08009153 	.word	0x08009153
 8009020:	08008f91 	.word	0x08008f91
 8009024:	0800906d 	.word	0x0800906d
 8009028:	080090a9 	.word	0x080090a9
 800902c:	080090a9 	.word	0x080090a9
 8009030:	080090a9 	.word	0x080090a9
 8009034:	080090a9 	.word	0x080090a9
 8009038:	080090a9 	.word	0x080090a9
 800903c:	080090a9 	.word	0x080090a9
 8009040:	080090a9 	.word	0x080090a9
 8009044:	080090a9 	.word	0x080090a9
 8009048:	080090a9 	.word	0x080090a9
 800904c:	2b6e      	cmp	r3, #110	; 0x6e
 800904e:	d809      	bhi.n	8009064 <_scanf_float+0x134>
 8009050:	2b60      	cmp	r3, #96	; 0x60
 8009052:	d8b2      	bhi.n	8008fba <_scanf_float+0x8a>
 8009054:	2b54      	cmp	r3, #84	; 0x54
 8009056:	d077      	beq.n	8009148 <_scanf_float+0x218>
 8009058:	2b59      	cmp	r3, #89	; 0x59
 800905a:	d199      	bne.n	8008f90 <_scanf_float+0x60>
 800905c:	2d07      	cmp	r5, #7
 800905e:	d197      	bne.n	8008f90 <_scanf_float+0x60>
 8009060:	2508      	movs	r5, #8
 8009062:	e029      	b.n	80090b8 <_scanf_float+0x188>
 8009064:	2b74      	cmp	r3, #116	; 0x74
 8009066:	d06f      	beq.n	8009148 <_scanf_float+0x218>
 8009068:	2b79      	cmp	r3, #121	; 0x79
 800906a:	e7f6      	b.n	800905a <_scanf_float+0x12a>
 800906c:	6821      	ldr	r1, [r4, #0]
 800906e:	05c8      	lsls	r0, r1, #23
 8009070:	d51a      	bpl.n	80090a8 <_scanf_float+0x178>
 8009072:	9b02      	ldr	r3, [sp, #8]
 8009074:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009078:	6021      	str	r1, [r4, #0]
 800907a:	f109 0901 	add.w	r9, r9, #1
 800907e:	b11b      	cbz	r3, 8009088 <_scanf_float+0x158>
 8009080:	3b01      	subs	r3, #1
 8009082:	3201      	adds	r2, #1
 8009084:	9302      	str	r3, [sp, #8]
 8009086:	60a2      	str	r2, [r4, #8]
 8009088:	68a3      	ldr	r3, [r4, #8]
 800908a:	3b01      	subs	r3, #1
 800908c:	60a3      	str	r3, [r4, #8]
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	3301      	adds	r3, #1
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3b01      	subs	r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	607b      	str	r3, [r7, #4]
 800909c:	f340 8084 	ble.w	80091a8 <_scanf_float+0x278>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	3301      	adds	r3, #1
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	e766      	b.n	8008f76 <_scanf_float+0x46>
 80090a8:	eb1a 0f05 	cmn.w	sl, r5
 80090ac:	f47f af70 	bne.w	8008f90 <_scanf_float+0x60>
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090b6:	6022      	str	r2, [r4, #0]
 80090b8:	f806 3b01 	strb.w	r3, [r6], #1
 80090bc:	e7e4      	b.n	8009088 <_scanf_float+0x158>
 80090be:	6822      	ldr	r2, [r4, #0]
 80090c0:	0610      	lsls	r0, r2, #24
 80090c2:	f57f af65 	bpl.w	8008f90 <_scanf_float+0x60>
 80090c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090ca:	e7f4      	b.n	80090b6 <_scanf_float+0x186>
 80090cc:	f1ba 0f00 	cmp.w	sl, #0
 80090d0:	d10e      	bne.n	80090f0 <_scanf_float+0x1c0>
 80090d2:	f1b9 0f00 	cmp.w	r9, #0
 80090d6:	d10e      	bne.n	80090f6 <_scanf_float+0x1c6>
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090e2:	d108      	bne.n	80090f6 <_scanf_float+0x1c6>
 80090e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090e8:	6022      	str	r2, [r4, #0]
 80090ea:	f04f 0a01 	mov.w	sl, #1
 80090ee:	e7e3      	b.n	80090b8 <_scanf_float+0x188>
 80090f0:	f1ba 0f02 	cmp.w	sl, #2
 80090f4:	d055      	beq.n	80091a2 <_scanf_float+0x272>
 80090f6:	2d01      	cmp	r5, #1
 80090f8:	d002      	beq.n	8009100 <_scanf_float+0x1d0>
 80090fa:	2d04      	cmp	r5, #4
 80090fc:	f47f af48 	bne.w	8008f90 <_scanf_float+0x60>
 8009100:	3501      	adds	r5, #1
 8009102:	b2ed      	uxtb	r5, r5
 8009104:	e7d8      	b.n	80090b8 <_scanf_float+0x188>
 8009106:	f1ba 0f01 	cmp.w	sl, #1
 800910a:	f47f af41 	bne.w	8008f90 <_scanf_float+0x60>
 800910e:	f04f 0a02 	mov.w	sl, #2
 8009112:	e7d1      	b.n	80090b8 <_scanf_float+0x188>
 8009114:	b97d      	cbnz	r5, 8009136 <_scanf_float+0x206>
 8009116:	f1b9 0f00 	cmp.w	r9, #0
 800911a:	f47f af3c 	bne.w	8008f96 <_scanf_float+0x66>
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009124:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009128:	f47f af39 	bne.w	8008f9e <_scanf_float+0x6e>
 800912c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009130:	6022      	str	r2, [r4, #0]
 8009132:	2501      	movs	r5, #1
 8009134:	e7c0      	b.n	80090b8 <_scanf_float+0x188>
 8009136:	2d03      	cmp	r5, #3
 8009138:	d0e2      	beq.n	8009100 <_scanf_float+0x1d0>
 800913a:	2d05      	cmp	r5, #5
 800913c:	e7de      	b.n	80090fc <_scanf_float+0x1cc>
 800913e:	2d02      	cmp	r5, #2
 8009140:	f47f af26 	bne.w	8008f90 <_scanf_float+0x60>
 8009144:	2503      	movs	r5, #3
 8009146:	e7b7      	b.n	80090b8 <_scanf_float+0x188>
 8009148:	2d06      	cmp	r5, #6
 800914a:	f47f af21 	bne.w	8008f90 <_scanf_float+0x60>
 800914e:	2507      	movs	r5, #7
 8009150:	e7b2      	b.n	80090b8 <_scanf_float+0x188>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	0591      	lsls	r1, r2, #22
 8009156:	f57f af1b 	bpl.w	8008f90 <_scanf_float+0x60>
 800915a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	f8cd 9004 	str.w	r9, [sp, #4]
 8009164:	e7a8      	b.n	80090b8 <_scanf_float+0x188>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800916c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009170:	d006      	beq.n	8009180 <_scanf_float+0x250>
 8009172:	0550      	lsls	r0, r2, #21
 8009174:	f57f af0c 	bpl.w	8008f90 <_scanf_float+0x60>
 8009178:	f1b9 0f00 	cmp.w	r9, #0
 800917c:	f43f af0f 	beq.w	8008f9e <_scanf_float+0x6e>
 8009180:	0591      	lsls	r1, r2, #22
 8009182:	bf58      	it	pl
 8009184:	9901      	ldrpl	r1, [sp, #4]
 8009186:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800918a:	bf58      	it	pl
 800918c:	eba9 0101 	subpl.w	r1, r9, r1
 8009190:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009194:	bf58      	it	pl
 8009196:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800919a:	6022      	str	r2, [r4, #0]
 800919c:	f04f 0900 	mov.w	r9, #0
 80091a0:	e78a      	b.n	80090b8 <_scanf_float+0x188>
 80091a2:	f04f 0a03 	mov.w	sl, #3
 80091a6:	e787      	b.n	80090b8 <_scanf_float+0x188>
 80091a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091ac:	4639      	mov	r1, r7
 80091ae:	4640      	mov	r0, r8
 80091b0:	4798      	blx	r3
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f aedf 	beq.w	8008f76 <_scanf_float+0x46>
 80091b8:	e6ea      	b.n	8008f90 <_scanf_float+0x60>
 80091ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091c2:	463a      	mov	r2, r7
 80091c4:	4640      	mov	r0, r8
 80091c6:	4798      	blx	r3
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	e6ec      	b.n	8008faa <_scanf_float+0x7a>
 80091d0:	1e6b      	subs	r3, r5, #1
 80091d2:	2b06      	cmp	r3, #6
 80091d4:	d825      	bhi.n	8009222 <_scanf_float+0x2f2>
 80091d6:	2d02      	cmp	r5, #2
 80091d8:	d836      	bhi.n	8009248 <_scanf_float+0x318>
 80091da:	455e      	cmp	r6, fp
 80091dc:	f67f aee8 	bls.w	8008fb0 <_scanf_float+0x80>
 80091e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091e8:	463a      	mov	r2, r7
 80091ea:	4640      	mov	r0, r8
 80091ec:	4798      	blx	r3
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	6123      	str	r3, [r4, #16]
 80091f4:	e7f1      	b.n	80091da <_scanf_float+0x2aa>
 80091f6:	9802      	ldr	r0, [sp, #8]
 80091f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009200:	9002      	str	r0, [sp, #8]
 8009202:	463a      	mov	r2, r7
 8009204:	4640      	mov	r0, r8
 8009206:	4798      	blx	r3
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	3b01      	subs	r3, #1
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009212:	fa5f fa8a 	uxtb.w	sl, sl
 8009216:	f1ba 0f02 	cmp.w	sl, #2
 800921a:	d1ec      	bne.n	80091f6 <_scanf_float+0x2c6>
 800921c:	3d03      	subs	r5, #3
 800921e:	b2ed      	uxtb	r5, r5
 8009220:	1b76      	subs	r6, r6, r5
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	05da      	lsls	r2, r3, #23
 8009226:	d52f      	bpl.n	8009288 <_scanf_float+0x358>
 8009228:	055b      	lsls	r3, r3, #21
 800922a:	d510      	bpl.n	800924e <_scanf_float+0x31e>
 800922c:	455e      	cmp	r6, fp
 800922e:	f67f aebf 	bls.w	8008fb0 <_scanf_float+0x80>
 8009232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800923a:	463a      	mov	r2, r7
 800923c:	4640      	mov	r0, r8
 800923e:	4798      	blx	r3
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	3b01      	subs	r3, #1
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	e7f1      	b.n	800922c <_scanf_float+0x2fc>
 8009248:	46aa      	mov	sl, r5
 800924a:	9602      	str	r6, [sp, #8]
 800924c:	e7df      	b.n	800920e <_scanf_float+0x2de>
 800924e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	2965      	cmp	r1, #101	; 0x65
 8009256:	f103 33ff 	add.w	r3, r3, #4294967295
 800925a:	f106 35ff 	add.w	r5, r6, #4294967295
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	d00c      	beq.n	800927c <_scanf_float+0x34c>
 8009262:	2945      	cmp	r1, #69	; 0x45
 8009264:	d00a      	beq.n	800927c <_scanf_float+0x34c>
 8009266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800926a:	463a      	mov	r2, r7
 800926c:	4640      	mov	r0, r8
 800926e:	4798      	blx	r3
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009276:	3b01      	subs	r3, #1
 8009278:	1eb5      	subs	r5, r6, #2
 800927a:	6123      	str	r3, [r4, #16]
 800927c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009280:	463a      	mov	r2, r7
 8009282:	4640      	mov	r0, r8
 8009284:	4798      	blx	r3
 8009286:	462e      	mov	r6, r5
 8009288:	6825      	ldr	r5, [r4, #0]
 800928a:	f015 0510 	ands.w	r5, r5, #16
 800928e:	d159      	bne.n	8009344 <_scanf_float+0x414>
 8009290:	7035      	strb	r5, [r6, #0]
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800929c:	d11b      	bne.n	80092d6 <_scanf_float+0x3a6>
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	454b      	cmp	r3, r9
 80092a2:	eba3 0209 	sub.w	r2, r3, r9
 80092a6:	d123      	bne.n	80092f0 <_scanf_float+0x3c0>
 80092a8:	2200      	movs	r2, #0
 80092aa:	4659      	mov	r1, fp
 80092ac:	4640      	mov	r0, r8
 80092ae:	f000 fec1 	bl	800a034 <_strtod_r>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	f012 0f02 	tst.w	r2, #2
 80092ba:	ec57 6b10 	vmov	r6, r7, d0
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	d021      	beq.n	8009306 <_scanf_float+0x3d6>
 80092c2:	9903      	ldr	r1, [sp, #12]
 80092c4:	1d1a      	adds	r2, r3, #4
 80092c6:	600a      	str	r2, [r1, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	e9c3 6700 	strd	r6, r7, [r3]
 80092ce:	68e3      	ldr	r3, [r4, #12]
 80092d0:	3301      	adds	r3, #1
 80092d2:	60e3      	str	r3, [r4, #12]
 80092d4:	e66d      	b.n	8008fb2 <_scanf_float+0x82>
 80092d6:	9b04      	ldr	r3, [sp, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0e5      	beq.n	80092a8 <_scanf_float+0x378>
 80092dc:	9905      	ldr	r1, [sp, #20]
 80092de:	230a      	movs	r3, #10
 80092e0:	462a      	mov	r2, r5
 80092e2:	3101      	adds	r1, #1
 80092e4:	4640      	mov	r0, r8
 80092e6:	f000 ff2d 	bl	800a144 <_strtol_r>
 80092ea:	9b04      	ldr	r3, [sp, #16]
 80092ec:	9e05      	ldr	r6, [sp, #20]
 80092ee:	1ac2      	subs	r2, r0, r3
 80092f0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092f4:	429e      	cmp	r6, r3
 80092f6:	bf28      	it	cs
 80092f8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092fc:	4912      	ldr	r1, [pc, #72]	; (8009348 <_scanf_float+0x418>)
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 f854 	bl	80093ac <siprintf>
 8009304:	e7d0      	b.n	80092a8 <_scanf_float+0x378>
 8009306:	9903      	ldr	r1, [sp, #12]
 8009308:	f012 0f04 	tst.w	r2, #4
 800930c:	f103 0204 	add.w	r2, r3, #4
 8009310:	600a      	str	r2, [r1, #0]
 8009312:	d1d9      	bne.n	80092c8 <_scanf_float+0x398>
 8009314:	f8d3 8000 	ldr.w	r8, [r3]
 8009318:	ee10 2a10 	vmov	r2, s0
 800931c:	ee10 0a10 	vmov	r0, s0
 8009320:	463b      	mov	r3, r7
 8009322:	4639      	mov	r1, r7
 8009324:	f7f7 fc12 	bl	8000b4c <__aeabi_dcmpun>
 8009328:	b128      	cbz	r0, 8009336 <_scanf_float+0x406>
 800932a:	4808      	ldr	r0, [pc, #32]	; (800934c <_scanf_float+0x41c>)
 800932c:	f000 f838 	bl	80093a0 <nanf>
 8009330:	ed88 0a00 	vstr	s0, [r8]
 8009334:	e7cb      	b.n	80092ce <_scanf_float+0x39e>
 8009336:	4630      	mov	r0, r6
 8009338:	4639      	mov	r1, r7
 800933a:	f7f7 fc65 	bl	8000c08 <__aeabi_d2f>
 800933e:	f8c8 0000 	str.w	r0, [r8]
 8009342:	e7c4      	b.n	80092ce <_scanf_float+0x39e>
 8009344:	2500      	movs	r5, #0
 8009346:	e634      	b.n	8008fb2 <_scanf_float+0x82>
 8009348:	0800cdfc 	.word	0x0800cdfc
 800934c:	0800d270 	.word	0x0800d270

08009350 <iprintf>:
 8009350:	b40f      	push	{r0, r1, r2, r3}
 8009352:	4b0a      	ldr	r3, [pc, #40]	; (800937c <iprintf+0x2c>)
 8009354:	b513      	push	{r0, r1, r4, lr}
 8009356:	681c      	ldr	r4, [r3, #0]
 8009358:	b124      	cbz	r4, 8009364 <iprintf+0x14>
 800935a:	69a3      	ldr	r3, [r4, #24]
 800935c:	b913      	cbnz	r3, 8009364 <iprintf+0x14>
 800935e:	4620      	mov	r0, r4
 8009360:	f001 fdc4 	bl	800aeec <__sinit>
 8009364:	ab05      	add	r3, sp, #20
 8009366:	9a04      	ldr	r2, [sp, #16]
 8009368:	68a1      	ldr	r1, [r4, #8]
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	4620      	mov	r0, r4
 800936e:	f003 f84b 	bl	800c408 <_vfiprintf_r>
 8009372:	b002      	add	sp, #8
 8009374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009378:	b004      	add	sp, #16
 800937a:	4770      	bx	lr
 800937c:	20000010 	.word	0x20000010

08009380 <_sbrk_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d06      	ldr	r5, [pc, #24]	; (800939c <_sbrk_r+0x1c>)
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	602b      	str	r3, [r5, #0]
 800938c:	f7f8 fd72 	bl	8001e74 <_sbrk>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_sbrk_r+0x1a>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_sbrk_r+0x1a>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	200047c4 	.word	0x200047c4

080093a0 <nanf>:
 80093a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80093a8 <nanf+0x8>
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	7fc00000 	.word	0x7fc00000

080093ac <siprintf>:
 80093ac:	b40e      	push	{r1, r2, r3}
 80093ae:	b500      	push	{lr}
 80093b0:	b09c      	sub	sp, #112	; 0x70
 80093b2:	ab1d      	add	r3, sp, #116	; 0x74
 80093b4:	9002      	str	r0, [sp, #8]
 80093b6:	9006      	str	r0, [sp, #24]
 80093b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093bc:	4809      	ldr	r0, [pc, #36]	; (80093e4 <siprintf+0x38>)
 80093be:	9107      	str	r1, [sp, #28]
 80093c0:	9104      	str	r1, [sp, #16]
 80093c2:	4909      	ldr	r1, [pc, #36]	; (80093e8 <siprintf+0x3c>)
 80093c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c8:	9105      	str	r1, [sp, #20]
 80093ca:	6800      	ldr	r0, [r0, #0]
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	a902      	add	r1, sp, #8
 80093d0:	f002 fef0 	bl	800c1b4 <_svfiprintf_r>
 80093d4:	9b02      	ldr	r3, [sp, #8]
 80093d6:	2200      	movs	r2, #0
 80093d8:	701a      	strb	r2, [r3, #0]
 80093da:	b01c      	add	sp, #112	; 0x70
 80093dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e0:	b003      	add	sp, #12
 80093e2:	4770      	bx	lr
 80093e4:	20000010 	.word	0x20000010
 80093e8:	ffff0208 	.word	0xffff0208

080093ec <sulp>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	4604      	mov	r4, r0
 80093f0:	460d      	mov	r5, r1
 80093f2:	ec45 4b10 	vmov	d0, r4, r5
 80093f6:	4616      	mov	r6, r2
 80093f8:	f002 fd1c 	bl	800be34 <__ulp>
 80093fc:	ec51 0b10 	vmov	r0, r1, d0
 8009400:	b17e      	cbz	r6, 8009422 <sulp+0x36>
 8009402:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009406:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800940a:	2b00      	cmp	r3, #0
 800940c:	dd09      	ble.n	8009422 <sulp+0x36>
 800940e:	051b      	lsls	r3, r3, #20
 8009410:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009414:	2400      	movs	r4, #0
 8009416:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800941a:	4622      	mov	r2, r4
 800941c:	462b      	mov	r3, r5
 800941e:	f7f7 f8fb 	bl	8000618 <__aeabi_dmul>
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	0000      	movs	r0, r0
	...

08009428 <_strtod_l>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ed2d 8b02 	vpush	{d8}
 8009430:	b09d      	sub	sp, #116	; 0x74
 8009432:	461f      	mov	r7, r3
 8009434:	2300      	movs	r3, #0
 8009436:	9318      	str	r3, [sp, #96]	; 0x60
 8009438:	4ba2      	ldr	r3, [pc, #648]	; (80096c4 <_strtod_l+0x29c>)
 800943a:	9213      	str	r2, [sp, #76]	; 0x4c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	4604      	mov	r4, r0
 8009442:	4618      	mov	r0, r3
 8009444:	4688      	mov	r8, r1
 8009446:	f7f6 fed3 	bl	80001f0 <strlen>
 800944a:	f04f 0a00 	mov.w	sl, #0
 800944e:	4605      	mov	r5, r0
 8009450:	f04f 0b00 	mov.w	fp, #0
 8009454:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800945a:	781a      	ldrb	r2, [r3, #0]
 800945c:	2a2b      	cmp	r2, #43	; 0x2b
 800945e:	d04e      	beq.n	80094fe <_strtod_l+0xd6>
 8009460:	d83b      	bhi.n	80094da <_strtod_l+0xb2>
 8009462:	2a0d      	cmp	r2, #13
 8009464:	d834      	bhi.n	80094d0 <_strtod_l+0xa8>
 8009466:	2a08      	cmp	r2, #8
 8009468:	d834      	bhi.n	80094d4 <_strtod_l+0xac>
 800946a:	2a00      	cmp	r2, #0
 800946c:	d03e      	beq.n	80094ec <_strtod_l+0xc4>
 800946e:	2300      	movs	r3, #0
 8009470:	930a      	str	r3, [sp, #40]	; 0x28
 8009472:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009474:	7833      	ldrb	r3, [r6, #0]
 8009476:	2b30      	cmp	r3, #48	; 0x30
 8009478:	f040 80b0 	bne.w	80095dc <_strtod_l+0x1b4>
 800947c:	7873      	ldrb	r3, [r6, #1]
 800947e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009482:	2b58      	cmp	r3, #88	; 0x58
 8009484:	d168      	bne.n	8009558 <_strtod_l+0x130>
 8009486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	ab18      	add	r3, sp, #96	; 0x60
 800948c:	9702      	str	r7, [sp, #8]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4a8d      	ldr	r2, [pc, #564]	; (80096c8 <_strtod_l+0x2a0>)
 8009492:	ab19      	add	r3, sp, #100	; 0x64
 8009494:	a917      	add	r1, sp, #92	; 0x5c
 8009496:	4620      	mov	r0, r4
 8009498:	f001 fe2c 	bl	800b0f4 <__gethex>
 800949c:	f010 0707 	ands.w	r7, r0, #7
 80094a0:	4605      	mov	r5, r0
 80094a2:	d005      	beq.n	80094b0 <_strtod_l+0x88>
 80094a4:	2f06      	cmp	r7, #6
 80094a6:	d12c      	bne.n	8009502 <_strtod_l+0xda>
 80094a8:	3601      	adds	r6, #1
 80094aa:	2300      	movs	r3, #0
 80094ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80094ae:	930a      	str	r3, [sp, #40]	; 0x28
 80094b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 8590 	bne.w	8009fd8 <_strtod_l+0xbb0>
 80094b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ba:	b1eb      	cbz	r3, 80094f8 <_strtod_l+0xd0>
 80094bc:	4652      	mov	r2, sl
 80094be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094c2:	ec43 2b10 	vmov	d0, r2, r3
 80094c6:	b01d      	add	sp, #116	; 0x74
 80094c8:	ecbd 8b02 	vpop	{d8}
 80094cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d0:	2a20      	cmp	r2, #32
 80094d2:	d1cc      	bne.n	800946e <_strtod_l+0x46>
 80094d4:	3301      	adds	r3, #1
 80094d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80094d8:	e7be      	b.n	8009458 <_strtod_l+0x30>
 80094da:	2a2d      	cmp	r2, #45	; 0x2d
 80094dc:	d1c7      	bne.n	800946e <_strtod_l+0x46>
 80094de:	2201      	movs	r2, #1
 80094e0:	920a      	str	r2, [sp, #40]	; 0x28
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1c2      	bne.n	8009472 <_strtod_l+0x4a>
 80094ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f040 856e 	bne.w	8009fd4 <_strtod_l+0xbac>
 80094f8:	4652      	mov	r2, sl
 80094fa:	465b      	mov	r3, fp
 80094fc:	e7e1      	b.n	80094c2 <_strtod_l+0x9a>
 80094fe:	2200      	movs	r2, #0
 8009500:	e7ee      	b.n	80094e0 <_strtod_l+0xb8>
 8009502:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009504:	b13a      	cbz	r2, 8009516 <_strtod_l+0xee>
 8009506:	2135      	movs	r1, #53	; 0x35
 8009508:	a81a      	add	r0, sp, #104	; 0x68
 800950a:	f002 fd9e 	bl	800c04a <__copybits>
 800950e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009510:	4620      	mov	r0, r4
 8009512:	f002 f95d 	bl	800b7d0 <_Bfree>
 8009516:	3f01      	subs	r7, #1
 8009518:	2f04      	cmp	r7, #4
 800951a:	d806      	bhi.n	800952a <_strtod_l+0x102>
 800951c:	e8df f007 	tbb	[pc, r7]
 8009520:	1714030a 	.word	0x1714030a
 8009524:	0a          	.byte	0x0a
 8009525:	00          	.byte	0x00
 8009526:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800952a:	0728      	lsls	r0, r5, #28
 800952c:	d5c0      	bpl.n	80094b0 <_strtod_l+0x88>
 800952e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009532:	e7bd      	b.n	80094b0 <_strtod_l+0x88>
 8009534:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009538:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800953a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800953e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009542:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009546:	e7f0      	b.n	800952a <_strtod_l+0x102>
 8009548:	f8df b180 	ldr.w	fp, [pc, #384]	; 80096cc <_strtod_l+0x2a4>
 800954c:	e7ed      	b.n	800952a <_strtod_l+0x102>
 800954e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009552:	f04f 3aff 	mov.w	sl, #4294967295
 8009556:	e7e8      	b.n	800952a <_strtod_l+0x102>
 8009558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	9217      	str	r2, [sp, #92]	; 0x5c
 800955e:	785b      	ldrb	r3, [r3, #1]
 8009560:	2b30      	cmp	r3, #48	; 0x30
 8009562:	d0f9      	beq.n	8009558 <_strtod_l+0x130>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0a3      	beq.n	80094b0 <_strtod_l+0x88>
 8009568:	2301      	movs	r3, #1
 800956a:	f04f 0900 	mov.w	r9, #0
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009572:	9308      	str	r3, [sp, #32]
 8009574:	f8cd 901c 	str.w	r9, [sp, #28]
 8009578:	464f      	mov	r7, r9
 800957a:	220a      	movs	r2, #10
 800957c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800957e:	7806      	ldrb	r6, [r0, #0]
 8009580:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009584:	b2d9      	uxtb	r1, r3
 8009586:	2909      	cmp	r1, #9
 8009588:	d92a      	bls.n	80095e0 <_strtod_l+0x1b8>
 800958a:	9905      	ldr	r1, [sp, #20]
 800958c:	462a      	mov	r2, r5
 800958e:	f003 f8b6 	bl	800c6fe <strncmp>
 8009592:	b398      	cbz	r0, 80095fc <_strtod_l+0x1d4>
 8009594:	2000      	movs	r0, #0
 8009596:	4632      	mov	r2, r6
 8009598:	463d      	mov	r5, r7
 800959a:	9005      	str	r0, [sp, #20]
 800959c:	4603      	mov	r3, r0
 800959e:	2a65      	cmp	r2, #101	; 0x65
 80095a0:	d001      	beq.n	80095a6 <_strtod_l+0x17e>
 80095a2:	2a45      	cmp	r2, #69	; 0x45
 80095a4:	d118      	bne.n	80095d8 <_strtod_l+0x1b0>
 80095a6:	b91d      	cbnz	r5, 80095b0 <_strtod_l+0x188>
 80095a8:	9a04      	ldr	r2, [sp, #16]
 80095aa:	4302      	orrs	r2, r0
 80095ac:	d09e      	beq.n	80094ec <_strtod_l+0xc4>
 80095ae:	2500      	movs	r5, #0
 80095b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80095b4:	f108 0201 	add.w	r2, r8, #1
 80095b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80095ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80095be:	2a2b      	cmp	r2, #43	; 0x2b
 80095c0:	d075      	beq.n	80096ae <_strtod_l+0x286>
 80095c2:	2a2d      	cmp	r2, #45	; 0x2d
 80095c4:	d07b      	beq.n	80096be <_strtod_l+0x296>
 80095c6:	f04f 0c00 	mov.w	ip, #0
 80095ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80095ce:	2909      	cmp	r1, #9
 80095d0:	f240 8082 	bls.w	80096d8 <_strtod_l+0x2b0>
 80095d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80095d8:	2600      	movs	r6, #0
 80095da:	e09d      	b.n	8009718 <_strtod_l+0x2f0>
 80095dc:	2300      	movs	r3, #0
 80095de:	e7c4      	b.n	800956a <_strtod_l+0x142>
 80095e0:	2f08      	cmp	r7, #8
 80095e2:	bfd8      	it	le
 80095e4:	9907      	ldrle	r1, [sp, #28]
 80095e6:	f100 0001 	add.w	r0, r0, #1
 80095ea:	bfda      	itte	le
 80095ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80095f0:	9307      	strle	r3, [sp, #28]
 80095f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80095f6:	3701      	adds	r7, #1
 80095f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80095fa:	e7bf      	b.n	800957c <_strtod_l+0x154>
 80095fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095fe:	195a      	adds	r2, r3, r5
 8009600:	9217      	str	r2, [sp, #92]	; 0x5c
 8009602:	5d5a      	ldrb	r2, [r3, r5]
 8009604:	2f00      	cmp	r7, #0
 8009606:	d037      	beq.n	8009678 <_strtod_l+0x250>
 8009608:	9005      	str	r0, [sp, #20]
 800960a:	463d      	mov	r5, r7
 800960c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009610:	2b09      	cmp	r3, #9
 8009612:	d912      	bls.n	800963a <_strtod_l+0x212>
 8009614:	2301      	movs	r3, #1
 8009616:	e7c2      	b.n	800959e <_strtod_l+0x176>
 8009618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	9217      	str	r2, [sp, #92]	; 0x5c
 800961e:	785a      	ldrb	r2, [r3, #1]
 8009620:	3001      	adds	r0, #1
 8009622:	2a30      	cmp	r2, #48	; 0x30
 8009624:	d0f8      	beq.n	8009618 <_strtod_l+0x1f0>
 8009626:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800962a:	2b08      	cmp	r3, #8
 800962c:	f200 84d9 	bhi.w	8009fe2 <_strtod_l+0xbba>
 8009630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009632:	9005      	str	r0, [sp, #20]
 8009634:	2000      	movs	r0, #0
 8009636:	9308      	str	r3, [sp, #32]
 8009638:	4605      	mov	r5, r0
 800963a:	3a30      	subs	r2, #48	; 0x30
 800963c:	f100 0301 	add.w	r3, r0, #1
 8009640:	d014      	beq.n	800966c <_strtod_l+0x244>
 8009642:	9905      	ldr	r1, [sp, #20]
 8009644:	4419      	add	r1, r3
 8009646:	9105      	str	r1, [sp, #20]
 8009648:	462b      	mov	r3, r5
 800964a:	eb00 0e05 	add.w	lr, r0, r5
 800964e:	210a      	movs	r1, #10
 8009650:	4573      	cmp	r3, lr
 8009652:	d113      	bne.n	800967c <_strtod_l+0x254>
 8009654:	182b      	adds	r3, r5, r0
 8009656:	2b08      	cmp	r3, #8
 8009658:	f105 0501 	add.w	r5, r5, #1
 800965c:	4405      	add	r5, r0
 800965e:	dc1c      	bgt.n	800969a <_strtod_l+0x272>
 8009660:	9907      	ldr	r1, [sp, #28]
 8009662:	230a      	movs	r3, #10
 8009664:	fb03 2301 	mla	r3, r3, r1, r2
 8009668:	9307      	str	r3, [sp, #28]
 800966a:	2300      	movs	r3, #0
 800966c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800966e:	1c51      	adds	r1, r2, #1
 8009670:	9117      	str	r1, [sp, #92]	; 0x5c
 8009672:	7852      	ldrb	r2, [r2, #1]
 8009674:	4618      	mov	r0, r3
 8009676:	e7c9      	b.n	800960c <_strtod_l+0x1e4>
 8009678:	4638      	mov	r0, r7
 800967a:	e7d2      	b.n	8009622 <_strtod_l+0x1fa>
 800967c:	2b08      	cmp	r3, #8
 800967e:	dc04      	bgt.n	800968a <_strtod_l+0x262>
 8009680:	9e07      	ldr	r6, [sp, #28]
 8009682:	434e      	muls	r6, r1
 8009684:	9607      	str	r6, [sp, #28]
 8009686:	3301      	adds	r3, #1
 8009688:	e7e2      	b.n	8009650 <_strtod_l+0x228>
 800968a:	f103 0c01 	add.w	ip, r3, #1
 800968e:	f1bc 0f10 	cmp.w	ip, #16
 8009692:	bfd8      	it	le
 8009694:	fb01 f909 	mulle.w	r9, r1, r9
 8009698:	e7f5      	b.n	8009686 <_strtod_l+0x25e>
 800969a:	2d10      	cmp	r5, #16
 800969c:	bfdc      	itt	le
 800969e:	230a      	movle	r3, #10
 80096a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80096a4:	e7e1      	b.n	800966a <_strtod_l+0x242>
 80096a6:	2300      	movs	r3, #0
 80096a8:	9305      	str	r3, [sp, #20]
 80096aa:	2301      	movs	r3, #1
 80096ac:	e77c      	b.n	80095a8 <_strtod_l+0x180>
 80096ae:	f04f 0c00 	mov.w	ip, #0
 80096b2:	f108 0202 	add.w	r2, r8, #2
 80096b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80096b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80096bc:	e785      	b.n	80095ca <_strtod_l+0x1a2>
 80096be:	f04f 0c01 	mov.w	ip, #1
 80096c2:	e7f6      	b.n	80096b2 <_strtod_l+0x28a>
 80096c4:	0800d0b4 	.word	0x0800d0b4
 80096c8:	0800ce04 	.word	0x0800ce04
 80096cc:	7ff00000 	.word	0x7ff00000
 80096d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096d2:	1c51      	adds	r1, r2, #1
 80096d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80096d6:	7852      	ldrb	r2, [r2, #1]
 80096d8:	2a30      	cmp	r2, #48	; 0x30
 80096da:	d0f9      	beq.n	80096d0 <_strtod_l+0x2a8>
 80096dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80096e0:	2908      	cmp	r1, #8
 80096e2:	f63f af79 	bhi.w	80095d8 <_strtod_l+0x1b0>
 80096e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80096ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096ec:	9206      	str	r2, [sp, #24]
 80096ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096f0:	1c51      	adds	r1, r2, #1
 80096f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80096f4:	7852      	ldrb	r2, [r2, #1]
 80096f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80096fa:	2e09      	cmp	r6, #9
 80096fc:	d937      	bls.n	800976e <_strtod_l+0x346>
 80096fe:	9e06      	ldr	r6, [sp, #24]
 8009700:	1b89      	subs	r1, r1, r6
 8009702:	2908      	cmp	r1, #8
 8009704:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009708:	dc02      	bgt.n	8009710 <_strtod_l+0x2e8>
 800970a:	4576      	cmp	r6, lr
 800970c:	bfa8      	it	ge
 800970e:	4676      	movge	r6, lr
 8009710:	f1bc 0f00 	cmp.w	ip, #0
 8009714:	d000      	beq.n	8009718 <_strtod_l+0x2f0>
 8009716:	4276      	negs	r6, r6
 8009718:	2d00      	cmp	r5, #0
 800971a:	d14d      	bne.n	80097b8 <_strtod_l+0x390>
 800971c:	9904      	ldr	r1, [sp, #16]
 800971e:	4301      	orrs	r1, r0
 8009720:	f47f aec6 	bne.w	80094b0 <_strtod_l+0x88>
 8009724:	2b00      	cmp	r3, #0
 8009726:	f47f aee1 	bne.w	80094ec <_strtod_l+0xc4>
 800972a:	2a69      	cmp	r2, #105	; 0x69
 800972c:	d027      	beq.n	800977e <_strtod_l+0x356>
 800972e:	dc24      	bgt.n	800977a <_strtod_l+0x352>
 8009730:	2a49      	cmp	r2, #73	; 0x49
 8009732:	d024      	beq.n	800977e <_strtod_l+0x356>
 8009734:	2a4e      	cmp	r2, #78	; 0x4e
 8009736:	f47f aed9 	bne.w	80094ec <_strtod_l+0xc4>
 800973a:	499f      	ldr	r1, [pc, #636]	; (80099b8 <_strtod_l+0x590>)
 800973c:	a817      	add	r0, sp, #92	; 0x5c
 800973e:	f001 ff31 	bl	800b5a4 <__match>
 8009742:	2800      	cmp	r0, #0
 8009744:	f43f aed2 	beq.w	80094ec <_strtod_l+0xc4>
 8009748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b28      	cmp	r3, #40	; 0x28
 800974e:	d12d      	bne.n	80097ac <_strtod_l+0x384>
 8009750:	499a      	ldr	r1, [pc, #616]	; (80099bc <_strtod_l+0x594>)
 8009752:	aa1a      	add	r2, sp, #104	; 0x68
 8009754:	a817      	add	r0, sp, #92	; 0x5c
 8009756:	f001 ff39 	bl	800b5cc <__hexnan>
 800975a:	2805      	cmp	r0, #5
 800975c:	d126      	bne.n	80097ac <_strtod_l+0x384>
 800975e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009760:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009764:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009768:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800976c:	e6a0      	b.n	80094b0 <_strtod_l+0x88>
 800976e:	210a      	movs	r1, #10
 8009770:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009774:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009778:	e7b9      	b.n	80096ee <_strtod_l+0x2c6>
 800977a:	2a6e      	cmp	r2, #110	; 0x6e
 800977c:	e7db      	b.n	8009736 <_strtod_l+0x30e>
 800977e:	4990      	ldr	r1, [pc, #576]	; (80099c0 <_strtod_l+0x598>)
 8009780:	a817      	add	r0, sp, #92	; 0x5c
 8009782:	f001 ff0f 	bl	800b5a4 <__match>
 8009786:	2800      	cmp	r0, #0
 8009788:	f43f aeb0 	beq.w	80094ec <_strtod_l+0xc4>
 800978c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800978e:	498d      	ldr	r1, [pc, #564]	; (80099c4 <_strtod_l+0x59c>)
 8009790:	3b01      	subs	r3, #1
 8009792:	a817      	add	r0, sp, #92	; 0x5c
 8009794:	9317      	str	r3, [sp, #92]	; 0x5c
 8009796:	f001 ff05 	bl	800b5a4 <__match>
 800979a:	b910      	cbnz	r0, 80097a2 <_strtod_l+0x37a>
 800979c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800979e:	3301      	adds	r3, #1
 80097a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80097a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80099d4 <_strtod_l+0x5ac>
 80097a6:	f04f 0a00 	mov.w	sl, #0
 80097aa:	e681      	b.n	80094b0 <_strtod_l+0x88>
 80097ac:	4886      	ldr	r0, [pc, #536]	; (80099c8 <_strtod_l+0x5a0>)
 80097ae:	f002 ff5b 	bl	800c668 <nan>
 80097b2:	ec5b ab10 	vmov	sl, fp, d0
 80097b6:	e67b      	b.n	80094b0 <_strtod_l+0x88>
 80097b8:	9b05      	ldr	r3, [sp, #20]
 80097ba:	9807      	ldr	r0, [sp, #28]
 80097bc:	1af3      	subs	r3, r6, r3
 80097be:	2f00      	cmp	r7, #0
 80097c0:	bf08      	it	eq
 80097c2:	462f      	moveq	r7, r5
 80097c4:	2d10      	cmp	r5, #16
 80097c6:	9306      	str	r3, [sp, #24]
 80097c8:	46a8      	mov	r8, r5
 80097ca:	bfa8      	it	ge
 80097cc:	f04f 0810 	movge.w	r8, #16
 80097d0:	f7f6 fea8 	bl	8000524 <__aeabi_ui2d>
 80097d4:	2d09      	cmp	r5, #9
 80097d6:	4682      	mov	sl, r0
 80097d8:	468b      	mov	fp, r1
 80097da:	dd13      	ble.n	8009804 <_strtod_l+0x3dc>
 80097dc:	4b7b      	ldr	r3, [pc, #492]	; (80099cc <_strtod_l+0x5a4>)
 80097de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80097e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80097e6:	f7f6 ff17 	bl	8000618 <__aeabi_dmul>
 80097ea:	4682      	mov	sl, r0
 80097ec:	4648      	mov	r0, r9
 80097ee:	468b      	mov	fp, r1
 80097f0:	f7f6 fe98 	bl	8000524 <__aeabi_ui2d>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4650      	mov	r0, sl
 80097fa:	4659      	mov	r1, fp
 80097fc:	f7f6 fd56 	bl	80002ac <__adddf3>
 8009800:	4682      	mov	sl, r0
 8009802:	468b      	mov	fp, r1
 8009804:	2d0f      	cmp	r5, #15
 8009806:	dc38      	bgt.n	800987a <_strtod_l+0x452>
 8009808:	9b06      	ldr	r3, [sp, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f43f ae50 	beq.w	80094b0 <_strtod_l+0x88>
 8009810:	dd24      	ble.n	800985c <_strtod_l+0x434>
 8009812:	2b16      	cmp	r3, #22
 8009814:	dc0b      	bgt.n	800982e <_strtod_l+0x406>
 8009816:	496d      	ldr	r1, [pc, #436]	; (80099cc <_strtod_l+0x5a4>)
 8009818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800981c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009820:	4652      	mov	r2, sl
 8009822:	465b      	mov	r3, fp
 8009824:	f7f6 fef8 	bl	8000618 <__aeabi_dmul>
 8009828:	4682      	mov	sl, r0
 800982a:	468b      	mov	fp, r1
 800982c:	e640      	b.n	80094b0 <_strtod_l+0x88>
 800982e:	9a06      	ldr	r2, [sp, #24]
 8009830:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009834:	4293      	cmp	r3, r2
 8009836:	db20      	blt.n	800987a <_strtod_l+0x452>
 8009838:	4c64      	ldr	r4, [pc, #400]	; (80099cc <_strtod_l+0x5a4>)
 800983a:	f1c5 050f 	rsb	r5, r5, #15
 800983e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009842:	4652      	mov	r2, sl
 8009844:	465b      	mov	r3, fp
 8009846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800984a:	f7f6 fee5 	bl	8000618 <__aeabi_dmul>
 800984e:	9b06      	ldr	r3, [sp, #24]
 8009850:	1b5d      	subs	r5, r3, r5
 8009852:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009856:	e9d4 2300 	ldrd	r2, r3, [r4]
 800985a:	e7e3      	b.n	8009824 <_strtod_l+0x3fc>
 800985c:	9b06      	ldr	r3, [sp, #24]
 800985e:	3316      	adds	r3, #22
 8009860:	db0b      	blt.n	800987a <_strtod_l+0x452>
 8009862:	9b05      	ldr	r3, [sp, #20]
 8009864:	1b9e      	subs	r6, r3, r6
 8009866:	4b59      	ldr	r3, [pc, #356]	; (80099cc <_strtod_l+0x5a4>)
 8009868:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800986c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009870:	4650      	mov	r0, sl
 8009872:	4659      	mov	r1, fp
 8009874:	f7f6 fffa 	bl	800086c <__aeabi_ddiv>
 8009878:	e7d6      	b.n	8009828 <_strtod_l+0x400>
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	eba5 0808 	sub.w	r8, r5, r8
 8009880:	4498      	add	r8, r3
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	dd74      	ble.n	8009972 <_strtod_l+0x54a>
 8009888:	f018 030f 	ands.w	r3, r8, #15
 800988c:	d00a      	beq.n	80098a4 <_strtod_l+0x47c>
 800988e:	494f      	ldr	r1, [pc, #316]	; (80099cc <_strtod_l+0x5a4>)
 8009890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009894:	4652      	mov	r2, sl
 8009896:	465b      	mov	r3, fp
 8009898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800989c:	f7f6 febc 	bl	8000618 <__aeabi_dmul>
 80098a0:	4682      	mov	sl, r0
 80098a2:	468b      	mov	fp, r1
 80098a4:	f038 080f 	bics.w	r8, r8, #15
 80098a8:	d04f      	beq.n	800994a <_strtod_l+0x522>
 80098aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80098ae:	dd22      	ble.n	80098f6 <_strtod_l+0x4ce>
 80098b0:	2500      	movs	r5, #0
 80098b2:	462e      	mov	r6, r5
 80098b4:	9507      	str	r5, [sp, #28]
 80098b6:	9505      	str	r5, [sp, #20]
 80098b8:	2322      	movs	r3, #34	; 0x22
 80098ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80099d4 <_strtod_l+0x5ac>
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	f04f 0a00 	mov.w	sl, #0
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f43f adf2 	beq.w	80094b0 <_strtod_l+0x88>
 80098cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098ce:	4620      	mov	r0, r4
 80098d0:	f001 ff7e 	bl	800b7d0 <_Bfree>
 80098d4:	9905      	ldr	r1, [sp, #20]
 80098d6:	4620      	mov	r0, r4
 80098d8:	f001 ff7a 	bl	800b7d0 <_Bfree>
 80098dc:	4631      	mov	r1, r6
 80098de:	4620      	mov	r0, r4
 80098e0:	f001 ff76 	bl	800b7d0 <_Bfree>
 80098e4:	9907      	ldr	r1, [sp, #28]
 80098e6:	4620      	mov	r0, r4
 80098e8:	f001 ff72 	bl	800b7d0 <_Bfree>
 80098ec:	4629      	mov	r1, r5
 80098ee:	4620      	mov	r0, r4
 80098f0:	f001 ff6e 	bl	800b7d0 <_Bfree>
 80098f4:	e5dc      	b.n	80094b0 <_strtod_l+0x88>
 80098f6:	4b36      	ldr	r3, [pc, #216]	; (80099d0 <_strtod_l+0x5a8>)
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	2300      	movs	r3, #0
 80098fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009900:	4650      	mov	r0, sl
 8009902:	4659      	mov	r1, fp
 8009904:	4699      	mov	r9, r3
 8009906:	f1b8 0f01 	cmp.w	r8, #1
 800990a:	dc21      	bgt.n	8009950 <_strtod_l+0x528>
 800990c:	b10b      	cbz	r3, 8009912 <_strtod_l+0x4ea>
 800990e:	4682      	mov	sl, r0
 8009910:	468b      	mov	fp, r1
 8009912:	4b2f      	ldr	r3, [pc, #188]	; (80099d0 <_strtod_l+0x5a8>)
 8009914:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009918:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800991c:	4652      	mov	r2, sl
 800991e:	465b      	mov	r3, fp
 8009920:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009924:	f7f6 fe78 	bl	8000618 <__aeabi_dmul>
 8009928:	4b2a      	ldr	r3, [pc, #168]	; (80099d4 <_strtod_l+0x5ac>)
 800992a:	460a      	mov	r2, r1
 800992c:	400b      	ands	r3, r1
 800992e:	492a      	ldr	r1, [pc, #168]	; (80099d8 <_strtod_l+0x5b0>)
 8009930:	428b      	cmp	r3, r1
 8009932:	4682      	mov	sl, r0
 8009934:	d8bc      	bhi.n	80098b0 <_strtod_l+0x488>
 8009936:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800993a:	428b      	cmp	r3, r1
 800993c:	bf86      	itte	hi
 800993e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80099dc <_strtod_l+0x5b4>
 8009942:	f04f 3aff 	movhi.w	sl, #4294967295
 8009946:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800994a:	2300      	movs	r3, #0
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	e084      	b.n	8009a5a <_strtod_l+0x632>
 8009950:	f018 0f01 	tst.w	r8, #1
 8009954:	d005      	beq.n	8009962 <_strtod_l+0x53a>
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f7f6 fe5c 	bl	8000618 <__aeabi_dmul>
 8009960:	2301      	movs	r3, #1
 8009962:	9a04      	ldr	r2, [sp, #16]
 8009964:	3208      	adds	r2, #8
 8009966:	f109 0901 	add.w	r9, r9, #1
 800996a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800996e:	9204      	str	r2, [sp, #16]
 8009970:	e7c9      	b.n	8009906 <_strtod_l+0x4de>
 8009972:	d0ea      	beq.n	800994a <_strtod_l+0x522>
 8009974:	f1c8 0800 	rsb	r8, r8, #0
 8009978:	f018 020f 	ands.w	r2, r8, #15
 800997c:	d00a      	beq.n	8009994 <_strtod_l+0x56c>
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <_strtod_l+0x5a4>)
 8009980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009984:	4650      	mov	r0, sl
 8009986:	4659      	mov	r1, fp
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 ff6e 	bl	800086c <__aeabi_ddiv>
 8009990:	4682      	mov	sl, r0
 8009992:	468b      	mov	fp, r1
 8009994:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009998:	d0d7      	beq.n	800994a <_strtod_l+0x522>
 800999a:	f1b8 0f1f 	cmp.w	r8, #31
 800999e:	dd1f      	ble.n	80099e0 <_strtod_l+0x5b8>
 80099a0:	2500      	movs	r5, #0
 80099a2:	462e      	mov	r6, r5
 80099a4:	9507      	str	r5, [sp, #28]
 80099a6:	9505      	str	r5, [sp, #20]
 80099a8:	2322      	movs	r3, #34	; 0x22
 80099aa:	f04f 0a00 	mov.w	sl, #0
 80099ae:	f04f 0b00 	mov.w	fp, #0
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	e786      	b.n	80098c4 <_strtod_l+0x49c>
 80099b6:	bf00      	nop
 80099b8:	0800cdd5 	.word	0x0800cdd5
 80099bc:	0800ce18 	.word	0x0800ce18
 80099c0:	0800cdcd 	.word	0x0800cdcd
 80099c4:	0800cf5c 	.word	0x0800cf5c
 80099c8:	0800d270 	.word	0x0800d270
 80099cc:	0800d150 	.word	0x0800d150
 80099d0:	0800d128 	.word	0x0800d128
 80099d4:	7ff00000 	.word	0x7ff00000
 80099d8:	7ca00000 	.word	0x7ca00000
 80099dc:	7fefffff 	.word	0x7fefffff
 80099e0:	f018 0310 	ands.w	r3, r8, #16
 80099e4:	bf18      	it	ne
 80099e6:	236a      	movne	r3, #106	; 0x6a
 80099e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009d98 <_strtod_l+0x970>
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	4650      	mov	r0, sl
 80099f0:	4659      	mov	r1, fp
 80099f2:	2300      	movs	r3, #0
 80099f4:	f018 0f01 	tst.w	r8, #1
 80099f8:	d004      	beq.n	8009a04 <_strtod_l+0x5dc>
 80099fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80099fe:	f7f6 fe0b 	bl	8000618 <__aeabi_dmul>
 8009a02:	2301      	movs	r3, #1
 8009a04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009a08:	f109 0908 	add.w	r9, r9, #8
 8009a0c:	d1f2      	bne.n	80099f4 <_strtod_l+0x5cc>
 8009a0e:	b10b      	cbz	r3, 8009a14 <_strtod_l+0x5ec>
 8009a10:	4682      	mov	sl, r0
 8009a12:	468b      	mov	fp, r1
 8009a14:	9b04      	ldr	r3, [sp, #16]
 8009a16:	b1c3      	cbz	r3, 8009a4a <_strtod_l+0x622>
 8009a18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	4659      	mov	r1, fp
 8009a24:	dd11      	ble.n	8009a4a <_strtod_l+0x622>
 8009a26:	2b1f      	cmp	r3, #31
 8009a28:	f340 8124 	ble.w	8009c74 <_strtod_l+0x84c>
 8009a2c:	2b34      	cmp	r3, #52	; 0x34
 8009a2e:	bfde      	ittt	le
 8009a30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009a34:	f04f 33ff 	movle.w	r3, #4294967295
 8009a38:	fa03 f202 	lslle.w	r2, r3, r2
 8009a3c:	f04f 0a00 	mov.w	sl, #0
 8009a40:	bfcc      	ite	gt
 8009a42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009a46:	ea02 0b01 	andle.w	fp, r2, r1
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4650      	mov	r0, sl
 8009a50:	4659      	mov	r1, fp
 8009a52:	f7f7 f849 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d1a2      	bne.n	80099a0 <_strtod_l+0x578>
 8009a5a:	9b07      	ldr	r3, [sp, #28]
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	9908      	ldr	r1, [sp, #32]
 8009a60:	462b      	mov	r3, r5
 8009a62:	463a      	mov	r2, r7
 8009a64:	4620      	mov	r0, r4
 8009a66:	f001 ff1b 	bl	800b8a0 <__s2b>
 8009a6a:	9007      	str	r0, [sp, #28]
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f43f af1f 	beq.w	80098b0 <_strtod_l+0x488>
 8009a72:	9b05      	ldr	r3, [sp, #20]
 8009a74:	1b9e      	subs	r6, r3, r6
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bfb4      	ite	lt
 8009a7c:	4633      	movlt	r3, r6
 8009a7e:	2300      	movge	r3, #0
 8009a80:	930c      	str	r3, [sp, #48]	; 0x30
 8009a82:	9b06      	ldr	r3, [sp, #24]
 8009a84:	2500      	movs	r5, #0
 8009a86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009a8c:	462e      	mov	r6, r5
 8009a8e:	9b07      	ldr	r3, [sp, #28]
 8009a90:	4620      	mov	r0, r4
 8009a92:	6859      	ldr	r1, [r3, #4]
 8009a94:	f001 fe5c 	bl	800b750 <_Balloc>
 8009a98:	9005      	str	r0, [sp, #20]
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f43f af0c 	beq.w	80098b8 <_strtod_l+0x490>
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	691a      	ldr	r2, [r3, #16]
 8009aa4:	3202      	adds	r2, #2
 8009aa6:	f103 010c 	add.w	r1, r3, #12
 8009aaa:	0092      	lsls	r2, r2, #2
 8009aac:	300c      	adds	r0, #12
 8009aae:	f7fe fcdf 	bl	8008470 <memcpy>
 8009ab2:	ec4b ab10 	vmov	d0, sl, fp
 8009ab6:	aa1a      	add	r2, sp, #104	; 0x68
 8009ab8:	a919      	add	r1, sp, #100	; 0x64
 8009aba:	4620      	mov	r0, r4
 8009abc:	f002 fa36 	bl	800bf2c <__d2b>
 8009ac0:	ec4b ab18 	vmov	d8, sl, fp
 8009ac4:	9018      	str	r0, [sp, #96]	; 0x60
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	f43f aef6 	beq.w	80098b8 <_strtod_l+0x490>
 8009acc:	2101      	movs	r1, #1
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f001 ff80 	bl	800b9d4 <__i2b>
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f aeee 	beq.w	80098b8 <_strtod_l+0x490>
 8009adc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ade:	9904      	ldr	r1, [sp, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bfab      	itete	ge
 8009ae4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009ae6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009ae8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009aea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009aee:	bfac      	ite	ge
 8009af0:	eb03 0902 	addge.w	r9, r3, r2
 8009af4:	1ad7      	sublt	r7, r2, r3
 8009af6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009af8:	eba3 0801 	sub.w	r8, r3, r1
 8009afc:	4490      	add	r8, r2
 8009afe:	4ba1      	ldr	r3, [pc, #644]	; (8009d84 <_strtod_l+0x95c>)
 8009b00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b04:	4598      	cmp	r8, r3
 8009b06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b0a:	f280 80c7 	bge.w	8009c9c <_strtod_l+0x874>
 8009b0e:	eba3 0308 	sub.w	r3, r3, r8
 8009b12:	2b1f      	cmp	r3, #31
 8009b14:	eba2 0203 	sub.w	r2, r2, r3
 8009b18:	f04f 0101 	mov.w	r1, #1
 8009b1c:	f300 80b1 	bgt.w	8009c82 <_strtod_l+0x85a>
 8009b20:	fa01 f303 	lsl.w	r3, r1, r3
 8009b24:	930d      	str	r3, [sp, #52]	; 0x34
 8009b26:	2300      	movs	r3, #0
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	eb09 0802 	add.w	r8, r9, r2
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	45c1      	cmp	r9, r8
 8009b32:	4417      	add	r7, r2
 8009b34:	441f      	add	r7, r3
 8009b36:	464b      	mov	r3, r9
 8009b38:	bfa8      	it	ge
 8009b3a:	4643      	movge	r3, r8
 8009b3c:	42bb      	cmp	r3, r7
 8009b3e:	bfa8      	it	ge
 8009b40:	463b      	movge	r3, r7
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bfc2      	ittt	gt
 8009b46:	eba8 0803 	subgt.w	r8, r8, r3
 8009b4a:	1aff      	subgt	r7, r7, r3
 8009b4c:	eba9 0903 	subgt.w	r9, r9, r3
 8009b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dd17      	ble.n	8009b86 <_strtod_l+0x75e>
 8009b56:	4631      	mov	r1, r6
 8009b58:	461a      	mov	r2, r3
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f001 fffa 	bl	800bb54 <__pow5mult>
 8009b60:	4606      	mov	r6, r0
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f43f aea8 	beq.w	80098b8 <_strtod_l+0x490>
 8009b68:	4601      	mov	r1, r0
 8009b6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f001 ff47 	bl	800ba00 <__multiply>
 8009b72:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b74:	2800      	cmp	r0, #0
 8009b76:	f43f ae9f 	beq.w	80098b8 <_strtod_l+0x490>
 8009b7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f001 fe27 	bl	800b7d0 <_Bfree>
 8009b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b84:	9318      	str	r3, [sp, #96]	; 0x60
 8009b86:	f1b8 0f00 	cmp.w	r8, #0
 8009b8a:	f300 808c 	bgt.w	8009ca6 <_strtod_l+0x87e>
 8009b8e:	9b06      	ldr	r3, [sp, #24]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd08      	ble.n	8009ba6 <_strtod_l+0x77e>
 8009b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b96:	9905      	ldr	r1, [sp, #20]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f001 ffdb 	bl	800bb54 <__pow5mult>
 8009b9e:	9005      	str	r0, [sp, #20]
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f43f ae89 	beq.w	80098b8 <_strtod_l+0x490>
 8009ba6:	2f00      	cmp	r7, #0
 8009ba8:	dd08      	ble.n	8009bbc <_strtod_l+0x794>
 8009baa:	9905      	ldr	r1, [sp, #20]
 8009bac:	463a      	mov	r2, r7
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f002 f82a 	bl	800bc08 <__lshift>
 8009bb4:	9005      	str	r0, [sp, #20]
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f43f ae7e 	beq.w	80098b8 <_strtod_l+0x490>
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	dd08      	ble.n	8009bd4 <_strtod_l+0x7ac>
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	464a      	mov	r2, r9
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f002 f81e 	bl	800bc08 <__lshift>
 8009bcc:	4606      	mov	r6, r0
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f43f ae72 	beq.w	80098b8 <_strtod_l+0x490>
 8009bd4:	9a05      	ldr	r2, [sp, #20]
 8009bd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f002 f8a1 	bl	800bd20 <__mdiff>
 8009bde:	4605      	mov	r5, r0
 8009be0:	2800      	cmp	r0, #0
 8009be2:	f43f ae69 	beq.w	80098b8 <_strtod_l+0x490>
 8009be6:	68c3      	ldr	r3, [r0, #12]
 8009be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bea:	2300      	movs	r3, #0
 8009bec:	60c3      	str	r3, [r0, #12]
 8009bee:	4631      	mov	r1, r6
 8009bf0:	f002 f87a 	bl	800bce8 <__mcmp>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	da60      	bge.n	8009cba <_strtod_l+0x892>
 8009bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bfa:	ea53 030a 	orrs.w	r3, r3, sl
 8009bfe:	f040 8082 	bne.w	8009d06 <_strtod_l+0x8de>
 8009c02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d17d      	bne.n	8009d06 <_strtod_l+0x8de>
 8009c0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c0e:	0d1b      	lsrs	r3, r3, #20
 8009c10:	051b      	lsls	r3, r3, #20
 8009c12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c16:	d976      	bls.n	8009d06 <_strtod_l+0x8de>
 8009c18:	696b      	ldr	r3, [r5, #20]
 8009c1a:	b913      	cbnz	r3, 8009c22 <_strtod_l+0x7fa>
 8009c1c:	692b      	ldr	r3, [r5, #16]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	dd71      	ble.n	8009d06 <_strtod_l+0x8de>
 8009c22:	4629      	mov	r1, r5
 8009c24:	2201      	movs	r2, #1
 8009c26:	4620      	mov	r0, r4
 8009c28:	f001 ffee 	bl	800bc08 <__lshift>
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4605      	mov	r5, r0
 8009c30:	f002 f85a 	bl	800bce8 <__mcmp>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	dd66      	ble.n	8009d06 <_strtod_l+0x8de>
 8009c38:	9904      	ldr	r1, [sp, #16]
 8009c3a:	4a53      	ldr	r2, [pc, #332]	; (8009d88 <_strtod_l+0x960>)
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	f000 8081 	beq.w	8009d46 <_strtod_l+0x91e>
 8009c44:	ea02 010b 	and.w	r1, r2, fp
 8009c48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c4c:	dc7b      	bgt.n	8009d46 <_strtod_l+0x91e>
 8009c4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c52:	f77f aea9 	ble.w	80099a8 <_strtod_l+0x580>
 8009c56:	4b4d      	ldr	r3, [pc, #308]	; (8009d8c <_strtod_l+0x964>)
 8009c58:	4650      	mov	r0, sl
 8009c5a:	4659      	mov	r1, fp
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f7f6 fcdb 	bl	8000618 <__aeabi_dmul>
 8009c62:	460b      	mov	r3, r1
 8009c64:	4303      	orrs	r3, r0
 8009c66:	bf08      	it	eq
 8009c68:	2322      	moveq	r3, #34	; 0x22
 8009c6a:	4682      	mov	sl, r0
 8009c6c:	468b      	mov	fp, r1
 8009c6e:	bf08      	it	eq
 8009c70:	6023      	streq	r3, [r4, #0]
 8009c72:	e62b      	b.n	80098cc <_strtod_l+0x4a4>
 8009c74:	f04f 32ff 	mov.w	r2, #4294967295
 8009c78:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7c:	ea03 0a0a 	and.w	sl, r3, sl
 8009c80:	e6e3      	b.n	8009a4a <_strtod_l+0x622>
 8009c82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009c86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009c8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009c8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009c92:	fa01 f308 	lsl.w	r3, r1, r8
 8009c96:	9308      	str	r3, [sp, #32]
 8009c98:	910d      	str	r1, [sp, #52]	; 0x34
 8009c9a:	e746      	b.n	8009b2a <_strtod_l+0x702>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9308      	str	r3, [sp, #32]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ca4:	e741      	b.n	8009b2a <_strtod_l+0x702>
 8009ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ca8:	4642      	mov	r2, r8
 8009caa:	4620      	mov	r0, r4
 8009cac:	f001 ffac 	bl	800bc08 <__lshift>
 8009cb0:	9018      	str	r0, [sp, #96]	; 0x60
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	f47f af6b 	bne.w	8009b8e <_strtod_l+0x766>
 8009cb8:	e5fe      	b.n	80098b8 <_strtod_l+0x490>
 8009cba:	465f      	mov	r7, fp
 8009cbc:	d16e      	bne.n	8009d9c <_strtod_l+0x974>
 8009cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cc4:	b342      	cbz	r2, 8009d18 <_strtod_l+0x8f0>
 8009cc6:	4a32      	ldr	r2, [pc, #200]	; (8009d90 <_strtod_l+0x968>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d128      	bne.n	8009d1e <_strtod_l+0x8f6>
 8009ccc:	9b04      	ldr	r3, [sp, #16]
 8009cce:	4651      	mov	r1, sl
 8009cd0:	b1eb      	cbz	r3, 8009d0e <_strtod_l+0x8e6>
 8009cd2:	4b2d      	ldr	r3, [pc, #180]	; (8009d88 <_strtod_l+0x960>)
 8009cd4:	403b      	ands	r3, r7
 8009cd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cda:	f04f 32ff 	mov.w	r2, #4294967295
 8009cde:	d819      	bhi.n	8009d14 <_strtod_l+0x8ec>
 8009ce0:	0d1b      	lsrs	r3, r3, #20
 8009ce2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cea:	4299      	cmp	r1, r3
 8009cec:	d117      	bne.n	8009d1e <_strtod_l+0x8f6>
 8009cee:	4b29      	ldr	r3, [pc, #164]	; (8009d94 <_strtod_l+0x96c>)
 8009cf0:	429f      	cmp	r7, r3
 8009cf2:	d102      	bne.n	8009cfa <_strtod_l+0x8d2>
 8009cf4:	3101      	adds	r1, #1
 8009cf6:	f43f addf 	beq.w	80098b8 <_strtod_l+0x490>
 8009cfa:	4b23      	ldr	r3, [pc, #140]	; (8009d88 <_strtod_l+0x960>)
 8009cfc:	403b      	ands	r3, r7
 8009cfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009d02:	f04f 0a00 	mov.w	sl, #0
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1a4      	bne.n	8009c56 <_strtod_l+0x82e>
 8009d0c:	e5de      	b.n	80098cc <_strtod_l+0x4a4>
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	e7ea      	b.n	8009cea <_strtod_l+0x8c2>
 8009d14:	4613      	mov	r3, r2
 8009d16:	e7e8      	b.n	8009cea <_strtod_l+0x8c2>
 8009d18:	ea53 030a 	orrs.w	r3, r3, sl
 8009d1c:	d08c      	beq.n	8009c38 <_strtod_l+0x810>
 8009d1e:	9b08      	ldr	r3, [sp, #32]
 8009d20:	b1db      	cbz	r3, 8009d5a <_strtod_l+0x932>
 8009d22:	423b      	tst	r3, r7
 8009d24:	d0ef      	beq.n	8009d06 <_strtod_l+0x8de>
 8009d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d28:	9a04      	ldr	r2, [sp, #16]
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	4659      	mov	r1, fp
 8009d2e:	b1c3      	cbz	r3, 8009d62 <_strtod_l+0x93a>
 8009d30:	f7ff fb5c 	bl	80093ec <sulp>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	ec51 0b18 	vmov	r0, r1, d8
 8009d3c:	f7f6 fab6 	bl	80002ac <__adddf3>
 8009d40:	4682      	mov	sl, r0
 8009d42:	468b      	mov	fp, r1
 8009d44:	e7df      	b.n	8009d06 <_strtod_l+0x8de>
 8009d46:	4013      	ands	r3, r2
 8009d48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d54:	f04f 3aff 	mov.w	sl, #4294967295
 8009d58:	e7d5      	b.n	8009d06 <_strtod_l+0x8de>
 8009d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d5c:	ea13 0f0a 	tst.w	r3, sl
 8009d60:	e7e0      	b.n	8009d24 <_strtod_l+0x8fc>
 8009d62:	f7ff fb43 	bl	80093ec <sulp>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	ec51 0b18 	vmov	r0, r1, d8
 8009d6e:	f7f6 fa9b 	bl	80002a8 <__aeabi_dsub>
 8009d72:	2200      	movs	r2, #0
 8009d74:	2300      	movs	r3, #0
 8009d76:	4682      	mov	sl, r0
 8009d78:	468b      	mov	fp, r1
 8009d7a:	f7f6 feb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d0c1      	beq.n	8009d06 <_strtod_l+0x8de>
 8009d82:	e611      	b.n	80099a8 <_strtod_l+0x580>
 8009d84:	fffffc02 	.word	0xfffffc02
 8009d88:	7ff00000 	.word	0x7ff00000
 8009d8c:	39500000 	.word	0x39500000
 8009d90:	000fffff 	.word	0x000fffff
 8009d94:	7fefffff 	.word	0x7fefffff
 8009d98:	0800ce30 	.word	0x0800ce30
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f002 f920 	bl	800bfe4 <__ratio>
 8009da4:	ec59 8b10 	vmov	r8, r9, d0
 8009da8:	ee10 0a10 	vmov	r0, s0
 8009dac:	2200      	movs	r2, #0
 8009dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009db2:	4649      	mov	r1, r9
 8009db4:	f7f6 feac 	bl	8000b10 <__aeabi_dcmple>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d07a      	beq.n	8009eb2 <_strtod_l+0xa8a>
 8009dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d04a      	beq.n	8009e58 <_strtod_l+0xa30>
 8009dc2:	4b95      	ldr	r3, [pc, #596]	; (800a018 <_strtod_l+0xbf0>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a018 <_strtod_l+0xbf0>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	4b92      	ldr	r3, [pc, #584]	; (800a01c <_strtod_l+0xbf4>)
 8009dd4:	403b      	ands	r3, r7
 8009dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8009dd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dda:	4b91      	ldr	r3, [pc, #580]	; (800a020 <_strtod_l+0xbf8>)
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	f040 80b0 	bne.w	8009f42 <_strtod_l+0xb1a>
 8009de2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009de6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009dea:	ec4b ab10 	vmov	d0, sl, fp
 8009dee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009df2:	f002 f81f 	bl	800be34 <__ulp>
 8009df6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009dfa:	ec53 2b10 	vmov	r2, r3, d0
 8009dfe:	f7f6 fc0b 	bl	8000618 <__aeabi_dmul>
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	f7f6 fa51 	bl	80002ac <__adddf3>
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4983      	ldr	r1, [pc, #524]	; (800a01c <_strtod_l+0xbf4>)
 8009e0e:	4a85      	ldr	r2, [pc, #532]	; (800a024 <_strtod_l+0xbfc>)
 8009e10:	4019      	ands	r1, r3
 8009e12:	4291      	cmp	r1, r2
 8009e14:	4682      	mov	sl, r0
 8009e16:	d960      	bls.n	8009eda <_strtod_l+0xab2>
 8009e18:	ee18 3a90 	vmov	r3, s17
 8009e1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d104      	bne.n	8009e2e <_strtod_l+0xa06>
 8009e24:	ee18 3a10 	vmov	r3, s16
 8009e28:	3301      	adds	r3, #1
 8009e2a:	f43f ad45 	beq.w	80098b8 <_strtod_l+0x490>
 8009e2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a030 <_strtod_l+0xc08>
 8009e32:	f04f 3aff 	mov.w	sl, #4294967295
 8009e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f001 fcc9 	bl	800b7d0 <_Bfree>
 8009e3e:	9905      	ldr	r1, [sp, #20]
 8009e40:	4620      	mov	r0, r4
 8009e42:	f001 fcc5 	bl	800b7d0 <_Bfree>
 8009e46:	4631      	mov	r1, r6
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f001 fcc1 	bl	800b7d0 <_Bfree>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4620      	mov	r0, r4
 8009e52:	f001 fcbd 	bl	800b7d0 <_Bfree>
 8009e56:	e61a      	b.n	8009a8e <_strtod_l+0x666>
 8009e58:	f1ba 0f00 	cmp.w	sl, #0
 8009e5c:	d11b      	bne.n	8009e96 <_strtod_l+0xa6e>
 8009e5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e62:	b9f3      	cbnz	r3, 8009ea2 <_strtod_l+0xa7a>
 8009e64:	4b6c      	ldr	r3, [pc, #432]	; (800a018 <_strtod_l+0xbf0>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fe46 	bl	8000afc <__aeabi_dcmplt>
 8009e70:	b9d0      	cbnz	r0, 8009ea8 <_strtod_l+0xa80>
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	4b6c      	ldr	r3, [pc, #432]	; (800a028 <_strtod_l+0xc00>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f7f6 fbcd 	bl	8000618 <__aeabi_dmul>
 8009e7e:	4680      	mov	r8, r0
 8009e80:	4689      	mov	r9, r1
 8009e82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009e8a:	9315      	str	r3, [sp, #84]	; 0x54
 8009e8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e94:	e79d      	b.n	8009dd2 <_strtod_l+0x9aa>
 8009e96:	f1ba 0f01 	cmp.w	sl, #1
 8009e9a:	d102      	bne.n	8009ea2 <_strtod_l+0xa7a>
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	f43f ad83 	beq.w	80099a8 <_strtod_l+0x580>
 8009ea2:	4b62      	ldr	r3, [pc, #392]	; (800a02c <_strtod_l+0xc04>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	e78e      	b.n	8009dc6 <_strtod_l+0x99e>
 8009ea8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a028 <_strtod_l+0xc00>
 8009eac:	f04f 0800 	mov.w	r8, #0
 8009eb0:	e7e7      	b.n	8009e82 <_strtod_l+0xa5a>
 8009eb2:	4b5d      	ldr	r3, [pc, #372]	; (800a028 <_strtod_l+0xc00>)
 8009eb4:	4640      	mov	r0, r8
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f7f6 fbad 	bl	8000618 <__aeabi_dmul>
 8009ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4689      	mov	r9, r1
 8009ec4:	b933      	cbnz	r3, 8009ed4 <_strtod_l+0xaac>
 8009ec6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eca:	900e      	str	r0, [sp, #56]	; 0x38
 8009ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ece:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ed2:	e7dd      	b.n	8009e90 <_strtod_l+0xa68>
 8009ed4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ed8:	e7f9      	b.n	8009ece <_strtod_l+0xaa6>
 8009eda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009ede:	9b04      	ldr	r3, [sp, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1a8      	bne.n	8009e36 <_strtod_l+0xa0e>
 8009ee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ee8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eea:	0d1b      	lsrs	r3, r3, #20
 8009eec:	051b      	lsls	r3, r3, #20
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d1a1      	bne.n	8009e36 <_strtod_l+0xa0e>
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	f7f6 feef 	bl	8000cd8 <__aeabi_d2lz>
 8009efa:	f7f6 fb5f 	bl	80005bc <__aeabi_l2d>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4640      	mov	r0, r8
 8009f04:	4649      	mov	r1, r9
 8009f06:	f7f6 f9cf 	bl	80002a8 <__aeabi_dsub>
 8009f0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f10:	ea43 030a 	orr.w	r3, r3, sl
 8009f14:	4313      	orrs	r3, r2
 8009f16:	4680      	mov	r8, r0
 8009f18:	4689      	mov	r9, r1
 8009f1a:	d055      	beq.n	8009fc8 <_strtod_l+0xba0>
 8009f1c:	a336      	add	r3, pc, #216	; (adr r3, 8009ff8 <_strtod_l+0xbd0>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 fdeb 	bl	8000afc <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f47f acd0 	bne.w	80098cc <_strtod_l+0x4a4>
 8009f2c:	a334      	add	r3, pc, #208	; (adr r3, 800a000 <_strtod_l+0xbd8>)
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	4640      	mov	r0, r8
 8009f34:	4649      	mov	r1, r9
 8009f36:	f7f6 fdff 	bl	8000b38 <__aeabi_dcmpgt>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	f43f af7b 	beq.w	8009e36 <_strtod_l+0xa0e>
 8009f40:	e4c4      	b.n	80098cc <_strtod_l+0x4a4>
 8009f42:	9b04      	ldr	r3, [sp, #16]
 8009f44:	b333      	cbz	r3, 8009f94 <_strtod_l+0xb6c>
 8009f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f4c:	d822      	bhi.n	8009f94 <_strtod_l+0xb6c>
 8009f4e:	a32e      	add	r3, pc, #184	; (adr r3, 800a008 <_strtod_l+0xbe0>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	4640      	mov	r0, r8
 8009f56:	4649      	mov	r1, r9
 8009f58:	f7f6 fdda 	bl	8000b10 <__aeabi_dcmple>
 8009f5c:	b1a0      	cbz	r0, 8009f88 <_strtod_l+0xb60>
 8009f5e:	4649      	mov	r1, r9
 8009f60:	4640      	mov	r0, r8
 8009f62:	f7f6 fe31 	bl	8000bc8 <__aeabi_d2uiz>
 8009f66:	2801      	cmp	r0, #1
 8009f68:	bf38      	it	cc
 8009f6a:	2001      	movcc	r0, #1
 8009f6c:	f7f6 fada 	bl	8000524 <__aeabi_ui2d>
 8009f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f72:	4680      	mov	r8, r0
 8009f74:	4689      	mov	r9, r1
 8009f76:	bb23      	cbnz	r3, 8009fc2 <_strtod_l+0xb9a>
 8009f78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f7c:	9010      	str	r0, [sp, #64]	; 0x40
 8009f7e:	9311      	str	r3, [sp, #68]	; 0x44
 8009f80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f90:	1a9b      	subs	r3, r3, r2
 8009f92:	9309      	str	r3, [sp, #36]	; 0x24
 8009f94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f98:	eeb0 0a48 	vmov.f32	s0, s16
 8009f9c:	eef0 0a68 	vmov.f32	s1, s17
 8009fa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fa4:	f001 ff46 	bl	800be34 <__ulp>
 8009fa8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fac:	ec53 2b10 	vmov	r2, r3, d0
 8009fb0:	f7f6 fb32 	bl	8000618 <__aeabi_dmul>
 8009fb4:	ec53 2b18 	vmov	r2, r3, d8
 8009fb8:	f7f6 f978 	bl	80002ac <__adddf3>
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	468b      	mov	fp, r1
 8009fc0:	e78d      	b.n	8009ede <_strtod_l+0xab6>
 8009fc2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009fc6:	e7db      	b.n	8009f80 <_strtod_l+0xb58>
 8009fc8:	a311      	add	r3, pc, #68	; (adr r3, 800a010 <_strtod_l+0xbe8>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 fd95 	bl	8000afc <__aeabi_dcmplt>
 8009fd2:	e7b2      	b.n	8009f3a <_strtod_l+0xb12>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009fda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	f7ff ba6b 	b.w	80094b8 <_strtod_l+0x90>
 8009fe2:	2a65      	cmp	r2, #101	; 0x65
 8009fe4:	f43f ab5f 	beq.w	80096a6 <_strtod_l+0x27e>
 8009fe8:	2a45      	cmp	r2, #69	; 0x45
 8009fea:	f43f ab5c 	beq.w	80096a6 <_strtod_l+0x27e>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f7ff bb94 	b.w	800971c <_strtod_l+0x2f4>
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	94a03595 	.word	0x94a03595
 8009ffc:	3fdfffff 	.word	0x3fdfffff
 800a000:	35afe535 	.word	0x35afe535
 800a004:	3fe00000 	.word	0x3fe00000
 800a008:	ffc00000 	.word	0xffc00000
 800a00c:	41dfffff 	.word	0x41dfffff
 800a010:	94a03595 	.word	0x94a03595
 800a014:	3fcfffff 	.word	0x3fcfffff
 800a018:	3ff00000 	.word	0x3ff00000
 800a01c:	7ff00000 	.word	0x7ff00000
 800a020:	7fe00000 	.word	0x7fe00000
 800a024:	7c9fffff 	.word	0x7c9fffff
 800a028:	3fe00000 	.word	0x3fe00000
 800a02c:	bff00000 	.word	0xbff00000
 800a030:	7fefffff 	.word	0x7fefffff

0800a034 <_strtod_r>:
 800a034:	4b01      	ldr	r3, [pc, #4]	; (800a03c <_strtod_r+0x8>)
 800a036:	f7ff b9f7 	b.w	8009428 <_strtod_l>
 800a03a:	bf00      	nop
 800a03c:	20000078 	.word	0x20000078

0800a040 <_strtol_l.constprop.0>:
 800a040:	2b01      	cmp	r3, #1
 800a042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a046:	d001      	beq.n	800a04c <_strtol_l.constprop.0+0xc>
 800a048:	2b24      	cmp	r3, #36	; 0x24
 800a04a:	d906      	bls.n	800a05a <_strtol_l.constprop.0+0x1a>
 800a04c:	f7fe f9de 	bl	800840c <__errno>
 800a050:	2316      	movs	r3, #22
 800a052:	6003      	str	r3, [r0, #0]
 800a054:	2000      	movs	r0, #0
 800a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a140 <_strtol_l.constprop.0+0x100>
 800a05e:	460d      	mov	r5, r1
 800a060:	462e      	mov	r6, r5
 800a062:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a066:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a06a:	f017 0708 	ands.w	r7, r7, #8
 800a06e:	d1f7      	bne.n	800a060 <_strtol_l.constprop.0+0x20>
 800a070:	2c2d      	cmp	r4, #45	; 0x2d
 800a072:	d132      	bne.n	800a0da <_strtol_l.constprop.0+0x9a>
 800a074:	782c      	ldrb	r4, [r5, #0]
 800a076:	2701      	movs	r7, #1
 800a078:	1cb5      	adds	r5, r6, #2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d05b      	beq.n	800a136 <_strtol_l.constprop.0+0xf6>
 800a07e:	2b10      	cmp	r3, #16
 800a080:	d109      	bne.n	800a096 <_strtol_l.constprop.0+0x56>
 800a082:	2c30      	cmp	r4, #48	; 0x30
 800a084:	d107      	bne.n	800a096 <_strtol_l.constprop.0+0x56>
 800a086:	782c      	ldrb	r4, [r5, #0]
 800a088:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a08c:	2c58      	cmp	r4, #88	; 0x58
 800a08e:	d14d      	bne.n	800a12c <_strtol_l.constprop.0+0xec>
 800a090:	786c      	ldrb	r4, [r5, #1]
 800a092:	2310      	movs	r3, #16
 800a094:	3502      	adds	r5, #2
 800a096:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a09a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a09e:	f04f 0c00 	mov.w	ip, #0
 800a0a2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a0a6:	4666      	mov	r6, ip
 800a0a8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a0ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a0b0:	f1be 0f09 	cmp.w	lr, #9
 800a0b4:	d816      	bhi.n	800a0e4 <_strtol_l.constprop.0+0xa4>
 800a0b6:	4674      	mov	r4, lr
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	dd24      	ble.n	800a106 <_strtol_l.constprop.0+0xc6>
 800a0bc:	f1bc 0f00 	cmp.w	ip, #0
 800a0c0:	db1e      	blt.n	800a100 <_strtol_l.constprop.0+0xc0>
 800a0c2:	45b1      	cmp	r9, r6
 800a0c4:	d31c      	bcc.n	800a100 <_strtol_l.constprop.0+0xc0>
 800a0c6:	d101      	bne.n	800a0cc <_strtol_l.constprop.0+0x8c>
 800a0c8:	45a2      	cmp	sl, r4
 800a0ca:	db19      	blt.n	800a100 <_strtol_l.constprop.0+0xc0>
 800a0cc:	fb06 4603 	mla	r6, r6, r3, r4
 800a0d0:	f04f 0c01 	mov.w	ip, #1
 800a0d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0d8:	e7e8      	b.n	800a0ac <_strtol_l.constprop.0+0x6c>
 800a0da:	2c2b      	cmp	r4, #43	; 0x2b
 800a0dc:	bf04      	itt	eq
 800a0de:	782c      	ldrbeq	r4, [r5, #0]
 800a0e0:	1cb5      	addeq	r5, r6, #2
 800a0e2:	e7ca      	b.n	800a07a <_strtol_l.constprop.0+0x3a>
 800a0e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a0e8:	f1be 0f19 	cmp.w	lr, #25
 800a0ec:	d801      	bhi.n	800a0f2 <_strtol_l.constprop.0+0xb2>
 800a0ee:	3c37      	subs	r4, #55	; 0x37
 800a0f0:	e7e2      	b.n	800a0b8 <_strtol_l.constprop.0+0x78>
 800a0f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a0f6:	f1be 0f19 	cmp.w	lr, #25
 800a0fa:	d804      	bhi.n	800a106 <_strtol_l.constprop.0+0xc6>
 800a0fc:	3c57      	subs	r4, #87	; 0x57
 800a0fe:	e7db      	b.n	800a0b8 <_strtol_l.constprop.0+0x78>
 800a100:	f04f 3cff 	mov.w	ip, #4294967295
 800a104:	e7e6      	b.n	800a0d4 <_strtol_l.constprop.0+0x94>
 800a106:	f1bc 0f00 	cmp.w	ip, #0
 800a10a:	da05      	bge.n	800a118 <_strtol_l.constprop.0+0xd8>
 800a10c:	2322      	movs	r3, #34	; 0x22
 800a10e:	6003      	str	r3, [r0, #0]
 800a110:	4646      	mov	r6, r8
 800a112:	b942      	cbnz	r2, 800a126 <_strtol_l.constprop.0+0xe6>
 800a114:	4630      	mov	r0, r6
 800a116:	e79e      	b.n	800a056 <_strtol_l.constprop.0+0x16>
 800a118:	b107      	cbz	r7, 800a11c <_strtol_l.constprop.0+0xdc>
 800a11a:	4276      	negs	r6, r6
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	d0f9      	beq.n	800a114 <_strtol_l.constprop.0+0xd4>
 800a120:	f1bc 0f00 	cmp.w	ip, #0
 800a124:	d000      	beq.n	800a128 <_strtol_l.constprop.0+0xe8>
 800a126:	1e69      	subs	r1, r5, #1
 800a128:	6011      	str	r1, [r2, #0]
 800a12a:	e7f3      	b.n	800a114 <_strtol_l.constprop.0+0xd4>
 800a12c:	2430      	movs	r4, #48	; 0x30
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1b1      	bne.n	800a096 <_strtol_l.constprop.0+0x56>
 800a132:	2308      	movs	r3, #8
 800a134:	e7af      	b.n	800a096 <_strtol_l.constprop.0+0x56>
 800a136:	2c30      	cmp	r4, #48	; 0x30
 800a138:	d0a5      	beq.n	800a086 <_strtol_l.constprop.0+0x46>
 800a13a:	230a      	movs	r3, #10
 800a13c:	e7ab      	b.n	800a096 <_strtol_l.constprop.0+0x56>
 800a13e:	bf00      	nop
 800a140:	0800ce59 	.word	0x0800ce59

0800a144 <_strtol_r>:
 800a144:	f7ff bf7c 	b.w	800a040 <_strtol_l.constprop.0>

0800a148 <quorem>:
 800a148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	6903      	ldr	r3, [r0, #16]
 800a14e:	690c      	ldr	r4, [r1, #16]
 800a150:	42a3      	cmp	r3, r4
 800a152:	4607      	mov	r7, r0
 800a154:	f2c0 8081 	blt.w	800a25a <quorem+0x112>
 800a158:	3c01      	subs	r4, #1
 800a15a:	f101 0814 	add.w	r8, r1, #20
 800a15e:	f100 0514 	add.w	r5, r0, #20
 800a162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a170:	3301      	adds	r3, #1
 800a172:	429a      	cmp	r2, r3
 800a174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a17c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a180:	d331      	bcc.n	800a1e6 <quorem+0x9e>
 800a182:	f04f 0e00 	mov.w	lr, #0
 800a186:	4640      	mov	r0, r8
 800a188:	46ac      	mov	ip, r5
 800a18a:	46f2      	mov	sl, lr
 800a18c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a190:	b293      	uxth	r3, r2
 800a192:	fb06 e303 	mla	r3, r6, r3, lr
 800a196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	ebaa 0303 	sub.w	r3, sl, r3
 800a1a0:	f8dc a000 	ldr.w	sl, [ip]
 800a1a4:	0c12      	lsrs	r2, r2, #16
 800a1a6:	fa13 f38a 	uxtah	r3, r3, sl
 800a1aa:	fb06 e202 	mla	r2, r6, r2, lr
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	9b00      	ldr	r3, [sp, #0]
 800a1b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1c4:	4581      	cmp	r9, r0
 800a1c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1ca:	f84c 3b04 	str.w	r3, [ip], #4
 800a1ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1d2:	d2db      	bcs.n	800a18c <quorem+0x44>
 800a1d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1d8:	b92b      	cbnz	r3, 800a1e6 <quorem+0x9e>
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	3b04      	subs	r3, #4
 800a1de:	429d      	cmp	r5, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	d32e      	bcc.n	800a242 <quorem+0xfa>
 800a1e4:	613c      	str	r4, [r7, #16]
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f001 fd7e 	bl	800bce8 <__mcmp>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	db24      	blt.n	800a23a <quorem+0xf2>
 800a1f0:	3601      	adds	r6, #1
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f04f 0c00 	mov.w	ip, #0
 800a1f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1fc:	f8d0 e000 	ldr.w	lr, [r0]
 800a200:	b293      	uxth	r3, r2
 800a202:	ebac 0303 	sub.w	r3, ip, r3
 800a206:	0c12      	lsrs	r2, r2, #16
 800a208:	fa13 f38e 	uxtah	r3, r3, lr
 800a20c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a214:	b29b      	uxth	r3, r3
 800a216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a21a:	45c1      	cmp	r9, r8
 800a21c:	f840 3b04 	str.w	r3, [r0], #4
 800a220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a224:	d2e8      	bcs.n	800a1f8 <quorem+0xb0>
 800a226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a22e:	b922      	cbnz	r2, 800a23a <quorem+0xf2>
 800a230:	3b04      	subs	r3, #4
 800a232:	429d      	cmp	r5, r3
 800a234:	461a      	mov	r2, r3
 800a236:	d30a      	bcc.n	800a24e <quorem+0x106>
 800a238:	613c      	str	r4, [r7, #16]
 800a23a:	4630      	mov	r0, r6
 800a23c:	b003      	add	sp, #12
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	6812      	ldr	r2, [r2, #0]
 800a244:	3b04      	subs	r3, #4
 800a246:	2a00      	cmp	r2, #0
 800a248:	d1cc      	bne.n	800a1e4 <quorem+0x9c>
 800a24a:	3c01      	subs	r4, #1
 800a24c:	e7c7      	b.n	800a1de <quorem+0x96>
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	3b04      	subs	r3, #4
 800a252:	2a00      	cmp	r2, #0
 800a254:	d1f0      	bne.n	800a238 <quorem+0xf0>
 800a256:	3c01      	subs	r4, #1
 800a258:	e7eb      	b.n	800a232 <quorem+0xea>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e7ee      	b.n	800a23c <quorem+0xf4>
	...

0800a260 <_dtoa_r>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	ed2d 8b04 	vpush	{d8-d9}
 800a268:	ec57 6b10 	vmov	r6, r7, d0
 800a26c:	b093      	sub	sp, #76	; 0x4c
 800a26e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a274:	9106      	str	r1, [sp, #24]
 800a276:	ee10 aa10 	vmov	sl, s0
 800a27a:	4604      	mov	r4, r0
 800a27c:	9209      	str	r2, [sp, #36]	; 0x24
 800a27e:	930c      	str	r3, [sp, #48]	; 0x30
 800a280:	46bb      	mov	fp, r7
 800a282:	b975      	cbnz	r5, 800a2a2 <_dtoa_r+0x42>
 800a284:	2010      	movs	r0, #16
 800a286:	f7fe f8eb 	bl	8008460 <malloc>
 800a28a:	4602      	mov	r2, r0
 800a28c:	6260      	str	r0, [r4, #36]	; 0x24
 800a28e:	b920      	cbnz	r0, 800a29a <_dtoa_r+0x3a>
 800a290:	4ba7      	ldr	r3, [pc, #668]	; (800a530 <_dtoa_r+0x2d0>)
 800a292:	21ea      	movs	r1, #234	; 0xea
 800a294:	48a7      	ldr	r0, [pc, #668]	; (800a534 <_dtoa_r+0x2d4>)
 800a296:	f002 fb27 	bl	800c8e8 <__assert_func>
 800a29a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a29e:	6005      	str	r5, [r0, #0]
 800a2a0:	60c5      	str	r5, [r0, #12]
 800a2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2a4:	6819      	ldr	r1, [r3, #0]
 800a2a6:	b151      	cbz	r1, 800a2be <_dtoa_r+0x5e>
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	604a      	str	r2, [r1, #4]
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	4093      	lsls	r3, r2
 800a2b0:	608b      	str	r3, [r1, #8]
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f001 fa8c 	bl	800b7d0 <_Bfree>
 800a2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	1e3b      	subs	r3, r7, #0
 800a2c0:	bfaa      	itet	ge
 800a2c2:	2300      	movge	r3, #0
 800a2c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2c8:	f8c8 3000 	strge.w	r3, [r8]
 800a2cc:	4b9a      	ldr	r3, [pc, #616]	; (800a538 <_dtoa_r+0x2d8>)
 800a2ce:	bfbc      	itt	lt
 800a2d0:	2201      	movlt	r2, #1
 800a2d2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2d6:	ea33 030b 	bics.w	r3, r3, fp
 800a2da:	d11b      	bne.n	800a314 <_dtoa_r+0xb4>
 800a2dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2e2:	6013      	str	r3, [r2, #0]
 800a2e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2e8:	4333      	orrs	r3, r6
 800a2ea:	f000 8592 	beq.w	800ae12 <_dtoa_r+0xbb2>
 800a2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f0:	b963      	cbnz	r3, 800a30c <_dtoa_r+0xac>
 800a2f2:	4b92      	ldr	r3, [pc, #584]	; (800a53c <_dtoa_r+0x2dc>)
 800a2f4:	e022      	b.n	800a33c <_dtoa_r+0xdc>
 800a2f6:	4b92      	ldr	r3, [pc, #584]	; (800a540 <_dtoa_r+0x2e0>)
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	9801      	ldr	r0, [sp, #4]
 800a302:	b013      	add	sp, #76	; 0x4c
 800a304:	ecbd 8b04 	vpop	{d8-d9}
 800a308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30c:	4b8b      	ldr	r3, [pc, #556]	; (800a53c <_dtoa_r+0x2dc>)
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	3303      	adds	r3, #3
 800a312:	e7f3      	b.n	800a2fc <_dtoa_r+0x9c>
 800a314:	2200      	movs	r2, #0
 800a316:	2300      	movs	r3, #0
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	f7f6 fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 800a320:	ec4b ab19 	vmov	d9, sl, fp
 800a324:	4680      	mov	r8, r0
 800a326:	b158      	cbz	r0, 800a340 <_dtoa_r+0xe0>
 800a328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a32a:	2301      	movs	r3, #1
 800a32c:	6013      	str	r3, [r2, #0]
 800a32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 856b 	beq.w	800ae0c <_dtoa_r+0xbac>
 800a336:	4883      	ldr	r0, [pc, #524]	; (800a544 <_dtoa_r+0x2e4>)
 800a338:	6018      	str	r0, [r3, #0]
 800a33a:	1e43      	subs	r3, r0, #1
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	e7df      	b.n	800a300 <_dtoa_r+0xa0>
 800a340:	ec4b ab10 	vmov	d0, sl, fp
 800a344:	aa10      	add	r2, sp, #64	; 0x40
 800a346:	a911      	add	r1, sp, #68	; 0x44
 800a348:	4620      	mov	r0, r4
 800a34a:	f001 fdef 	bl	800bf2c <__d2b>
 800a34e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a352:	ee08 0a10 	vmov	s16, r0
 800a356:	2d00      	cmp	r5, #0
 800a358:	f000 8084 	beq.w	800a464 <_dtoa_r+0x204>
 800a35c:	ee19 3a90 	vmov	r3, s19
 800a360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a368:	4656      	mov	r6, sl
 800a36a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a36e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a376:	4b74      	ldr	r3, [pc, #464]	; (800a548 <_dtoa_r+0x2e8>)
 800a378:	2200      	movs	r2, #0
 800a37a:	4630      	mov	r0, r6
 800a37c:	4639      	mov	r1, r7
 800a37e:	f7f5 ff93 	bl	80002a8 <__aeabi_dsub>
 800a382:	a365      	add	r3, pc, #404	; (adr r3, 800a518 <_dtoa_r+0x2b8>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f6 f946 	bl	8000618 <__aeabi_dmul>
 800a38c:	a364      	add	r3, pc, #400	; (adr r3, 800a520 <_dtoa_r+0x2c0>)
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	f7f5 ff8b 	bl	80002ac <__adddf3>
 800a396:	4606      	mov	r6, r0
 800a398:	4628      	mov	r0, r5
 800a39a:	460f      	mov	r7, r1
 800a39c:	f7f6 f8d2 	bl	8000544 <__aeabi_i2d>
 800a3a0:	a361      	add	r3, pc, #388	; (adr r3, 800a528 <_dtoa_r+0x2c8>)
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f7f6 f937 	bl	8000618 <__aeabi_dmul>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	f7f5 ff7b 	bl	80002ac <__adddf3>
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	f7f6 fbdd 	bl	8000b78 <__aeabi_d2iz>
 800a3be:	2200      	movs	r2, #0
 800a3c0:	9000      	str	r0, [sp, #0]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	f7f6 fb98 	bl	8000afc <__aeabi_dcmplt>
 800a3cc:	b150      	cbz	r0, 800a3e4 <_dtoa_r+0x184>
 800a3ce:	9800      	ldr	r0, [sp, #0]
 800a3d0:	f7f6 f8b8 	bl	8000544 <__aeabi_i2d>
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	f7f6 fb86 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3dc:	b910      	cbnz	r0, 800a3e4 <_dtoa_r+0x184>
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	9b00      	ldr	r3, [sp, #0]
 800a3e6:	2b16      	cmp	r3, #22
 800a3e8:	d85a      	bhi.n	800a4a0 <_dtoa_r+0x240>
 800a3ea:	9a00      	ldr	r2, [sp, #0]
 800a3ec:	4b57      	ldr	r3, [pc, #348]	; (800a54c <_dtoa_r+0x2ec>)
 800a3ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	ec51 0b19 	vmov	r0, r1, d9
 800a3fa:	f7f6 fb7f 	bl	8000afc <__aeabi_dcmplt>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d050      	beq.n	800a4a4 <_dtoa_r+0x244>
 800a402:	9b00      	ldr	r3, [sp, #0]
 800a404:	3b01      	subs	r3, #1
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	2300      	movs	r3, #0
 800a40a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a40c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a40e:	1b5d      	subs	r5, r3, r5
 800a410:	1e6b      	subs	r3, r5, #1
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	bf45      	ittet	mi
 800a416:	f1c5 0301 	rsbmi	r3, r5, #1
 800a41a:	9304      	strmi	r3, [sp, #16]
 800a41c:	2300      	movpl	r3, #0
 800a41e:	2300      	movmi	r3, #0
 800a420:	bf4c      	ite	mi
 800a422:	9305      	strmi	r3, [sp, #20]
 800a424:	9304      	strpl	r3, [sp, #16]
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	db3d      	blt.n	800a4a8 <_dtoa_r+0x248>
 800a42c:	9b05      	ldr	r3, [sp, #20]
 800a42e:	9a00      	ldr	r2, [sp, #0]
 800a430:	920a      	str	r2, [sp, #40]	; 0x28
 800a432:	4413      	add	r3, r2
 800a434:	9305      	str	r3, [sp, #20]
 800a436:	2300      	movs	r3, #0
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	9b06      	ldr	r3, [sp, #24]
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	f200 8089 	bhi.w	800a554 <_dtoa_r+0x2f4>
 800a442:	2b05      	cmp	r3, #5
 800a444:	bfc4      	itt	gt
 800a446:	3b04      	subgt	r3, #4
 800a448:	9306      	strgt	r3, [sp, #24]
 800a44a:	9b06      	ldr	r3, [sp, #24]
 800a44c:	f1a3 0302 	sub.w	r3, r3, #2
 800a450:	bfcc      	ite	gt
 800a452:	2500      	movgt	r5, #0
 800a454:	2501      	movle	r5, #1
 800a456:	2b03      	cmp	r3, #3
 800a458:	f200 8087 	bhi.w	800a56a <_dtoa_r+0x30a>
 800a45c:	e8df f003 	tbb	[pc, r3]
 800a460:	59383a2d 	.word	0x59383a2d
 800a464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a468:	441d      	add	r5, r3
 800a46a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a46e:	2b20      	cmp	r3, #32
 800a470:	bfc1      	itttt	gt
 800a472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a47a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a47e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a482:	bfda      	itte	le
 800a484:	f1c3 0320 	rsble	r3, r3, #32
 800a488:	fa06 f003 	lslle.w	r0, r6, r3
 800a48c:	4318      	orrgt	r0, r3
 800a48e:	f7f6 f849 	bl	8000524 <__aeabi_ui2d>
 800a492:	2301      	movs	r3, #1
 800a494:	4606      	mov	r6, r0
 800a496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a49a:	3d01      	subs	r5, #1
 800a49c:	930e      	str	r3, [sp, #56]	; 0x38
 800a49e:	e76a      	b.n	800a376 <_dtoa_r+0x116>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7b2      	b.n	800a40a <_dtoa_r+0x1aa>
 800a4a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4a6:	e7b1      	b.n	800a40c <_dtoa_r+0x1ac>
 800a4a8:	9b04      	ldr	r3, [sp, #16]
 800a4aa:	9a00      	ldr	r2, [sp, #0]
 800a4ac:	1a9b      	subs	r3, r3, r2
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	4253      	negs	r3, r2
 800a4b2:	9307      	str	r3, [sp, #28]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4b8:	e7bf      	b.n	800a43a <_dtoa_r+0x1da>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9308      	str	r3, [sp, #32]
 800a4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dc55      	bgt.n	800a570 <_dtoa_r+0x310>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ce:	e00c      	b.n	800a4ea <_dtoa_r+0x28a>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e7f3      	b.n	800a4bc <_dtoa_r+0x25c>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d8:	9308      	str	r3, [sp, #32]
 800a4da:	9b00      	ldr	r3, [sp, #0]
 800a4dc:	4413      	add	r3, r2
 800a4de:	9302      	str	r3, [sp, #8]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	9303      	str	r3, [sp, #12]
 800a4e6:	bfb8      	it	lt
 800a4e8:	2301      	movlt	r3, #1
 800a4ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	6042      	str	r2, [r0, #4]
 800a4f0:	2204      	movs	r2, #4
 800a4f2:	f102 0614 	add.w	r6, r2, #20
 800a4f6:	429e      	cmp	r6, r3
 800a4f8:	6841      	ldr	r1, [r0, #4]
 800a4fa:	d93d      	bls.n	800a578 <_dtoa_r+0x318>
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f001 f927 	bl	800b750 <_Balloc>
 800a502:	9001      	str	r0, [sp, #4]
 800a504:	2800      	cmp	r0, #0
 800a506:	d13b      	bne.n	800a580 <_dtoa_r+0x320>
 800a508:	4b11      	ldr	r3, [pc, #68]	; (800a550 <_dtoa_r+0x2f0>)
 800a50a:	4602      	mov	r2, r0
 800a50c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a510:	e6c0      	b.n	800a294 <_dtoa_r+0x34>
 800a512:	2301      	movs	r3, #1
 800a514:	e7df      	b.n	800a4d6 <_dtoa_r+0x276>
 800a516:	bf00      	nop
 800a518:	636f4361 	.word	0x636f4361
 800a51c:	3fd287a7 	.word	0x3fd287a7
 800a520:	8b60c8b3 	.word	0x8b60c8b3
 800a524:	3fc68a28 	.word	0x3fc68a28
 800a528:	509f79fb 	.word	0x509f79fb
 800a52c:	3fd34413 	.word	0x3fd34413
 800a530:	0800cf66 	.word	0x0800cf66
 800a534:	0800cf7d 	.word	0x0800cf7d
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	0800cf62 	.word	0x0800cf62
 800a540:	0800cf59 	.word	0x0800cf59
 800a544:	0800cdd9 	.word	0x0800cdd9
 800a548:	3ff80000 	.word	0x3ff80000
 800a54c:	0800d150 	.word	0x0800d150
 800a550:	0800cfd8 	.word	0x0800cfd8
 800a554:	2501      	movs	r5, #1
 800a556:	2300      	movs	r3, #0
 800a558:	9306      	str	r3, [sp, #24]
 800a55a:	9508      	str	r5, [sp, #32]
 800a55c:	f04f 33ff 	mov.w	r3, #4294967295
 800a560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a564:	2200      	movs	r2, #0
 800a566:	2312      	movs	r3, #18
 800a568:	e7b0      	b.n	800a4cc <_dtoa_r+0x26c>
 800a56a:	2301      	movs	r3, #1
 800a56c:	9308      	str	r3, [sp, #32]
 800a56e:	e7f5      	b.n	800a55c <_dtoa_r+0x2fc>
 800a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a576:	e7b8      	b.n	800a4ea <_dtoa_r+0x28a>
 800a578:	3101      	adds	r1, #1
 800a57a:	6041      	str	r1, [r0, #4]
 800a57c:	0052      	lsls	r2, r2, #1
 800a57e:	e7b8      	b.n	800a4f2 <_dtoa_r+0x292>
 800a580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a582:	9a01      	ldr	r2, [sp, #4]
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	2b0e      	cmp	r3, #14
 800a58a:	f200 809d 	bhi.w	800a6c8 <_dtoa_r+0x468>
 800a58e:	2d00      	cmp	r5, #0
 800a590:	f000 809a 	beq.w	800a6c8 <_dtoa_r+0x468>
 800a594:	9b00      	ldr	r3, [sp, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	dd32      	ble.n	800a600 <_dtoa_r+0x3a0>
 800a59a:	4ab7      	ldr	r2, [pc, #732]	; (800a878 <_dtoa_r+0x618>)
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5a8:	9b00      	ldr	r3, [sp, #0]
 800a5aa:	05d8      	lsls	r0, r3, #23
 800a5ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5b0:	d516      	bpl.n	800a5e0 <_dtoa_r+0x380>
 800a5b2:	4bb2      	ldr	r3, [pc, #712]	; (800a87c <_dtoa_r+0x61c>)
 800a5b4:	ec51 0b19 	vmov	r0, r1, d9
 800a5b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5bc:	f7f6 f956 	bl	800086c <__aeabi_ddiv>
 800a5c0:	f007 070f 	and.w	r7, r7, #15
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	468b      	mov	fp, r1
 800a5c8:	2503      	movs	r5, #3
 800a5ca:	4eac      	ldr	r6, [pc, #688]	; (800a87c <_dtoa_r+0x61c>)
 800a5cc:	b957      	cbnz	r7, 800a5e4 <_dtoa_r+0x384>
 800a5ce:	4642      	mov	r2, r8
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	4659      	mov	r1, fp
 800a5d6:	f7f6 f949 	bl	800086c <__aeabi_ddiv>
 800a5da:	4682      	mov	sl, r0
 800a5dc:	468b      	mov	fp, r1
 800a5de:	e028      	b.n	800a632 <_dtoa_r+0x3d2>
 800a5e0:	2502      	movs	r5, #2
 800a5e2:	e7f2      	b.n	800a5ca <_dtoa_r+0x36a>
 800a5e4:	07f9      	lsls	r1, r7, #31
 800a5e6:	d508      	bpl.n	800a5fa <_dtoa_r+0x39a>
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5f0:	f7f6 f812 	bl	8000618 <__aeabi_dmul>
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	107f      	asrs	r7, r7, #1
 800a5fc:	3608      	adds	r6, #8
 800a5fe:	e7e5      	b.n	800a5cc <_dtoa_r+0x36c>
 800a600:	f000 809b 	beq.w	800a73a <_dtoa_r+0x4da>
 800a604:	9b00      	ldr	r3, [sp, #0]
 800a606:	4f9d      	ldr	r7, [pc, #628]	; (800a87c <_dtoa_r+0x61c>)
 800a608:	425e      	negs	r6, r3
 800a60a:	4b9b      	ldr	r3, [pc, #620]	; (800a878 <_dtoa_r+0x618>)
 800a60c:	f006 020f 	and.w	r2, r6, #15
 800a610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	ec51 0b19 	vmov	r0, r1, d9
 800a61c:	f7f5 fffc 	bl	8000618 <__aeabi_dmul>
 800a620:	1136      	asrs	r6, r6, #4
 800a622:	4682      	mov	sl, r0
 800a624:	468b      	mov	fp, r1
 800a626:	2300      	movs	r3, #0
 800a628:	2502      	movs	r5, #2
 800a62a:	2e00      	cmp	r6, #0
 800a62c:	d17a      	bne.n	800a724 <_dtoa_r+0x4c4>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1d3      	bne.n	800a5da <_dtoa_r+0x37a>
 800a632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8082 	beq.w	800a73e <_dtoa_r+0x4de>
 800a63a:	4b91      	ldr	r3, [pc, #580]	; (800a880 <_dtoa_r+0x620>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	4650      	mov	r0, sl
 800a640:	4659      	mov	r1, fp
 800a642:	f7f6 fa5b 	bl	8000afc <__aeabi_dcmplt>
 800a646:	2800      	cmp	r0, #0
 800a648:	d079      	beq.n	800a73e <_dtoa_r+0x4de>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d076      	beq.n	800a73e <_dtoa_r+0x4de>
 800a650:	9b02      	ldr	r3, [sp, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	dd36      	ble.n	800a6c4 <_dtoa_r+0x464>
 800a656:	9b00      	ldr	r3, [sp, #0]
 800a658:	4650      	mov	r0, sl
 800a65a:	4659      	mov	r1, fp
 800a65c:	1e5f      	subs	r7, r3, #1
 800a65e:	2200      	movs	r2, #0
 800a660:	4b88      	ldr	r3, [pc, #544]	; (800a884 <_dtoa_r+0x624>)
 800a662:	f7f5 ffd9 	bl	8000618 <__aeabi_dmul>
 800a666:	9e02      	ldr	r6, [sp, #8]
 800a668:	4682      	mov	sl, r0
 800a66a:	468b      	mov	fp, r1
 800a66c:	3501      	adds	r5, #1
 800a66e:	4628      	mov	r0, r5
 800a670:	f7f5 ff68 	bl	8000544 <__aeabi_i2d>
 800a674:	4652      	mov	r2, sl
 800a676:	465b      	mov	r3, fp
 800a678:	f7f5 ffce 	bl	8000618 <__aeabi_dmul>
 800a67c:	4b82      	ldr	r3, [pc, #520]	; (800a888 <_dtoa_r+0x628>)
 800a67e:	2200      	movs	r2, #0
 800a680:	f7f5 fe14 	bl	80002ac <__adddf3>
 800a684:	46d0      	mov	r8, sl
 800a686:	46d9      	mov	r9, fp
 800a688:	4682      	mov	sl, r0
 800a68a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a68e:	2e00      	cmp	r6, #0
 800a690:	d158      	bne.n	800a744 <_dtoa_r+0x4e4>
 800a692:	4b7e      	ldr	r3, [pc, #504]	; (800a88c <_dtoa_r+0x62c>)
 800a694:	2200      	movs	r2, #0
 800a696:	4640      	mov	r0, r8
 800a698:	4649      	mov	r1, r9
 800a69a:	f7f5 fe05 	bl	80002a8 <__aeabi_dsub>
 800a69e:	4652      	mov	r2, sl
 800a6a0:	465b      	mov	r3, fp
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	4689      	mov	r9, r1
 800a6a6:	f7f6 fa47 	bl	8000b38 <__aeabi_dcmpgt>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f040 8295 	bne.w	800abda <_dtoa_r+0x97a>
 800a6b0:	4652      	mov	r2, sl
 800a6b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	f7f6 fa1f 	bl	8000afc <__aeabi_dcmplt>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f040 8289 	bne.w	800abd6 <_dtoa_r+0x976>
 800a6c4:	ec5b ab19 	vmov	sl, fp, d9
 800a6c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f2c0 8148 	blt.w	800a960 <_dtoa_r+0x700>
 800a6d0:	9a00      	ldr	r2, [sp, #0]
 800a6d2:	2a0e      	cmp	r2, #14
 800a6d4:	f300 8144 	bgt.w	800a960 <_dtoa_r+0x700>
 800a6d8:	4b67      	ldr	r3, [pc, #412]	; (800a878 <_dtoa_r+0x618>)
 800a6da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f280 80d5 	bge.w	800a894 <_dtoa_r+0x634>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f300 80d1 	bgt.w	800a894 <_dtoa_r+0x634>
 800a6f2:	f040 826f 	bne.w	800abd4 <_dtoa_r+0x974>
 800a6f6:	4b65      	ldr	r3, [pc, #404]	; (800a88c <_dtoa_r+0x62c>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 ff8b 	bl	8000618 <__aeabi_dmul>
 800a702:	4652      	mov	r2, sl
 800a704:	465b      	mov	r3, fp
 800a706:	f7f6 fa0d 	bl	8000b24 <__aeabi_dcmpge>
 800a70a:	9e03      	ldr	r6, [sp, #12]
 800a70c:	4637      	mov	r7, r6
 800a70e:	2800      	cmp	r0, #0
 800a710:	f040 8245 	bne.w	800ab9e <_dtoa_r+0x93e>
 800a714:	9d01      	ldr	r5, [sp, #4]
 800a716:	2331      	movs	r3, #49	; 0x31
 800a718:	f805 3b01 	strb.w	r3, [r5], #1
 800a71c:	9b00      	ldr	r3, [sp, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	e240      	b.n	800aba6 <_dtoa_r+0x946>
 800a724:	07f2      	lsls	r2, r6, #31
 800a726:	d505      	bpl.n	800a734 <_dtoa_r+0x4d4>
 800a728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72c:	f7f5 ff74 	bl	8000618 <__aeabi_dmul>
 800a730:	3501      	adds	r5, #1
 800a732:	2301      	movs	r3, #1
 800a734:	1076      	asrs	r6, r6, #1
 800a736:	3708      	adds	r7, #8
 800a738:	e777      	b.n	800a62a <_dtoa_r+0x3ca>
 800a73a:	2502      	movs	r5, #2
 800a73c:	e779      	b.n	800a632 <_dtoa_r+0x3d2>
 800a73e:	9f00      	ldr	r7, [sp, #0]
 800a740:	9e03      	ldr	r6, [sp, #12]
 800a742:	e794      	b.n	800a66e <_dtoa_r+0x40e>
 800a744:	9901      	ldr	r1, [sp, #4]
 800a746:	4b4c      	ldr	r3, [pc, #304]	; (800a878 <_dtoa_r+0x618>)
 800a748:	4431      	add	r1, r6
 800a74a:	910d      	str	r1, [sp, #52]	; 0x34
 800a74c:	9908      	ldr	r1, [sp, #32]
 800a74e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a756:	2900      	cmp	r1, #0
 800a758:	d043      	beq.n	800a7e2 <_dtoa_r+0x582>
 800a75a:	494d      	ldr	r1, [pc, #308]	; (800a890 <_dtoa_r+0x630>)
 800a75c:	2000      	movs	r0, #0
 800a75e:	f7f6 f885 	bl	800086c <__aeabi_ddiv>
 800a762:	4652      	mov	r2, sl
 800a764:	465b      	mov	r3, fp
 800a766:	f7f5 fd9f 	bl	80002a8 <__aeabi_dsub>
 800a76a:	9d01      	ldr	r5, [sp, #4]
 800a76c:	4682      	mov	sl, r0
 800a76e:	468b      	mov	fp, r1
 800a770:	4649      	mov	r1, r9
 800a772:	4640      	mov	r0, r8
 800a774:	f7f6 fa00 	bl	8000b78 <__aeabi_d2iz>
 800a778:	4606      	mov	r6, r0
 800a77a:	f7f5 fee3 	bl	8000544 <__aeabi_i2d>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f5 fd8f 	bl	80002a8 <__aeabi_dsub>
 800a78a:	3630      	adds	r6, #48	; 0x30
 800a78c:	f805 6b01 	strb.w	r6, [r5], #1
 800a790:	4652      	mov	r2, sl
 800a792:	465b      	mov	r3, fp
 800a794:	4680      	mov	r8, r0
 800a796:	4689      	mov	r9, r1
 800a798:	f7f6 f9b0 	bl	8000afc <__aeabi_dcmplt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d163      	bne.n	800a868 <_dtoa_r+0x608>
 800a7a0:	4642      	mov	r2, r8
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	4936      	ldr	r1, [pc, #216]	; (800a880 <_dtoa_r+0x620>)
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	f7f5 fd7e 	bl	80002a8 <__aeabi_dsub>
 800a7ac:	4652      	mov	r2, sl
 800a7ae:	465b      	mov	r3, fp
 800a7b0:	f7f6 f9a4 	bl	8000afc <__aeabi_dcmplt>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	f040 80b5 	bne.w	800a924 <_dtoa_r+0x6c4>
 800a7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7bc:	429d      	cmp	r5, r3
 800a7be:	d081      	beq.n	800a6c4 <_dtoa_r+0x464>
 800a7c0:	4b30      	ldr	r3, [pc, #192]	; (800a884 <_dtoa_r+0x624>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4650      	mov	r0, sl
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	f7f5 ff26 	bl	8000618 <__aeabi_dmul>
 800a7cc:	4b2d      	ldr	r3, [pc, #180]	; (800a884 <_dtoa_r+0x624>)
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	468b      	mov	fp, r1
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f7f5 ff1e 	bl	8000618 <__aeabi_dmul>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	e7c6      	b.n	800a770 <_dtoa_r+0x510>
 800a7e2:	4650      	mov	r0, sl
 800a7e4:	4659      	mov	r1, fp
 800a7e6:	f7f5 ff17 	bl	8000618 <__aeabi_dmul>
 800a7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ec:	9d01      	ldr	r5, [sp, #4]
 800a7ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7f0:	4682      	mov	sl, r0
 800a7f2:	468b      	mov	fp, r1
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f7f6 f9be 	bl	8000b78 <__aeabi_d2iz>
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	f7f5 fea1 	bl	8000544 <__aeabi_i2d>
 800a802:	3630      	adds	r6, #48	; 0x30
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	4640      	mov	r0, r8
 800a80a:	4649      	mov	r1, r9
 800a80c:	f7f5 fd4c 	bl	80002a8 <__aeabi_dsub>
 800a810:	f805 6b01 	strb.w	r6, [r5], #1
 800a814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a816:	429d      	cmp	r5, r3
 800a818:	4680      	mov	r8, r0
 800a81a:	4689      	mov	r9, r1
 800a81c:	f04f 0200 	mov.w	r2, #0
 800a820:	d124      	bne.n	800a86c <_dtoa_r+0x60c>
 800a822:	4b1b      	ldr	r3, [pc, #108]	; (800a890 <_dtoa_r+0x630>)
 800a824:	4650      	mov	r0, sl
 800a826:	4659      	mov	r1, fp
 800a828:	f7f5 fd40 	bl	80002ac <__adddf3>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f6 f980 	bl	8000b38 <__aeabi_dcmpgt>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d173      	bne.n	800a924 <_dtoa_r+0x6c4>
 800a83c:	4652      	mov	r2, sl
 800a83e:	465b      	mov	r3, fp
 800a840:	4913      	ldr	r1, [pc, #76]	; (800a890 <_dtoa_r+0x630>)
 800a842:	2000      	movs	r0, #0
 800a844:	f7f5 fd30 	bl	80002a8 <__aeabi_dsub>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4640      	mov	r0, r8
 800a84e:	4649      	mov	r1, r9
 800a850:	f7f6 f954 	bl	8000afc <__aeabi_dcmplt>
 800a854:	2800      	cmp	r0, #0
 800a856:	f43f af35 	beq.w	800a6c4 <_dtoa_r+0x464>
 800a85a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a85c:	1e6b      	subs	r3, r5, #1
 800a85e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a864:	2b30      	cmp	r3, #48	; 0x30
 800a866:	d0f8      	beq.n	800a85a <_dtoa_r+0x5fa>
 800a868:	9700      	str	r7, [sp, #0]
 800a86a:	e049      	b.n	800a900 <_dtoa_r+0x6a0>
 800a86c:	4b05      	ldr	r3, [pc, #20]	; (800a884 <_dtoa_r+0x624>)
 800a86e:	f7f5 fed3 	bl	8000618 <__aeabi_dmul>
 800a872:	4680      	mov	r8, r0
 800a874:	4689      	mov	r9, r1
 800a876:	e7bd      	b.n	800a7f4 <_dtoa_r+0x594>
 800a878:	0800d150 	.word	0x0800d150
 800a87c:	0800d128 	.word	0x0800d128
 800a880:	3ff00000 	.word	0x3ff00000
 800a884:	40240000 	.word	0x40240000
 800a888:	401c0000 	.word	0x401c0000
 800a88c:	40140000 	.word	0x40140000
 800a890:	3fe00000 	.word	0x3fe00000
 800a894:	9d01      	ldr	r5, [sp, #4]
 800a896:	4656      	mov	r6, sl
 800a898:	465f      	mov	r7, fp
 800a89a:	4642      	mov	r2, r8
 800a89c:	464b      	mov	r3, r9
 800a89e:	4630      	mov	r0, r6
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	f7f5 ffe3 	bl	800086c <__aeabi_ddiv>
 800a8a6:	f7f6 f967 	bl	8000b78 <__aeabi_d2iz>
 800a8aa:	4682      	mov	sl, r0
 800a8ac:	f7f5 fe4a 	bl	8000544 <__aeabi_i2d>
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	f7f5 feb0 	bl	8000618 <__aeabi_dmul>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4630      	mov	r0, r6
 800a8be:	4639      	mov	r1, r7
 800a8c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8c4:	f7f5 fcf0 	bl	80002a8 <__aeabi_dsub>
 800a8c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8cc:	9e01      	ldr	r6, [sp, #4]
 800a8ce:	9f03      	ldr	r7, [sp, #12]
 800a8d0:	1bae      	subs	r6, r5, r6
 800a8d2:	42b7      	cmp	r7, r6
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	d135      	bne.n	800a946 <_dtoa_r+0x6e6>
 800a8da:	f7f5 fce7 	bl	80002ac <__adddf3>
 800a8de:	4642      	mov	r2, r8
 800a8e0:	464b      	mov	r3, r9
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	460f      	mov	r7, r1
 800a8e6:	f7f6 f927 	bl	8000b38 <__aeabi_dcmpgt>
 800a8ea:	b9d0      	cbnz	r0, 800a922 <_dtoa_r+0x6c2>
 800a8ec:	4642      	mov	r2, r8
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f6 f8f8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8f8:	b110      	cbz	r0, 800a900 <_dtoa_r+0x6a0>
 800a8fa:	f01a 0f01 	tst.w	sl, #1
 800a8fe:	d110      	bne.n	800a922 <_dtoa_r+0x6c2>
 800a900:	4620      	mov	r0, r4
 800a902:	ee18 1a10 	vmov	r1, s16
 800a906:	f000 ff63 	bl	800b7d0 <_Bfree>
 800a90a:	2300      	movs	r3, #0
 800a90c:	9800      	ldr	r0, [sp, #0]
 800a90e:	702b      	strb	r3, [r5, #0]
 800a910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a912:	3001      	adds	r0, #1
 800a914:	6018      	str	r0, [r3, #0]
 800a916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f43f acf1 	beq.w	800a300 <_dtoa_r+0xa0>
 800a91e:	601d      	str	r5, [r3, #0]
 800a920:	e4ee      	b.n	800a300 <_dtoa_r+0xa0>
 800a922:	9f00      	ldr	r7, [sp, #0]
 800a924:	462b      	mov	r3, r5
 800a926:	461d      	mov	r5, r3
 800a928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a92c:	2a39      	cmp	r2, #57	; 0x39
 800a92e:	d106      	bne.n	800a93e <_dtoa_r+0x6de>
 800a930:	9a01      	ldr	r2, [sp, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d1f7      	bne.n	800a926 <_dtoa_r+0x6c6>
 800a936:	9901      	ldr	r1, [sp, #4]
 800a938:	2230      	movs	r2, #48	; 0x30
 800a93a:	3701      	adds	r7, #1
 800a93c:	700a      	strb	r2, [r1, #0]
 800a93e:	781a      	ldrb	r2, [r3, #0]
 800a940:	3201      	adds	r2, #1
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e790      	b.n	800a868 <_dtoa_r+0x608>
 800a946:	4ba6      	ldr	r3, [pc, #664]	; (800abe0 <_dtoa_r+0x980>)
 800a948:	2200      	movs	r2, #0
 800a94a:	f7f5 fe65 	bl	8000618 <__aeabi_dmul>
 800a94e:	2200      	movs	r2, #0
 800a950:	2300      	movs	r3, #0
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	f7f6 f8c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d09d      	beq.n	800a89a <_dtoa_r+0x63a>
 800a95e:	e7cf      	b.n	800a900 <_dtoa_r+0x6a0>
 800a960:	9a08      	ldr	r2, [sp, #32]
 800a962:	2a00      	cmp	r2, #0
 800a964:	f000 80d7 	beq.w	800ab16 <_dtoa_r+0x8b6>
 800a968:	9a06      	ldr	r2, [sp, #24]
 800a96a:	2a01      	cmp	r2, #1
 800a96c:	f300 80ba 	bgt.w	800aae4 <_dtoa_r+0x884>
 800a970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a972:	2a00      	cmp	r2, #0
 800a974:	f000 80b2 	beq.w	800aadc <_dtoa_r+0x87c>
 800a978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a97c:	9e07      	ldr	r6, [sp, #28]
 800a97e:	9d04      	ldr	r5, [sp, #16]
 800a980:	9a04      	ldr	r2, [sp, #16]
 800a982:	441a      	add	r2, r3
 800a984:	9204      	str	r2, [sp, #16]
 800a986:	9a05      	ldr	r2, [sp, #20]
 800a988:	2101      	movs	r1, #1
 800a98a:	441a      	add	r2, r3
 800a98c:	4620      	mov	r0, r4
 800a98e:	9205      	str	r2, [sp, #20]
 800a990:	f001 f820 	bl	800b9d4 <__i2b>
 800a994:	4607      	mov	r7, r0
 800a996:	2d00      	cmp	r5, #0
 800a998:	dd0c      	ble.n	800a9b4 <_dtoa_r+0x754>
 800a99a:	9b05      	ldr	r3, [sp, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	dd09      	ble.n	800a9b4 <_dtoa_r+0x754>
 800a9a0:	42ab      	cmp	r3, r5
 800a9a2:	9a04      	ldr	r2, [sp, #16]
 800a9a4:	bfa8      	it	ge
 800a9a6:	462b      	movge	r3, r5
 800a9a8:	1ad2      	subs	r2, r2, r3
 800a9aa:	9204      	str	r2, [sp, #16]
 800a9ac:	9a05      	ldr	r2, [sp, #20]
 800a9ae:	1aed      	subs	r5, r5, r3
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	9305      	str	r3, [sp, #20]
 800a9b4:	9b07      	ldr	r3, [sp, #28]
 800a9b6:	b31b      	cbz	r3, 800aa00 <_dtoa_r+0x7a0>
 800a9b8:	9b08      	ldr	r3, [sp, #32]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 80af 	beq.w	800ab1e <_dtoa_r+0x8be>
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	dd13      	ble.n	800a9ec <_dtoa_r+0x78c>
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f001 f8c3 	bl	800bb54 <__pow5mult>
 800a9ce:	ee18 2a10 	vmov	r2, s16
 800a9d2:	4601      	mov	r1, r0
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f001 f812 	bl	800ba00 <__multiply>
 800a9dc:	ee18 1a10 	vmov	r1, s16
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fef4 	bl	800b7d0 <_Bfree>
 800a9e8:	ee08 8a10 	vmov	s16, r8
 800a9ec:	9b07      	ldr	r3, [sp, #28]
 800a9ee:	1b9a      	subs	r2, r3, r6
 800a9f0:	d006      	beq.n	800aa00 <_dtoa_r+0x7a0>
 800a9f2:	ee18 1a10 	vmov	r1, s16
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f001 f8ac 	bl	800bb54 <__pow5mult>
 800a9fc:	ee08 0a10 	vmov	s16, r0
 800aa00:	2101      	movs	r1, #1
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 ffe6 	bl	800b9d4 <__i2b>
 800aa08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	f340 8088 	ble.w	800ab22 <_dtoa_r+0x8c2>
 800aa12:	461a      	mov	r2, r3
 800aa14:	4601      	mov	r1, r0
 800aa16:	4620      	mov	r0, r4
 800aa18:	f001 f89c 	bl	800bb54 <__pow5mult>
 800aa1c:	9b06      	ldr	r3, [sp, #24]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	4606      	mov	r6, r0
 800aa22:	f340 8081 	ble.w	800ab28 <_dtoa_r+0x8c8>
 800aa26:	f04f 0800 	mov.w	r8, #0
 800aa2a:	6933      	ldr	r3, [r6, #16]
 800aa2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa30:	6918      	ldr	r0, [r3, #16]
 800aa32:	f000 ff7f 	bl	800b934 <__hi0bits>
 800aa36:	f1c0 0020 	rsb	r0, r0, #32
 800aa3a:	9b05      	ldr	r3, [sp, #20]
 800aa3c:	4418      	add	r0, r3
 800aa3e:	f010 001f 	ands.w	r0, r0, #31
 800aa42:	f000 8092 	beq.w	800ab6a <_dtoa_r+0x90a>
 800aa46:	f1c0 0320 	rsb	r3, r0, #32
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	f340 808a 	ble.w	800ab64 <_dtoa_r+0x904>
 800aa50:	f1c0 001c 	rsb	r0, r0, #28
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	4403      	add	r3, r0
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	9b05      	ldr	r3, [sp, #20]
 800aa5c:	4403      	add	r3, r0
 800aa5e:	4405      	add	r5, r0
 800aa60:	9305      	str	r3, [sp, #20]
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dd07      	ble.n	800aa78 <_dtoa_r+0x818>
 800aa68:	ee18 1a10 	vmov	r1, s16
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f001 f8ca 	bl	800bc08 <__lshift>
 800aa74:	ee08 0a10 	vmov	s16, r0
 800aa78:	9b05      	ldr	r3, [sp, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dd05      	ble.n	800aa8a <_dtoa_r+0x82a>
 800aa7e:	4631      	mov	r1, r6
 800aa80:	461a      	mov	r2, r3
 800aa82:	4620      	mov	r0, r4
 800aa84:	f001 f8c0 	bl	800bc08 <__lshift>
 800aa88:	4606      	mov	r6, r0
 800aa8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d06e      	beq.n	800ab6e <_dtoa_r+0x90e>
 800aa90:	ee18 0a10 	vmov	r0, s16
 800aa94:	4631      	mov	r1, r6
 800aa96:	f001 f927 	bl	800bce8 <__mcmp>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	da67      	bge.n	800ab6e <_dtoa_r+0x90e>
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	ee18 1a10 	vmov	r1, s16
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	220a      	movs	r2, #10
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 feb1 	bl	800b814 <__multadd>
 800aab2:	9b08      	ldr	r3, [sp, #32]
 800aab4:	ee08 0a10 	vmov	s16, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 81b1 	beq.w	800ae20 <_dtoa_r+0xbc0>
 800aabe:	2300      	movs	r3, #0
 800aac0:	4639      	mov	r1, r7
 800aac2:	220a      	movs	r2, #10
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 fea5 	bl	800b814 <__multadd>
 800aaca:	9b02      	ldr	r3, [sp, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	4607      	mov	r7, r0
 800aad0:	f300 808e 	bgt.w	800abf0 <_dtoa_r+0x990>
 800aad4:	9b06      	ldr	r3, [sp, #24]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	dc51      	bgt.n	800ab7e <_dtoa_r+0x91e>
 800aada:	e089      	b.n	800abf0 <_dtoa_r+0x990>
 800aadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aae2:	e74b      	b.n	800a97c <_dtoa_r+0x71c>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	1e5e      	subs	r6, r3, #1
 800aae8:	9b07      	ldr	r3, [sp, #28]
 800aaea:	42b3      	cmp	r3, r6
 800aaec:	bfbf      	itttt	lt
 800aaee:	9b07      	ldrlt	r3, [sp, #28]
 800aaf0:	9607      	strlt	r6, [sp, #28]
 800aaf2:	1af2      	sublt	r2, r6, r3
 800aaf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aaf6:	bfb6      	itet	lt
 800aaf8:	189b      	addlt	r3, r3, r2
 800aafa:	1b9e      	subge	r6, r3, r6
 800aafc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	bfb8      	it	lt
 800ab02:	2600      	movlt	r6, #0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfb7      	itett	lt
 800ab08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab10:	1a9d      	sublt	r5, r3, r2
 800ab12:	2300      	movlt	r3, #0
 800ab14:	e734      	b.n	800a980 <_dtoa_r+0x720>
 800ab16:	9e07      	ldr	r6, [sp, #28]
 800ab18:	9d04      	ldr	r5, [sp, #16]
 800ab1a:	9f08      	ldr	r7, [sp, #32]
 800ab1c:	e73b      	b.n	800a996 <_dtoa_r+0x736>
 800ab1e:	9a07      	ldr	r2, [sp, #28]
 800ab20:	e767      	b.n	800a9f2 <_dtoa_r+0x792>
 800ab22:	9b06      	ldr	r3, [sp, #24]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	dc18      	bgt.n	800ab5a <_dtoa_r+0x8fa>
 800ab28:	f1ba 0f00 	cmp.w	sl, #0
 800ab2c:	d115      	bne.n	800ab5a <_dtoa_r+0x8fa>
 800ab2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab32:	b993      	cbnz	r3, 800ab5a <_dtoa_r+0x8fa>
 800ab34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab38:	0d1b      	lsrs	r3, r3, #20
 800ab3a:	051b      	lsls	r3, r3, #20
 800ab3c:	b183      	cbz	r3, 800ab60 <_dtoa_r+0x900>
 800ab3e:	9b04      	ldr	r3, [sp, #16]
 800ab40:	3301      	adds	r3, #1
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	9b05      	ldr	r3, [sp, #20]
 800ab46:	3301      	adds	r3, #1
 800ab48:	9305      	str	r3, [sp, #20]
 800ab4a:	f04f 0801 	mov.w	r8, #1
 800ab4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f47f af6a 	bne.w	800aa2a <_dtoa_r+0x7ca>
 800ab56:	2001      	movs	r0, #1
 800ab58:	e76f      	b.n	800aa3a <_dtoa_r+0x7da>
 800ab5a:	f04f 0800 	mov.w	r8, #0
 800ab5e:	e7f6      	b.n	800ab4e <_dtoa_r+0x8ee>
 800ab60:	4698      	mov	r8, r3
 800ab62:	e7f4      	b.n	800ab4e <_dtoa_r+0x8ee>
 800ab64:	f43f af7d 	beq.w	800aa62 <_dtoa_r+0x802>
 800ab68:	4618      	mov	r0, r3
 800ab6a:	301c      	adds	r0, #28
 800ab6c:	e772      	b.n	800aa54 <_dtoa_r+0x7f4>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dc37      	bgt.n	800abe4 <_dtoa_r+0x984>
 800ab74:	9b06      	ldr	r3, [sp, #24]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	dd34      	ble.n	800abe4 <_dtoa_r+0x984>
 800ab7a:	9b03      	ldr	r3, [sp, #12]
 800ab7c:	9302      	str	r3, [sp, #8]
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	b96b      	cbnz	r3, 800ab9e <_dtoa_r+0x93e>
 800ab82:	4631      	mov	r1, r6
 800ab84:	2205      	movs	r2, #5
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 fe44 	bl	800b814 <__multadd>
 800ab8c:	4601      	mov	r1, r0
 800ab8e:	4606      	mov	r6, r0
 800ab90:	ee18 0a10 	vmov	r0, s16
 800ab94:	f001 f8a8 	bl	800bce8 <__mcmp>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f73f adbb 	bgt.w	800a714 <_dtoa_r+0x4b4>
 800ab9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba0:	9d01      	ldr	r5, [sp, #4]
 800aba2:	43db      	mvns	r3, r3
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	f04f 0800 	mov.w	r8, #0
 800abaa:	4631      	mov	r1, r6
 800abac:	4620      	mov	r0, r4
 800abae:	f000 fe0f 	bl	800b7d0 <_Bfree>
 800abb2:	2f00      	cmp	r7, #0
 800abb4:	f43f aea4 	beq.w	800a900 <_dtoa_r+0x6a0>
 800abb8:	f1b8 0f00 	cmp.w	r8, #0
 800abbc:	d005      	beq.n	800abca <_dtoa_r+0x96a>
 800abbe:	45b8      	cmp	r8, r7
 800abc0:	d003      	beq.n	800abca <_dtoa_r+0x96a>
 800abc2:	4641      	mov	r1, r8
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fe03 	bl	800b7d0 <_Bfree>
 800abca:	4639      	mov	r1, r7
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 fdff 	bl	800b7d0 <_Bfree>
 800abd2:	e695      	b.n	800a900 <_dtoa_r+0x6a0>
 800abd4:	2600      	movs	r6, #0
 800abd6:	4637      	mov	r7, r6
 800abd8:	e7e1      	b.n	800ab9e <_dtoa_r+0x93e>
 800abda:	9700      	str	r7, [sp, #0]
 800abdc:	4637      	mov	r7, r6
 800abde:	e599      	b.n	800a714 <_dtoa_r+0x4b4>
 800abe0:	40240000 	.word	0x40240000
 800abe4:	9b08      	ldr	r3, [sp, #32]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 80ca 	beq.w	800ad80 <_dtoa_r+0xb20>
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	9302      	str	r3, [sp, #8]
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	dd05      	ble.n	800ac00 <_dtoa_r+0x9a0>
 800abf4:	4639      	mov	r1, r7
 800abf6:	462a      	mov	r2, r5
 800abf8:	4620      	mov	r0, r4
 800abfa:	f001 f805 	bl	800bc08 <__lshift>
 800abfe:	4607      	mov	r7, r0
 800ac00:	f1b8 0f00 	cmp.w	r8, #0
 800ac04:	d05b      	beq.n	800acbe <_dtoa_r+0xa5e>
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fda1 	bl	800b750 <_Balloc>
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b928      	cbnz	r0, 800ac1e <_dtoa_r+0x9be>
 800ac12:	4b87      	ldr	r3, [pc, #540]	; (800ae30 <_dtoa_r+0xbd0>)
 800ac14:	4602      	mov	r2, r0
 800ac16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac1a:	f7ff bb3b 	b.w	800a294 <_dtoa_r+0x34>
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	3202      	adds	r2, #2
 800ac22:	0092      	lsls	r2, r2, #2
 800ac24:	f107 010c 	add.w	r1, r7, #12
 800ac28:	300c      	adds	r0, #12
 800ac2a:	f7fd fc21 	bl	8008470 <memcpy>
 800ac2e:	2201      	movs	r2, #1
 800ac30:	4629      	mov	r1, r5
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 ffe8 	bl	800bc08 <__lshift>
 800ac38:	9b01      	ldr	r3, [sp, #4]
 800ac3a:	f103 0901 	add.w	r9, r3, #1
 800ac3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac42:	4413      	add	r3, r2
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	f00a 0301 	and.w	r3, sl, #1
 800ac4a:	46b8      	mov	r8, r7
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	4607      	mov	r7, r0
 800ac50:	4631      	mov	r1, r6
 800ac52:	ee18 0a10 	vmov	r0, s16
 800ac56:	f7ff fa77 	bl	800a148 <quorem>
 800ac5a:	4641      	mov	r1, r8
 800ac5c:	9002      	str	r0, [sp, #8]
 800ac5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac62:	ee18 0a10 	vmov	r0, s16
 800ac66:	f001 f83f 	bl	800bce8 <__mcmp>
 800ac6a:	463a      	mov	r2, r7
 800ac6c:	9003      	str	r0, [sp, #12]
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4620      	mov	r0, r4
 800ac72:	f001 f855 	bl	800bd20 <__mdiff>
 800ac76:	68c2      	ldr	r2, [r0, #12]
 800ac78:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	bb02      	cbnz	r2, 800acc2 <_dtoa_r+0xa62>
 800ac80:	4601      	mov	r1, r0
 800ac82:	ee18 0a10 	vmov	r0, s16
 800ac86:	f001 f82f 	bl	800bce8 <__mcmp>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	4620      	mov	r0, r4
 800ac90:	9207      	str	r2, [sp, #28]
 800ac92:	f000 fd9d 	bl	800b7d0 <_Bfree>
 800ac96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac9a:	ea43 0102 	orr.w	r1, r3, r2
 800ac9e:	9b04      	ldr	r3, [sp, #16]
 800aca0:	430b      	orrs	r3, r1
 800aca2:	464d      	mov	r5, r9
 800aca4:	d10f      	bne.n	800acc6 <_dtoa_r+0xa66>
 800aca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acaa:	d02a      	beq.n	800ad02 <_dtoa_r+0xaa2>
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dd02      	ble.n	800acb8 <_dtoa_r+0xa58>
 800acb2:	9b02      	ldr	r3, [sp, #8]
 800acb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800acb8:	f88b a000 	strb.w	sl, [fp]
 800acbc:	e775      	b.n	800abaa <_dtoa_r+0x94a>
 800acbe:	4638      	mov	r0, r7
 800acc0:	e7ba      	b.n	800ac38 <_dtoa_r+0x9d8>
 800acc2:	2201      	movs	r2, #1
 800acc4:	e7e2      	b.n	800ac8c <_dtoa_r+0xa2c>
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	db04      	blt.n	800acd6 <_dtoa_r+0xa76>
 800accc:	9906      	ldr	r1, [sp, #24]
 800acce:	430b      	orrs	r3, r1
 800acd0:	9904      	ldr	r1, [sp, #16]
 800acd2:	430b      	orrs	r3, r1
 800acd4:	d122      	bne.n	800ad1c <_dtoa_r+0xabc>
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	ddee      	ble.n	800acb8 <_dtoa_r+0xa58>
 800acda:	ee18 1a10 	vmov	r1, s16
 800acde:	2201      	movs	r2, #1
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 ff91 	bl	800bc08 <__lshift>
 800ace6:	4631      	mov	r1, r6
 800ace8:	ee08 0a10 	vmov	s16, r0
 800acec:	f000 fffc 	bl	800bce8 <__mcmp>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	dc03      	bgt.n	800acfc <_dtoa_r+0xa9c>
 800acf4:	d1e0      	bne.n	800acb8 <_dtoa_r+0xa58>
 800acf6:	f01a 0f01 	tst.w	sl, #1
 800acfa:	d0dd      	beq.n	800acb8 <_dtoa_r+0xa58>
 800acfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad00:	d1d7      	bne.n	800acb2 <_dtoa_r+0xa52>
 800ad02:	2339      	movs	r3, #57	; 0x39
 800ad04:	f88b 3000 	strb.w	r3, [fp]
 800ad08:	462b      	mov	r3, r5
 800ad0a:	461d      	mov	r5, r3
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad12:	2a39      	cmp	r2, #57	; 0x39
 800ad14:	d071      	beq.n	800adfa <_dtoa_r+0xb9a>
 800ad16:	3201      	adds	r2, #1
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	e746      	b.n	800abaa <_dtoa_r+0x94a>
 800ad1c:	2a00      	cmp	r2, #0
 800ad1e:	dd07      	ble.n	800ad30 <_dtoa_r+0xad0>
 800ad20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad24:	d0ed      	beq.n	800ad02 <_dtoa_r+0xaa2>
 800ad26:	f10a 0301 	add.w	r3, sl, #1
 800ad2a:	f88b 3000 	strb.w	r3, [fp]
 800ad2e:	e73c      	b.n	800abaa <_dtoa_r+0x94a>
 800ad30:	9b05      	ldr	r3, [sp, #20]
 800ad32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad36:	4599      	cmp	r9, r3
 800ad38:	d047      	beq.n	800adca <_dtoa_r+0xb6a>
 800ad3a:	ee18 1a10 	vmov	r1, s16
 800ad3e:	2300      	movs	r3, #0
 800ad40:	220a      	movs	r2, #10
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fd66 	bl	800b814 <__multadd>
 800ad48:	45b8      	cmp	r8, r7
 800ad4a:	ee08 0a10 	vmov	s16, r0
 800ad4e:	f04f 0300 	mov.w	r3, #0
 800ad52:	f04f 020a 	mov.w	r2, #10
 800ad56:	4641      	mov	r1, r8
 800ad58:	4620      	mov	r0, r4
 800ad5a:	d106      	bne.n	800ad6a <_dtoa_r+0xb0a>
 800ad5c:	f000 fd5a 	bl	800b814 <__multadd>
 800ad60:	4680      	mov	r8, r0
 800ad62:	4607      	mov	r7, r0
 800ad64:	f109 0901 	add.w	r9, r9, #1
 800ad68:	e772      	b.n	800ac50 <_dtoa_r+0x9f0>
 800ad6a:	f000 fd53 	bl	800b814 <__multadd>
 800ad6e:	4639      	mov	r1, r7
 800ad70:	4680      	mov	r8, r0
 800ad72:	2300      	movs	r3, #0
 800ad74:	220a      	movs	r2, #10
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 fd4c 	bl	800b814 <__multadd>
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	e7f1      	b.n	800ad64 <_dtoa_r+0xb04>
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	9302      	str	r3, [sp, #8]
 800ad84:	9d01      	ldr	r5, [sp, #4]
 800ad86:	ee18 0a10 	vmov	r0, s16
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	f7ff f9dc 	bl	800a148 <quorem>
 800ad90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad94:	9b01      	ldr	r3, [sp, #4]
 800ad96:	f805 ab01 	strb.w	sl, [r5], #1
 800ad9a:	1aea      	subs	r2, r5, r3
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	dd09      	ble.n	800adb6 <_dtoa_r+0xb56>
 800ada2:	ee18 1a10 	vmov	r1, s16
 800ada6:	2300      	movs	r3, #0
 800ada8:	220a      	movs	r2, #10
 800adaa:	4620      	mov	r0, r4
 800adac:	f000 fd32 	bl	800b814 <__multadd>
 800adb0:	ee08 0a10 	vmov	s16, r0
 800adb4:	e7e7      	b.n	800ad86 <_dtoa_r+0xb26>
 800adb6:	9b02      	ldr	r3, [sp, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	bfc8      	it	gt
 800adbc:	461d      	movgt	r5, r3
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	bfd8      	it	le
 800adc2:	2501      	movle	r5, #1
 800adc4:	441d      	add	r5, r3
 800adc6:	f04f 0800 	mov.w	r8, #0
 800adca:	ee18 1a10 	vmov	r1, s16
 800adce:	2201      	movs	r2, #1
 800add0:	4620      	mov	r0, r4
 800add2:	f000 ff19 	bl	800bc08 <__lshift>
 800add6:	4631      	mov	r1, r6
 800add8:	ee08 0a10 	vmov	s16, r0
 800addc:	f000 ff84 	bl	800bce8 <__mcmp>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	dc91      	bgt.n	800ad08 <_dtoa_r+0xaa8>
 800ade4:	d102      	bne.n	800adec <_dtoa_r+0xb8c>
 800ade6:	f01a 0f01 	tst.w	sl, #1
 800adea:	d18d      	bne.n	800ad08 <_dtoa_r+0xaa8>
 800adec:	462b      	mov	r3, r5
 800adee:	461d      	mov	r5, r3
 800adf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adf4:	2a30      	cmp	r2, #48	; 0x30
 800adf6:	d0fa      	beq.n	800adee <_dtoa_r+0xb8e>
 800adf8:	e6d7      	b.n	800abaa <_dtoa_r+0x94a>
 800adfa:	9a01      	ldr	r2, [sp, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d184      	bne.n	800ad0a <_dtoa_r+0xaaa>
 800ae00:	9b00      	ldr	r3, [sp, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	2331      	movs	r3, #49	; 0x31
 800ae08:	7013      	strb	r3, [r2, #0]
 800ae0a:	e6ce      	b.n	800abaa <_dtoa_r+0x94a>
 800ae0c:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <_dtoa_r+0xbd4>)
 800ae0e:	f7ff ba95 	b.w	800a33c <_dtoa_r+0xdc>
 800ae12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f47f aa6e 	bne.w	800a2f6 <_dtoa_r+0x96>
 800ae1a:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <_dtoa_r+0xbd8>)
 800ae1c:	f7ff ba8e 	b.w	800a33c <_dtoa_r+0xdc>
 800ae20:	9b02      	ldr	r3, [sp, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dcae      	bgt.n	800ad84 <_dtoa_r+0xb24>
 800ae26:	9b06      	ldr	r3, [sp, #24]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	f73f aea8 	bgt.w	800ab7e <_dtoa_r+0x91e>
 800ae2e:	e7a9      	b.n	800ad84 <_dtoa_r+0xb24>
 800ae30:	0800cfd8 	.word	0x0800cfd8
 800ae34:	0800cdd8 	.word	0x0800cdd8
 800ae38:	0800cf59 	.word	0x0800cf59

0800ae3c <std>:
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	4604      	mov	r4, r0
 800ae42:	e9c0 3300 	strd	r3, r3, [r0]
 800ae46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae4a:	6083      	str	r3, [r0, #8]
 800ae4c:	8181      	strh	r1, [r0, #12]
 800ae4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae50:	81c2      	strh	r2, [r0, #14]
 800ae52:	6183      	str	r3, [r0, #24]
 800ae54:	4619      	mov	r1, r3
 800ae56:	2208      	movs	r2, #8
 800ae58:	305c      	adds	r0, #92	; 0x5c
 800ae5a:	f7fd fb17 	bl	800848c <memset>
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x38>)
 800ae60:	6263      	str	r3, [r4, #36]	; 0x24
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <std+0x3c>)
 800ae64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <std+0x40>)
 800ae68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae6a:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <std+0x44>)
 800ae6c:	6224      	str	r4, [r4, #32]
 800ae6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae70:	bd10      	pop	{r4, pc}
 800ae72:	bf00      	nop
 800ae74:	0800c679 	.word	0x0800c679
 800ae78:	0800c69b 	.word	0x0800c69b
 800ae7c:	0800c6d3 	.word	0x0800c6d3
 800ae80:	0800c6f7 	.word	0x0800c6f7

0800ae84 <_cleanup_r>:
 800ae84:	4901      	ldr	r1, [pc, #4]	; (800ae8c <_cleanup_r+0x8>)
 800ae86:	f000 b8af 	b.w	800afe8 <_fwalk_reent>
 800ae8a:	bf00      	nop
 800ae8c:	0800ca51 	.word	0x0800ca51

0800ae90 <__sfmoreglue>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	2268      	movs	r2, #104	; 0x68
 800ae94:	1e4d      	subs	r5, r1, #1
 800ae96:	4355      	muls	r5, r2
 800ae98:	460e      	mov	r6, r1
 800ae9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae9e:	f7fd fb69 	bl	8008574 <_malloc_r>
 800aea2:	4604      	mov	r4, r0
 800aea4:	b140      	cbz	r0, 800aeb8 <__sfmoreglue+0x28>
 800aea6:	2100      	movs	r1, #0
 800aea8:	e9c0 1600 	strd	r1, r6, [r0]
 800aeac:	300c      	adds	r0, #12
 800aeae:	60a0      	str	r0, [r4, #8]
 800aeb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeb4:	f7fd faea 	bl	800848c <memset>
 800aeb8:	4620      	mov	r0, r4
 800aeba:	bd70      	pop	{r4, r5, r6, pc}

0800aebc <__sfp_lock_acquire>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__sfp_lock_acquire+0x8>)
 800aebe:	f000 bc26 	b.w	800b70e <__retarget_lock_acquire_recursive>
 800aec2:	bf00      	nop
 800aec4:	200047c1 	.word	0x200047c1

0800aec8 <__sfp_lock_release>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__sfp_lock_release+0x8>)
 800aeca:	f000 bc21 	b.w	800b710 <__retarget_lock_release_recursive>
 800aece:	bf00      	nop
 800aed0:	200047c1 	.word	0x200047c1

0800aed4 <__sinit_lock_acquire>:
 800aed4:	4801      	ldr	r0, [pc, #4]	; (800aedc <__sinit_lock_acquire+0x8>)
 800aed6:	f000 bc1a 	b.w	800b70e <__retarget_lock_acquire_recursive>
 800aeda:	bf00      	nop
 800aedc:	200047c2 	.word	0x200047c2

0800aee0 <__sinit_lock_release>:
 800aee0:	4801      	ldr	r0, [pc, #4]	; (800aee8 <__sinit_lock_release+0x8>)
 800aee2:	f000 bc15 	b.w	800b710 <__retarget_lock_release_recursive>
 800aee6:	bf00      	nop
 800aee8:	200047c2 	.word	0x200047c2

0800aeec <__sinit>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	4604      	mov	r4, r0
 800aef0:	f7ff fff0 	bl	800aed4 <__sinit_lock_acquire>
 800aef4:	69a3      	ldr	r3, [r4, #24]
 800aef6:	b11b      	cbz	r3, 800af00 <__sinit+0x14>
 800aef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aefc:	f7ff bff0 	b.w	800aee0 <__sinit_lock_release>
 800af00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af04:	6523      	str	r3, [r4, #80]	; 0x50
 800af06:	4b13      	ldr	r3, [pc, #76]	; (800af54 <__sinit+0x68>)
 800af08:	4a13      	ldr	r2, [pc, #76]	; (800af58 <__sinit+0x6c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800af0e:	42a3      	cmp	r3, r4
 800af10:	bf04      	itt	eq
 800af12:	2301      	moveq	r3, #1
 800af14:	61a3      	streq	r3, [r4, #24]
 800af16:	4620      	mov	r0, r4
 800af18:	f000 f820 	bl	800af5c <__sfp>
 800af1c:	6060      	str	r0, [r4, #4]
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f81c 	bl	800af5c <__sfp>
 800af24:	60a0      	str	r0, [r4, #8]
 800af26:	4620      	mov	r0, r4
 800af28:	f000 f818 	bl	800af5c <__sfp>
 800af2c:	2200      	movs	r2, #0
 800af2e:	60e0      	str	r0, [r4, #12]
 800af30:	2104      	movs	r1, #4
 800af32:	6860      	ldr	r0, [r4, #4]
 800af34:	f7ff ff82 	bl	800ae3c <std>
 800af38:	68a0      	ldr	r0, [r4, #8]
 800af3a:	2201      	movs	r2, #1
 800af3c:	2109      	movs	r1, #9
 800af3e:	f7ff ff7d 	bl	800ae3c <std>
 800af42:	68e0      	ldr	r0, [r4, #12]
 800af44:	2202      	movs	r2, #2
 800af46:	2112      	movs	r1, #18
 800af48:	f7ff ff78 	bl	800ae3c <std>
 800af4c:	2301      	movs	r3, #1
 800af4e:	61a3      	str	r3, [r4, #24]
 800af50:	e7d2      	b.n	800aef8 <__sinit+0xc>
 800af52:	bf00      	nop
 800af54:	0800cdc4 	.word	0x0800cdc4
 800af58:	0800ae85 	.word	0x0800ae85

0800af5c <__sfp>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	4607      	mov	r7, r0
 800af60:	f7ff ffac 	bl	800aebc <__sfp_lock_acquire>
 800af64:	4b1e      	ldr	r3, [pc, #120]	; (800afe0 <__sfp+0x84>)
 800af66:	681e      	ldr	r6, [r3, #0]
 800af68:	69b3      	ldr	r3, [r6, #24]
 800af6a:	b913      	cbnz	r3, 800af72 <__sfp+0x16>
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7ff ffbd 	bl	800aeec <__sinit>
 800af72:	3648      	adds	r6, #72	; 0x48
 800af74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af78:	3b01      	subs	r3, #1
 800af7a:	d503      	bpl.n	800af84 <__sfp+0x28>
 800af7c:	6833      	ldr	r3, [r6, #0]
 800af7e:	b30b      	cbz	r3, 800afc4 <__sfp+0x68>
 800af80:	6836      	ldr	r6, [r6, #0]
 800af82:	e7f7      	b.n	800af74 <__sfp+0x18>
 800af84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af88:	b9d5      	cbnz	r5, 800afc0 <__sfp+0x64>
 800af8a:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <__sfp+0x88>)
 800af8c:	60e3      	str	r3, [r4, #12]
 800af8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af92:	6665      	str	r5, [r4, #100]	; 0x64
 800af94:	f000 fbba 	bl	800b70c <__retarget_lock_init_recursive>
 800af98:	f7ff ff96 	bl	800aec8 <__sfp_lock_release>
 800af9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afa4:	6025      	str	r5, [r4, #0]
 800afa6:	61a5      	str	r5, [r4, #24]
 800afa8:	2208      	movs	r2, #8
 800afaa:	4629      	mov	r1, r5
 800afac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afb0:	f7fd fa6c 	bl	800848c <memset>
 800afb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afbc:	4620      	mov	r0, r4
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	3468      	adds	r4, #104	; 0x68
 800afc2:	e7d9      	b.n	800af78 <__sfp+0x1c>
 800afc4:	2104      	movs	r1, #4
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff ff62 	bl	800ae90 <__sfmoreglue>
 800afcc:	4604      	mov	r4, r0
 800afce:	6030      	str	r0, [r6, #0]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1d5      	bne.n	800af80 <__sfp+0x24>
 800afd4:	f7ff ff78 	bl	800aec8 <__sfp_lock_release>
 800afd8:	230c      	movs	r3, #12
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	e7ee      	b.n	800afbc <__sfp+0x60>
 800afde:	bf00      	nop
 800afe0:	0800cdc4 	.word	0x0800cdc4
 800afe4:	ffff0001 	.word	0xffff0001

0800afe8 <_fwalk_reent>:
 800afe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afec:	4606      	mov	r6, r0
 800afee:	4688      	mov	r8, r1
 800aff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aff4:	2700      	movs	r7, #0
 800aff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800affa:	f1b9 0901 	subs.w	r9, r9, #1
 800affe:	d505      	bpl.n	800b00c <_fwalk_reent+0x24>
 800b000:	6824      	ldr	r4, [r4, #0]
 800b002:	2c00      	cmp	r4, #0
 800b004:	d1f7      	bne.n	800aff6 <_fwalk_reent+0xe>
 800b006:	4638      	mov	r0, r7
 800b008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b00c:	89ab      	ldrh	r3, [r5, #12]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d907      	bls.n	800b022 <_fwalk_reent+0x3a>
 800b012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b016:	3301      	adds	r3, #1
 800b018:	d003      	beq.n	800b022 <_fwalk_reent+0x3a>
 800b01a:	4629      	mov	r1, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	47c0      	blx	r8
 800b020:	4307      	orrs	r7, r0
 800b022:	3568      	adds	r5, #104	; 0x68
 800b024:	e7e9      	b.n	800affa <_fwalk_reent+0x12>

0800b026 <rshift>:
 800b026:	6903      	ldr	r3, [r0, #16]
 800b028:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b02c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b030:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b034:	f100 0414 	add.w	r4, r0, #20
 800b038:	dd45      	ble.n	800b0c6 <rshift+0xa0>
 800b03a:	f011 011f 	ands.w	r1, r1, #31
 800b03e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b042:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b046:	d10c      	bne.n	800b062 <rshift+0x3c>
 800b048:	f100 0710 	add.w	r7, r0, #16
 800b04c:	4629      	mov	r1, r5
 800b04e:	42b1      	cmp	r1, r6
 800b050:	d334      	bcc.n	800b0bc <rshift+0x96>
 800b052:	1a9b      	subs	r3, r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	1eea      	subs	r2, r5, #3
 800b058:	4296      	cmp	r6, r2
 800b05a:	bf38      	it	cc
 800b05c:	2300      	movcc	r3, #0
 800b05e:	4423      	add	r3, r4
 800b060:	e015      	b.n	800b08e <rshift+0x68>
 800b062:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b066:	f1c1 0820 	rsb	r8, r1, #32
 800b06a:	40cf      	lsrs	r7, r1
 800b06c:	f105 0e04 	add.w	lr, r5, #4
 800b070:	46a1      	mov	r9, r4
 800b072:	4576      	cmp	r6, lr
 800b074:	46f4      	mov	ip, lr
 800b076:	d815      	bhi.n	800b0a4 <rshift+0x7e>
 800b078:	1a9a      	subs	r2, r3, r2
 800b07a:	0092      	lsls	r2, r2, #2
 800b07c:	3a04      	subs	r2, #4
 800b07e:	3501      	adds	r5, #1
 800b080:	42ae      	cmp	r6, r5
 800b082:	bf38      	it	cc
 800b084:	2200      	movcc	r2, #0
 800b086:	18a3      	adds	r3, r4, r2
 800b088:	50a7      	str	r7, [r4, r2]
 800b08a:	b107      	cbz	r7, 800b08e <rshift+0x68>
 800b08c:	3304      	adds	r3, #4
 800b08e:	1b1a      	subs	r2, r3, r4
 800b090:	42a3      	cmp	r3, r4
 800b092:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b096:	bf08      	it	eq
 800b098:	2300      	moveq	r3, #0
 800b09a:	6102      	str	r2, [r0, #16]
 800b09c:	bf08      	it	eq
 800b09e:	6143      	streq	r3, [r0, #20]
 800b0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0a4:	f8dc c000 	ldr.w	ip, [ip]
 800b0a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0ac:	ea4c 0707 	orr.w	r7, ip, r7
 800b0b0:	f849 7b04 	str.w	r7, [r9], #4
 800b0b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0b8:	40cf      	lsrs	r7, r1
 800b0ba:	e7da      	b.n	800b072 <rshift+0x4c>
 800b0bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0c4:	e7c3      	b.n	800b04e <rshift+0x28>
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	e7e1      	b.n	800b08e <rshift+0x68>

0800b0ca <__hexdig_fun>:
 800b0ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0ce:	2b09      	cmp	r3, #9
 800b0d0:	d802      	bhi.n	800b0d8 <__hexdig_fun+0xe>
 800b0d2:	3820      	subs	r0, #32
 800b0d4:	b2c0      	uxtb	r0, r0
 800b0d6:	4770      	bx	lr
 800b0d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0dc:	2b05      	cmp	r3, #5
 800b0de:	d801      	bhi.n	800b0e4 <__hexdig_fun+0x1a>
 800b0e0:	3847      	subs	r0, #71	; 0x47
 800b0e2:	e7f7      	b.n	800b0d4 <__hexdig_fun+0xa>
 800b0e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0e8:	2b05      	cmp	r3, #5
 800b0ea:	d801      	bhi.n	800b0f0 <__hexdig_fun+0x26>
 800b0ec:	3827      	subs	r0, #39	; 0x27
 800b0ee:	e7f1      	b.n	800b0d4 <__hexdig_fun+0xa>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	4770      	bx	lr

0800b0f4 <__gethex>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	ed2d 8b02 	vpush	{d8}
 800b0fc:	b089      	sub	sp, #36	; 0x24
 800b0fe:	ee08 0a10 	vmov	s16, r0
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	4bb4      	ldr	r3, [pc, #720]	; (800b3d8 <__gethex+0x2e4>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	4618      	mov	r0, r3
 800b10c:	468b      	mov	fp, r1
 800b10e:	4690      	mov	r8, r2
 800b110:	f7f5 f86e 	bl	80001f0 <strlen>
 800b114:	9b01      	ldr	r3, [sp, #4]
 800b116:	f8db 2000 	ldr.w	r2, [fp]
 800b11a:	4403      	add	r3, r0
 800b11c:	4682      	mov	sl, r0
 800b11e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b122:	9305      	str	r3, [sp, #20]
 800b124:	1c93      	adds	r3, r2, #2
 800b126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b12a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b12e:	32fe      	adds	r2, #254	; 0xfe
 800b130:	18d1      	adds	r1, r2, r3
 800b132:	461f      	mov	r7, r3
 800b134:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b138:	9100      	str	r1, [sp, #0]
 800b13a:	2830      	cmp	r0, #48	; 0x30
 800b13c:	d0f8      	beq.n	800b130 <__gethex+0x3c>
 800b13e:	f7ff ffc4 	bl	800b0ca <__hexdig_fun>
 800b142:	4604      	mov	r4, r0
 800b144:	2800      	cmp	r0, #0
 800b146:	d13a      	bne.n	800b1be <__gethex+0xca>
 800b148:	9901      	ldr	r1, [sp, #4]
 800b14a:	4652      	mov	r2, sl
 800b14c:	4638      	mov	r0, r7
 800b14e:	f001 fad6 	bl	800c6fe <strncmp>
 800b152:	4605      	mov	r5, r0
 800b154:	2800      	cmp	r0, #0
 800b156:	d168      	bne.n	800b22a <__gethex+0x136>
 800b158:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b15c:	eb07 060a 	add.w	r6, r7, sl
 800b160:	f7ff ffb3 	bl	800b0ca <__hexdig_fun>
 800b164:	2800      	cmp	r0, #0
 800b166:	d062      	beq.n	800b22e <__gethex+0x13a>
 800b168:	4633      	mov	r3, r6
 800b16a:	7818      	ldrb	r0, [r3, #0]
 800b16c:	2830      	cmp	r0, #48	; 0x30
 800b16e:	461f      	mov	r7, r3
 800b170:	f103 0301 	add.w	r3, r3, #1
 800b174:	d0f9      	beq.n	800b16a <__gethex+0x76>
 800b176:	f7ff ffa8 	bl	800b0ca <__hexdig_fun>
 800b17a:	2301      	movs	r3, #1
 800b17c:	fab0 f480 	clz	r4, r0
 800b180:	0964      	lsrs	r4, r4, #5
 800b182:	4635      	mov	r5, r6
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	463a      	mov	r2, r7
 800b188:	4616      	mov	r6, r2
 800b18a:	3201      	adds	r2, #1
 800b18c:	7830      	ldrb	r0, [r6, #0]
 800b18e:	f7ff ff9c 	bl	800b0ca <__hexdig_fun>
 800b192:	2800      	cmp	r0, #0
 800b194:	d1f8      	bne.n	800b188 <__gethex+0x94>
 800b196:	9901      	ldr	r1, [sp, #4]
 800b198:	4652      	mov	r2, sl
 800b19a:	4630      	mov	r0, r6
 800b19c:	f001 faaf 	bl	800c6fe <strncmp>
 800b1a0:	b980      	cbnz	r0, 800b1c4 <__gethex+0xd0>
 800b1a2:	b94d      	cbnz	r5, 800b1b8 <__gethex+0xc4>
 800b1a4:	eb06 050a 	add.w	r5, r6, sl
 800b1a8:	462a      	mov	r2, r5
 800b1aa:	4616      	mov	r6, r2
 800b1ac:	3201      	adds	r2, #1
 800b1ae:	7830      	ldrb	r0, [r6, #0]
 800b1b0:	f7ff ff8b 	bl	800b0ca <__hexdig_fun>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d1f8      	bne.n	800b1aa <__gethex+0xb6>
 800b1b8:	1bad      	subs	r5, r5, r6
 800b1ba:	00ad      	lsls	r5, r5, #2
 800b1bc:	e004      	b.n	800b1c8 <__gethex+0xd4>
 800b1be:	2400      	movs	r4, #0
 800b1c0:	4625      	mov	r5, r4
 800b1c2:	e7e0      	b.n	800b186 <__gethex+0x92>
 800b1c4:	2d00      	cmp	r5, #0
 800b1c6:	d1f7      	bne.n	800b1b8 <__gethex+0xc4>
 800b1c8:	7833      	ldrb	r3, [r6, #0]
 800b1ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1ce:	2b50      	cmp	r3, #80	; 0x50
 800b1d0:	d13b      	bne.n	800b24a <__gethex+0x156>
 800b1d2:	7873      	ldrb	r3, [r6, #1]
 800b1d4:	2b2b      	cmp	r3, #43	; 0x2b
 800b1d6:	d02c      	beq.n	800b232 <__gethex+0x13e>
 800b1d8:	2b2d      	cmp	r3, #45	; 0x2d
 800b1da:	d02e      	beq.n	800b23a <__gethex+0x146>
 800b1dc:	1c71      	adds	r1, r6, #1
 800b1de:	f04f 0900 	mov.w	r9, #0
 800b1e2:	7808      	ldrb	r0, [r1, #0]
 800b1e4:	f7ff ff71 	bl	800b0ca <__hexdig_fun>
 800b1e8:	1e43      	subs	r3, r0, #1
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b18      	cmp	r3, #24
 800b1ee:	d82c      	bhi.n	800b24a <__gethex+0x156>
 800b1f0:	f1a0 0210 	sub.w	r2, r0, #16
 800b1f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1f8:	f7ff ff67 	bl	800b0ca <__hexdig_fun>
 800b1fc:	1e43      	subs	r3, r0, #1
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b18      	cmp	r3, #24
 800b202:	d91d      	bls.n	800b240 <__gethex+0x14c>
 800b204:	f1b9 0f00 	cmp.w	r9, #0
 800b208:	d000      	beq.n	800b20c <__gethex+0x118>
 800b20a:	4252      	negs	r2, r2
 800b20c:	4415      	add	r5, r2
 800b20e:	f8cb 1000 	str.w	r1, [fp]
 800b212:	b1e4      	cbz	r4, 800b24e <__gethex+0x15a>
 800b214:	9b00      	ldr	r3, [sp, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bf14      	ite	ne
 800b21a:	2700      	movne	r7, #0
 800b21c:	2706      	moveq	r7, #6
 800b21e:	4638      	mov	r0, r7
 800b220:	b009      	add	sp, #36	; 0x24
 800b222:	ecbd 8b02 	vpop	{d8}
 800b226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22a:	463e      	mov	r6, r7
 800b22c:	4625      	mov	r5, r4
 800b22e:	2401      	movs	r4, #1
 800b230:	e7ca      	b.n	800b1c8 <__gethex+0xd4>
 800b232:	f04f 0900 	mov.w	r9, #0
 800b236:	1cb1      	adds	r1, r6, #2
 800b238:	e7d3      	b.n	800b1e2 <__gethex+0xee>
 800b23a:	f04f 0901 	mov.w	r9, #1
 800b23e:	e7fa      	b.n	800b236 <__gethex+0x142>
 800b240:	230a      	movs	r3, #10
 800b242:	fb03 0202 	mla	r2, r3, r2, r0
 800b246:	3a10      	subs	r2, #16
 800b248:	e7d4      	b.n	800b1f4 <__gethex+0x100>
 800b24a:	4631      	mov	r1, r6
 800b24c:	e7df      	b.n	800b20e <__gethex+0x11a>
 800b24e:	1bf3      	subs	r3, r6, r7
 800b250:	3b01      	subs	r3, #1
 800b252:	4621      	mov	r1, r4
 800b254:	2b07      	cmp	r3, #7
 800b256:	dc0b      	bgt.n	800b270 <__gethex+0x17c>
 800b258:	ee18 0a10 	vmov	r0, s16
 800b25c:	f000 fa78 	bl	800b750 <_Balloc>
 800b260:	4604      	mov	r4, r0
 800b262:	b940      	cbnz	r0, 800b276 <__gethex+0x182>
 800b264:	4b5d      	ldr	r3, [pc, #372]	; (800b3dc <__gethex+0x2e8>)
 800b266:	4602      	mov	r2, r0
 800b268:	21de      	movs	r1, #222	; 0xde
 800b26a:	485d      	ldr	r0, [pc, #372]	; (800b3e0 <__gethex+0x2ec>)
 800b26c:	f001 fb3c 	bl	800c8e8 <__assert_func>
 800b270:	3101      	adds	r1, #1
 800b272:	105b      	asrs	r3, r3, #1
 800b274:	e7ee      	b.n	800b254 <__gethex+0x160>
 800b276:	f100 0914 	add.w	r9, r0, #20
 800b27a:	f04f 0b00 	mov.w	fp, #0
 800b27e:	f1ca 0301 	rsb	r3, sl, #1
 800b282:	f8cd 9008 	str.w	r9, [sp, #8]
 800b286:	f8cd b000 	str.w	fp, [sp]
 800b28a:	9306      	str	r3, [sp, #24]
 800b28c:	42b7      	cmp	r7, r6
 800b28e:	d340      	bcc.n	800b312 <__gethex+0x21e>
 800b290:	9802      	ldr	r0, [sp, #8]
 800b292:	9b00      	ldr	r3, [sp, #0]
 800b294:	f840 3b04 	str.w	r3, [r0], #4
 800b298:	eba0 0009 	sub.w	r0, r0, r9
 800b29c:	1080      	asrs	r0, r0, #2
 800b29e:	0146      	lsls	r6, r0, #5
 800b2a0:	6120      	str	r0, [r4, #16]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 fb46 	bl	800b934 <__hi0bits>
 800b2a8:	1a30      	subs	r0, r6, r0
 800b2aa:	f8d8 6000 	ldr.w	r6, [r8]
 800b2ae:	42b0      	cmp	r0, r6
 800b2b0:	dd63      	ble.n	800b37a <__gethex+0x286>
 800b2b2:	1b87      	subs	r7, r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 feea 	bl	800c090 <__any_on>
 800b2bc:	4682      	mov	sl, r0
 800b2be:	b1a8      	cbz	r0, 800b2ec <__gethex+0x1f8>
 800b2c0:	1e7b      	subs	r3, r7, #1
 800b2c2:	1159      	asrs	r1, r3, #5
 800b2c4:	f003 021f 	and.w	r2, r3, #31
 800b2c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2cc:	f04f 0a01 	mov.w	sl, #1
 800b2d0:	fa0a f202 	lsl.w	r2, sl, r2
 800b2d4:	420a      	tst	r2, r1
 800b2d6:	d009      	beq.n	800b2ec <__gethex+0x1f8>
 800b2d8:	4553      	cmp	r3, sl
 800b2da:	dd05      	ble.n	800b2e8 <__gethex+0x1f4>
 800b2dc:	1eb9      	subs	r1, r7, #2
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 fed6 	bl	800c090 <__any_on>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d145      	bne.n	800b374 <__gethex+0x280>
 800b2e8:	f04f 0a02 	mov.w	sl, #2
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff fe99 	bl	800b026 <rshift>
 800b2f4:	443d      	add	r5, r7
 800b2f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2fa:	42ab      	cmp	r3, r5
 800b2fc:	da4c      	bge.n	800b398 <__gethex+0x2a4>
 800b2fe:	ee18 0a10 	vmov	r0, s16
 800b302:	4621      	mov	r1, r4
 800b304:	f000 fa64 	bl	800b7d0 <_Bfree>
 800b308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b30a:	2300      	movs	r3, #0
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	27a3      	movs	r7, #163	; 0xa3
 800b310:	e785      	b.n	800b21e <__gethex+0x12a>
 800b312:	1e73      	subs	r3, r6, #1
 800b314:	9a05      	ldr	r2, [sp, #20]
 800b316:	9303      	str	r3, [sp, #12]
 800b318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d019      	beq.n	800b354 <__gethex+0x260>
 800b320:	f1bb 0f20 	cmp.w	fp, #32
 800b324:	d107      	bne.n	800b336 <__gethex+0x242>
 800b326:	9b02      	ldr	r3, [sp, #8]
 800b328:	9a00      	ldr	r2, [sp, #0]
 800b32a:	f843 2b04 	str.w	r2, [r3], #4
 800b32e:	9302      	str	r3, [sp, #8]
 800b330:	2300      	movs	r3, #0
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	469b      	mov	fp, r3
 800b336:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b33a:	f7ff fec6 	bl	800b0ca <__hexdig_fun>
 800b33e:	9b00      	ldr	r3, [sp, #0]
 800b340:	f000 000f 	and.w	r0, r0, #15
 800b344:	fa00 f00b 	lsl.w	r0, r0, fp
 800b348:	4303      	orrs	r3, r0
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	f10b 0b04 	add.w	fp, fp, #4
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	e00d      	b.n	800b370 <__gethex+0x27c>
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	9a06      	ldr	r2, [sp, #24]
 800b358:	4413      	add	r3, r2
 800b35a:	42bb      	cmp	r3, r7
 800b35c:	d3e0      	bcc.n	800b320 <__gethex+0x22c>
 800b35e:	4618      	mov	r0, r3
 800b360:	9901      	ldr	r1, [sp, #4]
 800b362:	9307      	str	r3, [sp, #28]
 800b364:	4652      	mov	r2, sl
 800b366:	f001 f9ca 	bl	800c6fe <strncmp>
 800b36a:	9b07      	ldr	r3, [sp, #28]
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d1d7      	bne.n	800b320 <__gethex+0x22c>
 800b370:	461e      	mov	r6, r3
 800b372:	e78b      	b.n	800b28c <__gethex+0x198>
 800b374:	f04f 0a03 	mov.w	sl, #3
 800b378:	e7b8      	b.n	800b2ec <__gethex+0x1f8>
 800b37a:	da0a      	bge.n	800b392 <__gethex+0x29e>
 800b37c:	1a37      	subs	r7, r6, r0
 800b37e:	4621      	mov	r1, r4
 800b380:	ee18 0a10 	vmov	r0, s16
 800b384:	463a      	mov	r2, r7
 800b386:	f000 fc3f 	bl	800bc08 <__lshift>
 800b38a:	1bed      	subs	r5, r5, r7
 800b38c:	4604      	mov	r4, r0
 800b38e:	f100 0914 	add.w	r9, r0, #20
 800b392:	f04f 0a00 	mov.w	sl, #0
 800b396:	e7ae      	b.n	800b2f6 <__gethex+0x202>
 800b398:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b39c:	42a8      	cmp	r0, r5
 800b39e:	dd72      	ble.n	800b486 <__gethex+0x392>
 800b3a0:	1b45      	subs	r5, r0, r5
 800b3a2:	42ae      	cmp	r6, r5
 800b3a4:	dc36      	bgt.n	800b414 <__gethex+0x320>
 800b3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d02a      	beq.n	800b404 <__gethex+0x310>
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	d02c      	beq.n	800b40c <__gethex+0x318>
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d11c      	bne.n	800b3f0 <__gethex+0x2fc>
 800b3b6:	42ae      	cmp	r6, r5
 800b3b8:	d11a      	bne.n	800b3f0 <__gethex+0x2fc>
 800b3ba:	2e01      	cmp	r6, #1
 800b3bc:	d112      	bne.n	800b3e4 <__gethex+0x2f0>
 800b3be:	9a04      	ldr	r2, [sp, #16]
 800b3c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	f8c9 3000 	str.w	r3, [r9]
 800b3ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3d0:	2762      	movs	r7, #98	; 0x62
 800b3d2:	601c      	str	r4, [r3, #0]
 800b3d4:	e723      	b.n	800b21e <__gethex+0x12a>
 800b3d6:	bf00      	nop
 800b3d8:	0800d0b4 	.word	0x0800d0b4
 800b3dc:	0800cfd8 	.word	0x0800cfd8
 800b3e0:	0800d04c 	.word	0x0800d04c
 800b3e4:	1e71      	subs	r1, r6, #1
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 fe52 	bl	800c090 <__any_on>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d1e6      	bne.n	800b3be <__gethex+0x2ca>
 800b3f0:	ee18 0a10 	vmov	r0, s16
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f000 f9eb 	bl	800b7d0 <_Bfree>
 800b3fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	2750      	movs	r7, #80	; 0x50
 800b402:	e70c      	b.n	800b21e <__gethex+0x12a>
 800b404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1f2      	bne.n	800b3f0 <__gethex+0x2fc>
 800b40a:	e7d8      	b.n	800b3be <__gethex+0x2ca>
 800b40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1d5      	bne.n	800b3be <__gethex+0x2ca>
 800b412:	e7ed      	b.n	800b3f0 <__gethex+0x2fc>
 800b414:	1e6f      	subs	r7, r5, #1
 800b416:	f1ba 0f00 	cmp.w	sl, #0
 800b41a:	d131      	bne.n	800b480 <__gethex+0x38c>
 800b41c:	b127      	cbz	r7, 800b428 <__gethex+0x334>
 800b41e:	4639      	mov	r1, r7
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fe35 	bl	800c090 <__any_on>
 800b426:	4682      	mov	sl, r0
 800b428:	117b      	asrs	r3, r7, #5
 800b42a:	2101      	movs	r1, #1
 800b42c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b430:	f007 071f 	and.w	r7, r7, #31
 800b434:	fa01 f707 	lsl.w	r7, r1, r7
 800b438:	421f      	tst	r7, r3
 800b43a:	4629      	mov	r1, r5
 800b43c:	4620      	mov	r0, r4
 800b43e:	bf18      	it	ne
 800b440:	f04a 0a02 	orrne.w	sl, sl, #2
 800b444:	1b76      	subs	r6, r6, r5
 800b446:	f7ff fdee 	bl	800b026 <rshift>
 800b44a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b44e:	2702      	movs	r7, #2
 800b450:	f1ba 0f00 	cmp.w	sl, #0
 800b454:	d048      	beq.n	800b4e8 <__gethex+0x3f4>
 800b456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d015      	beq.n	800b48a <__gethex+0x396>
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d017      	beq.n	800b492 <__gethex+0x39e>
 800b462:	2b01      	cmp	r3, #1
 800b464:	d109      	bne.n	800b47a <__gethex+0x386>
 800b466:	f01a 0f02 	tst.w	sl, #2
 800b46a:	d006      	beq.n	800b47a <__gethex+0x386>
 800b46c:	f8d9 0000 	ldr.w	r0, [r9]
 800b470:	ea4a 0a00 	orr.w	sl, sl, r0
 800b474:	f01a 0f01 	tst.w	sl, #1
 800b478:	d10e      	bne.n	800b498 <__gethex+0x3a4>
 800b47a:	f047 0710 	orr.w	r7, r7, #16
 800b47e:	e033      	b.n	800b4e8 <__gethex+0x3f4>
 800b480:	f04f 0a01 	mov.w	sl, #1
 800b484:	e7d0      	b.n	800b428 <__gethex+0x334>
 800b486:	2701      	movs	r7, #1
 800b488:	e7e2      	b.n	800b450 <__gethex+0x35c>
 800b48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b48c:	f1c3 0301 	rsb	r3, r3, #1
 800b490:	9315      	str	r3, [sp, #84]	; 0x54
 800b492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0f0      	beq.n	800b47a <__gethex+0x386>
 800b498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b49c:	f104 0314 	add.w	r3, r4, #20
 800b4a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b4a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b4a8:	f04f 0c00 	mov.w	ip, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b4b6:	d01c      	beq.n	800b4f2 <__gethex+0x3fe>
 800b4b8:	3201      	adds	r2, #1
 800b4ba:	6002      	str	r2, [r0, #0]
 800b4bc:	2f02      	cmp	r7, #2
 800b4be:	f104 0314 	add.w	r3, r4, #20
 800b4c2:	d13f      	bne.n	800b544 <__gethex+0x450>
 800b4c4:	f8d8 2000 	ldr.w	r2, [r8]
 800b4c8:	3a01      	subs	r2, #1
 800b4ca:	42b2      	cmp	r2, r6
 800b4cc:	d10a      	bne.n	800b4e4 <__gethex+0x3f0>
 800b4ce:	1171      	asrs	r1, r6, #5
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4d6:	f006 061f 	and.w	r6, r6, #31
 800b4da:	fa02 f606 	lsl.w	r6, r2, r6
 800b4de:	421e      	tst	r6, r3
 800b4e0:	bf18      	it	ne
 800b4e2:	4617      	movne	r7, r2
 800b4e4:	f047 0720 	orr.w	r7, r7, #32
 800b4e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4ea:	601c      	str	r4, [r3, #0]
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	601d      	str	r5, [r3, #0]
 800b4f0:	e695      	b.n	800b21e <__gethex+0x12a>
 800b4f2:	4299      	cmp	r1, r3
 800b4f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4f8:	d8d8      	bhi.n	800b4ac <__gethex+0x3b8>
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	459b      	cmp	fp, r3
 800b4fe:	db19      	blt.n	800b534 <__gethex+0x440>
 800b500:	6861      	ldr	r1, [r4, #4]
 800b502:	ee18 0a10 	vmov	r0, s16
 800b506:	3101      	adds	r1, #1
 800b508:	f000 f922 	bl	800b750 <_Balloc>
 800b50c:	4681      	mov	r9, r0
 800b50e:	b918      	cbnz	r0, 800b518 <__gethex+0x424>
 800b510:	4b1a      	ldr	r3, [pc, #104]	; (800b57c <__gethex+0x488>)
 800b512:	4602      	mov	r2, r0
 800b514:	2184      	movs	r1, #132	; 0x84
 800b516:	e6a8      	b.n	800b26a <__gethex+0x176>
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	3202      	adds	r2, #2
 800b51c:	f104 010c 	add.w	r1, r4, #12
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	300c      	adds	r0, #12
 800b524:	f7fc ffa4 	bl	8008470 <memcpy>
 800b528:	4621      	mov	r1, r4
 800b52a:	ee18 0a10 	vmov	r0, s16
 800b52e:	f000 f94f 	bl	800b7d0 <_Bfree>
 800b532:	464c      	mov	r4, r9
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b53c:	6122      	str	r2, [r4, #16]
 800b53e:	2201      	movs	r2, #1
 800b540:	615a      	str	r2, [r3, #20]
 800b542:	e7bb      	b.n	800b4bc <__gethex+0x3c8>
 800b544:	6922      	ldr	r2, [r4, #16]
 800b546:	455a      	cmp	r2, fp
 800b548:	dd0b      	ble.n	800b562 <__gethex+0x46e>
 800b54a:	2101      	movs	r1, #1
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7ff fd6a 	bl	800b026 <rshift>
 800b552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b556:	3501      	adds	r5, #1
 800b558:	42ab      	cmp	r3, r5
 800b55a:	f6ff aed0 	blt.w	800b2fe <__gethex+0x20a>
 800b55e:	2701      	movs	r7, #1
 800b560:	e7c0      	b.n	800b4e4 <__gethex+0x3f0>
 800b562:	f016 061f 	ands.w	r6, r6, #31
 800b566:	d0fa      	beq.n	800b55e <__gethex+0x46a>
 800b568:	4453      	add	r3, sl
 800b56a:	f1c6 0620 	rsb	r6, r6, #32
 800b56e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b572:	f000 f9df 	bl	800b934 <__hi0bits>
 800b576:	42b0      	cmp	r0, r6
 800b578:	dbe7      	blt.n	800b54a <__gethex+0x456>
 800b57a:	e7f0      	b.n	800b55e <__gethex+0x46a>
 800b57c:	0800cfd8 	.word	0x0800cfd8

0800b580 <L_shift>:
 800b580:	f1c2 0208 	rsb	r2, r2, #8
 800b584:	0092      	lsls	r2, r2, #2
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	f1c2 0620 	rsb	r6, r2, #32
 800b58c:	6843      	ldr	r3, [r0, #4]
 800b58e:	6804      	ldr	r4, [r0, #0]
 800b590:	fa03 f506 	lsl.w	r5, r3, r6
 800b594:	432c      	orrs	r4, r5
 800b596:	40d3      	lsrs	r3, r2
 800b598:	6004      	str	r4, [r0, #0]
 800b59a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b59e:	4288      	cmp	r0, r1
 800b5a0:	d3f4      	bcc.n	800b58c <L_shift+0xc>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}

0800b5a4 <__match>:
 800b5a4:	b530      	push	{r4, r5, lr}
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ae:	b914      	cbnz	r4, 800b5b6 <__match+0x12>
 800b5b0:	6003      	str	r3, [r0, #0]
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	bd30      	pop	{r4, r5, pc}
 800b5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5be:	2d19      	cmp	r5, #25
 800b5c0:	bf98      	it	ls
 800b5c2:	3220      	addls	r2, #32
 800b5c4:	42a2      	cmp	r2, r4
 800b5c6:	d0f0      	beq.n	800b5aa <__match+0x6>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e7f3      	b.n	800b5b4 <__match+0x10>

0800b5cc <__hexnan>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	680b      	ldr	r3, [r1, #0]
 800b5d2:	115e      	asrs	r6, r3, #5
 800b5d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5d8:	f013 031f 	ands.w	r3, r3, #31
 800b5dc:	b087      	sub	sp, #28
 800b5de:	bf18      	it	ne
 800b5e0:	3604      	addne	r6, #4
 800b5e2:	2500      	movs	r5, #0
 800b5e4:	1f37      	subs	r7, r6, #4
 800b5e6:	4690      	mov	r8, r2
 800b5e8:	6802      	ldr	r2, [r0, #0]
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	4682      	mov	sl, r0
 800b5ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5f2:	46b9      	mov	r9, r7
 800b5f4:	463c      	mov	r4, r7
 800b5f6:	9502      	str	r5, [sp, #8]
 800b5f8:	46ab      	mov	fp, r5
 800b5fa:	7851      	ldrb	r1, [r2, #1]
 800b5fc:	1c53      	adds	r3, r2, #1
 800b5fe:	9303      	str	r3, [sp, #12]
 800b600:	b341      	cbz	r1, 800b654 <__hexnan+0x88>
 800b602:	4608      	mov	r0, r1
 800b604:	9205      	str	r2, [sp, #20]
 800b606:	9104      	str	r1, [sp, #16]
 800b608:	f7ff fd5f 	bl	800b0ca <__hexdig_fun>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d14f      	bne.n	800b6b0 <__hexnan+0xe4>
 800b610:	9904      	ldr	r1, [sp, #16]
 800b612:	9a05      	ldr	r2, [sp, #20]
 800b614:	2920      	cmp	r1, #32
 800b616:	d818      	bhi.n	800b64a <__hexnan+0x7e>
 800b618:	9b02      	ldr	r3, [sp, #8]
 800b61a:	459b      	cmp	fp, r3
 800b61c:	dd13      	ble.n	800b646 <__hexnan+0x7a>
 800b61e:	454c      	cmp	r4, r9
 800b620:	d206      	bcs.n	800b630 <__hexnan+0x64>
 800b622:	2d07      	cmp	r5, #7
 800b624:	dc04      	bgt.n	800b630 <__hexnan+0x64>
 800b626:	462a      	mov	r2, r5
 800b628:	4649      	mov	r1, r9
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff ffa8 	bl	800b580 <L_shift>
 800b630:	4544      	cmp	r4, r8
 800b632:	d950      	bls.n	800b6d6 <__hexnan+0x10a>
 800b634:	2300      	movs	r3, #0
 800b636:	f1a4 0904 	sub.w	r9, r4, #4
 800b63a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b63e:	f8cd b008 	str.w	fp, [sp, #8]
 800b642:	464c      	mov	r4, r9
 800b644:	461d      	mov	r5, r3
 800b646:	9a03      	ldr	r2, [sp, #12]
 800b648:	e7d7      	b.n	800b5fa <__hexnan+0x2e>
 800b64a:	2929      	cmp	r1, #41	; 0x29
 800b64c:	d156      	bne.n	800b6fc <__hexnan+0x130>
 800b64e:	3202      	adds	r2, #2
 800b650:	f8ca 2000 	str.w	r2, [sl]
 800b654:	f1bb 0f00 	cmp.w	fp, #0
 800b658:	d050      	beq.n	800b6fc <__hexnan+0x130>
 800b65a:	454c      	cmp	r4, r9
 800b65c:	d206      	bcs.n	800b66c <__hexnan+0xa0>
 800b65e:	2d07      	cmp	r5, #7
 800b660:	dc04      	bgt.n	800b66c <__hexnan+0xa0>
 800b662:	462a      	mov	r2, r5
 800b664:	4649      	mov	r1, r9
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff ff8a 	bl	800b580 <L_shift>
 800b66c:	4544      	cmp	r4, r8
 800b66e:	d934      	bls.n	800b6da <__hexnan+0x10e>
 800b670:	f1a8 0204 	sub.w	r2, r8, #4
 800b674:	4623      	mov	r3, r4
 800b676:	f853 1b04 	ldr.w	r1, [r3], #4
 800b67a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b67e:	429f      	cmp	r7, r3
 800b680:	d2f9      	bcs.n	800b676 <__hexnan+0xaa>
 800b682:	1b3b      	subs	r3, r7, r4
 800b684:	f023 0303 	bic.w	r3, r3, #3
 800b688:	3304      	adds	r3, #4
 800b68a:	3401      	adds	r4, #1
 800b68c:	3e03      	subs	r6, #3
 800b68e:	42b4      	cmp	r4, r6
 800b690:	bf88      	it	hi
 800b692:	2304      	movhi	r3, #4
 800b694:	4443      	add	r3, r8
 800b696:	2200      	movs	r2, #0
 800b698:	f843 2b04 	str.w	r2, [r3], #4
 800b69c:	429f      	cmp	r7, r3
 800b69e:	d2fb      	bcs.n	800b698 <__hexnan+0xcc>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	b91b      	cbnz	r3, 800b6ac <__hexnan+0xe0>
 800b6a4:	4547      	cmp	r7, r8
 800b6a6:	d127      	bne.n	800b6f8 <__hexnan+0x12c>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	2005      	movs	r0, #5
 800b6ae:	e026      	b.n	800b6fe <__hexnan+0x132>
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	2d08      	cmp	r5, #8
 800b6b4:	f10b 0b01 	add.w	fp, fp, #1
 800b6b8:	dd06      	ble.n	800b6c8 <__hexnan+0xfc>
 800b6ba:	4544      	cmp	r4, r8
 800b6bc:	d9c3      	bls.n	800b646 <__hexnan+0x7a>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6c4:	2501      	movs	r5, #1
 800b6c6:	3c04      	subs	r4, #4
 800b6c8:	6822      	ldr	r2, [r4, #0]
 800b6ca:	f000 000f 	and.w	r0, r0, #15
 800b6ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6d2:	6022      	str	r2, [r4, #0]
 800b6d4:	e7b7      	b.n	800b646 <__hexnan+0x7a>
 800b6d6:	2508      	movs	r5, #8
 800b6d8:	e7b5      	b.n	800b646 <__hexnan+0x7a>
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0df      	beq.n	800b6a0 <__hexnan+0xd4>
 800b6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e4:	f1c3 0320 	rsb	r3, r3, #32
 800b6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6f0:	401a      	ands	r2, r3
 800b6f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6f6:	e7d3      	b.n	800b6a0 <__hexnan+0xd4>
 800b6f8:	3f04      	subs	r7, #4
 800b6fa:	e7d1      	b.n	800b6a0 <__hexnan+0xd4>
 800b6fc:	2004      	movs	r0, #4
 800b6fe:	b007      	add	sp, #28
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b704 <_localeconv_r>:
 800b704:	4800      	ldr	r0, [pc, #0]	; (800b708 <_localeconv_r+0x4>)
 800b706:	4770      	bx	lr
 800b708:	20000168 	.word	0x20000168

0800b70c <__retarget_lock_init_recursive>:
 800b70c:	4770      	bx	lr

0800b70e <__retarget_lock_acquire_recursive>:
 800b70e:	4770      	bx	lr

0800b710 <__retarget_lock_release_recursive>:
 800b710:	4770      	bx	lr

0800b712 <__ascii_mbtowc>:
 800b712:	b082      	sub	sp, #8
 800b714:	b901      	cbnz	r1, 800b718 <__ascii_mbtowc+0x6>
 800b716:	a901      	add	r1, sp, #4
 800b718:	b142      	cbz	r2, 800b72c <__ascii_mbtowc+0x1a>
 800b71a:	b14b      	cbz	r3, 800b730 <__ascii_mbtowc+0x1e>
 800b71c:	7813      	ldrb	r3, [r2, #0]
 800b71e:	600b      	str	r3, [r1, #0]
 800b720:	7812      	ldrb	r2, [r2, #0]
 800b722:	1e10      	subs	r0, r2, #0
 800b724:	bf18      	it	ne
 800b726:	2001      	movne	r0, #1
 800b728:	b002      	add	sp, #8
 800b72a:	4770      	bx	lr
 800b72c:	4610      	mov	r0, r2
 800b72e:	e7fb      	b.n	800b728 <__ascii_mbtowc+0x16>
 800b730:	f06f 0001 	mvn.w	r0, #1
 800b734:	e7f8      	b.n	800b728 <__ascii_mbtowc+0x16>
	...

0800b738 <__malloc_lock>:
 800b738:	4801      	ldr	r0, [pc, #4]	; (800b740 <__malloc_lock+0x8>)
 800b73a:	f7ff bfe8 	b.w	800b70e <__retarget_lock_acquire_recursive>
 800b73e:	bf00      	nop
 800b740:	200047c0 	.word	0x200047c0

0800b744 <__malloc_unlock>:
 800b744:	4801      	ldr	r0, [pc, #4]	; (800b74c <__malloc_unlock+0x8>)
 800b746:	f7ff bfe3 	b.w	800b710 <__retarget_lock_release_recursive>
 800b74a:	bf00      	nop
 800b74c:	200047c0 	.word	0x200047c0

0800b750 <_Balloc>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b754:	4604      	mov	r4, r0
 800b756:	460d      	mov	r5, r1
 800b758:	b976      	cbnz	r6, 800b778 <_Balloc+0x28>
 800b75a:	2010      	movs	r0, #16
 800b75c:	f7fc fe80 	bl	8008460 <malloc>
 800b760:	4602      	mov	r2, r0
 800b762:	6260      	str	r0, [r4, #36]	; 0x24
 800b764:	b920      	cbnz	r0, 800b770 <_Balloc+0x20>
 800b766:	4b18      	ldr	r3, [pc, #96]	; (800b7c8 <_Balloc+0x78>)
 800b768:	4818      	ldr	r0, [pc, #96]	; (800b7cc <_Balloc+0x7c>)
 800b76a:	2166      	movs	r1, #102	; 0x66
 800b76c:	f001 f8bc 	bl	800c8e8 <__assert_func>
 800b770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b774:	6006      	str	r6, [r0, #0]
 800b776:	60c6      	str	r6, [r0, #12]
 800b778:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b77a:	68f3      	ldr	r3, [r6, #12]
 800b77c:	b183      	cbz	r3, 800b7a0 <_Balloc+0x50>
 800b77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b786:	b9b8      	cbnz	r0, 800b7b8 <_Balloc+0x68>
 800b788:	2101      	movs	r1, #1
 800b78a:	fa01 f605 	lsl.w	r6, r1, r5
 800b78e:	1d72      	adds	r2, r6, #5
 800b790:	0092      	lsls	r2, r2, #2
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fc9d 	bl	800c0d2 <_calloc_r>
 800b798:	b160      	cbz	r0, 800b7b4 <_Balloc+0x64>
 800b79a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b79e:	e00e      	b.n	800b7be <_Balloc+0x6e>
 800b7a0:	2221      	movs	r2, #33	; 0x21
 800b7a2:	2104      	movs	r1, #4
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f000 fc94 	bl	800c0d2 <_calloc_r>
 800b7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ac:	60f0      	str	r0, [r6, #12]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1e4      	bne.n	800b77e <_Balloc+0x2e>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
 800b7b8:	6802      	ldr	r2, [r0, #0]
 800b7ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7c4:	e7f7      	b.n	800b7b6 <_Balloc+0x66>
 800b7c6:	bf00      	nop
 800b7c8:	0800cf66 	.word	0x0800cf66
 800b7cc:	0800d0c8 	.word	0x0800d0c8

0800b7d0 <_Bfree>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	b976      	cbnz	r6, 800b7f8 <_Bfree+0x28>
 800b7da:	2010      	movs	r0, #16
 800b7dc:	f7fc fe40 	bl	8008460 <malloc>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	6268      	str	r0, [r5, #36]	; 0x24
 800b7e4:	b920      	cbnz	r0, 800b7f0 <_Bfree+0x20>
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <_Bfree+0x3c>)
 800b7e8:	4809      	ldr	r0, [pc, #36]	; (800b810 <_Bfree+0x40>)
 800b7ea:	218a      	movs	r1, #138	; 0x8a
 800b7ec:	f001 f87c 	bl	800c8e8 <__assert_func>
 800b7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f4:	6006      	str	r6, [r0, #0]
 800b7f6:	60c6      	str	r6, [r0, #12]
 800b7f8:	b13c      	cbz	r4, 800b80a <_Bfree+0x3a>
 800b7fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7fc:	6862      	ldr	r2, [r4, #4]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b804:	6021      	str	r1, [r4, #0]
 800b806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b80a:	bd70      	pop	{r4, r5, r6, pc}
 800b80c:	0800cf66 	.word	0x0800cf66
 800b810:	0800d0c8 	.word	0x0800d0c8

0800b814 <__multadd>:
 800b814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b818:	690d      	ldr	r5, [r1, #16]
 800b81a:	4607      	mov	r7, r0
 800b81c:	460c      	mov	r4, r1
 800b81e:	461e      	mov	r6, r3
 800b820:	f101 0c14 	add.w	ip, r1, #20
 800b824:	2000      	movs	r0, #0
 800b826:	f8dc 3000 	ldr.w	r3, [ip]
 800b82a:	b299      	uxth	r1, r3
 800b82c:	fb02 6101 	mla	r1, r2, r1, r6
 800b830:	0c1e      	lsrs	r6, r3, #16
 800b832:	0c0b      	lsrs	r3, r1, #16
 800b834:	fb02 3306 	mla	r3, r2, r6, r3
 800b838:	b289      	uxth	r1, r1
 800b83a:	3001      	adds	r0, #1
 800b83c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b840:	4285      	cmp	r5, r0
 800b842:	f84c 1b04 	str.w	r1, [ip], #4
 800b846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b84a:	dcec      	bgt.n	800b826 <__multadd+0x12>
 800b84c:	b30e      	cbz	r6, 800b892 <__multadd+0x7e>
 800b84e:	68a3      	ldr	r3, [r4, #8]
 800b850:	42ab      	cmp	r3, r5
 800b852:	dc19      	bgt.n	800b888 <__multadd+0x74>
 800b854:	6861      	ldr	r1, [r4, #4]
 800b856:	4638      	mov	r0, r7
 800b858:	3101      	adds	r1, #1
 800b85a:	f7ff ff79 	bl	800b750 <_Balloc>
 800b85e:	4680      	mov	r8, r0
 800b860:	b928      	cbnz	r0, 800b86e <__multadd+0x5a>
 800b862:	4602      	mov	r2, r0
 800b864:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <__multadd+0x84>)
 800b866:	480d      	ldr	r0, [pc, #52]	; (800b89c <__multadd+0x88>)
 800b868:	21b5      	movs	r1, #181	; 0xb5
 800b86a:	f001 f83d 	bl	800c8e8 <__assert_func>
 800b86e:	6922      	ldr	r2, [r4, #16]
 800b870:	3202      	adds	r2, #2
 800b872:	f104 010c 	add.w	r1, r4, #12
 800b876:	0092      	lsls	r2, r2, #2
 800b878:	300c      	adds	r0, #12
 800b87a:	f7fc fdf9 	bl	8008470 <memcpy>
 800b87e:	4621      	mov	r1, r4
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff ffa5 	bl	800b7d0 <_Bfree>
 800b886:	4644      	mov	r4, r8
 800b888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b88c:	3501      	adds	r5, #1
 800b88e:	615e      	str	r6, [r3, #20]
 800b890:	6125      	str	r5, [r4, #16]
 800b892:	4620      	mov	r0, r4
 800b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b898:	0800cfd8 	.word	0x0800cfd8
 800b89c:	0800d0c8 	.word	0x0800d0c8

0800b8a0 <__s2b>:
 800b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	4615      	mov	r5, r2
 800b8a8:	461f      	mov	r7, r3
 800b8aa:	2209      	movs	r2, #9
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	db09      	blt.n	800b8d0 <__s2b+0x30>
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7ff ff47 	bl	800b750 <_Balloc>
 800b8c2:	b940      	cbnz	r0, 800b8d6 <__s2b+0x36>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	4b19      	ldr	r3, [pc, #100]	; (800b92c <__s2b+0x8c>)
 800b8c8:	4819      	ldr	r0, [pc, #100]	; (800b930 <__s2b+0x90>)
 800b8ca:	21ce      	movs	r1, #206	; 0xce
 800b8cc:	f001 f80c 	bl	800c8e8 <__assert_func>
 800b8d0:	0052      	lsls	r2, r2, #1
 800b8d2:	3101      	adds	r1, #1
 800b8d4:	e7f0      	b.n	800b8b8 <__s2b+0x18>
 800b8d6:	9b08      	ldr	r3, [sp, #32]
 800b8d8:	6143      	str	r3, [r0, #20]
 800b8da:	2d09      	cmp	r5, #9
 800b8dc:	f04f 0301 	mov.w	r3, #1
 800b8e0:	6103      	str	r3, [r0, #16]
 800b8e2:	dd16      	ble.n	800b912 <__s2b+0x72>
 800b8e4:	f104 0909 	add.w	r9, r4, #9
 800b8e8:	46c8      	mov	r8, r9
 800b8ea:	442c      	add	r4, r5
 800b8ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	3b30      	subs	r3, #48	; 0x30
 800b8f4:	220a      	movs	r2, #10
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ff8c 	bl	800b814 <__multadd>
 800b8fc:	45a0      	cmp	r8, r4
 800b8fe:	d1f5      	bne.n	800b8ec <__s2b+0x4c>
 800b900:	f1a5 0408 	sub.w	r4, r5, #8
 800b904:	444c      	add	r4, r9
 800b906:	1b2d      	subs	r5, r5, r4
 800b908:	1963      	adds	r3, r4, r5
 800b90a:	42bb      	cmp	r3, r7
 800b90c:	db04      	blt.n	800b918 <__s2b+0x78>
 800b90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b912:	340a      	adds	r4, #10
 800b914:	2509      	movs	r5, #9
 800b916:	e7f6      	b.n	800b906 <__s2b+0x66>
 800b918:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b91c:	4601      	mov	r1, r0
 800b91e:	3b30      	subs	r3, #48	; 0x30
 800b920:	220a      	movs	r2, #10
 800b922:	4630      	mov	r0, r6
 800b924:	f7ff ff76 	bl	800b814 <__multadd>
 800b928:	e7ee      	b.n	800b908 <__s2b+0x68>
 800b92a:	bf00      	nop
 800b92c:	0800cfd8 	.word	0x0800cfd8
 800b930:	0800d0c8 	.word	0x0800d0c8

0800b934 <__hi0bits>:
 800b934:	0c03      	lsrs	r3, r0, #16
 800b936:	041b      	lsls	r3, r3, #16
 800b938:	b9d3      	cbnz	r3, 800b970 <__hi0bits+0x3c>
 800b93a:	0400      	lsls	r0, r0, #16
 800b93c:	2310      	movs	r3, #16
 800b93e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b942:	bf04      	itt	eq
 800b944:	0200      	lsleq	r0, r0, #8
 800b946:	3308      	addeq	r3, #8
 800b948:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b94c:	bf04      	itt	eq
 800b94e:	0100      	lsleq	r0, r0, #4
 800b950:	3304      	addeq	r3, #4
 800b952:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b956:	bf04      	itt	eq
 800b958:	0080      	lsleq	r0, r0, #2
 800b95a:	3302      	addeq	r3, #2
 800b95c:	2800      	cmp	r0, #0
 800b95e:	db05      	blt.n	800b96c <__hi0bits+0x38>
 800b960:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b964:	f103 0301 	add.w	r3, r3, #1
 800b968:	bf08      	it	eq
 800b96a:	2320      	moveq	r3, #32
 800b96c:	4618      	mov	r0, r3
 800b96e:	4770      	bx	lr
 800b970:	2300      	movs	r3, #0
 800b972:	e7e4      	b.n	800b93e <__hi0bits+0xa>

0800b974 <__lo0bits>:
 800b974:	6803      	ldr	r3, [r0, #0]
 800b976:	f013 0207 	ands.w	r2, r3, #7
 800b97a:	4601      	mov	r1, r0
 800b97c:	d00b      	beq.n	800b996 <__lo0bits+0x22>
 800b97e:	07da      	lsls	r2, r3, #31
 800b980:	d423      	bmi.n	800b9ca <__lo0bits+0x56>
 800b982:	0798      	lsls	r0, r3, #30
 800b984:	bf49      	itett	mi
 800b986:	085b      	lsrmi	r3, r3, #1
 800b988:	089b      	lsrpl	r3, r3, #2
 800b98a:	2001      	movmi	r0, #1
 800b98c:	600b      	strmi	r3, [r1, #0]
 800b98e:	bf5c      	itt	pl
 800b990:	600b      	strpl	r3, [r1, #0]
 800b992:	2002      	movpl	r0, #2
 800b994:	4770      	bx	lr
 800b996:	b298      	uxth	r0, r3
 800b998:	b9a8      	cbnz	r0, 800b9c6 <__lo0bits+0x52>
 800b99a:	0c1b      	lsrs	r3, r3, #16
 800b99c:	2010      	movs	r0, #16
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	b90a      	cbnz	r2, 800b9a6 <__lo0bits+0x32>
 800b9a2:	3008      	adds	r0, #8
 800b9a4:	0a1b      	lsrs	r3, r3, #8
 800b9a6:	071a      	lsls	r2, r3, #28
 800b9a8:	bf04      	itt	eq
 800b9aa:	091b      	lsreq	r3, r3, #4
 800b9ac:	3004      	addeq	r0, #4
 800b9ae:	079a      	lsls	r2, r3, #30
 800b9b0:	bf04      	itt	eq
 800b9b2:	089b      	lsreq	r3, r3, #2
 800b9b4:	3002      	addeq	r0, #2
 800b9b6:	07da      	lsls	r2, r3, #31
 800b9b8:	d403      	bmi.n	800b9c2 <__lo0bits+0x4e>
 800b9ba:	085b      	lsrs	r3, r3, #1
 800b9bc:	f100 0001 	add.w	r0, r0, #1
 800b9c0:	d005      	beq.n	800b9ce <__lo0bits+0x5a>
 800b9c2:	600b      	str	r3, [r1, #0]
 800b9c4:	4770      	bx	lr
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	e7e9      	b.n	800b99e <__lo0bits+0x2a>
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	4770      	bx	lr
 800b9ce:	2020      	movs	r0, #32
 800b9d0:	4770      	bx	lr
	...

0800b9d4 <__i2b>:
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	2101      	movs	r1, #1
 800b9da:	f7ff feb9 	bl	800b750 <_Balloc>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	b928      	cbnz	r0, 800b9ee <__i2b+0x1a>
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <__i2b+0x24>)
 800b9e4:	4805      	ldr	r0, [pc, #20]	; (800b9fc <__i2b+0x28>)
 800b9e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9ea:	f000 ff7d 	bl	800c8e8 <__assert_func>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	6144      	str	r4, [r0, #20]
 800b9f2:	6103      	str	r3, [r0, #16]
 800b9f4:	bd10      	pop	{r4, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0800cfd8 	.word	0x0800cfd8
 800b9fc:	0800d0c8 	.word	0x0800d0c8

0800ba00 <__multiply>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4691      	mov	r9, r2
 800ba06:	690a      	ldr	r2, [r1, #16]
 800ba08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	bfb8      	it	lt
 800ba10:	460b      	movlt	r3, r1
 800ba12:	460c      	mov	r4, r1
 800ba14:	bfbc      	itt	lt
 800ba16:	464c      	movlt	r4, r9
 800ba18:	4699      	movlt	r9, r3
 800ba1a:	6927      	ldr	r7, [r4, #16]
 800ba1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba20:	68a3      	ldr	r3, [r4, #8]
 800ba22:	6861      	ldr	r1, [r4, #4]
 800ba24:	eb07 060a 	add.w	r6, r7, sl
 800ba28:	42b3      	cmp	r3, r6
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	bfb8      	it	lt
 800ba2e:	3101      	addlt	r1, #1
 800ba30:	f7ff fe8e 	bl	800b750 <_Balloc>
 800ba34:	b930      	cbnz	r0, 800ba44 <__multiply+0x44>
 800ba36:	4602      	mov	r2, r0
 800ba38:	4b44      	ldr	r3, [pc, #272]	; (800bb4c <__multiply+0x14c>)
 800ba3a:	4845      	ldr	r0, [pc, #276]	; (800bb50 <__multiply+0x150>)
 800ba3c:	f240 115d 	movw	r1, #349	; 0x15d
 800ba40:	f000 ff52 	bl	800c8e8 <__assert_func>
 800ba44:	f100 0514 	add.w	r5, r0, #20
 800ba48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4543      	cmp	r3, r8
 800ba52:	d321      	bcc.n	800ba98 <__multiply+0x98>
 800ba54:	f104 0314 	add.w	r3, r4, #20
 800ba58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba5c:	f109 0314 	add.w	r3, r9, #20
 800ba60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba64:	9202      	str	r2, [sp, #8]
 800ba66:	1b3a      	subs	r2, r7, r4
 800ba68:	3a15      	subs	r2, #21
 800ba6a:	f022 0203 	bic.w	r2, r2, #3
 800ba6e:	3204      	adds	r2, #4
 800ba70:	f104 0115 	add.w	r1, r4, #21
 800ba74:	428f      	cmp	r7, r1
 800ba76:	bf38      	it	cc
 800ba78:	2204      	movcc	r2, #4
 800ba7a:	9201      	str	r2, [sp, #4]
 800ba7c:	9a02      	ldr	r2, [sp, #8]
 800ba7e:	9303      	str	r3, [sp, #12]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d80c      	bhi.n	800ba9e <__multiply+0x9e>
 800ba84:	2e00      	cmp	r6, #0
 800ba86:	dd03      	ble.n	800ba90 <__multiply+0x90>
 800ba88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d05a      	beq.n	800bb46 <__multiply+0x146>
 800ba90:	6106      	str	r6, [r0, #16]
 800ba92:	b005      	add	sp, #20
 800ba94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba98:	f843 2b04 	str.w	r2, [r3], #4
 800ba9c:	e7d8      	b.n	800ba50 <__multiply+0x50>
 800ba9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	d024      	beq.n	800baf2 <__multiply+0xf2>
 800baa8:	f104 0e14 	add.w	lr, r4, #20
 800baac:	46a9      	mov	r9, r5
 800baae:	f04f 0c00 	mov.w	ip, #0
 800bab2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bab6:	f8d9 1000 	ldr.w	r1, [r9]
 800baba:	fa1f fb82 	uxth.w	fp, r2
 800babe:	b289      	uxth	r1, r1
 800bac0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bac4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bac8:	f8d9 2000 	ldr.w	r2, [r9]
 800bacc:	4461      	add	r1, ip
 800bace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bad2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bad6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bada:	b289      	uxth	r1, r1
 800badc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bae0:	4577      	cmp	r7, lr
 800bae2:	f849 1b04 	str.w	r1, [r9], #4
 800bae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baea:	d8e2      	bhi.n	800bab2 <__multiply+0xb2>
 800baec:	9a01      	ldr	r2, [sp, #4]
 800baee:	f845 c002 	str.w	ip, [r5, r2]
 800baf2:	9a03      	ldr	r2, [sp, #12]
 800baf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800baf8:	3304      	adds	r3, #4
 800bafa:	f1b9 0f00 	cmp.w	r9, #0
 800bafe:	d020      	beq.n	800bb42 <__multiply+0x142>
 800bb00:	6829      	ldr	r1, [r5, #0]
 800bb02:	f104 0c14 	add.w	ip, r4, #20
 800bb06:	46ae      	mov	lr, r5
 800bb08:	f04f 0a00 	mov.w	sl, #0
 800bb0c:	f8bc b000 	ldrh.w	fp, [ip]
 800bb10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb14:	fb09 220b 	mla	r2, r9, fp, r2
 800bb18:	4492      	add	sl, r2
 800bb1a:	b289      	uxth	r1, r1
 800bb1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb20:	f84e 1b04 	str.w	r1, [lr], #4
 800bb24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb28:	f8be 1000 	ldrh.w	r1, [lr]
 800bb2c:	0c12      	lsrs	r2, r2, #16
 800bb2e:	fb09 1102 	mla	r1, r9, r2, r1
 800bb32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb36:	4567      	cmp	r7, ip
 800bb38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb3c:	d8e6      	bhi.n	800bb0c <__multiply+0x10c>
 800bb3e:	9a01      	ldr	r2, [sp, #4]
 800bb40:	50a9      	str	r1, [r5, r2]
 800bb42:	3504      	adds	r5, #4
 800bb44:	e79a      	b.n	800ba7c <__multiply+0x7c>
 800bb46:	3e01      	subs	r6, #1
 800bb48:	e79c      	b.n	800ba84 <__multiply+0x84>
 800bb4a:	bf00      	nop
 800bb4c:	0800cfd8 	.word	0x0800cfd8
 800bb50:	0800d0c8 	.word	0x0800d0c8

0800bb54 <__pow5mult>:
 800bb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb58:	4615      	mov	r5, r2
 800bb5a:	f012 0203 	ands.w	r2, r2, #3
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460f      	mov	r7, r1
 800bb62:	d007      	beq.n	800bb74 <__pow5mult+0x20>
 800bb64:	4c25      	ldr	r4, [pc, #148]	; (800bbfc <__pow5mult+0xa8>)
 800bb66:	3a01      	subs	r2, #1
 800bb68:	2300      	movs	r3, #0
 800bb6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb6e:	f7ff fe51 	bl	800b814 <__multadd>
 800bb72:	4607      	mov	r7, r0
 800bb74:	10ad      	asrs	r5, r5, #2
 800bb76:	d03d      	beq.n	800bbf4 <__pow5mult+0xa0>
 800bb78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb7a:	b97c      	cbnz	r4, 800bb9c <__pow5mult+0x48>
 800bb7c:	2010      	movs	r0, #16
 800bb7e:	f7fc fc6f 	bl	8008460 <malloc>
 800bb82:	4602      	mov	r2, r0
 800bb84:	6270      	str	r0, [r6, #36]	; 0x24
 800bb86:	b928      	cbnz	r0, 800bb94 <__pow5mult+0x40>
 800bb88:	4b1d      	ldr	r3, [pc, #116]	; (800bc00 <__pow5mult+0xac>)
 800bb8a:	481e      	ldr	r0, [pc, #120]	; (800bc04 <__pow5mult+0xb0>)
 800bb8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb90:	f000 feaa 	bl	800c8e8 <__assert_func>
 800bb94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb98:	6004      	str	r4, [r0, #0]
 800bb9a:	60c4      	str	r4, [r0, #12]
 800bb9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bba4:	b94c      	cbnz	r4, 800bbba <__pow5mult+0x66>
 800bba6:	f240 2171 	movw	r1, #625	; 0x271
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f7ff ff12 	bl	800b9d4 <__i2b>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	6003      	str	r3, [r0, #0]
 800bbba:	f04f 0900 	mov.w	r9, #0
 800bbbe:	07eb      	lsls	r3, r5, #31
 800bbc0:	d50a      	bpl.n	800bbd8 <__pow5mult+0x84>
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f7ff ff1a 	bl	800ba00 <__multiply>
 800bbcc:	4639      	mov	r1, r7
 800bbce:	4680      	mov	r8, r0
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f7ff fdfd 	bl	800b7d0 <_Bfree>
 800bbd6:	4647      	mov	r7, r8
 800bbd8:	106d      	asrs	r5, r5, #1
 800bbda:	d00b      	beq.n	800bbf4 <__pow5mult+0xa0>
 800bbdc:	6820      	ldr	r0, [r4, #0]
 800bbde:	b938      	cbnz	r0, 800bbf0 <__pow5mult+0x9c>
 800bbe0:	4622      	mov	r2, r4
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7ff ff0b 	bl	800ba00 <__multiply>
 800bbea:	6020      	str	r0, [r4, #0]
 800bbec:	f8c0 9000 	str.w	r9, [r0]
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	e7e4      	b.n	800bbbe <__pow5mult+0x6a>
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfa:	bf00      	nop
 800bbfc:	0800d218 	.word	0x0800d218
 800bc00:	0800cf66 	.word	0x0800cf66
 800bc04:	0800d0c8 	.word	0x0800d0c8

0800bc08 <__lshift>:
 800bc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	6849      	ldr	r1, [r1, #4]
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc16:	68a3      	ldr	r3, [r4, #8]
 800bc18:	4607      	mov	r7, r0
 800bc1a:	4691      	mov	r9, r2
 800bc1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc20:	f108 0601 	add.w	r6, r8, #1
 800bc24:	42b3      	cmp	r3, r6
 800bc26:	db0b      	blt.n	800bc40 <__lshift+0x38>
 800bc28:	4638      	mov	r0, r7
 800bc2a:	f7ff fd91 	bl	800b750 <_Balloc>
 800bc2e:	4605      	mov	r5, r0
 800bc30:	b948      	cbnz	r0, 800bc46 <__lshift+0x3e>
 800bc32:	4602      	mov	r2, r0
 800bc34:	4b2a      	ldr	r3, [pc, #168]	; (800bce0 <__lshift+0xd8>)
 800bc36:	482b      	ldr	r0, [pc, #172]	; (800bce4 <__lshift+0xdc>)
 800bc38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc3c:	f000 fe54 	bl	800c8e8 <__assert_func>
 800bc40:	3101      	adds	r1, #1
 800bc42:	005b      	lsls	r3, r3, #1
 800bc44:	e7ee      	b.n	800bc24 <__lshift+0x1c>
 800bc46:	2300      	movs	r3, #0
 800bc48:	f100 0114 	add.w	r1, r0, #20
 800bc4c:	f100 0210 	add.w	r2, r0, #16
 800bc50:	4618      	mov	r0, r3
 800bc52:	4553      	cmp	r3, sl
 800bc54:	db37      	blt.n	800bcc6 <__lshift+0xbe>
 800bc56:	6920      	ldr	r0, [r4, #16]
 800bc58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc5c:	f104 0314 	add.w	r3, r4, #20
 800bc60:	f019 091f 	ands.w	r9, r9, #31
 800bc64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc6c:	d02f      	beq.n	800bcce <__lshift+0xc6>
 800bc6e:	f1c9 0e20 	rsb	lr, r9, #32
 800bc72:	468a      	mov	sl, r1
 800bc74:	f04f 0c00 	mov.w	ip, #0
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	fa02 f209 	lsl.w	r2, r2, r9
 800bc7e:	ea42 020c 	orr.w	r2, r2, ip
 800bc82:	f84a 2b04 	str.w	r2, [sl], #4
 800bc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8a:	4298      	cmp	r0, r3
 800bc8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc90:	d8f2      	bhi.n	800bc78 <__lshift+0x70>
 800bc92:	1b03      	subs	r3, r0, r4
 800bc94:	3b15      	subs	r3, #21
 800bc96:	f023 0303 	bic.w	r3, r3, #3
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	f104 0215 	add.w	r2, r4, #21
 800bca0:	4290      	cmp	r0, r2
 800bca2:	bf38      	it	cc
 800bca4:	2304      	movcc	r3, #4
 800bca6:	f841 c003 	str.w	ip, [r1, r3]
 800bcaa:	f1bc 0f00 	cmp.w	ip, #0
 800bcae:	d001      	beq.n	800bcb4 <__lshift+0xac>
 800bcb0:	f108 0602 	add.w	r6, r8, #2
 800bcb4:	3e01      	subs	r6, #1
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	612e      	str	r6, [r5, #16]
 800bcba:	4621      	mov	r1, r4
 800bcbc:	f7ff fd88 	bl	800b7d0 <_Bfree>
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcca:	3301      	adds	r3, #1
 800bccc:	e7c1      	b.n	800bc52 <__lshift+0x4a>
 800bcce:	3904      	subs	r1, #4
 800bcd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcd8:	4298      	cmp	r0, r3
 800bcda:	d8f9      	bhi.n	800bcd0 <__lshift+0xc8>
 800bcdc:	e7ea      	b.n	800bcb4 <__lshift+0xac>
 800bcde:	bf00      	nop
 800bce0:	0800cfd8 	.word	0x0800cfd8
 800bce4:	0800d0c8 	.word	0x0800d0c8

0800bce8 <__mcmp>:
 800bce8:	b530      	push	{r4, r5, lr}
 800bcea:	6902      	ldr	r2, [r0, #16]
 800bcec:	690c      	ldr	r4, [r1, #16]
 800bcee:	1b12      	subs	r2, r2, r4
 800bcf0:	d10e      	bne.n	800bd10 <__mcmp+0x28>
 800bcf2:	f100 0314 	add.w	r3, r0, #20
 800bcf6:	3114      	adds	r1, #20
 800bcf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bcfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd08:	42a5      	cmp	r5, r4
 800bd0a:	d003      	beq.n	800bd14 <__mcmp+0x2c>
 800bd0c:	d305      	bcc.n	800bd1a <__mcmp+0x32>
 800bd0e:	2201      	movs	r2, #1
 800bd10:	4610      	mov	r0, r2
 800bd12:	bd30      	pop	{r4, r5, pc}
 800bd14:	4283      	cmp	r3, r0
 800bd16:	d3f3      	bcc.n	800bd00 <__mcmp+0x18>
 800bd18:	e7fa      	b.n	800bd10 <__mcmp+0x28>
 800bd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1e:	e7f7      	b.n	800bd10 <__mcmp+0x28>

0800bd20 <__mdiff>:
 800bd20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	460c      	mov	r4, r1
 800bd26:	4606      	mov	r6, r0
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	4690      	mov	r8, r2
 800bd2e:	f7ff ffdb 	bl	800bce8 <__mcmp>
 800bd32:	1e05      	subs	r5, r0, #0
 800bd34:	d110      	bne.n	800bd58 <__mdiff+0x38>
 800bd36:	4629      	mov	r1, r5
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7ff fd09 	bl	800b750 <_Balloc>
 800bd3e:	b930      	cbnz	r0, 800bd4e <__mdiff+0x2e>
 800bd40:	4b3a      	ldr	r3, [pc, #232]	; (800be2c <__mdiff+0x10c>)
 800bd42:	4602      	mov	r2, r0
 800bd44:	f240 2132 	movw	r1, #562	; 0x232
 800bd48:	4839      	ldr	r0, [pc, #228]	; (800be30 <__mdiff+0x110>)
 800bd4a:	f000 fdcd 	bl	800c8e8 <__assert_func>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd58:	bfa4      	itt	ge
 800bd5a:	4643      	movge	r3, r8
 800bd5c:	46a0      	movge	r8, r4
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd64:	bfa6      	itte	ge
 800bd66:	461c      	movge	r4, r3
 800bd68:	2500      	movge	r5, #0
 800bd6a:	2501      	movlt	r5, #1
 800bd6c:	f7ff fcf0 	bl	800b750 <_Balloc>
 800bd70:	b920      	cbnz	r0, 800bd7c <__mdiff+0x5c>
 800bd72:	4b2e      	ldr	r3, [pc, #184]	; (800be2c <__mdiff+0x10c>)
 800bd74:	4602      	mov	r2, r0
 800bd76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd7a:	e7e5      	b.n	800bd48 <__mdiff+0x28>
 800bd7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd80:	6926      	ldr	r6, [r4, #16]
 800bd82:	60c5      	str	r5, [r0, #12]
 800bd84:	f104 0914 	add.w	r9, r4, #20
 800bd88:	f108 0514 	add.w	r5, r8, #20
 800bd8c:	f100 0e14 	add.w	lr, r0, #20
 800bd90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd98:	f108 0210 	add.w	r2, r8, #16
 800bd9c:	46f2      	mov	sl, lr
 800bd9e:	2100      	movs	r1, #0
 800bda0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bda4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bda8:	fa1f f883 	uxth.w	r8, r3
 800bdac:	fa11 f18b 	uxtah	r1, r1, fp
 800bdb0:	0c1b      	lsrs	r3, r3, #16
 800bdb2:	eba1 0808 	sub.w	r8, r1, r8
 800bdb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdbe:	fa1f f888 	uxth.w	r8, r8
 800bdc2:	1419      	asrs	r1, r3, #16
 800bdc4:	454e      	cmp	r6, r9
 800bdc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bdca:	f84a 3b04 	str.w	r3, [sl], #4
 800bdce:	d8e7      	bhi.n	800bda0 <__mdiff+0x80>
 800bdd0:	1b33      	subs	r3, r6, r4
 800bdd2:	3b15      	subs	r3, #21
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
 800bdd8:	3304      	adds	r3, #4
 800bdda:	3415      	adds	r4, #21
 800bddc:	42a6      	cmp	r6, r4
 800bdde:	bf38      	it	cc
 800bde0:	2304      	movcc	r3, #4
 800bde2:	441d      	add	r5, r3
 800bde4:	4473      	add	r3, lr
 800bde6:	469e      	mov	lr, r3
 800bde8:	462e      	mov	r6, r5
 800bdea:	4566      	cmp	r6, ip
 800bdec:	d30e      	bcc.n	800be0c <__mdiff+0xec>
 800bdee:	f10c 0203 	add.w	r2, ip, #3
 800bdf2:	1b52      	subs	r2, r2, r5
 800bdf4:	f022 0203 	bic.w	r2, r2, #3
 800bdf8:	3d03      	subs	r5, #3
 800bdfa:	45ac      	cmp	ip, r5
 800bdfc:	bf38      	it	cc
 800bdfe:	2200      	movcc	r2, #0
 800be00:	441a      	add	r2, r3
 800be02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be06:	b17b      	cbz	r3, 800be28 <__mdiff+0x108>
 800be08:	6107      	str	r7, [r0, #16]
 800be0a:	e7a3      	b.n	800bd54 <__mdiff+0x34>
 800be0c:	f856 8b04 	ldr.w	r8, [r6], #4
 800be10:	fa11 f288 	uxtah	r2, r1, r8
 800be14:	1414      	asrs	r4, r2, #16
 800be16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be1a:	b292      	uxth	r2, r2
 800be1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be20:	f84e 2b04 	str.w	r2, [lr], #4
 800be24:	1421      	asrs	r1, r4, #16
 800be26:	e7e0      	b.n	800bdea <__mdiff+0xca>
 800be28:	3f01      	subs	r7, #1
 800be2a:	e7ea      	b.n	800be02 <__mdiff+0xe2>
 800be2c:	0800cfd8 	.word	0x0800cfd8
 800be30:	0800d0c8 	.word	0x0800d0c8

0800be34 <__ulp>:
 800be34:	b082      	sub	sp, #8
 800be36:	ed8d 0b00 	vstr	d0, [sp]
 800be3a:	9b01      	ldr	r3, [sp, #4]
 800be3c:	4912      	ldr	r1, [pc, #72]	; (800be88 <__ulp+0x54>)
 800be3e:	4019      	ands	r1, r3
 800be40:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800be44:	2900      	cmp	r1, #0
 800be46:	dd05      	ble.n	800be54 <__ulp+0x20>
 800be48:	2200      	movs	r2, #0
 800be4a:	460b      	mov	r3, r1
 800be4c:	ec43 2b10 	vmov	d0, r2, r3
 800be50:	b002      	add	sp, #8
 800be52:	4770      	bx	lr
 800be54:	4249      	negs	r1, r1
 800be56:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800be5a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800be5e:	f04f 0200 	mov.w	r2, #0
 800be62:	f04f 0300 	mov.w	r3, #0
 800be66:	da04      	bge.n	800be72 <__ulp+0x3e>
 800be68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be6c:	fa41 f300 	asr.w	r3, r1, r0
 800be70:	e7ec      	b.n	800be4c <__ulp+0x18>
 800be72:	f1a0 0114 	sub.w	r1, r0, #20
 800be76:	291e      	cmp	r1, #30
 800be78:	bfda      	itte	le
 800be7a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be7e:	fa20 f101 	lsrle.w	r1, r0, r1
 800be82:	2101      	movgt	r1, #1
 800be84:	460a      	mov	r2, r1
 800be86:	e7e1      	b.n	800be4c <__ulp+0x18>
 800be88:	7ff00000 	.word	0x7ff00000

0800be8c <__b2d>:
 800be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8e:	6905      	ldr	r5, [r0, #16]
 800be90:	f100 0714 	add.w	r7, r0, #20
 800be94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be98:	1f2e      	subs	r6, r5, #4
 800be9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800be9e:	4620      	mov	r0, r4
 800bea0:	f7ff fd48 	bl	800b934 <__hi0bits>
 800bea4:	f1c0 0320 	rsb	r3, r0, #32
 800bea8:	280a      	cmp	r0, #10
 800beaa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bf28 <__b2d+0x9c>
 800beae:	600b      	str	r3, [r1, #0]
 800beb0:	dc14      	bgt.n	800bedc <__b2d+0x50>
 800beb2:	f1c0 0e0b 	rsb	lr, r0, #11
 800beb6:	fa24 f10e 	lsr.w	r1, r4, lr
 800beba:	42b7      	cmp	r7, r6
 800bebc:	ea41 030c 	orr.w	r3, r1, ip
 800bec0:	bf34      	ite	cc
 800bec2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bec6:	2100      	movcs	r1, #0
 800bec8:	3015      	adds	r0, #21
 800beca:	fa04 f000 	lsl.w	r0, r4, r0
 800bece:	fa21 f10e 	lsr.w	r1, r1, lr
 800bed2:	ea40 0201 	orr.w	r2, r0, r1
 800bed6:	ec43 2b10 	vmov	d0, r2, r3
 800beda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bedc:	42b7      	cmp	r7, r6
 800bede:	bf3a      	itte	cc
 800bee0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bee4:	f1a5 0608 	subcc.w	r6, r5, #8
 800bee8:	2100      	movcs	r1, #0
 800beea:	380b      	subs	r0, #11
 800beec:	d017      	beq.n	800bf1e <__b2d+0x92>
 800beee:	f1c0 0c20 	rsb	ip, r0, #32
 800bef2:	fa04 f500 	lsl.w	r5, r4, r0
 800bef6:	42be      	cmp	r6, r7
 800bef8:	fa21 f40c 	lsr.w	r4, r1, ip
 800befc:	ea45 0504 	orr.w	r5, r5, r4
 800bf00:	bf8c      	ite	hi
 800bf02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bf06:	2400      	movls	r4, #0
 800bf08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bf0c:	fa01 f000 	lsl.w	r0, r1, r0
 800bf10:	fa24 f40c 	lsr.w	r4, r4, ip
 800bf14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf18:	ea40 0204 	orr.w	r2, r0, r4
 800bf1c:	e7db      	b.n	800bed6 <__b2d+0x4a>
 800bf1e:	ea44 030c 	orr.w	r3, r4, ip
 800bf22:	460a      	mov	r2, r1
 800bf24:	e7d7      	b.n	800bed6 <__b2d+0x4a>
 800bf26:	bf00      	nop
 800bf28:	3ff00000 	.word	0x3ff00000

0800bf2c <__d2b>:
 800bf2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf30:	4689      	mov	r9, r1
 800bf32:	2101      	movs	r1, #1
 800bf34:	ec57 6b10 	vmov	r6, r7, d0
 800bf38:	4690      	mov	r8, r2
 800bf3a:	f7ff fc09 	bl	800b750 <_Balloc>
 800bf3e:	4604      	mov	r4, r0
 800bf40:	b930      	cbnz	r0, 800bf50 <__d2b+0x24>
 800bf42:	4602      	mov	r2, r0
 800bf44:	4b25      	ldr	r3, [pc, #148]	; (800bfdc <__d2b+0xb0>)
 800bf46:	4826      	ldr	r0, [pc, #152]	; (800bfe0 <__d2b+0xb4>)
 800bf48:	f240 310a 	movw	r1, #778	; 0x30a
 800bf4c:	f000 fccc 	bl	800c8e8 <__assert_func>
 800bf50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf58:	bb35      	cbnz	r5, 800bfa8 <__d2b+0x7c>
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	d028      	beq.n	800bfb2 <__d2b+0x86>
 800bf60:	4668      	mov	r0, sp
 800bf62:	9600      	str	r6, [sp, #0]
 800bf64:	f7ff fd06 	bl	800b974 <__lo0bits>
 800bf68:	9900      	ldr	r1, [sp, #0]
 800bf6a:	b300      	cbz	r0, 800bfae <__d2b+0x82>
 800bf6c:	9a01      	ldr	r2, [sp, #4]
 800bf6e:	f1c0 0320 	rsb	r3, r0, #32
 800bf72:	fa02 f303 	lsl.w	r3, r2, r3
 800bf76:	430b      	orrs	r3, r1
 800bf78:	40c2      	lsrs	r2, r0
 800bf7a:	6163      	str	r3, [r4, #20]
 800bf7c:	9201      	str	r2, [sp, #4]
 800bf7e:	9b01      	ldr	r3, [sp, #4]
 800bf80:	61a3      	str	r3, [r4, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bf14      	ite	ne
 800bf86:	2202      	movne	r2, #2
 800bf88:	2201      	moveq	r2, #1
 800bf8a:	6122      	str	r2, [r4, #16]
 800bf8c:	b1d5      	cbz	r5, 800bfc4 <__d2b+0x98>
 800bf8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf92:	4405      	add	r5, r0
 800bf94:	f8c9 5000 	str.w	r5, [r9]
 800bf98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf9c:	f8c8 0000 	str.w	r0, [r8]
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	b003      	add	sp, #12
 800bfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfac:	e7d5      	b.n	800bf5a <__d2b+0x2e>
 800bfae:	6161      	str	r1, [r4, #20]
 800bfb0:	e7e5      	b.n	800bf7e <__d2b+0x52>
 800bfb2:	a801      	add	r0, sp, #4
 800bfb4:	f7ff fcde 	bl	800b974 <__lo0bits>
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	6163      	str	r3, [r4, #20]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	6122      	str	r2, [r4, #16]
 800bfc0:	3020      	adds	r0, #32
 800bfc2:	e7e3      	b.n	800bf8c <__d2b+0x60>
 800bfc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfcc:	f8c9 0000 	str.w	r0, [r9]
 800bfd0:	6918      	ldr	r0, [r3, #16]
 800bfd2:	f7ff fcaf 	bl	800b934 <__hi0bits>
 800bfd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfda:	e7df      	b.n	800bf9c <__d2b+0x70>
 800bfdc:	0800cfd8 	.word	0x0800cfd8
 800bfe0:	0800d0c8 	.word	0x0800d0c8

0800bfe4 <__ratio>:
 800bfe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	4688      	mov	r8, r1
 800bfea:	4669      	mov	r1, sp
 800bfec:	4681      	mov	r9, r0
 800bfee:	f7ff ff4d 	bl	800be8c <__b2d>
 800bff2:	a901      	add	r1, sp, #4
 800bff4:	4640      	mov	r0, r8
 800bff6:	ec55 4b10 	vmov	r4, r5, d0
 800bffa:	f7ff ff47 	bl	800be8c <__b2d>
 800bffe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c002:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c006:	eba3 0c02 	sub.w	ip, r3, r2
 800c00a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c00e:	1a9b      	subs	r3, r3, r2
 800c010:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c014:	ec51 0b10 	vmov	r0, r1, d0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bfd6      	itet	le
 800c01c:	460a      	movle	r2, r1
 800c01e:	462a      	movgt	r2, r5
 800c020:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c024:	468b      	mov	fp, r1
 800c026:	462f      	mov	r7, r5
 800c028:	bfd4      	ite	le
 800c02a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c02e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c032:	4620      	mov	r0, r4
 800c034:	ee10 2a10 	vmov	r2, s0
 800c038:	465b      	mov	r3, fp
 800c03a:	4639      	mov	r1, r7
 800c03c:	f7f4 fc16 	bl	800086c <__aeabi_ddiv>
 800c040:	ec41 0b10 	vmov	d0, r0, r1
 800c044:	b003      	add	sp, #12
 800c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c04a <__copybits>:
 800c04a:	3901      	subs	r1, #1
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	1149      	asrs	r1, r1, #5
 800c050:	6914      	ldr	r4, [r2, #16]
 800c052:	3101      	adds	r1, #1
 800c054:	f102 0314 	add.w	r3, r2, #20
 800c058:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c05c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c060:	1f05      	subs	r5, r0, #4
 800c062:	42a3      	cmp	r3, r4
 800c064:	d30c      	bcc.n	800c080 <__copybits+0x36>
 800c066:	1aa3      	subs	r3, r4, r2
 800c068:	3b11      	subs	r3, #17
 800c06a:	f023 0303 	bic.w	r3, r3, #3
 800c06e:	3211      	adds	r2, #17
 800c070:	42a2      	cmp	r2, r4
 800c072:	bf88      	it	hi
 800c074:	2300      	movhi	r3, #0
 800c076:	4418      	add	r0, r3
 800c078:	2300      	movs	r3, #0
 800c07a:	4288      	cmp	r0, r1
 800c07c:	d305      	bcc.n	800c08a <__copybits+0x40>
 800c07e:	bd70      	pop	{r4, r5, r6, pc}
 800c080:	f853 6b04 	ldr.w	r6, [r3], #4
 800c084:	f845 6f04 	str.w	r6, [r5, #4]!
 800c088:	e7eb      	b.n	800c062 <__copybits+0x18>
 800c08a:	f840 3b04 	str.w	r3, [r0], #4
 800c08e:	e7f4      	b.n	800c07a <__copybits+0x30>

0800c090 <__any_on>:
 800c090:	f100 0214 	add.w	r2, r0, #20
 800c094:	6900      	ldr	r0, [r0, #16]
 800c096:	114b      	asrs	r3, r1, #5
 800c098:	4298      	cmp	r0, r3
 800c09a:	b510      	push	{r4, lr}
 800c09c:	db11      	blt.n	800c0c2 <__any_on+0x32>
 800c09e:	dd0a      	ble.n	800c0b6 <__any_on+0x26>
 800c0a0:	f011 011f 	ands.w	r1, r1, #31
 800c0a4:	d007      	beq.n	800c0b6 <__any_on+0x26>
 800c0a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0aa:	fa24 f001 	lsr.w	r0, r4, r1
 800c0ae:	fa00 f101 	lsl.w	r1, r0, r1
 800c0b2:	428c      	cmp	r4, r1
 800c0b4:	d10b      	bne.n	800c0ce <__any_on+0x3e>
 800c0b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d803      	bhi.n	800c0c6 <__any_on+0x36>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	e7f7      	b.n	800c0b6 <__any_on+0x26>
 800c0c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0ca:	2900      	cmp	r1, #0
 800c0cc:	d0f5      	beq.n	800c0ba <__any_on+0x2a>
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	e7f6      	b.n	800c0c0 <__any_on+0x30>

0800c0d2 <_calloc_r>:
 800c0d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0d4:	fba1 2402 	umull	r2, r4, r1, r2
 800c0d8:	b94c      	cbnz	r4, 800c0ee <_calloc_r+0x1c>
 800c0da:	4611      	mov	r1, r2
 800c0dc:	9201      	str	r2, [sp, #4]
 800c0de:	f7fc fa49 	bl	8008574 <_malloc_r>
 800c0e2:	9a01      	ldr	r2, [sp, #4]
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	b930      	cbnz	r0, 800c0f6 <_calloc_r+0x24>
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	b003      	add	sp, #12
 800c0ec:	bd30      	pop	{r4, r5, pc}
 800c0ee:	220c      	movs	r2, #12
 800c0f0:	6002      	str	r2, [r0, #0]
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	e7f8      	b.n	800c0e8 <_calloc_r+0x16>
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	f7fc f9c8 	bl	800848c <memset>
 800c0fc:	e7f4      	b.n	800c0e8 <_calloc_r+0x16>

0800c0fe <__ssputs_r>:
 800c0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c102:	688e      	ldr	r6, [r1, #8]
 800c104:	429e      	cmp	r6, r3
 800c106:	4682      	mov	sl, r0
 800c108:	460c      	mov	r4, r1
 800c10a:	4690      	mov	r8, r2
 800c10c:	461f      	mov	r7, r3
 800c10e:	d838      	bhi.n	800c182 <__ssputs_r+0x84>
 800c110:	898a      	ldrh	r2, [r1, #12]
 800c112:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c116:	d032      	beq.n	800c17e <__ssputs_r+0x80>
 800c118:	6825      	ldr	r5, [r4, #0]
 800c11a:	6909      	ldr	r1, [r1, #16]
 800c11c:	eba5 0901 	sub.w	r9, r5, r1
 800c120:	6965      	ldr	r5, [r4, #20]
 800c122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c12a:	3301      	adds	r3, #1
 800c12c:	444b      	add	r3, r9
 800c12e:	106d      	asrs	r5, r5, #1
 800c130:	429d      	cmp	r5, r3
 800c132:	bf38      	it	cc
 800c134:	461d      	movcc	r5, r3
 800c136:	0553      	lsls	r3, r2, #21
 800c138:	d531      	bpl.n	800c19e <__ssputs_r+0xa0>
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7fc fa1a 	bl	8008574 <_malloc_r>
 800c140:	4606      	mov	r6, r0
 800c142:	b950      	cbnz	r0, 800c15a <__ssputs_r+0x5c>
 800c144:	230c      	movs	r3, #12
 800c146:	f8ca 3000 	str.w	r3, [sl]
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	f04f 30ff 	mov.w	r0, #4294967295
 800c156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15a:	6921      	ldr	r1, [r4, #16]
 800c15c:	464a      	mov	r2, r9
 800c15e:	f7fc f987 	bl	8008470 <memcpy>
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c16c:	81a3      	strh	r3, [r4, #12]
 800c16e:	6126      	str	r6, [r4, #16]
 800c170:	6165      	str	r5, [r4, #20]
 800c172:	444e      	add	r6, r9
 800c174:	eba5 0509 	sub.w	r5, r5, r9
 800c178:	6026      	str	r6, [r4, #0]
 800c17a:	60a5      	str	r5, [r4, #8]
 800c17c:	463e      	mov	r6, r7
 800c17e:	42be      	cmp	r6, r7
 800c180:	d900      	bls.n	800c184 <__ssputs_r+0x86>
 800c182:	463e      	mov	r6, r7
 800c184:	6820      	ldr	r0, [r4, #0]
 800c186:	4632      	mov	r2, r6
 800c188:	4641      	mov	r1, r8
 800c18a:	f000 fd27 	bl	800cbdc <memmove>
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	1b9b      	subs	r3, r3, r6
 800c192:	60a3      	str	r3, [r4, #8]
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	4433      	add	r3, r6
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	2000      	movs	r0, #0
 800c19c:	e7db      	b.n	800c156 <__ssputs_r+0x58>
 800c19e:	462a      	mov	r2, r5
 800c1a0:	f000 fd36 	bl	800cc10 <_realloc_r>
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d1e1      	bne.n	800c16e <__ssputs_r+0x70>
 800c1aa:	6921      	ldr	r1, [r4, #16]
 800c1ac:	4650      	mov	r0, sl
 800c1ae:	f7fc f975 	bl	800849c <_free_r>
 800c1b2:	e7c7      	b.n	800c144 <__ssputs_r+0x46>

0800c1b4 <_svfiprintf_r>:
 800c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	4698      	mov	r8, r3
 800c1ba:	898b      	ldrh	r3, [r1, #12]
 800c1bc:	061b      	lsls	r3, r3, #24
 800c1be:	b09d      	sub	sp, #116	; 0x74
 800c1c0:	4607      	mov	r7, r0
 800c1c2:	460d      	mov	r5, r1
 800c1c4:	4614      	mov	r4, r2
 800c1c6:	d50e      	bpl.n	800c1e6 <_svfiprintf_r+0x32>
 800c1c8:	690b      	ldr	r3, [r1, #16]
 800c1ca:	b963      	cbnz	r3, 800c1e6 <_svfiprintf_r+0x32>
 800c1cc:	2140      	movs	r1, #64	; 0x40
 800c1ce:	f7fc f9d1 	bl	8008574 <_malloc_r>
 800c1d2:	6028      	str	r0, [r5, #0]
 800c1d4:	6128      	str	r0, [r5, #16]
 800c1d6:	b920      	cbnz	r0, 800c1e2 <_svfiprintf_r+0x2e>
 800c1d8:	230c      	movs	r3, #12
 800c1da:	603b      	str	r3, [r7, #0]
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e0:	e0d1      	b.n	800c386 <_svfiprintf_r+0x1d2>
 800c1e2:	2340      	movs	r3, #64	; 0x40
 800c1e4:	616b      	str	r3, [r5, #20]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ea:	2320      	movs	r3, #32
 800c1ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1f4:	2330      	movs	r3, #48	; 0x30
 800c1f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3a0 <_svfiprintf_r+0x1ec>
 800c1fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1fe:	f04f 0901 	mov.w	r9, #1
 800c202:	4623      	mov	r3, r4
 800c204:	469a      	mov	sl, r3
 800c206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c20a:	b10a      	cbz	r2, 800c210 <_svfiprintf_r+0x5c>
 800c20c:	2a25      	cmp	r2, #37	; 0x25
 800c20e:	d1f9      	bne.n	800c204 <_svfiprintf_r+0x50>
 800c210:	ebba 0b04 	subs.w	fp, sl, r4
 800c214:	d00b      	beq.n	800c22e <_svfiprintf_r+0x7a>
 800c216:	465b      	mov	r3, fp
 800c218:	4622      	mov	r2, r4
 800c21a:	4629      	mov	r1, r5
 800c21c:	4638      	mov	r0, r7
 800c21e:	f7ff ff6e 	bl	800c0fe <__ssputs_r>
 800c222:	3001      	adds	r0, #1
 800c224:	f000 80aa 	beq.w	800c37c <_svfiprintf_r+0x1c8>
 800c228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c22a:	445a      	add	r2, fp
 800c22c:	9209      	str	r2, [sp, #36]	; 0x24
 800c22e:	f89a 3000 	ldrb.w	r3, [sl]
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80a2 	beq.w	800c37c <_svfiprintf_r+0x1c8>
 800c238:	2300      	movs	r3, #0
 800c23a:	f04f 32ff 	mov.w	r2, #4294967295
 800c23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c242:	f10a 0a01 	add.w	sl, sl, #1
 800c246:	9304      	str	r3, [sp, #16]
 800c248:	9307      	str	r3, [sp, #28]
 800c24a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c24e:	931a      	str	r3, [sp, #104]	; 0x68
 800c250:	4654      	mov	r4, sl
 800c252:	2205      	movs	r2, #5
 800c254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c258:	4851      	ldr	r0, [pc, #324]	; (800c3a0 <_svfiprintf_r+0x1ec>)
 800c25a:	f7f3 ffd1 	bl	8000200 <memchr>
 800c25e:	9a04      	ldr	r2, [sp, #16]
 800c260:	b9d8      	cbnz	r0, 800c29a <_svfiprintf_r+0xe6>
 800c262:	06d0      	lsls	r0, r2, #27
 800c264:	bf44      	itt	mi
 800c266:	2320      	movmi	r3, #32
 800c268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c26c:	0711      	lsls	r1, r2, #28
 800c26e:	bf44      	itt	mi
 800c270:	232b      	movmi	r3, #43	; 0x2b
 800c272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c276:	f89a 3000 	ldrb.w	r3, [sl]
 800c27a:	2b2a      	cmp	r3, #42	; 0x2a
 800c27c:	d015      	beq.n	800c2aa <_svfiprintf_r+0xf6>
 800c27e:	9a07      	ldr	r2, [sp, #28]
 800c280:	4654      	mov	r4, sl
 800c282:	2000      	movs	r0, #0
 800c284:	f04f 0c0a 	mov.w	ip, #10
 800c288:	4621      	mov	r1, r4
 800c28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c28e:	3b30      	subs	r3, #48	; 0x30
 800c290:	2b09      	cmp	r3, #9
 800c292:	d94e      	bls.n	800c332 <_svfiprintf_r+0x17e>
 800c294:	b1b0      	cbz	r0, 800c2c4 <_svfiprintf_r+0x110>
 800c296:	9207      	str	r2, [sp, #28]
 800c298:	e014      	b.n	800c2c4 <_svfiprintf_r+0x110>
 800c29a:	eba0 0308 	sub.w	r3, r0, r8
 800c29e:	fa09 f303 	lsl.w	r3, r9, r3
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	9304      	str	r3, [sp, #16]
 800c2a6:	46a2      	mov	sl, r4
 800c2a8:	e7d2      	b.n	800c250 <_svfiprintf_r+0x9c>
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	1d19      	adds	r1, r3, #4
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	9103      	str	r1, [sp, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	bfbb      	ittet	lt
 800c2b6:	425b      	neglt	r3, r3
 800c2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800c2bc:	9307      	strge	r3, [sp, #28]
 800c2be:	9307      	strlt	r3, [sp, #28]
 800c2c0:	bfb8      	it	lt
 800c2c2:	9204      	strlt	r2, [sp, #16]
 800c2c4:	7823      	ldrb	r3, [r4, #0]
 800c2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c2c8:	d10c      	bne.n	800c2e4 <_svfiprintf_r+0x130>
 800c2ca:	7863      	ldrb	r3, [r4, #1]
 800c2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ce:	d135      	bne.n	800c33c <_svfiprintf_r+0x188>
 800c2d0:	9b03      	ldr	r3, [sp, #12]
 800c2d2:	1d1a      	adds	r2, r3, #4
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	9203      	str	r2, [sp, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	bfb8      	it	lt
 800c2dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2e0:	3402      	adds	r4, #2
 800c2e2:	9305      	str	r3, [sp, #20]
 800c2e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3b0 <_svfiprintf_r+0x1fc>
 800c2e8:	7821      	ldrb	r1, [r4, #0]
 800c2ea:	2203      	movs	r2, #3
 800c2ec:	4650      	mov	r0, sl
 800c2ee:	f7f3 ff87 	bl	8000200 <memchr>
 800c2f2:	b140      	cbz	r0, 800c306 <_svfiprintf_r+0x152>
 800c2f4:	2340      	movs	r3, #64	; 0x40
 800c2f6:	eba0 000a 	sub.w	r0, r0, sl
 800c2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	4303      	orrs	r3, r0
 800c302:	3401      	adds	r4, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30a:	4826      	ldr	r0, [pc, #152]	; (800c3a4 <_svfiprintf_r+0x1f0>)
 800c30c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c310:	2206      	movs	r2, #6
 800c312:	f7f3 ff75 	bl	8000200 <memchr>
 800c316:	2800      	cmp	r0, #0
 800c318:	d038      	beq.n	800c38c <_svfiprintf_r+0x1d8>
 800c31a:	4b23      	ldr	r3, [pc, #140]	; (800c3a8 <_svfiprintf_r+0x1f4>)
 800c31c:	bb1b      	cbnz	r3, 800c366 <_svfiprintf_r+0x1b2>
 800c31e:	9b03      	ldr	r3, [sp, #12]
 800c320:	3307      	adds	r3, #7
 800c322:	f023 0307 	bic.w	r3, r3, #7
 800c326:	3308      	adds	r3, #8
 800c328:	9303      	str	r3, [sp, #12]
 800c32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32c:	4433      	add	r3, r6
 800c32e:	9309      	str	r3, [sp, #36]	; 0x24
 800c330:	e767      	b.n	800c202 <_svfiprintf_r+0x4e>
 800c332:	fb0c 3202 	mla	r2, ip, r2, r3
 800c336:	460c      	mov	r4, r1
 800c338:	2001      	movs	r0, #1
 800c33a:	e7a5      	b.n	800c288 <_svfiprintf_r+0xd4>
 800c33c:	2300      	movs	r3, #0
 800c33e:	3401      	adds	r4, #1
 800c340:	9305      	str	r3, [sp, #20]
 800c342:	4619      	mov	r1, r3
 800c344:	f04f 0c0a 	mov.w	ip, #10
 800c348:	4620      	mov	r0, r4
 800c34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c34e:	3a30      	subs	r2, #48	; 0x30
 800c350:	2a09      	cmp	r2, #9
 800c352:	d903      	bls.n	800c35c <_svfiprintf_r+0x1a8>
 800c354:	2b00      	cmp	r3, #0
 800c356:	d0c5      	beq.n	800c2e4 <_svfiprintf_r+0x130>
 800c358:	9105      	str	r1, [sp, #20]
 800c35a:	e7c3      	b.n	800c2e4 <_svfiprintf_r+0x130>
 800c35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c360:	4604      	mov	r4, r0
 800c362:	2301      	movs	r3, #1
 800c364:	e7f0      	b.n	800c348 <_svfiprintf_r+0x194>
 800c366:	ab03      	add	r3, sp, #12
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	462a      	mov	r2, r5
 800c36c:	4b0f      	ldr	r3, [pc, #60]	; (800c3ac <_svfiprintf_r+0x1f8>)
 800c36e:	a904      	add	r1, sp, #16
 800c370:	4638      	mov	r0, r7
 800c372:	f7fc fa13 	bl	800879c <_printf_float>
 800c376:	1c42      	adds	r2, r0, #1
 800c378:	4606      	mov	r6, r0
 800c37a:	d1d6      	bne.n	800c32a <_svfiprintf_r+0x176>
 800c37c:	89ab      	ldrh	r3, [r5, #12]
 800c37e:	065b      	lsls	r3, r3, #25
 800c380:	f53f af2c 	bmi.w	800c1dc <_svfiprintf_r+0x28>
 800c384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c386:	b01d      	add	sp, #116	; 0x74
 800c388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38c:	ab03      	add	r3, sp, #12
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	462a      	mov	r2, r5
 800c392:	4b06      	ldr	r3, [pc, #24]	; (800c3ac <_svfiprintf_r+0x1f8>)
 800c394:	a904      	add	r1, sp, #16
 800c396:	4638      	mov	r0, r7
 800c398:	f7fc fca4 	bl	8008ce4 <_printf_i>
 800c39c:	e7eb      	b.n	800c376 <_svfiprintf_r+0x1c2>
 800c39e:	bf00      	nop
 800c3a0:	0800d224 	.word	0x0800d224
 800c3a4:	0800d22e 	.word	0x0800d22e
 800c3a8:	0800879d 	.word	0x0800879d
 800c3ac:	0800c0ff 	.word	0x0800c0ff
 800c3b0:	0800d22a 	.word	0x0800d22a

0800c3b4 <__sfputc_r>:
 800c3b4:	6893      	ldr	r3, [r2, #8]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	b410      	push	{r4}
 800c3bc:	6093      	str	r3, [r2, #8]
 800c3be:	da08      	bge.n	800c3d2 <__sfputc_r+0x1e>
 800c3c0:	6994      	ldr	r4, [r2, #24]
 800c3c2:	42a3      	cmp	r3, r4
 800c3c4:	db01      	blt.n	800c3ca <__sfputc_r+0x16>
 800c3c6:	290a      	cmp	r1, #10
 800c3c8:	d103      	bne.n	800c3d2 <__sfputc_r+0x1e>
 800c3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ce:	f000 b9ab 	b.w	800c728 <__swbuf_r>
 800c3d2:	6813      	ldr	r3, [r2, #0]
 800c3d4:	1c58      	adds	r0, r3, #1
 800c3d6:	6010      	str	r0, [r2, #0]
 800c3d8:	7019      	strb	r1, [r3, #0]
 800c3da:	4608      	mov	r0, r1
 800c3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <__sfputs_r>:
 800c3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	460f      	mov	r7, r1
 800c3e8:	4614      	mov	r4, r2
 800c3ea:	18d5      	adds	r5, r2, r3
 800c3ec:	42ac      	cmp	r4, r5
 800c3ee:	d101      	bne.n	800c3f4 <__sfputs_r+0x12>
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	e007      	b.n	800c404 <__sfputs_r+0x22>
 800c3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f8:	463a      	mov	r2, r7
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f7ff ffda 	bl	800c3b4 <__sfputc_r>
 800c400:	1c43      	adds	r3, r0, #1
 800c402:	d1f3      	bne.n	800c3ec <__sfputs_r+0xa>
 800c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c408 <_vfiprintf_r>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	460d      	mov	r5, r1
 800c40e:	b09d      	sub	sp, #116	; 0x74
 800c410:	4614      	mov	r4, r2
 800c412:	4698      	mov	r8, r3
 800c414:	4606      	mov	r6, r0
 800c416:	b118      	cbz	r0, 800c420 <_vfiprintf_r+0x18>
 800c418:	6983      	ldr	r3, [r0, #24]
 800c41a:	b90b      	cbnz	r3, 800c420 <_vfiprintf_r+0x18>
 800c41c:	f7fe fd66 	bl	800aeec <__sinit>
 800c420:	4b89      	ldr	r3, [pc, #548]	; (800c648 <_vfiprintf_r+0x240>)
 800c422:	429d      	cmp	r5, r3
 800c424:	d11b      	bne.n	800c45e <_vfiprintf_r+0x56>
 800c426:	6875      	ldr	r5, [r6, #4]
 800c428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c42a:	07d9      	lsls	r1, r3, #31
 800c42c:	d405      	bmi.n	800c43a <_vfiprintf_r+0x32>
 800c42e:	89ab      	ldrh	r3, [r5, #12]
 800c430:	059a      	lsls	r2, r3, #22
 800c432:	d402      	bmi.n	800c43a <_vfiprintf_r+0x32>
 800c434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c436:	f7ff f96a 	bl	800b70e <__retarget_lock_acquire_recursive>
 800c43a:	89ab      	ldrh	r3, [r5, #12]
 800c43c:	071b      	lsls	r3, r3, #28
 800c43e:	d501      	bpl.n	800c444 <_vfiprintf_r+0x3c>
 800c440:	692b      	ldr	r3, [r5, #16]
 800c442:	b9eb      	cbnz	r3, 800c480 <_vfiprintf_r+0x78>
 800c444:	4629      	mov	r1, r5
 800c446:	4630      	mov	r0, r6
 800c448:	f000 f9e0 	bl	800c80c <__swsetup_r>
 800c44c:	b1c0      	cbz	r0, 800c480 <_vfiprintf_r+0x78>
 800c44e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c450:	07dc      	lsls	r4, r3, #31
 800c452:	d50e      	bpl.n	800c472 <_vfiprintf_r+0x6a>
 800c454:	f04f 30ff 	mov.w	r0, #4294967295
 800c458:	b01d      	add	sp, #116	; 0x74
 800c45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45e:	4b7b      	ldr	r3, [pc, #492]	; (800c64c <_vfiprintf_r+0x244>)
 800c460:	429d      	cmp	r5, r3
 800c462:	d101      	bne.n	800c468 <_vfiprintf_r+0x60>
 800c464:	68b5      	ldr	r5, [r6, #8]
 800c466:	e7df      	b.n	800c428 <_vfiprintf_r+0x20>
 800c468:	4b79      	ldr	r3, [pc, #484]	; (800c650 <_vfiprintf_r+0x248>)
 800c46a:	429d      	cmp	r5, r3
 800c46c:	bf08      	it	eq
 800c46e:	68f5      	ldreq	r5, [r6, #12]
 800c470:	e7da      	b.n	800c428 <_vfiprintf_r+0x20>
 800c472:	89ab      	ldrh	r3, [r5, #12]
 800c474:	0598      	lsls	r0, r3, #22
 800c476:	d4ed      	bmi.n	800c454 <_vfiprintf_r+0x4c>
 800c478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c47a:	f7ff f949 	bl	800b710 <__retarget_lock_release_recursive>
 800c47e:	e7e9      	b.n	800c454 <_vfiprintf_r+0x4c>
 800c480:	2300      	movs	r3, #0
 800c482:	9309      	str	r3, [sp, #36]	; 0x24
 800c484:	2320      	movs	r3, #32
 800c486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c48a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c48e:	2330      	movs	r3, #48	; 0x30
 800c490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c654 <_vfiprintf_r+0x24c>
 800c494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c498:	f04f 0901 	mov.w	r9, #1
 800c49c:	4623      	mov	r3, r4
 800c49e:	469a      	mov	sl, r3
 800c4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4a4:	b10a      	cbz	r2, 800c4aa <_vfiprintf_r+0xa2>
 800c4a6:	2a25      	cmp	r2, #37	; 0x25
 800c4a8:	d1f9      	bne.n	800c49e <_vfiprintf_r+0x96>
 800c4aa:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ae:	d00b      	beq.n	800c4c8 <_vfiprintf_r+0xc0>
 800c4b0:	465b      	mov	r3, fp
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7ff ff93 	bl	800c3e2 <__sfputs_r>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	f000 80aa 	beq.w	800c616 <_vfiprintf_r+0x20e>
 800c4c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4c4:	445a      	add	r2, fp
 800c4c6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 80a2 	beq.w	800c616 <_vfiprintf_r+0x20e>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4dc:	f10a 0a01 	add.w	sl, sl, #1
 800c4e0:	9304      	str	r3, [sp, #16]
 800c4e2:	9307      	str	r3, [sp, #28]
 800c4e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4e8:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ea:	4654      	mov	r4, sl
 800c4ec:	2205      	movs	r2, #5
 800c4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f2:	4858      	ldr	r0, [pc, #352]	; (800c654 <_vfiprintf_r+0x24c>)
 800c4f4:	f7f3 fe84 	bl	8000200 <memchr>
 800c4f8:	9a04      	ldr	r2, [sp, #16]
 800c4fa:	b9d8      	cbnz	r0, 800c534 <_vfiprintf_r+0x12c>
 800c4fc:	06d1      	lsls	r1, r2, #27
 800c4fe:	bf44      	itt	mi
 800c500:	2320      	movmi	r3, #32
 800c502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c506:	0713      	lsls	r3, r2, #28
 800c508:	bf44      	itt	mi
 800c50a:	232b      	movmi	r3, #43	; 0x2b
 800c50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c510:	f89a 3000 	ldrb.w	r3, [sl]
 800c514:	2b2a      	cmp	r3, #42	; 0x2a
 800c516:	d015      	beq.n	800c544 <_vfiprintf_r+0x13c>
 800c518:	9a07      	ldr	r2, [sp, #28]
 800c51a:	4654      	mov	r4, sl
 800c51c:	2000      	movs	r0, #0
 800c51e:	f04f 0c0a 	mov.w	ip, #10
 800c522:	4621      	mov	r1, r4
 800c524:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c528:	3b30      	subs	r3, #48	; 0x30
 800c52a:	2b09      	cmp	r3, #9
 800c52c:	d94e      	bls.n	800c5cc <_vfiprintf_r+0x1c4>
 800c52e:	b1b0      	cbz	r0, 800c55e <_vfiprintf_r+0x156>
 800c530:	9207      	str	r2, [sp, #28]
 800c532:	e014      	b.n	800c55e <_vfiprintf_r+0x156>
 800c534:	eba0 0308 	sub.w	r3, r0, r8
 800c538:	fa09 f303 	lsl.w	r3, r9, r3
 800c53c:	4313      	orrs	r3, r2
 800c53e:	9304      	str	r3, [sp, #16]
 800c540:	46a2      	mov	sl, r4
 800c542:	e7d2      	b.n	800c4ea <_vfiprintf_r+0xe2>
 800c544:	9b03      	ldr	r3, [sp, #12]
 800c546:	1d19      	adds	r1, r3, #4
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	9103      	str	r1, [sp, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	bfbb      	ittet	lt
 800c550:	425b      	neglt	r3, r3
 800c552:	f042 0202 	orrlt.w	r2, r2, #2
 800c556:	9307      	strge	r3, [sp, #28]
 800c558:	9307      	strlt	r3, [sp, #28]
 800c55a:	bfb8      	it	lt
 800c55c:	9204      	strlt	r2, [sp, #16]
 800c55e:	7823      	ldrb	r3, [r4, #0]
 800c560:	2b2e      	cmp	r3, #46	; 0x2e
 800c562:	d10c      	bne.n	800c57e <_vfiprintf_r+0x176>
 800c564:	7863      	ldrb	r3, [r4, #1]
 800c566:	2b2a      	cmp	r3, #42	; 0x2a
 800c568:	d135      	bne.n	800c5d6 <_vfiprintf_r+0x1ce>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	1d1a      	adds	r2, r3, #4
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	9203      	str	r2, [sp, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	bfb8      	it	lt
 800c576:	f04f 33ff 	movlt.w	r3, #4294967295
 800c57a:	3402      	adds	r4, #2
 800c57c:	9305      	str	r3, [sp, #20]
 800c57e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c664 <_vfiprintf_r+0x25c>
 800c582:	7821      	ldrb	r1, [r4, #0]
 800c584:	2203      	movs	r2, #3
 800c586:	4650      	mov	r0, sl
 800c588:	f7f3 fe3a 	bl	8000200 <memchr>
 800c58c:	b140      	cbz	r0, 800c5a0 <_vfiprintf_r+0x198>
 800c58e:	2340      	movs	r3, #64	; 0x40
 800c590:	eba0 000a 	sub.w	r0, r0, sl
 800c594:	fa03 f000 	lsl.w	r0, r3, r0
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	4303      	orrs	r3, r0
 800c59c:	3401      	adds	r4, #1
 800c59e:	9304      	str	r3, [sp, #16]
 800c5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a4:	482c      	ldr	r0, [pc, #176]	; (800c658 <_vfiprintf_r+0x250>)
 800c5a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5aa:	2206      	movs	r2, #6
 800c5ac:	f7f3 fe28 	bl	8000200 <memchr>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d03f      	beq.n	800c634 <_vfiprintf_r+0x22c>
 800c5b4:	4b29      	ldr	r3, [pc, #164]	; (800c65c <_vfiprintf_r+0x254>)
 800c5b6:	bb1b      	cbnz	r3, 800c600 <_vfiprintf_r+0x1f8>
 800c5b8:	9b03      	ldr	r3, [sp, #12]
 800c5ba:	3307      	adds	r3, #7
 800c5bc:	f023 0307 	bic.w	r3, r3, #7
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	9303      	str	r3, [sp, #12]
 800c5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c6:	443b      	add	r3, r7
 800c5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ca:	e767      	b.n	800c49c <_vfiprintf_r+0x94>
 800c5cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	2001      	movs	r0, #1
 800c5d4:	e7a5      	b.n	800c522 <_vfiprintf_r+0x11a>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	3401      	adds	r4, #1
 800c5da:	9305      	str	r3, [sp, #20]
 800c5dc:	4619      	mov	r1, r3
 800c5de:	f04f 0c0a 	mov.w	ip, #10
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5e8:	3a30      	subs	r2, #48	; 0x30
 800c5ea:	2a09      	cmp	r2, #9
 800c5ec:	d903      	bls.n	800c5f6 <_vfiprintf_r+0x1ee>
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d0c5      	beq.n	800c57e <_vfiprintf_r+0x176>
 800c5f2:	9105      	str	r1, [sp, #20]
 800c5f4:	e7c3      	b.n	800c57e <_vfiprintf_r+0x176>
 800c5f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e7f0      	b.n	800c5e2 <_vfiprintf_r+0x1da>
 800c600:	ab03      	add	r3, sp, #12
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	462a      	mov	r2, r5
 800c606:	4b16      	ldr	r3, [pc, #88]	; (800c660 <_vfiprintf_r+0x258>)
 800c608:	a904      	add	r1, sp, #16
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7fc f8c6 	bl	800879c <_printf_float>
 800c610:	4607      	mov	r7, r0
 800c612:	1c78      	adds	r0, r7, #1
 800c614:	d1d6      	bne.n	800c5c4 <_vfiprintf_r+0x1bc>
 800c616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c618:	07d9      	lsls	r1, r3, #31
 800c61a:	d405      	bmi.n	800c628 <_vfiprintf_r+0x220>
 800c61c:	89ab      	ldrh	r3, [r5, #12]
 800c61e:	059a      	lsls	r2, r3, #22
 800c620:	d402      	bmi.n	800c628 <_vfiprintf_r+0x220>
 800c622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c624:	f7ff f874 	bl	800b710 <__retarget_lock_release_recursive>
 800c628:	89ab      	ldrh	r3, [r5, #12]
 800c62a:	065b      	lsls	r3, r3, #25
 800c62c:	f53f af12 	bmi.w	800c454 <_vfiprintf_r+0x4c>
 800c630:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c632:	e711      	b.n	800c458 <_vfiprintf_r+0x50>
 800c634:	ab03      	add	r3, sp, #12
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	462a      	mov	r2, r5
 800c63a:	4b09      	ldr	r3, [pc, #36]	; (800c660 <_vfiprintf_r+0x258>)
 800c63c:	a904      	add	r1, sp, #16
 800c63e:	4630      	mov	r0, r6
 800c640:	f7fc fb50 	bl	8008ce4 <_printf_i>
 800c644:	e7e4      	b.n	800c610 <_vfiprintf_r+0x208>
 800c646:	bf00      	nop
 800c648:	0800d00c 	.word	0x0800d00c
 800c64c:	0800d02c 	.word	0x0800d02c
 800c650:	0800cfec 	.word	0x0800cfec
 800c654:	0800d224 	.word	0x0800d224
 800c658:	0800d22e 	.word	0x0800d22e
 800c65c:	0800879d 	.word	0x0800879d
 800c660:	0800c3e3 	.word	0x0800c3e3
 800c664:	0800d22a 	.word	0x0800d22a

0800c668 <nan>:
 800c668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c670 <nan+0x8>
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	00000000 	.word	0x00000000
 800c674:	7ff80000 	.word	0x7ff80000

0800c678 <__sread>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	460c      	mov	r4, r1
 800c67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c680:	f000 faf6 	bl	800cc70 <_read_r>
 800c684:	2800      	cmp	r0, #0
 800c686:	bfab      	itete	ge
 800c688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c68a:	89a3      	ldrhlt	r3, [r4, #12]
 800c68c:	181b      	addge	r3, r3, r0
 800c68e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c692:	bfac      	ite	ge
 800c694:	6563      	strge	r3, [r4, #84]	; 0x54
 800c696:	81a3      	strhlt	r3, [r4, #12]
 800c698:	bd10      	pop	{r4, pc}

0800c69a <__swrite>:
 800c69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c69e:	461f      	mov	r7, r3
 800c6a0:	898b      	ldrh	r3, [r1, #12]
 800c6a2:	05db      	lsls	r3, r3, #23
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	4616      	mov	r6, r2
 800c6aa:	d505      	bpl.n	800c6b8 <__swrite+0x1e>
 800c6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f000 fa1a 	bl	800caec <_lseek_r>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	4632      	mov	r2, r6
 800c6c6:	463b      	mov	r3, r7
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ce:	f000 b88b 	b.w	800c7e8 <_write_r>

0800c6d2 <__sseek>:
 800c6d2:	b510      	push	{r4, lr}
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6da:	f000 fa07 	bl	800caec <_lseek_r>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	bf15      	itete	ne
 800c6e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6ee:	81a3      	strheq	r3, [r4, #12]
 800c6f0:	bf18      	it	ne
 800c6f2:	81a3      	strhne	r3, [r4, #12]
 800c6f4:	bd10      	pop	{r4, pc}

0800c6f6 <__sclose>:
 800c6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fa:	f000 b913 	b.w	800c924 <_close_r>

0800c6fe <strncmp>:
 800c6fe:	b510      	push	{r4, lr}
 800c700:	b17a      	cbz	r2, 800c722 <strncmp+0x24>
 800c702:	4603      	mov	r3, r0
 800c704:	3901      	subs	r1, #1
 800c706:	1884      	adds	r4, r0, r2
 800c708:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c70c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c710:	4290      	cmp	r0, r2
 800c712:	d101      	bne.n	800c718 <strncmp+0x1a>
 800c714:	42a3      	cmp	r3, r4
 800c716:	d101      	bne.n	800c71c <strncmp+0x1e>
 800c718:	1a80      	subs	r0, r0, r2
 800c71a:	bd10      	pop	{r4, pc}
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d1f3      	bne.n	800c708 <strncmp+0xa>
 800c720:	e7fa      	b.n	800c718 <strncmp+0x1a>
 800c722:	4610      	mov	r0, r2
 800c724:	e7f9      	b.n	800c71a <strncmp+0x1c>
	...

0800c728 <__swbuf_r>:
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	460e      	mov	r6, r1
 800c72c:	4614      	mov	r4, r2
 800c72e:	4605      	mov	r5, r0
 800c730:	b118      	cbz	r0, 800c73a <__swbuf_r+0x12>
 800c732:	6983      	ldr	r3, [r0, #24]
 800c734:	b90b      	cbnz	r3, 800c73a <__swbuf_r+0x12>
 800c736:	f7fe fbd9 	bl	800aeec <__sinit>
 800c73a:	4b21      	ldr	r3, [pc, #132]	; (800c7c0 <__swbuf_r+0x98>)
 800c73c:	429c      	cmp	r4, r3
 800c73e:	d12b      	bne.n	800c798 <__swbuf_r+0x70>
 800c740:	686c      	ldr	r4, [r5, #4]
 800c742:	69a3      	ldr	r3, [r4, #24]
 800c744:	60a3      	str	r3, [r4, #8]
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	071a      	lsls	r2, r3, #28
 800c74a:	d52f      	bpl.n	800c7ac <__swbuf_r+0x84>
 800c74c:	6923      	ldr	r3, [r4, #16]
 800c74e:	b36b      	cbz	r3, 800c7ac <__swbuf_r+0x84>
 800c750:	6923      	ldr	r3, [r4, #16]
 800c752:	6820      	ldr	r0, [r4, #0]
 800c754:	1ac0      	subs	r0, r0, r3
 800c756:	6963      	ldr	r3, [r4, #20]
 800c758:	b2f6      	uxtb	r6, r6
 800c75a:	4283      	cmp	r3, r0
 800c75c:	4637      	mov	r7, r6
 800c75e:	dc04      	bgt.n	800c76a <__swbuf_r+0x42>
 800c760:	4621      	mov	r1, r4
 800c762:	4628      	mov	r0, r5
 800c764:	f000 f974 	bl	800ca50 <_fflush_r>
 800c768:	bb30      	cbnz	r0, 800c7b8 <__swbuf_r+0x90>
 800c76a:	68a3      	ldr	r3, [r4, #8]
 800c76c:	3b01      	subs	r3, #1
 800c76e:	60a3      	str	r3, [r4, #8]
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	6022      	str	r2, [r4, #0]
 800c776:	701e      	strb	r6, [r3, #0]
 800c778:	6963      	ldr	r3, [r4, #20]
 800c77a:	3001      	adds	r0, #1
 800c77c:	4283      	cmp	r3, r0
 800c77e:	d004      	beq.n	800c78a <__swbuf_r+0x62>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	07db      	lsls	r3, r3, #31
 800c784:	d506      	bpl.n	800c794 <__swbuf_r+0x6c>
 800c786:	2e0a      	cmp	r6, #10
 800c788:	d104      	bne.n	800c794 <__swbuf_r+0x6c>
 800c78a:	4621      	mov	r1, r4
 800c78c:	4628      	mov	r0, r5
 800c78e:	f000 f95f 	bl	800ca50 <_fflush_r>
 800c792:	b988      	cbnz	r0, 800c7b8 <__swbuf_r+0x90>
 800c794:	4638      	mov	r0, r7
 800c796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <__swbuf_r+0x9c>)
 800c79a:	429c      	cmp	r4, r3
 800c79c:	d101      	bne.n	800c7a2 <__swbuf_r+0x7a>
 800c79e:	68ac      	ldr	r4, [r5, #8]
 800c7a0:	e7cf      	b.n	800c742 <__swbuf_r+0x1a>
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <__swbuf_r+0xa0>)
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	bf08      	it	eq
 800c7a8:	68ec      	ldreq	r4, [r5, #12]
 800c7aa:	e7ca      	b.n	800c742 <__swbuf_r+0x1a>
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f000 f82c 	bl	800c80c <__swsetup_r>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d0cb      	beq.n	800c750 <__swbuf_r+0x28>
 800c7b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c7bc:	e7ea      	b.n	800c794 <__swbuf_r+0x6c>
 800c7be:	bf00      	nop
 800c7c0:	0800d00c 	.word	0x0800d00c
 800c7c4:	0800d02c 	.word	0x0800d02c
 800c7c8:	0800cfec 	.word	0x0800cfec

0800c7cc <__ascii_wctomb>:
 800c7cc:	b149      	cbz	r1, 800c7e2 <__ascii_wctomb+0x16>
 800c7ce:	2aff      	cmp	r2, #255	; 0xff
 800c7d0:	bf85      	ittet	hi
 800c7d2:	238a      	movhi	r3, #138	; 0x8a
 800c7d4:	6003      	strhi	r3, [r0, #0]
 800c7d6:	700a      	strbls	r2, [r1, #0]
 800c7d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c7dc:	bf98      	it	ls
 800c7de:	2001      	movls	r0, #1
 800c7e0:	4770      	bx	lr
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	4770      	bx	lr
	...

0800c7e8 <_write_r>:
 800c7e8:	b538      	push	{r3, r4, r5, lr}
 800c7ea:	4d07      	ldr	r5, [pc, #28]	; (800c808 <_write_r+0x20>)
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	4608      	mov	r0, r1
 800c7f0:	4611      	mov	r1, r2
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	602a      	str	r2, [r5, #0]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	f7f5 faeb 	bl	8001dd2 <_write>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_write_r+0x1e>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_write_r+0x1e>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	200047c4 	.word	0x200047c4

0800c80c <__swsetup_r>:
 800c80c:	4b32      	ldr	r3, [pc, #200]	; (800c8d8 <__swsetup_r+0xcc>)
 800c80e:	b570      	push	{r4, r5, r6, lr}
 800c810:	681d      	ldr	r5, [r3, #0]
 800c812:	4606      	mov	r6, r0
 800c814:	460c      	mov	r4, r1
 800c816:	b125      	cbz	r5, 800c822 <__swsetup_r+0x16>
 800c818:	69ab      	ldr	r3, [r5, #24]
 800c81a:	b913      	cbnz	r3, 800c822 <__swsetup_r+0x16>
 800c81c:	4628      	mov	r0, r5
 800c81e:	f7fe fb65 	bl	800aeec <__sinit>
 800c822:	4b2e      	ldr	r3, [pc, #184]	; (800c8dc <__swsetup_r+0xd0>)
 800c824:	429c      	cmp	r4, r3
 800c826:	d10f      	bne.n	800c848 <__swsetup_r+0x3c>
 800c828:	686c      	ldr	r4, [r5, #4]
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c830:	0719      	lsls	r1, r3, #28
 800c832:	d42c      	bmi.n	800c88e <__swsetup_r+0x82>
 800c834:	06dd      	lsls	r5, r3, #27
 800c836:	d411      	bmi.n	800c85c <__swsetup_r+0x50>
 800c838:	2309      	movs	r3, #9
 800c83a:	6033      	str	r3, [r6, #0]
 800c83c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c840:	81a3      	strh	r3, [r4, #12]
 800c842:	f04f 30ff 	mov.w	r0, #4294967295
 800c846:	e03e      	b.n	800c8c6 <__swsetup_r+0xba>
 800c848:	4b25      	ldr	r3, [pc, #148]	; (800c8e0 <__swsetup_r+0xd4>)
 800c84a:	429c      	cmp	r4, r3
 800c84c:	d101      	bne.n	800c852 <__swsetup_r+0x46>
 800c84e:	68ac      	ldr	r4, [r5, #8]
 800c850:	e7eb      	b.n	800c82a <__swsetup_r+0x1e>
 800c852:	4b24      	ldr	r3, [pc, #144]	; (800c8e4 <__swsetup_r+0xd8>)
 800c854:	429c      	cmp	r4, r3
 800c856:	bf08      	it	eq
 800c858:	68ec      	ldreq	r4, [r5, #12]
 800c85a:	e7e6      	b.n	800c82a <__swsetup_r+0x1e>
 800c85c:	0758      	lsls	r0, r3, #29
 800c85e:	d512      	bpl.n	800c886 <__swsetup_r+0x7a>
 800c860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c862:	b141      	cbz	r1, 800c876 <__swsetup_r+0x6a>
 800c864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c868:	4299      	cmp	r1, r3
 800c86a:	d002      	beq.n	800c872 <__swsetup_r+0x66>
 800c86c:	4630      	mov	r0, r6
 800c86e:	f7fb fe15 	bl	800849c <_free_r>
 800c872:	2300      	movs	r3, #0
 800c874:	6363      	str	r3, [r4, #52]	; 0x34
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c87c:	81a3      	strh	r3, [r4, #12]
 800c87e:	2300      	movs	r3, #0
 800c880:	6063      	str	r3, [r4, #4]
 800c882:	6923      	ldr	r3, [r4, #16]
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	f043 0308 	orr.w	r3, r3, #8
 800c88c:	81a3      	strh	r3, [r4, #12]
 800c88e:	6923      	ldr	r3, [r4, #16]
 800c890:	b94b      	cbnz	r3, 800c8a6 <__swsetup_r+0x9a>
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c89c:	d003      	beq.n	800c8a6 <__swsetup_r+0x9a>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f000 f95b 	bl	800cb5c <__smakebuf_r>
 800c8a6:	89a0      	ldrh	r0, [r4, #12]
 800c8a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8ac:	f010 0301 	ands.w	r3, r0, #1
 800c8b0:	d00a      	beq.n	800c8c8 <__swsetup_r+0xbc>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	60a3      	str	r3, [r4, #8]
 800c8b6:	6963      	ldr	r3, [r4, #20]
 800c8b8:	425b      	negs	r3, r3
 800c8ba:	61a3      	str	r3, [r4, #24]
 800c8bc:	6923      	ldr	r3, [r4, #16]
 800c8be:	b943      	cbnz	r3, 800c8d2 <__swsetup_r+0xc6>
 800c8c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8c4:	d1ba      	bne.n	800c83c <__swsetup_r+0x30>
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	0781      	lsls	r1, r0, #30
 800c8ca:	bf58      	it	pl
 800c8cc:	6963      	ldrpl	r3, [r4, #20]
 800c8ce:	60a3      	str	r3, [r4, #8]
 800c8d0:	e7f4      	b.n	800c8bc <__swsetup_r+0xb0>
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	e7f7      	b.n	800c8c6 <__swsetup_r+0xba>
 800c8d6:	bf00      	nop
 800c8d8:	20000010 	.word	0x20000010
 800c8dc:	0800d00c 	.word	0x0800d00c
 800c8e0:	0800d02c 	.word	0x0800d02c
 800c8e4:	0800cfec 	.word	0x0800cfec

0800c8e8 <__assert_func>:
 800c8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8ea:	4614      	mov	r4, r2
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	4b09      	ldr	r3, [pc, #36]	; (800c914 <__assert_func+0x2c>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	68d8      	ldr	r0, [r3, #12]
 800c8f6:	b14c      	cbz	r4, 800c90c <__assert_func+0x24>
 800c8f8:	4b07      	ldr	r3, [pc, #28]	; (800c918 <__assert_func+0x30>)
 800c8fa:	9100      	str	r1, [sp, #0]
 800c8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c900:	4906      	ldr	r1, [pc, #24]	; (800c91c <__assert_func+0x34>)
 800c902:	462b      	mov	r3, r5
 800c904:	f000 f8e0 	bl	800cac8 <fiprintf>
 800c908:	f000 f9c4 	bl	800cc94 <abort>
 800c90c:	4b04      	ldr	r3, [pc, #16]	; (800c920 <__assert_func+0x38>)
 800c90e:	461c      	mov	r4, r3
 800c910:	e7f3      	b.n	800c8fa <__assert_func+0x12>
 800c912:	bf00      	nop
 800c914:	20000010 	.word	0x20000010
 800c918:	0800d235 	.word	0x0800d235
 800c91c:	0800d242 	.word	0x0800d242
 800c920:	0800d270 	.word	0x0800d270

0800c924 <_close_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4d06      	ldr	r5, [pc, #24]	; (800c940 <_close_r+0x1c>)
 800c928:	2300      	movs	r3, #0
 800c92a:	4604      	mov	r4, r0
 800c92c:	4608      	mov	r0, r1
 800c92e:	602b      	str	r3, [r5, #0]
 800c930:	f7f5 fa6b 	bl	8001e0a <_close>
 800c934:	1c43      	adds	r3, r0, #1
 800c936:	d102      	bne.n	800c93e <_close_r+0x1a>
 800c938:	682b      	ldr	r3, [r5, #0]
 800c93a:	b103      	cbz	r3, 800c93e <_close_r+0x1a>
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	bd38      	pop	{r3, r4, r5, pc}
 800c940:	200047c4 	.word	0x200047c4

0800c944 <__sflush_r>:
 800c944:	898a      	ldrh	r2, [r1, #12]
 800c946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94a:	4605      	mov	r5, r0
 800c94c:	0710      	lsls	r0, r2, #28
 800c94e:	460c      	mov	r4, r1
 800c950:	d458      	bmi.n	800ca04 <__sflush_r+0xc0>
 800c952:	684b      	ldr	r3, [r1, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	dc05      	bgt.n	800c964 <__sflush_r+0x20>
 800c958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	dc02      	bgt.n	800c964 <__sflush_r+0x20>
 800c95e:	2000      	movs	r0, #0
 800c960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c966:	2e00      	cmp	r6, #0
 800c968:	d0f9      	beq.n	800c95e <__sflush_r+0x1a>
 800c96a:	2300      	movs	r3, #0
 800c96c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c970:	682f      	ldr	r7, [r5, #0]
 800c972:	602b      	str	r3, [r5, #0]
 800c974:	d032      	beq.n	800c9dc <__sflush_r+0x98>
 800c976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	075a      	lsls	r2, r3, #29
 800c97c:	d505      	bpl.n	800c98a <__sflush_r+0x46>
 800c97e:	6863      	ldr	r3, [r4, #4]
 800c980:	1ac0      	subs	r0, r0, r3
 800c982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c984:	b10b      	cbz	r3, 800c98a <__sflush_r+0x46>
 800c986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c988:	1ac0      	subs	r0, r0, r3
 800c98a:	2300      	movs	r3, #0
 800c98c:	4602      	mov	r2, r0
 800c98e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c990:	6a21      	ldr	r1, [r4, #32]
 800c992:	4628      	mov	r0, r5
 800c994:	47b0      	blx	r6
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	d106      	bne.n	800c9aa <__sflush_r+0x66>
 800c99c:	6829      	ldr	r1, [r5, #0]
 800c99e:	291d      	cmp	r1, #29
 800c9a0:	d82c      	bhi.n	800c9fc <__sflush_r+0xb8>
 800c9a2:	4a2a      	ldr	r2, [pc, #168]	; (800ca4c <__sflush_r+0x108>)
 800c9a4:	40ca      	lsrs	r2, r1
 800c9a6:	07d6      	lsls	r6, r2, #31
 800c9a8:	d528      	bpl.n	800c9fc <__sflush_r+0xb8>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	6062      	str	r2, [r4, #4]
 800c9ae:	04d9      	lsls	r1, r3, #19
 800c9b0:	6922      	ldr	r2, [r4, #16]
 800c9b2:	6022      	str	r2, [r4, #0]
 800c9b4:	d504      	bpl.n	800c9c0 <__sflush_r+0x7c>
 800c9b6:	1c42      	adds	r2, r0, #1
 800c9b8:	d101      	bne.n	800c9be <__sflush_r+0x7a>
 800c9ba:	682b      	ldr	r3, [r5, #0]
 800c9bc:	b903      	cbnz	r3, 800c9c0 <__sflush_r+0x7c>
 800c9be:	6560      	str	r0, [r4, #84]	; 0x54
 800c9c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9c2:	602f      	str	r7, [r5, #0]
 800c9c4:	2900      	cmp	r1, #0
 800c9c6:	d0ca      	beq.n	800c95e <__sflush_r+0x1a>
 800c9c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	d002      	beq.n	800c9d6 <__sflush_r+0x92>
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f7fb fd63 	bl	800849c <_free_r>
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c9da:	e7c1      	b.n	800c960 <__sflush_r+0x1c>
 800c9dc:	6a21      	ldr	r1, [r4, #32]
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	47b0      	blx	r6
 800c9e4:	1c41      	adds	r1, r0, #1
 800c9e6:	d1c7      	bne.n	800c978 <__sflush_r+0x34>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0c4      	beq.n	800c978 <__sflush_r+0x34>
 800c9ee:	2b1d      	cmp	r3, #29
 800c9f0:	d001      	beq.n	800c9f6 <__sflush_r+0xb2>
 800c9f2:	2b16      	cmp	r3, #22
 800c9f4:	d101      	bne.n	800c9fa <__sflush_r+0xb6>
 800c9f6:	602f      	str	r7, [r5, #0]
 800c9f8:	e7b1      	b.n	800c95e <__sflush_r+0x1a>
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca00:	81a3      	strh	r3, [r4, #12]
 800ca02:	e7ad      	b.n	800c960 <__sflush_r+0x1c>
 800ca04:	690f      	ldr	r7, [r1, #16]
 800ca06:	2f00      	cmp	r7, #0
 800ca08:	d0a9      	beq.n	800c95e <__sflush_r+0x1a>
 800ca0a:	0793      	lsls	r3, r2, #30
 800ca0c:	680e      	ldr	r6, [r1, #0]
 800ca0e:	bf08      	it	eq
 800ca10:	694b      	ldreq	r3, [r1, #20]
 800ca12:	600f      	str	r7, [r1, #0]
 800ca14:	bf18      	it	ne
 800ca16:	2300      	movne	r3, #0
 800ca18:	eba6 0807 	sub.w	r8, r6, r7
 800ca1c:	608b      	str	r3, [r1, #8]
 800ca1e:	f1b8 0f00 	cmp.w	r8, #0
 800ca22:	dd9c      	ble.n	800c95e <__sflush_r+0x1a>
 800ca24:	6a21      	ldr	r1, [r4, #32]
 800ca26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca28:	4643      	mov	r3, r8
 800ca2a:	463a      	mov	r2, r7
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	47b0      	blx	r6
 800ca30:	2800      	cmp	r0, #0
 800ca32:	dc06      	bgt.n	800ca42 <__sflush_r+0xfe>
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca3a:	81a3      	strh	r3, [r4, #12]
 800ca3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca40:	e78e      	b.n	800c960 <__sflush_r+0x1c>
 800ca42:	4407      	add	r7, r0
 800ca44:	eba8 0800 	sub.w	r8, r8, r0
 800ca48:	e7e9      	b.n	800ca1e <__sflush_r+0xda>
 800ca4a:	bf00      	nop
 800ca4c:	20400001 	.word	0x20400001

0800ca50 <_fflush_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	690b      	ldr	r3, [r1, #16]
 800ca54:	4605      	mov	r5, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	b913      	cbnz	r3, 800ca60 <_fflush_r+0x10>
 800ca5a:	2500      	movs	r5, #0
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
 800ca60:	b118      	cbz	r0, 800ca6a <_fflush_r+0x1a>
 800ca62:	6983      	ldr	r3, [r0, #24]
 800ca64:	b90b      	cbnz	r3, 800ca6a <_fflush_r+0x1a>
 800ca66:	f7fe fa41 	bl	800aeec <__sinit>
 800ca6a:	4b14      	ldr	r3, [pc, #80]	; (800cabc <_fflush_r+0x6c>)
 800ca6c:	429c      	cmp	r4, r3
 800ca6e:	d11b      	bne.n	800caa8 <_fflush_r+0x58>
 800ca70:	686c      	ldr	r4, [r5, #4]
 800ca72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0ef      	beq.n	800ca5a <_fflush_r+0xa>
 800ca7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca7c:	07d0      	lsls	r0, r2, #31
 800ca7e:	d404      	bmi.n	800ca8a <_fflush_r+0x3a>
 800ca80:	0599      	lsls	r1, r3, #22
 800ca82:	d402      	bmi.n	800ca8a <_fflush_r+0x3a>
 800ca84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca86:	f7fe fe42 	bl	800b70e <__retarget_lock_acquire_recursive>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	f7ff ff59 	bl	800c944 <__sflush_r>
 800ca92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca94:	07da      	lsls	r2, r3, #31
 800ca96:	4605      	mov	r5, r0
 800ca98:	d4e0      	bmi.n	800ca5c <_fflush_r+0xc>
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	059b      	lsls	r3, r3, #22
 800ca9e:	d4dd      	bmi.n	800ca5c <_fflush_r+0xc>
 800caa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caa2:	f7fe fe35 	bl	800b710 <__retarget_lock_release_recursive>
 800caa6:	e7d9      	b.n	800ca5c <_fflush_r+0xc>
 800caa8:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <_fflush_r+0x70>)
 800caaa:	429c      	cmp	r4, r3
 800caac:	d101      	bne.n	800cab2 <_fflush_r+0x62>
 800caae:	68ac      	ldr	r4, [r5, #8]
 800cab0:	e7df      	b.n	800ca72 <_fflush_r+0x22>
 800cab2:	4b04      	ldr	r3, [pc, #16]	; (800cac4 <_fflush_r+0x74>)
 800cab4:	429c      	cmp	r4, r3
 800cab6:	bf08      	it	eq
 800cab8:	68ec      	ldreq	r4, [r5, #12]
 800caba:	e7da      	b.n	800ca72 <_fflush_r+0x22>
 800cabc:	0800d00c 	.word	0x0800d00c
 800cac0:	0800d02c 	.word	0x0800d02c
 800cac4:	0800cfec 	.word	0x0800cfec

0800cac8 <fiprintf>:
 800cac8:	b40e      	push	{r1, r2, r3}
 800caca:	b503      	push	{r0, r1, lr}
 800cacc:	4601      	mov	r1, r0
 800cace:	ab03      	add	r3, sp, #12
 800cad0:	4805      	ldr	r0, [pc, #20]	; (800cae8 <fiprintf+0x20>)
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	6800      	ldr	r0, [r0, #0]
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	f7ff fc95 	bl	800c408 <_vfiprintf_r>
 800cade:	b002      	add	sp, #8
 800cae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae4:	b003      	add	sp, #12
 800cae6:	4770      	bx	lr
 800cae8:	20000010 	.word	0x20000010

0800caec <_lseek_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4d07      	ldr	r5, [pc, #28]	; (800cb0c <_lseek_r+0x20>)
 800caf0:	4604      	mov	r4, r0
 800caf2:	4608      	mov	r0, r1
 800caf4:	4611      	mov	r1, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	602a      	str	r2, [r5, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	f7f5 f9ac 	bl	8001e58 <_lseek>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_lseek_r+0x1e>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_lseek_r+0x1e>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	200047c4 	.word	0x200047c4

0800cb10 <__swhatbuf_r>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	460e      	mov	r6, r1
 800cb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb18:	2900      	cmp	r1, #0
 800cb1a:	b096      	sub	sp, #88	; 0x58
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	461d      	mov	r5, r3
 800cb20:	da08      	bge.n	800cb34 <__swhatbuf_r+0x24>
 800cb22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	602a      	str	r2, [r5, #0]
 800cb2a:	061a      	lsls	r2, r3, #24
 800cb2c:	d410      	bmi.n	800cb50 <__swhatbuf_r+0x40>
 800cb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb32:	e00e      	b.n	800cb52 <__swhatbuf_r+0x42>
 800cb34:	466a      	mov	r2, sp
 800cb36:	f000 f8b5 	bl	800cca4 <_fstat_r>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	dbf1      	blt.n	800cb22 <__swhatbuf_r+0x12>
 800cb3e:	9a01      	ldr	r2, [sp, #4]
 800cb40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb48:	425a      	negs	r2, r3
 800cb4a:	415a      	adcs	r2, r3
 800cb4c:	602a      	str	r2, [r5, #0]
 800cb4e:	e7ee      	b.n	800cb2e <__swhatbuf_r+0x1e>
 800cb50:	2340      	movs	r3, #64	; 0x40
 800cb52:	2000      	movs	r0, #0
 800cb54:	6023      	str	r3, [r4, #0]
 800cb56:	b016      	add	sp, #88	; 0x58
 800cb58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb5c <__smakebuf_r>:
 800cb5c:	898b      	ldrh	r3, [r1, #12]
 800cb5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb60:	079d      	lsls	r5, r3, #30
 800cb62:	4606      	mov	r6, r0
 800cb64:	460c      	mov	r4, r1
 800cb66:	d507      	bpl.n	800cb78 <__smakebuf_r+0x1c>
 800cb68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	6123      	str	r3, [r4, #16]
 800cb70:	2301      	movs	r3, #1
 800cb72:	6163      	str	r3, [r4, #20]
 800cb74:	b002      	add	sp, #8
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	ab01      	add	r3, sp, #4
 800cb7a:	466a      	mov	r2, sp
 800cb7c:	f7ff ffc8 	bl	800cb10 <__swhatbuf_r>
 800cb80:	9900      	ldr	r1, [sp, #0]
 800cb82:	4605      	mov	r5, r0
 800cb84:	4630      	mov	r0, r6
 800cb86:	f7fb fcf5 	bl	8008574 <_malloc_r>
 800cb8a:	b948      	cbnz	r0, 800cba0 <__smakebuf_r+0x44>
 800cb8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb90:	059a      	lsls	r2, r3, #22
 800cb92:	d4ef      	bmi.n	800cb74 <__smakebuf_r+0x18>
 800cb94:	f023 0303 	bic.w	r3, r3, #3
 800cb98:	f043 0302 	orr.w	r3, r3, #2
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	e7e3      	b.n	800cb68 <__smakebuf_r+0xc>
 800cba0:	4b0d      	ldr	r3, [pc, #52]	; (800cbd8 <__smakebuf_r+0x7c>)
 800cba2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	6020      	str	r0, [r4, #0]
 800cba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	9b00      	ldr	r3, [sp, #0]
 800cbb0:	6163      	str	r3, [r4, #20]
 800cbb2:	9b01      	ldr	r3, [sp, #4]
 800cbb4:	6120      	str	r0, [r4, #16]
 800cbb6:	b15b      	cbz	r3, 800cbd0 <__smakebuf_r+0x74>
 800cbb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	f000 f883 	bl	800ccc8 <_isatty_r>
 800cbc2:	b128      	cbz	r0, 800cbd0 <__smakebuf_r+0x74>
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	f023 0303 	bic.w	r3, r3, #3
 800cbca:	f043 0301 	orr.w	r3, r3, #1
 800cbce:	81a3      	strh	r3, [r4, #12]
 800cbd0:	89a0      	ldrh	r0, [r4, #12]
 800cbd2:	4305      	orrs	r5, r0
 800cbd4:	81a5      	strh	r5, [r4, #12]
 800cbd6:	e7cd      	b.n	800cb74 <__smakebuf_r+0x18>
 800cbd8:	0800ae85 	.word	0x0800ae85

0800cbdc <memmove>:
 800cbdc:	4288      	cmp	r0, r1
 800cbde:	b510      	push	{r4, lr}
 800cbe0:	eb01 0402 	add.w	r4, r1, r2
 800cbe4:	d902      	bls.n	800cbec <memmove+0x10>
 800cbe6:	4284      	cmp	r4, r0
 800cbe8:	4623      	mov	r3, r4
 800cbea:	d807      	bhi.n	800cbfc <memmove+0x20>
 800cbec:	1e43      	subs	r3, r0, #1
 800cbee:	42a1      	cmp	r1, r4
 800cbf0:	d008      	beq.n	800cc04 <memmove+0x28>
 800cbf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbfa:	e7f8      	b.n	800cbee <memmove+0x12>
 800cbfc:	4402      	add	r2, r0
 800cbfe:	4601      	mov	r1, r0
 800cc00:	428a      	cmp	r2, r1
 800cc02:	d100      	bne.n	800cc06 <memmove+0x2a>
 800cc04:	bd10      	pop	{r4, pc}
 800cc06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc0e:	e7f7      	b.n	800cc00 <memmove+0x24>

0800cc10 <_realloc_r>:
 800cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc14:	4680      	mov	r8, r0
 800cc16:	4614      	mov	r4, r2
 800cc18:	460e      	mov	r6, r1
 800cc1a:	b921      	cbnz	r1, 800cc26 <_realloc_r+0x16>
 800cc1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc20:	4611      	mov	r1, r2
 800cc22:	f7fb bca7 	b.w	8008574 <_malloc_r>
 800cc26:	b92a      	cbnz	r2, 800cc34 <_realloc_r+0x24>
 800cc28:	f7fb fc38 	bl	800849c <_free_r>
 800cc2c:	4625      	mov	r5, r4
 800cc2e:	4628      	mov	r0, r5
 800cc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc34:	f000 f858 	bl	800cce8 <_malloc_usable_size_r>
 800cc38:	4284      	cmp	r4, r0
 800cc3a:	4607      	mov	r7, r0
 800cc3c:	d802      	bhi.n	800cc44 <_realloc_r+0x34>
 800cc3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc42:	d812      	bhi.n	800cc6a <_realloc_r+0x5a>
 800cc44:	4621      	mov	r1, r4
 800cc46:	4640      	mov	r0, r8
 800cc48:	f7fb fc94 	bl	8008574 <_malloc_r>
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d0ed      	beq.n	800cc2e <_realloc_r+0x1e>
 800cc52:	42bc      	cmp	r4, r7
 800cc54:	4622      	mov	r2, r4
 800cc56:	4631      	mov	r1, r6
 800cc58:	bf28      	it	cs
 800cc5a:	463a      	movcs	r2, r7
 800cc5c:	f7fb fc08 	bl	8008470 <memcpy>
 800cc60:	4631      	mov	r1, r6
 800cc62:	4640      	mov	r0, r8
 800cc64:	f7fb fc1a 	bl	800849c <_free_r>
 800cc68:	e7e1      	b.n	800cc2e <_realloc_r+0x1e>
 800cc6a:	4635      	mov	r5, r6
 800cc6c:	e7df      	b.n	800cc2e <_realloc_r+0x1e>
	...

0800cc70 <_read_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4d07      	ldr	r5, [pc, #28]	; (800cc90 <_read_r+0x20>)
 800cc74:	4604      	mov	r4, r0
 800cc76:	4608      	mov	r0, r1
 800cc78:	4611      	mov	r1, r2
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	602a      	str	r2, [r5, #0]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	f7f5 f88a 	bl	8001d98 <_read>
 800cc84:	1c43      	adds	r3, r0, #1
 800cc86:	d102      	bne.n	800cc8e <_read_r+0x1e>
 800cc88:	682b      	ldr	r3, [r5, #0]
 800cc8a:	b103      	cbz	r3, 800cc8e <_read_r+0x1e>
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	bd38      	pop	{r3, r4, r5, pc}
 800cc90:	200047c4 	.word	0x200047c4

0800cc94 <abort>:
 800cc94:	b508      	push	{r3, lr}
 800cc96:	2006      	movs	r0, #6
 800cc98:	f000 f856 	bl	800cd48 <raise>
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	f7f5 f871 	bl	8001d84 <_exit>
	...

0800cca4 <_fstat_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d07      	ldr	r5, [pc, #28]	; (800ccc4 <_fstat_r+0x20>)
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4608      	mov	r0, r1
 800ccae:	4611      	mov	r1, r2
 800ccb0:	602b      	str	r3, [r5, #0]
 800ccb2:	f7f5 f8b6 	bl	8001e22 <_fstat>
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	d102      	bne.n	800ccc0 <_fstat_r+0x1c>
 800ccba:	682b      	ldr	r3, [r5, #0]
 800ccbc:	b103      	cbz	r3, 800ccc0 <_fstat_r+0x1c>
 800ccbe:	6023      	str	r3, [r4, #0]
 800ccc0:	bd38      	pop	{r3, r4, r5, pc}
 800ccc2:	bf00      	nop
 800ccc4:	200047c4 	.word	0x200047c4

0800ccc8 <_isatty_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d06      	ldr	r5, [pc, #24]	; (800cce4 <_isatty_r+0x1c>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	602b      	str	r3, [r5, #0]
 800ccd4:	f7f5 f8b5 	bl	8001e42 <_isatty>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_isatty_r+0x1a>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_isatty_r+0x1a>
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	200047c4 	.word	0x200047c4

0800cce8 <_malloc_usable_size_r>:
 800cce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccec:	1f18      	subs	r0, r3, #4
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	bfbc      	itt	lt
 800ccf2:	580b      	ldrlt	r3, [r1, r0]
 800ccf4:	18c0      	addlt	r0, r0, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_raise_r>:
 800ccf8:	291f      	cmp	r1, #31
 800ccfa:	b538      	push	{r3, r4, r5, lr}
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	460d      	mov	r5, r1
 800cd00:	d904      	bls.n	800cd0c <_raise_r+0x14>
 800cd02:	2316      	movs	r3, #22
 800cd04:	6003      	str	r3, [r0, #0]
 800cd06:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd0e:	b112      	cbz	r2, 800cd16 <_raise_r+0x1e>
 800cd10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd14:	b94b      	cbnz	r3, 800cd2a <_raise_r+0x32>
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 f830 	bl	800cd7c <_getpid_r>
 800cd1c:	462a      	mov	r2, r5
 800cd1e:	4601      	mov	r1, r0
 800cd20:	4620      	mov	r0, r4
 800cd22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd26:	f000 b817 	b.w	800cd58 <_kill_r>
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d00a      	beq.n	800cd44 <_raise_r+0x4c>
 800cd2e:	1c59      	adds	r1, r3, #1
 800cd30:	d103      	bne.n	800cd3a <_raise_r+0x42>
 800cd32:	2316      	movs	r3, #22
 800cd34:	6003      	str	r3, [r0, #0]
 800cd36:	2001      	movs	r0, #1
 800cd38:	e7e7      	b.n	800cd0a <_raise_r+0x12>
 800cd3a:	2400      	movs	r4, #0
 800cd3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd40:	4628      	mov	r0, r5
 800cd42:	4798      	blx	r3
 800cd44:	2000      	movs	r0, #0
 800cd46:	e7e0      	b.n	800cd0a <_raise_r+0x12>

0800cd48 <raise>:
 800cd48:	4b02      	ldr	r3, [pc, #8]	; (800cd54 <raise+0xc>)
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	f7ff bfd3 	b.w	800ccf8 <_raise_r>
 800cd52:	bf00      	nop
 800cd54:	20000010 	.word	0x20000010

0800cd58 <_kill_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4d07      	ldr	r5, [pc, #28]	; (800cd78 <_kill_r+0x20>)
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4604      	mov	r4, r0
 800cd60:	4608      	mov	r0, r1
 800cd62:	4611      	mov	r1, r2
 800cd64:	602b      	str	r3, [r5, #0]
 800cd66:	f7f4 fffd 	bl	8001d64 <_kill>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	d102      	bne.n	800cd74 <_kill_r+0x1c>
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	b103      	cbz	r3, 800cd74 <_kill_r+0x1c>
 800cd72:	6023      	str	r3, [r4, #0]
 800cd74:	bd38      	pop	{r3, r4, r5, pc}
 800cd76:	bf00      	nop
 800cd78:	200047c4 	.word	0x200047c4

0800cd7c <_getpid_r>:
 800cd7c:	f7f4 bfea 	b.w	8001d54 <_getpid>

0800cd80 <_init>:
 800cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd82:	bf00      	nop
 800cd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd86:	bc08      	pop	{r3}
 800cd88:	469e      	mov	lr, r3
 800cd8a:	4770      	bx	lr

0800cd8c <_fini>:
 800cd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8e:	bf00      	nop
 800cd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd92:	bc08      	pop	{r3}
 800cd94:	469e      	mov	lr, r3
 800cd96:	4770      	bx	lr
