
CrySenseF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008390  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008540  08008540  00018540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008600  08008600  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008608  08008608  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008608  08008608  00018608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000618  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000068c  2000068c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ba3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cb1  00000000  00000000  00043c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e48  00000000  00000000  000488f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c60  00000000  00000000  0004a740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0b4  00000000  00000000  0004c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023396  00000000  00000000  00076454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2670  00000000  00000000  000997ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018be5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008888  00000000  00000000  0018beac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008528 	.word	0x08008528

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08008528 	.word	0x08008528

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f004 fef0 	bl	80053a2 <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200001c0 	.word	0x200001c0

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 ff92 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f81a 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f9f6 	bl	80009cc <MX_GPIO_Init>
  MX_CRC_Init();
 80005e0:	f000 f880 	bl	80006e4 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005e4:	f000 f892 	bl	800070c <MX_DMA2D_Init>
  MX_FMC_Init();
 80005e8:	f000 f9a0 	bl	800092c <MX_FMC_Init>
  MX_SPI5_Init();
 80005ec:	f000 f8ee 	bl	80007cc <MX_SPI5_Init>
  MX_TIM1_Init();
 80005f0:	f000 f922 	bl	8000838 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f970 	bl	80008d8 <MX_USART1_UART_Init>
  MX_I2S3_Init();
 80005f8:	f000 f8ba 	bl	8000770 <MX_I2S3_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	printf("Hello World\n\r");
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <main+0x3c>)
 80005fe:	f007 f8e5 	bl	80077cc <iprintf>
	HAL_Delay(1000);
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f000 ffbb 	bl	8001580 <HAL_Delay>
	printf("Hello World\n\r");
 800060a:	e7f7      	b.n	80005fc <main+0x2c>
 800060c:	08008540 	.word	0x08008540

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 ffec 	bl	80075fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fa0f 	bl	8003abc <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fb50 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fc71 	bl	8003fac <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d0:	f000 fb3a 	bl	8000d48 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_CRC_Init+0x20>)
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <MX_CRC_Init+0x24>)
 80006ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_CRC_Init+0x20>)
 80006f0:	f001 f84c 	bl	800178c <HAL_CRC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006fa:	f000 fb25 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000090 	.word	0x20000090
 8000708:	40023000 	.word	0x40023000

0800070c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_DMA2D_Init+0x5c>)
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <MX_DMA2D_Init+0x60>)
 8000714:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_DMA2D_Init+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_DMA2D_Init+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_DMA2D_Init+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_DMA2D_Init+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_DMA2D_Init+0x5c>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_DMA2D_Init+0x5c>)
 8000736:	2200      	movs	r2, #0
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_DMA2D_Init+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_DMA2D_Init+0x5c>)
 8000742:	f001 f83f 	bl	80017c4 <HAL_DMA2D_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800074c:	f000 fafc 	bl	8000d48 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000750:	2101      	movs	r1, #1
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_DMA2D_Init+0x5c>)
 8000754:	f001 f990 	bl	8001a78 <HAL_DMA2D_ConfigLayer>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800075e:	f000 faf3 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000098 	.word	0x20000098
 800076c:	4002b000 	.word	0x4002b000

08000770 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <MX_I2S3_Init+0x58>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000780:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2S3_Init+0x54>)
 800078a:	2203      	movs	r2, #3
 800078c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000796:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800079a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007b0:	f002 fce4 	bl	800317c <HAL_I2S_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ba:	f000 fac5 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000d8 	.word	0x200000d8
 80007c8:	40003c00 	.word	0x40003c00

080007cc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI5_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI5_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI5_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI5_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI5_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI5_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI5_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI5_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI5_Init+0x64>)
 8000800:	2218      	movs	r2, #24
 8000802:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI5_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI5_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI5_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI5_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI5_Init+0x64>)
 800081e:	f004 f869 	bl	80048f4 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 fa8e 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000120 	.word	0x20000120
 8000834:	40015000 	.word	0x40015000

08000838 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_TIM1_Init+0x9c>)
 8000858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM1_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000882:	f004 f8c0 	bl	8004a06 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 fa5c 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM1_Init+0x98>)
 800089e:	f004 fa79 	bl	8004d94 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008a8:	f000 fa4e 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM1_Init+0x98>)
 80008ba:	f004 fc95 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008c4:	f000 fa40 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000178 	.word	0x20000178
 80008d4:	40010000 	.word	0x40010000

080008d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART1_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008fc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000900:	220c      	movs	r2, #12
 8000902:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000912:	f004 fcf9 	bl	8005308 <HAL_UART_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800091c:	f000 fa14 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200001c0 	.word	0x200001c0
 8000928:	40011000 	.word	0x40011000

0800092c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
 8000940:	615a      	str	r2, [r3, #20]
 8000942:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_FMC_Init+0x98>)
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <MX_FMC_Init+0x9c>)
 8000948:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_FMC_Init+0x98>)
 800094c:	2201      	movs	r2, #1
 800094e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_FMC_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_FMC_Init+0x98>)
 8000958:	2204      	movs	r2, #4
 800095a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_FMC_Init+0x98>)
 800095e:	2210      	movs	r2, #16
 8000960:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_FMC_Init+0x98>)
 8000964:	2240      	movs	r2, #64	; 0x40
 8000966:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_FMC_Init+0x98>)
 800096a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800096e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_FMC_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_FMC_Init+0x98>)
 8000978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800097c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_FMC_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_FMC_Init+0x98>)
 8000986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000990:	2307      	movs	r3, #7
 8000992:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000998:	2307      	movs	r3, #7
 800099a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800099c:	2303      	movs	r3, #3
 800099e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_FMC_Init+0x98>)
 80009ae:	f003 ff6d 	bl	800488c <HAL_SDRAM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009b8:	f000 f9c6 	bl	8000d48 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000204 	.word	0x20000204
 80009c8:	a0000140 	.word	0xa0000140

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
 80009e6:	4bb2      	ldr	r3, [pc, #712]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4ab1      	ldr	r2, [pc, #708]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4baf      	ldr	r3, [pc, #700]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	4bab      	ldr	r3, [pc, #684]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4aaa      	ldr	r2, [pc, #680]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4ba8      	ldr	r3, [pc, #672]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	4ba4      	ldr	r3, [pc, #656]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4aa3      	ldr	r2, [pc, #652]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4ba1      	ldr	r3, [pc, #644]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	4b9d      	ldr	r3, [pc, #628]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a9c      	ldr	r2, [pc, #624]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b9a      	ldr	r3, [pc, #616]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b96      	ldr	r3, [pc, #600]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a95      	ldr	r2, [pc, #596]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b93      	ldr	r3, [pc, #588]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b8f      	ldr	r3, [pc, #572]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a8e      	ldr	r2, [pc, #568]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b8c      	ldr	r3, [pc, #560]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b88      	ldr	r3, [pc, #544]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a87      	ldr	r2, [pc, #540]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b85      	ldr	r3, [pc, #532]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b81      	ldr	r3, [pc, #516]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a80      	ldr	r2, [pc, #512]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b7e      	ldr	r3, [pc, #504]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2116      	movs	r1, #22
 8000ac6:	487b      	ldr	r0, [pc, #492]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000ac8:	f001 fa14 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	4879      	ldr	r0, [pc, #484]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000ad2:	f001 fa0f 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000adc:	4877      	ldr	r0, [pc, #476]	; (8000cbc <MX_GPIO_Init+0x2f0>)
 8000ade:	f001 fa09 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ae8:	4875      	ldr	r0, [pc, #468]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000aea:	f001 fa03 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b00:	230e      	movs	r3, #14
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	486e      	ldr	r0, [pc, #440]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000b0c:	f001 f846 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b10:	2316      	movs	r3, #22
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4863      	ldr	r0, [pc, #396]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000b28:	f001 f838 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b30:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	485d      	ldr	r0, [pc, #372]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000b42:	f001 f82b 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 8000b46:	2358      	movs	r3, #88	; 0x58
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b56:	230e      	movs	r3, #14
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4855      	ldr	r0, [pc, #340]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000b62:	f001 f81b 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	484e      	ldr	r0, [pc, #312]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000b7e:	f001 f80d 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b82:	2320      	movs	r3, #32
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4847      	ldr	r0, [pc, #284]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000b98:	f001 f800 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bac:	2309      	movs	r3, #9
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4844      	ldr	r0, [pc, #272]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000bb8:	f000 fff0 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	483e      	ldr	r0, [pc, #248]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000bd0:	f000 ffe4 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000bd4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be6:	230e      	movs	r3, #14
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4835      	ldr	r0, [pc, #212]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000bf2:	f000 ffd3 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482c      	ldr	r0, [pc, #176]	; (8000cbc <MX_GPIO_Init+0x2f0>)
 8000c0c:	f000 ffc6 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c10:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4824      	ldr	r0, [pc, #144]	; (8000cbc <MX_GPIO_Init+0x2f0>)
 8000c2a:	f000 ffb7 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000c2e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c40:	230e      	movs	r3, #14
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481d      	ldr	r0, [pc, #116]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000c4c:	f000 ffa6 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8000c50:	23c0      	movs	r3, #192	; 0xc0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c60:	230e      	movs	r3, #14
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000c6c:	f000 ff96 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c76:	2312      	movs	r3, #18
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c82:	2304      	movs	r3, #4
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000c8e:	f000 ff85 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c92:	2348      	movs	r3, #72	; 0x48
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ca2:	230e      	movs	r3, #14
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	e00e      	b.n	8000ccc <MX_GPIO_Init+0x300>
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	40021800 	.word	0x40021800
 8000cc4:	40021400 	.word	0x40021400
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <MX_GPIO_Init+0x350>)
 8000cce:	f000 ff65 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000cd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ce4:	2309      	movs	r3, #9
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_GPIO_Init+0x354>)
 8000cf0:	f000 ff54 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0x354>)
 8000d0e:	f000 ff45 	bl	8001b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40020c00 	.word	0x40020c00
 8000d20:	40021800 	.word	0x40021800

08000d24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d36:	f000 fc03 	bl	8001540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40001000 	.word	0x40001000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_MspInit+0x54>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <HAL_MspInit+0x54>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_MspInit+0x54>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_MspInit+0x54>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_MspInit+0x54>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_MspInit+0x54>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	210f      	movs	r1, #15
 8000d96:	f06f 0001 	mvn.w	r0, #1
 8000d9a:	f000 fccd 	bl	8001738 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_CRC_MspInit+0x3c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10d      	bne.n	8000dda <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_CRC_MspInit+0x40>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_CRC_MspInit+0x40>)
 8000dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_CRC_MspInit+0x40>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023000 	.word	0x40023000
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_DMA2D_MspInit+0x48>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d115      	bne.n	8000e2e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_DMA2D_MspInit+0x4c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_DMA2D_MspInit+0x4c>)
 8000e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_DMA2D_MspInit+0x4c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	205a      	movs	r0, #90	; 0x5a
 8000e24:	f000 fc88 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e28:	205a      	movs	r0, #90	; 0x5a
 8000e2a:	f000 fca1 	bl	8001770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	4002b000 	.word	0x4002b000
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b096      	sub	sp, #88	; 0x58
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2230      	movs	r2, #48	; 0x30
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fbcb 	bl	80075fc <memset>
  if(hi2s->Instance==SPI3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a31      	ldr	r2, [pc, #196]	; (8000f30 <HAL_I2S_MspInit+0xf0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d15b      	bne.n	8000f28 <HAL_I2S_MspInit+0xe8>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e70:	2301      	movs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e74:	23c0      	movs	r3, #192	; 0xc0
 8000e76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fae5 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e8c:	f7ff ff5c 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_I2S_MspInit+0xf4>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000efe:	4619      	mov	r1, r3
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <HAL_I2S_MspInit+0xf8>)
 8000f02:	f000 fe4b 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f18:	2306      	movs	r3, #6
 8000f1a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HAL_I2S_MspInit+0xfc>)
 8000f24:	f000 fe3a 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3758      	adds	r7, #88	; 0x58
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40003c00 	.word	0x40003c00
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020800 	.word	0x40020800

08000f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12c      	bne.n	8000fbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0320 	and.w	r3, r3, #32
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000f9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000fac:	2305      	movs	r3, #5
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_SPI_MspInit+0x8c>)
 8000fb8:	f000 fdf0 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40015000 	.word	0x40015000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40021400 	.word	0x40021400

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_TIM_Base_MspInit+0x3c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10d      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_TIM_Base_MspInit+0x40>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_TIM_Base_MspInit+0x40>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_TIM_Base_MspInit+0x40>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40010000 	.word	0x40010000
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_UART_MspInit+0x84>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12c      	bne.n	8001090 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_UART_MspInit+0x88>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_UART_MspInit+0x88>)
 8001040:	f043 0310 	orr.w	r3, r3, #16
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0x88>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_UART_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_UART_MspInit+0x88>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_UART_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800106e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001072:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001080:	2307      	movs	r3, #7
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_UART_MspInit+0x8c>)
 800108c:	f000 fd86 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40011000 	.word	0x40011000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_FMC_MspInit+0x104>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d16f      	bne.n	80011a0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_FMC_MspInit+0x104>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_FMC_MspInit+0x108>)
 80010cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ce:	4a37      	ldr	r2, [pc, #220]	; (80011ac <HAL_FMC_MspInit+0x108>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6393      	str	r3, [r2, #56]	; 0x38
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_FMC_MspInit+0x108>)
 80010d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80010e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010e6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f4:	230c      	movs	r3, #12
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	482c      	ldr	r0, [pc, #176]	; (80011b0 <HAL_FMC_MspInit+0x10c>)
 80010fe:	f000 fd4d 	bl	8001b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001112:	230c      	movs	r3, #12
 8001114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4826      	ldr	r0, [pc, #152]	; (80011b4 <HAL_FMC_MspInit+0x110>)
 800111c:	f000 fd3e 	bl	8001b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001120:	f248 1333 	movw	r3, #33075	; 0x8133
 8001124:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001132:	230c      	movs	r3, #12
 8001134:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	481f      	ldr	r0, [pc, #124]	; (80011b8 <HAL_FMC_MspInit+0x114>)
 800113c:	f000 fd2e 	bl	8001b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001140:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001144:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001152:	230c      	movs	r3, #12
 8001154:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <HAL_FMC_MspInit+0x118>)
 800115c:	f000 fd1e 	bl	8001b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001160:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001164:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001172:	230c      	movs	r3, #12
 8001174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4811      	ldr	r0, [pc, #68]	; (80011c0 <HAL_FMC_MspInit+0x11c>)
 800117c:	f000 fd0e 	bl	8001b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001180:	2360      	movs	r3, #96	; 0x60
 8001182:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001190:	230c      	movs	r3, #12
 8001192:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <HAL_FMC_MspInit+0x120>)
 800119a:	f000 fcff 	bl	8001b9c <HAL_GPIO_Init>
 800119e:	e000      	b.n	80011a2 <HAL_FMC_MspInit+0xfe>
    return;
 80011a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000238 	.word	0x20000238
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40020400 	.word	0x40020400

080011c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011d0:	f7ff ff68 	bl	80010a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <HAL_InitTick+0xe4>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <HAL_InitTick+0xe4>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6413      	str	r3, [r2, #64]	; 0x40
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_InitTick+0xe4>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001208:	f107 0210 	add.w	r2, r7, #16
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f8ea 	bl	80043ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001222:	f003 f8bb 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8001226:	6378      	str	r0, [r7, #52]	; 0x34
 8001228:	e004      	b.n	8001234 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800122a:	f003 f8b7 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 800122e:	4603      	mov	r3, r0
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001236:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_InitTick+0xe8>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9b      	lsrs	r3, r3, #18
 800123e:	3b01      	subs	r3, #1
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_InitTick+0xec>)
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_InitTick+0xf0>)
 8001246:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_InitTick+0xec>)
 800124a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001250:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_InitTick+0xec>)
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_InitTick+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_InitTick+0xec>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_InitTick+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001268:	4817      	ldr	r0, [pc, #92]	; (80012c8 <HAL_InitTick+0xec>)
 800126a:	f003 fbcc 	bl	8004a06 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001274:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001278:	2b00      	cmp	r3, #0
 800127a:	d11b      	bne.n	80012b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800127c:	4812      	ldr	r0, [pc, #72]	; (80012c8 <HAL_InitTick+0xec>)
 800127e:	f003 fc11 	bl	8004aa4 <HAL_TIM_Base_Start_IT>
 8001282:	4603      	mov	r3, r0
 8001284:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001288:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800128c:	2b00      	cmp	r3, #0
 800128e:	d111      	bne.n	80012b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001290:	2036      	movs	r0, #54	; 0x36
 8001292:	f000 fa6d 	bl	8001770 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d808      	bhi.n	80012ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	2036      	movs	r0, #54	; 0x36
 80012a2:	f000 fa49 	bl	8001738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_InitTick+0xf4>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	e002      	b.n	80012b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3738      	adds	r7, #56	; 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	2000023c 	.word	0x2000023c
 80012cc:	40001000 	.word	0x40001000
 80012d0:	20000004 	.word	0x20000004

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM6_DAC_IRQHandler+0x10>)
 8001306:	f003 fc3d 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000023c 	.word	0x2000023c

08001314 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <OTG_HS_IRQHandler+0x10>)
 800131a:	f000 fe04 	bl	8001f26 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000378 	.word	0x20000378

08001328 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <DMA2D_IRQHandler+0x10>)
 800132e:	f000 fa92 	bl	8001856 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000098 	.word	0x20000098

0800133c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00a      	b.n	8001364 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134e:	f3af 8000 	nop.w
 8001352:	4601      	mov	r1, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf0      	blt.n	800134e <_read+0x12>
  }

  return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e009      	b.n	800139c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f90b 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <_write+0x12>
  }
  return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_close>:

int _close(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d6:	605a      	str	r2, [r3, #4]
  return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_isatty>:

int _isatty(int file)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f006 f8a0 	bl	800758c <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20030000 	.word	0x20030000
 8001478:	00000400 	.word	0x00000400
 800147c:	20000284 	.word	0x20000284
 8001480:	20000690 	.word	0x20000690

08001484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ae:	490e      	ldr	r1, [pc, #56]	; (80014e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c4:	4c0b      	ldr	r4, [pc, #44]	; (80014f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d2:	f7ff ffd7 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f006 f85f 	bl	8007598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f879 	bl	80005d0 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014ec:	08008610 	.word	0x08008610
  ldr r2, =_sbss
 80014f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014f4:	2000068c 	.word	0x2000068c

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <HAL_Init+0x40>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_Init+0x40>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_Init+0x40>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f8fc 	bl	8001722 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fe56 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fc10 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008
 8001564:	20000288 	.word	0x20000288

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000288 	.word	0x20000288

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff4c 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174a:	f7ff ff61 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800174e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f7ff ffb1 	bl	80016bc <NVIC_EncodePriority>
 800175a:	4602      	mov	r2, r0
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff80 	bl	8001668 <__NVIC_SetPriority>
}
 8001768:	bf00      	nop
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff54 	bl	800162c <__NVIC_EnableIRQ>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	795b      	ldrb	r3, [r3, #5]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fafc 	bl	8000dac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e03b      	b.n	800184e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fb00 	bl	8000df0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	f023 0107 	bic.w	r1, r3, #7
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800182e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68d1      	ldr	r1, [r2, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	430b      	orrs	r3, r1
 800183c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d026      	beq.n	80018c6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d021      	beq.n	80018c6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001890:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2201      	movs	r2, #1
 80018a4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d026      	beq.n	800191e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d021      	beq.n	800191e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018e8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2220      	movs	r2, #32
 80018f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f6:	f043 0202 	orr.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2204      	movs	r2, #4
 8001902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d026      	beq.n	8001976 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192e:	2b00      	cmp	r3, #0
 8001930:	d021      	beq.n	8001976 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001940:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2208      	movs	r2, #8
 8001948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194e:	f043 0204 	orr.w	r2, r3, #4
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2204      	movs	r2, #4
 800195a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00e      	beq.n	80019a8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001998:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f853 	bl	8001a4e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01f      	beq.n	80019fc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2202      	movs	r2, #2
 80019d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01f      	beq.n	8001a46 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01a      	beq.n	8001a46 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2210      	movs	r2, #16
 8001a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f80e 	bl	8001a62 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA2D_ConfigLayer+0x20>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e079      	b.n	8001b8c <HAL_DMA2D_ConfigLayer+0x114>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	3318      	adds	r3, #24
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ac2:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ac4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d003      	beq.n	8001ad6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d107      	bne.n	8001ae6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e005      	b.n	8001af2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	061b      	lsls	r3, r3, #24
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d120      	bne.n	8001b3a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	ea02 0103 	and.w	r1, r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b0a      	cmp	r3, #10
 8001b20:	d003      	beq.n	8001b2a <HAL_DMA2D_ConfigLayer+0xb2>
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	d127      	bne.n	8001b7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
 8001b38:	e01f      	b.n	8001b7a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	ea02 0103 	and.w	r1, r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b0a      	cmp	r3, #10
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA2D_ConfigLayer+0xf4>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d106      	bne.n	8001b7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001b78:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	ff03000f 	.word	0xff03000f

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e177      	b.n	8001ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8166 	bne.w	8001ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d005      	beq.n	8001bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d130      	bne.n	8001c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d017      	beq.n	8001c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80c0 	beq.w	8001ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a65      	ldr	r2, [pc, #404]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a61      	ldr	r2, [pc, #388]	; (8001ec4 <HAL_GPIO_Init+0x328>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_GPIO_Init+0x32c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d037      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d031      	beq.n	8001dd6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a55      	ldr	r2, [pc, #340]	; (8001ed4 <HAL_GPIO_Init+0x338>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d025      	beq.n	8001dce <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x33c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a53      	ldr	r2, [pc, #332]	; (8001edc <HAL_GPIO_Init+0x340>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x22a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_GPIO_Init+0x344>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a51      	ldr	r2, [pc, #324]	; (8001ee4 <HAL_GPIO_Init+0x348>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x222>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <HAL_GPIO_Init+0x34c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x21e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x21a>
 8001db2:	2309      	movs	r3, #9
 8001db4:	e012      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001db6:	230a      	movs	r3, #10
 8001db8:	e010      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dba:	2308      	movs	r3, #8
 8001dbc:	e00e      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <HAL_GPIO_Init+0x328>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e72:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f ae84 	bls.w	8001bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40021400 	.word	0x40021400
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	40021c00 	.word	0x40021c00
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40022400 	.word	0x40022400
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 ff5c 	bl	8005dfa <USB_GetMode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	f040 80f6 	bne.w	8002136 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 ff40 	bl	8005dd4 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80ec 	beq.w	8002134 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 ff37 	bl	8005dd4 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f70:	d104      	bne.n	8001f7c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f7a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 ff27 	bl	8005dd4 <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f90:	d104      	bne.n	8001f9c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f9a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 ff17 	bl	8005dd4 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fb0:	d104      	bne.n	8001fbc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 ff07 	bl	8005dd4 <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d103      	bne.n	8001fd8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fef9 	bl	8005dd4 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fec:	d11c      	bne.n	8002028 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ff6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10f      	bne.n	8002028 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002008:	2110      	movs	r1, #16
 800200a:	6938      	ldr	r0, [r7, #16]
 800200c:	f003 fe26 	bl	8005c5c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002010:	6938      	ldr	r0, [r7, #16]
 8002012:	f003 fe57 	bl	8005cc4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fefa 	bl	8005e16 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f005 fa2e 	bl	8007484 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fed1 	bl	8005dd4 <USB_ReadInterrupts>
 8002032:	4603      	mov	r3, r0
 8002034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d102      	bne.n	8002044 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f001 f829 	bl	8003096 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fec3 	bl	8005dd4 <USB_ReadInterrupts>
 800204e:	4603      	mov	r3, r0
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b08      	cmp	r3, #8
 8002056:	d106      	bne.n	8002066 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f005 f9f7 	bl	800744c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2208      	movs	r2, #8
 8002064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 feb2 	bl	8005dd4 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b10      	cmp	r3, #16
 8002078:	d101      	bne.n	800207e <HAL_HCD_IRQHandler+0x158>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_HCD_IRQHandler+0x15a>
 800207e:	2300      	movs	r3, #0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0210 	bic.w	r2, r2, #16
 8002092:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 ff2c 	bl	8002ef2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0210 	orr.w	r2, r2, #16
 80020a8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fe90 	bl	8005dd4 <USB_ReadInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020be:	d13a      	bne.n	8002136 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fee0 	bl	8005e8a <USB_HC_ReadInterrupt>
 80020ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e025      	b.n	800211e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	fa22 f303 	lsr.w	r3, r2, r3
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d018      	beq.n	8002118 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fc:	d106      	bne.n	800210c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f836 	bl	8002176 <HCD_HC_IN_IRQHandler>
 800210a:	e005      	b.n	8002118 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fb84 	bl	8002820 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	d3d4      	bcc.n	80020d2 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002130:	615a      	str	r2, [r3, #20]
 8002132:	e000      	b.n	8002136 <HAL_HCD_IRQHandler+0x210>
      return;
 8002134:	bf00      	nop
    }
  }
}
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_HCD_Stop+0x16>
 800214e:	2302      	movs	r3, #2
 8002150:	e00d      	b.n	800216e <HAL_HCD_Stop+0x32>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 ffa0 	bl	80060a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d11a      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	461a      	mov	r2, r3
 80021b4:	2304      	movs	r3, #4
 80021b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3361      	adds	r3, #97	; 0x61
 80021c6:	2206      	movs	r2, #6
 80021c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fe69 	bl	8005eac <USB_HC_Halt>
 80021da:	e0af      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f2:	d11b      	bne.n	800222c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002206:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3361      	adds	r3, #97	; 0x61
 8002216:	2207      	movs	r2, #7
 8002218:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fe41 	bl	8005eac <USB_HC_Halt>
 800222a:	e087      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b20      	cmp	r3, #32
 8002240:	d109      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2320      	movs	r3, #32
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	e072      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d11a      	bne.n	80022a2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	461a      	mov	r2, r3
 800227a:	2308      	movs	r3, #8
 800227c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	3361      	adds	r3, #97	; 0x61
 800228c:	2205      	movs	r2, #5
 800228e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fe06 	bl	8005eac <USB_HC_Halt>
 80022a0:	e04c      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b8:	d11b      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3361      	adds	r3, #97	; 0x61
 80022dc:	2208      	movs	r2, #8
 80022de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fdde 	bl	8005eac <USB_HC_Halt>
 80022f0:	e024      	b.n	800233c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002304:	2b80      	cmp	r3, #128	; 0x80
 8002306:	d119      	bne.n	800233c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	461a      	mov	r2, r3
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3361      	adds	r3, #97	; 0x61
 8002328:	2206      	movs	r2, #6
 800232a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fdb8 	bl	8005eac <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002352:	d112      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fda4 	bl	8005eac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002376:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002378:	e24e      	b.n	8002818 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	f040 80df 	bne.w	8002550 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3348      	adds	r3, #72	; 0x48
 80023a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	0159      	lsls	r1, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023bc:	1ad2      	subs	r2, r2, r3
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	202c      	movs	r0, #44	; 0x2c
 80023c4:	fb00 f303 	mul.w	r3, r0, r3
 80023c8:	440b      	add	r3, r1
 80023ca:	3350      	adds	r3, #80	; 0x50
 80023cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3361      	adds	r3, #97	; 0x61
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	335c      	adds	r3, #92	; 0x5c
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	461a      	mov	r2, r3
 8002400:	2301      	movs	r3, #1
 8002402:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	333f      	adds	r3, #63	; 0x3f
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	333f      	adds	r3, #63	; 0x3f
 8002426:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002428:	2b02      	cmp	r3, #2
 800242a:	d111      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fd38 	bl	8005eac <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2310      	movs	r3, #16
 800244c:	6093      	str	r3, [r2, #8]
 800244e:	e03a      	b.n	80024c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	333f      	adds	r3, #63	; 0x3f
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d009      	beq.n	8002478 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	333f      	adds	r3, #63	; 0x3f
 8002472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002474:	2b01      	cmp	r3, #1
 8002476:	d126      	bne.n	80024c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	0151      	lsls	r1, r2, #5
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	440a      	add	r2, r1
 800248e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002492:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002496:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3360      	adds	r3, #96	; 0x60
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	b2d9      	uxtb	r1, r3
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	202c      	movs	r0, #44	; 0x2c
 80024b4:	fb00 f303 	mul.w	r3, r0, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3360      	adds	r3, #96	; 0x60
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f004 ffed 	bl	80074a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d12b      	bne.n	8002526 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3348      	adds	r3, #72	; 0x48
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	202c      	movs	r0, #44	; 0x2c
 80024e4:	fb00 f202 	mul.w	r2, r0, r2
 80024e8:	440a      	add	r2, r1
 80024ea:	3240      	adds	r2, #64	; 0x40
 80024ec:	8812      	ldrh	r2, [r2, #0]
 80024ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 818e 	beq.w	8002818 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3354      	adds	r3, #84	; 0x54
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f083 0301 	eor.w	r3, r3, #1
 8002510:	b2d8      	uxtb	r0, r3
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3354      	adds	r3, #84	; 0x54
 8002520:	4602      	mov	r2, r0
 8002522:	701a      	strb	r2, [r3, #0]
}
 8002524:	e178      	b.n	8002818 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3354      	adds	r3, #84	; 0x54
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	f083 0301 	eor.w	r3, r3, #1
 800253a:	b2d8      	uxtb	r0, r3
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3354      	adds	r3, #84	; 0x54
 800254a:	4602      	mov	r2, r0
 800254c:	701a      	strb	r2, [r3, #0]
}
 800254e:	e163      	b.n	8002818 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	f040 80f6 	bne.w	8002754 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3361      	adds	r3, #97	; 0x61
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d109      	bne.n	8002590 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e0c9      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3361      	adds	r3, #97	; 0x61
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d109      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3360      	adds	r3, #96	; 0x60
 80025b2:	2205      	movs	r2, #5
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e0b5      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3361      	adds	r3, #97	; 0x61
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d009      	beq.n	80025e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d150      	bne.n	8002682 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	335c      	adds	r3, #92	; 0x5c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	202c      	movs	r0, #44	; 0x2c
 80025f8:	fb00 f303 	mul.w	r3, r0, r3
 80025fc:	440b      	add	r3, r1
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	335c      	adds	r3, #92	; 0x5c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d912      	bls.n	800263c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3360      	adds	r3, #96	; 0x60
 8002636:	2204      	movs	r2, #4
 8002638:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800263a:	e073      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002664:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800266c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002680:	e050      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	3361      	adds	r3, #97	; 0x61
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d122      	bne.n	80026dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3360      	adds	r3, #96	; 0x60
 80026a4:	2202      	movs	r2, #2
 80026a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e023      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3361      	adds	r3, #97	; 0x61
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b07      	cmp	r3, #7
 80026ee:	d119      	bne.n	8002724 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	335c      	adds	r3, #92	; 0x5c
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	202c      	movs	r0, #44	; 0x2c
 8002708:	fb00 f303 	mul.w	r3, r0, r3
 800270c:	440b      	add	r3, r1
 800270e:	335c      	adds	r3, #92	; 0x5c
 8002710:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	2204      	movs	r2, #4
 8002722:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2302      	movs	r3, #2
 8002734:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	b2d9      	uxtb	r1, r3
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	202c      	movs	r0, #44	; 0x2c
 8002740:	fb00 f303 	mul.w	r3, r0, r3
 8002744:	4413      	add	r3, r2
 8002746:	3360      	adds	r3, #96	; 0x60
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f004 fea7 	bl	80074a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002752:	e061      	b.n	8002818 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b10      	cmp	r3, #16
 8002768:	d156      	bne.n	8002818 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	333f      	adds	r3, #63	; 0x3f
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d111      	bne.n	80027a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	335c      	adds	r3, #92	; 0x5c
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fb86 	bl	8005eac <USB_HC_Halt>
 80027a0:	e031      	b.n	8002806 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	333f      	adds	r3, #63	; 0x3f
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	333f      	adds	r3, #63	; 0x3f
 80027c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d11d      	bne.n	8002806 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	335c      	adds	r3, #92	; 0x5c
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d110      	bne.n	8002806 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	2203      	movs	r2, #3
 80027f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fb53 	bl	8005eac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	2310      	movs	r3, #16
 8002816:	6093      	str	r3, [r2, #8]
}
 8002818:	bf00      	nop
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d11a      	bne.n	8002886 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	461a      	mov	r2, r3
 800285e:	2304      	movs	r3, #4
 8002860:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3361      	adds	r3, #97	; 0x61
 8002870:	2206      	movs	r2, #6
 8002872:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fb14 	bl	8005eac <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002884:	e331      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b20      	cmp	r3, #32
 800289a:	d12e      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2320      	movs	r3, #32
 80028ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	333d      	adds	r3, #61	; 0x3d
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 8313 	bne.w	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	333d      	adds	r3, #61	; 0x3d
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3360      	adds	r3, #96	; 0x60
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fada 	bl	8005eac <USB_HC_Halt>
}
 80028f8:	e2f7      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002910:	d112      	bne.n	8002938 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	461a      	mov	r2, r3
 8002920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002924:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fabb 	bl	8005eac <USB_HC_Halt>
}
 8002936:	e2d8      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d140      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d111      	bne.n	800299a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	333d      	adds	r3, #61	; 0x3d
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	461a      	mov	r2, r3
 8002996:	2340      	movs	r3, #64	; 0x40
 8002998:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	2301      	movs	r3, #1
 80029aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fa6f 	bl	8005eac <USB_HC_Halt>
}
 80029ce:	e28c      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d12c      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3361      	adds	r3, #97	; 0x61
 80029f4:	2204      	movs	r2, #4
 80029f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	333d      	adds	r3, #61	; 0x3d
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	335c      	adds	r3, #92	; 0x5c
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fa40 	bl	8005eac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	6093      	str	r3, [r2, #8]
}
 8002a3e:	e254      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d11a      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	461a      	mov	r2, r3
 8002a64:	2308      	movs	r3, #8
 8002a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3361      	adds	r3, #97	; 0x61
 8002a76:	2205      	movs	r2, #5
 8002a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fa11 	bl	8005eac <USB_HC_Halt>
}
 8002a8a:	e22e      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d140      	bne.n	8002b24 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	333d      	adds	r3, #61	; 0x3d
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d112      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	333c      	adds	r3, #60	; 0x3c
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d108      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	333d      	adds	r3, #61	; 0x3d
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 f9ce 	bl	8005eac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2310      	movs	r3, #16
 8002b20:	6093      	str	r3, [r2, #8]
}
 8002b22:	e1e2      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d164      	bne.n	8002c04 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d111      	bne.n	8002b66 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3361      	adds	r3, #97	; 0x61
 8002b50:	2206      	movs	r2, #6
 8002b52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 f9a4 	bl	8005eac <USB_HC_Halt>
 8002b64:	e044      	b.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	335c      	adds	r3, #92	; 0x5c
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	202c      	movs	r0, #44	; 0x2c
 8002b7e:	fb00 f303 	mul.w	r3, r0, r3
 8002b82:	440b      	add	r3, r1
 8002b84:	335c      	adds	r3, #92	; 0x5c
 8002b86:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	335c      	adds	r3, #92	; 0x5c
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d920      	bls.n	8002bde <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	335c      	adds	r3, #92	; 0x5c
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3360      	adds	r3, #96	; 0x60
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	b2d9      	uxtb	r1, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3360      	adds	r3, #96	; 0x60
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f004 fc62 	bl	80074a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bdc:	e008      	b.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	6093      	str	r3, [r2, #8]
}
 8002c02:	e172      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d11b      	bne.n	8002c54 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3361      	adds	r3, #97	; 0x61
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f937 	bl	8005eac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c50:	6093      	str	r3, [r2, #8]
}
 8002c52:	e14a      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	f040 813f 	bne.w	8002eea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3361      	adds	r3, #97	; 0x61
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d17d      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3360      	adds	r3, #96	; 0x60
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	333f      	adds	r3, #63	; 0x3f
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d00a      	beq.n	8002cbc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	333f      	adds	r3, #63	; 0x3f
 8002cb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	f040 8100 	bne.w	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d113      	bne.n	8002cec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3355      	adds	r3, #85	; 0x55
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	f083 0301 	eor.w	r3, r3, #1
 8002cd8:	b2d8      	uxtb	r0, r3
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3355      	adds	r3, #85	; 0x55
 8002ce8:	4602      	mov	r2, r0
 8002cea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	f040 80e3 	bne.w	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	334c      	adds	r3, #76	; 0x4c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80d8 	beq.w	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	334c      	adds	r3, #76	; 0x4c
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	202c      	movs	r0, #44	; 0x2c
 8002d22:	fb00 f202 	mul.w	r2, r0, r2
 8002d26:	440a      	add	r2, r1
 8002d28:	3240      	adds	r2, #64	; 0x40
 8002d2a:	8812      	ldrh	r2, [r2, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	202c      	movs	r0, #44	; 0x2c
 8002d36:	fb00 f202 	mul.w	r2, r0, r2
 8002d3a:	440a      	add	r2, r1
 8002d3c:	3240      	adds	r2, #64	; 0x40
 8002d3e:	8812      	ldrh	r2, [r2, #0]
 8002d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80b5 	beq.w	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3355      	adds	r3, #85	; 0x55
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	f083 0301 	eor.w	r3, r3, #1
 8002d66:	b2d8      	uxtb	r0, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3355      	adds	r3, #85	; 0x55
 8002d76:	4602      	mov	r2, r0
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e09f      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3361      	adds	r3, #97	; 0x61
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d109      	bne.n	8002da4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3360      	adds	r3, #96	; 0x60
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e08b      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3361      	adds	r3, #97	; 0x61
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d109      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3360      	adds	r3, #96	; 0x60
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e077      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3361      	adds	r3, #97	; 0x61
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d109      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3360      	adds	r3, #96	; 0x60
 8002dee:	2205      	movs	r2, #5
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e063      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3361      	adds	r3, #97	; 0x61
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d009      	beq.n	8002e1c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3361      	adds	r3, #97	; 0x61
 8002e16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d14f      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	335c      	adds	r3, #92	; 0x5c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	202c      	movs	r0, #44	; 0x2c
 8002e34:	fb00 f303 	mul.w	r3, r0, r3
 8002e38:	440b      	add	r3, r1
 8002e3a:	335c      	adds	r3, #92	; 0x5c
 8002e3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	335c      	adds	r3, #92	; 0x5c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d912      	bls.n	8002e78 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	335c      	adds	r3, #92	; 0x5c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3360      	adds	r3, #96	; 0x60
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e021      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3360      	adds	r3, #96	; 0x60
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ea0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2302      	movs	r3, #2
 8002ecc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	b2d9      	uxtb	r1, r3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	202c      	movs	r0, #44	; 0x2c
 8002ed8:	fb00 f303 	mul.w	r3, r0, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3360      	adds	r3, #96	; 0x60
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f004 fadb 	bl	80074a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002eea:	bf00      	nop
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b08a      	sub	sp, #40	; 0x28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	0c5b      	lsrs	r3, r3, #17
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d004      	beq.n	8002f38 <HCD_RXQLVL_IRQHandler+0x46>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	f000 80a9 	beq.w	8003088 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f36:	e0aa      	b.n	800308e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a6 	beq.w	800308c <HCD_RXQLVL_IRQHandler+0x19a>
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3344      	adds	r3, #68	; 0x44
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 809b 	beq.w	800308c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3350      	adds	r3, #80	; 0x50
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	441a      	add	r2, r3
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	202c      	movs	r0, #44	; 0x2c
 8002f70:	fb00 f303 	mul.w	r3, r0, r3
 8002f74:	440b      	add	r3, r1
 8002f76:	334c      	adds	r3, #76	; 0x4c
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d87a      	bhi.n	8003074 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3344      	adds	r3, #68	; 0x44
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	b292      	uxth	r2, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	f002 fec4 	bl	8005d24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3344      	adds	r3, #68	; 0x44
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	441a      	add	r2, r3
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	202c      	movs	r0, #44	; 0x2c
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	; 0x44
 8002fbe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3350      	adds	r3, #80	; 0x50
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	202c      	movs	r0, #44	; 0x2c
 8002fda:	fb00 f303 	mul.w	r3, r0, r3
 8002fde:	440b      	add	r3, r1
 8002fe0:	3350      	adds	r3, #80	; 0x50
 8002fe2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	0cdb      	lsrs	r3, r3, #19
 8002ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3340      	adds	r3, #64	; 0x40
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4293      	cmp	r3, r2
 8003010:	d13c      	bne.n	800308c <HCD_RXQLVL_IRQHandler+0x19a>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d039      	beq.n	800308c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800302e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003036:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3354      	adds	r3, #84	; 0x54
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f083 0301 	eor.w	r3, r3, #1
 800305e:	b2d8      	uxtb	r0, r3
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3354      	adds	r3, #84	; 0x54
 800306e:	4602      	mov	r2, r0
 8003070:	701a      	strb	r2, [r3, #0]
      break;
 8003072:	e00b      	b.n	800308c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3360      	adds	r3, #96	; 0x60
 8003082:	2204      	movs	r2, #4
 8003084:	701a      	strb	r2, [r3, #0]
      break;
 8003086:	e001      	b.n	800308c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800308c:	bf00      	nop
  }
}
 800308e:	bf00      	nop
 8003090:	3728      	adds	r7, #40	; 0x28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d10b      	bne.n	80030e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f004 f9c5 	bl	8007468 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d132      	bne.n	8003156 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f043 0308 	orr.w	r3, r3, #8
 80030f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d126      	bne.n	8003150 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d113      	bne.n	8003132 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003114:	d106      	bne.n	8003124 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2102      	movs	r1, #2
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fe7a 	bl	8005e16 <USB_InitFSLSPClkSel>
 8003122:	e011      	b.n	8003148 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fe73 	bl	8005e16 <USB_InitFSLSPClkSel>
 8003130:	e00a      	b.n	8003148 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d106      	bne.n	8003148 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003140:	461a      	mov	r2, r3
 8003142:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003146:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f004 f9bb 	bl	80074c4 <HAL_HCD_PortEnabled_Callback>
 800314e:	e002      	b.n	8003156 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f004 f9c5 	bl	80074e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b20      	cmp	r3, #32
 800315e:	d103      	bne.n	8003168 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f043 0320 	orr.w	r3, r3, #32
 8003166:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e128      	b.n	80033e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a90      	ldr	r2, [pc, #576]	; (80033e8 <HAL_I2S_Init+0x26c>)
 80031a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd fe49 	bl	8000e40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031c4:	f023 030f 	bic.w	r3, r3, #15
 80031c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2202      	movs	r2, #2
 80031d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d060      	beq.n	800329c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031e2:	2310      	movs	r3, #16
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e001      	b.n	80031ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d802      	bhi.n	80031fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f001 fae8 	bl	80047d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003200:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320a:	d125      	bne.n	8003258 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	fbb2 f2f3 	udiv	r2, r2, r3
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	461a      	mov	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	3305      	adds	r3, #5
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e01f      	b.n	8003276 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	3305      	adds	r3, #5
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e00e      	b.n	8003276 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	3305      	adds	r3, #5
 8003274:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4a5c      	ldr	r2, [pc, #368]	; (80033ec <HAL_I2S_Init+0x270>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	08db      	lsrs	r3, r3, #3
 8003280:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	e003      	b.n	80032a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800329c:	2302      	movs	r3, #2
 800329e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d902      	bls.n	80032b0 <HAL_I2S_Init+0x134>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2bff      	cmp	r3, #255	; 0xff
 80032ae:	d907      	bls.n	80032c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0210 	orr.w	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e08f      	b.n	80033e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032de:	f023 030f 	bic.w	r3, r3, #15
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6851      	ldr	r1, [r2, #4]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6892      	ldr	r2, [r2, #8]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68d2      	ldr	r2, [r2, #12]
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6992      	ldr	r2, [r2, #24]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003302:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d161      	bne.n	80033d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a38      	ldr	r2, [pc, #224]	; (80033f0 <HAL_I2S_Init+0x274>)
 8003310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <HAL_I2S_Init+0x278>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_I2S_Init+0x1a4>
 800331c:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <HAL_I2S_Init+0x27c>)
 800331e:	e001      	b.n	8003324 <HAL_I2S_Init+0x1a8>
 8003320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4932      	ldr	r1, [pc, #200]	; (80033f4 <HAL_I2S_Init+0x278>)
 800332c:	428a      	cmp	r2, r1
 800332e:	d101      	bne.n	8003334 <HAL_I2S_Init+0x1b8>
 8003330:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <HAL_I2S_Init+0x27c>)
 8003332:	e001      	b.n	8003338 <HAL_I2S_Init+0x1bc>
 8003334:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003338:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800333c:	f023 030f 	bic.w	r3, r3, #15
 8003340:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <HAL_I2S_Init+0x278>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_I2S_Init+0x1d4>
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <HAL_I2S_Init+0x27c>)
 800334e:	e001      	b.n	8003354 <HAL_I2S_Init+0x1d8>
 8003350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003354:	2202      	movs	r2, #2
 8003356:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <HAL_I2S_Init+0x278>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_I2S_Init+0x1ea>
 8003362:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_I2S_Init+0x27c>)
 8003364:	e001      	b.n	800336a <HAL_I2S_Init+0x1ee>
 8003366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003376:	d003      	beq.n	8003380 <HAL_I2S_Init+0x204>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	e001      	b.n	800338c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003396:	4313      	orrs	r3, r2
 8003398:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033aa:	4313      	orrs	r3, r2
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <HAL_I2S_Init+0x278>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_I2S_Init+0x24c>
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_I2S_Init+0x27c>)
 80033c6:	e001      	b.n	80033cc <HAL_I2S_Init+0x250>
 80033c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033cc:	897a      	ldrh	r2, [r7, #10]
 80033ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	080034f3 	.word	0x080034f3
 80033ec:	cccccccd 	.word	0xcccccccd
 80033f0:	08003609 	.word	0x08003609
 80033f4:	40003800 	.word	0x40003800
 80033f8:	40003400 	.word	0x40003400

080033fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	881a      	ldrh	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10e      	bne.n	800348c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800347c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffb8 	bl	80033fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	b292      	uxth	r2, r2
 80034a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	1c9a      	adds	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10e      	bne.n	80034ea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff93 	bl	8003410 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b04      	cmp	r3, #4
 800350c:	d13a      	bne.n	8003584 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d109      	bne.n	800352c <I2S_IRQHandler+0x3a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d102      	bne.n	800352c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffb4 	bl	8003494 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d126      	bne.n	8003584 <I2S_IRQHandler+0x92>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d11f      	bne.n	8003584 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003552:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f043 0202 	orr.w	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff50 	bl	8003424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b03      	cmp	r3, #3
 800358e:	d136      	bne.n	80035fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d109      	bne.n	80035ae <I2S_IRQHandler+0xbc>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d102      	bne.n	80035ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff45 	bl	8003438 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d122      	bne.n	80035fe <I2S_IRQHandler+0x10c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d11b      	bne.n	80035fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f043 0204 	orr.w	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff13 	bl	8003424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a92      	ldr	r2, [pc, #584]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003622:	4b92      	ldr	r3, [pc, #584]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003624:	e001      	b.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a8b      	ldr	r2, [pc, #556]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003640:	4b8a      	ldr	r3, [pc, #552]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003642:	e001      	b.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d004      	beq.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 8099 	bne.w	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d107      	bne.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f925 	bl	80038c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f9c8 	bl	8003a24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d13a      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d035      	beq.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6e      	ldr	r2, [pc, #440]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036b2:	4b6e      	ldr	r3, [pc, #440]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b4:	e001      	b.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4969      	ldr	r1, [pc, #420]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c2:	428b      	cmp	r3, r1
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036c6:	4b69      	ldr	r3, [pc, #420]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fe88 	bl	8003424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b08      	cmp	r3, #8
 800371c:	f040 80c3 	bne.w	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80bd 	beq.w	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800373a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a49      	ldr	r2, [pc, #292]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003748:	e001      	b.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4944      	ldr	r1, [pc, #272]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003756:	428b      	cmp	r3, r1
 8003758:	d101      	bne.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800375a:	4b44      	ldr	r3, [pc, #272]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800375c:	e001      	b.n	8003762 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800375e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003766:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f043 0204 	orr.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fe4a 	bl	8003424 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003790:	e089      	b.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b02      	cmp	r3, #2
 800379a:	d107      	bne.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8be 	bl	8003928 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8fd 	bl	80039c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d12f      	bne.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d02a      	beq.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f6:	e001      	b.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4919      	ldr	r1, [pc, #100]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003804:	428b      	cmp	r3, r1
 8003806:	d101      	bne.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800380a:	e001      	b.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800380c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003814:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f043 0202 	orr.w	r2, r3, #2
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fdfa 	bl	8003424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b08      	cmp	r3, #8
 8003838:	d136      	bne.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d031      	beq.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a07      	ldr	r2, [pc, #28]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003850:	e001      	b.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4902      	ldr	r1, [pc, #8]	; (8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800385e:	428b      	cmp	r3, r1
 8003860:	d106      	bne.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003862:	4b02      	ldr	r3, [pc, #8]	; (800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003864:	e006      	b.n	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003866:	bf00      	nop
 8003868:	40003800 	.word	0x40003800
 800386c:	40003400 	.word	0x40003400
 8003870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003878:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003888:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fdc0 	bl	8003424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038a4:	e000      	b.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038a6:	bf00      	nop
}
 80038a8:	bf00      	nop
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	1c99      	adds	r1, r3, #2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6251      	str	r1, [r2, #36]	; 0x24
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d113      	bne.n	800391e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003904:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ffc9 	bl	80038b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c99      	adds	r1, r3, #2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6251      	str	r1, [r2, #36]	; 0x24
 800393a:	8819      	ldrh	r1, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <I2SEx_TxISR_I2SExt+0x22>
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <I2SEx_TxISR_I2SExt+0x94>)
 8003948:	e001      	b.n	800394e <I2SEx_TxISR_I2SExt+0x26>
 800394a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394e:	460a      	mov	r2, r1
 8003950:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d121      	bne.n	80039ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <I2SEx_TxISR_I2SExt+0x50>
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <I2SEx_TxISR_I2SExt+0x94>)
 8003976:	e001      	b.n	800397c <I2SEx_TxISR_I2SExt+0x54>
 8003978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	490d      	ldr	r1, [pc, #52]	; (80039b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d101      	bne.n	800398c <I2SEx_TxISR_I2SExt+0x64>
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <I2SEx_TxISR_I2SExt+0x94>)
 800398a:	e001      	b.n	8003990 <I2SEx_TxISR_I2SExt+0x68>
 800398c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003994:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff81 	bl	80038b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40003800 	.word	0x40003800
 80039bc:	40003400 	.word	0x40003400

080039c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68d8      	ldr	r0, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	1c99      	adds	r1, r3, #2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039d8:	b282      	uxth	r2, r0
 80039da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d113      	bne.n	8003a1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ff4a 	bl	80038b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a20      	ldr	r2, [pc, #128]	; (8003ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <I2SEx_RxISR_I2SExt+0x16>
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8003a38:	e001      	b.n	8003a3e <I2SEx_RxISR_I2SExt+0x1a>
 8003a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3e:	68d8      	ldr	r0, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	1c99      	adds	r1, r3, #2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a4a:	b282      	uxth	r2, r0
 8003a4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d121      	bne.n	8003aaa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <I2SEx_RxISR_I2SExt+0x50>
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8003a72:	e001      	b.n	8003a78 <I2SEx_RxISR_I2SExt+0x54>
 8003a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8003a80:	428b      	cmp	r3, r1
 8003a82:	d101      	bne.n	8003a88 <I2SEx_RxISR_I2SExt+0x64>
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8003a86:	e001      	b.n	8003a8c <I2SEx_RxISR_I2SExt+0x68>
 8003a88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff03 	bl	80038b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40003800 	.word	0x40003800
 8003ab8:	40003400 	.word	0x40003400

08003abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e267      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d075      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d00c      	beq.n	8003b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae6:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d112      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	4b7e      	ldr	r3, [pc, #504]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d05b      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x108>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d157      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e242      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_OscConfig+0x74>
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e01d      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x98>
 8003b3a:	4b70      	ldr	r3, [pc, #448]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6f      	ldr	r2, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b6d      	ldr	r3, [pc, #436]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6c      	ldr	r2, [pc, #432]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a68      	ldr	r2, [pc, #416]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b66      	ldr	r3, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fd fcf8 	bl	8001568 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fcf4 	bl	8001568 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e207      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0xc0>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fce4 	bl	8001568 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fd fce0 	bl	8001568 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1f3      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xe8>
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d063      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e1c7      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4937      	ldr	r1, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	e03a      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd fc99 	bl	8001568 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fd fc95 	bl	8001568 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1a8      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4925      	ldr	r1, [pc, #148]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
 8003c6c:	e015      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fc78 	bl	8001568 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fd fc74 	bl	8001568 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e187      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d036      	beq.n	8003d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fd fc58 	bl	8001568 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fd fc54 	bl	8001568 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e167      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x200>
 8003cda:	e01b      	b.n	8003d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce2:	f7fd fc41 	bl	8001568 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cea:	f7fd fc3d 	bl	8001568 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d907      	bls.n	8003d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e150      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	42470000 	.word	0x42470000
 8003d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ea      	bne.n	8003cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b81      	ldr	r3, [pc, #516]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b7a      	ldr	r3, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b77      	ldr	r3, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	4b74      	ldr	r3, [pc, #464]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fbfd 	bl	8001568 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fd fbf9 	bl	8001568 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e10c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2ea>
 8003d98:	4b64      	ldr	r3, [pc, #400]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a63      	ldr	r2, [pc, #396]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x30c>
 8003dae:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a5e      	ldr	r2, [pc, #376]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a57      	ldr	r2, [pc, #348]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	4b55      	ldr	r3, [pc, #340]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a54      	ldr	r2, [pc, #336]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fd fbbe 	bl	8001568 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fd fbba 	bl	8001568 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0cb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_RCC_OscConfig+0x334>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fd fba8 	bl	8001568 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fd fba4 	bl	8001568 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0b5      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a1 	beq.w	8003f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d05c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d141      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fd fb78 	bl	8001568 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd fb74 	bl	8001568 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e087      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	019b      	lsls	r3, r3, #6
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	491b      	ldr	r1, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fd fb4d 	bl	8001568 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fd fb49 	bl	8001568 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e05c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x416>
 8003ef0:	e054      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fb36 	bl	8001568 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fd fb32 	bl	8001568 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e045      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x444>
 8003f1e:	e03d      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e038      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d028      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d121      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d11a      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0cc      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800400a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d044      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d119      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d003      	beq.n	800406a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e067      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fd fa64 	bl	8001568 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fd fa60 	bl	8001568 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e04f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d20c      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4602      	mov	r2, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd f842 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00
 8004168:	40023800 	.word	0x40023800
 800416c:	08008550 	.word	0x08008550
 8004170:	20000000 	.word	0x20000000
 8004174:	20000004 	.word	0x20000004

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b094      	sub	sp, #80	; 0x50
 800417e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	647b      	str	r3, [r7, #68]	; 0x44
 8004184:	2300      	movs	r3, #0
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	2300      	movs	r3, #0
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004190:	4b79      	ldr	r3, [pc, #484]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d00d      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x40>
 800419c:	2b08      	cmp	r3, #8
 800419e:	f200 80e1 	bhi.w	8004364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x34>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041aa:	e0db      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b73      	ldr	r3, [pc, #460]	; (800437c <HAL_RCC_GetSysClockFreq+0x204>)
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041b0:	e0db      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4b73      	ldr	r3, [pc, #460]	; (8004380 <HAL_RCC_GetSysClockFreq+0x208>)
 80041b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b6:	e0d8      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c2:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d063      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	2200      	movs	r2, #0
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
 80041e2:	2300      	movs	r3, #0
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ea:	4622      	mov	r2, r4
 80041ec:	462b      	mov	r3, r5
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	0159      	lsls	r1, r3, #5
 80041f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041fc:	0150      	lsls	r0, r2, #5
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4621      	mov	r1, r4
 8004204:	1a51      	subs	r1, r2, r1
 8004206:	6139      	str	r1, [r7, #16]
 8004208:	4629      	mov	r1, r5
 800420a:	eb63 0301 	sbc.w	r3, r3, r1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800421c:	4659      	mov	r1, fp
 800421e:	018b      	lsls	r3, r1, #6
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004226:	4651      	mov	r1, sl
 8004228:	018a      	lsls	r2, r1, #6
 800422a:	4651      	mov	r1, sl
 800422c:	ebb2 0801 	subs.w	r8, r2, r1
 8004230:	4659      	mov	r1, fp
 8004232:	eb63 0901 	sbc.w	r9, r3, r1
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800424a:	4690      	mov	r8, r2
 800424c:	4699      	mov	r9, r3
 800424e:	4623      	mov	r3, r4
 8004250:	eb18 0303 	adds.w	r3, r8, r3
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	462b      	mov	r3, r5
 8004258:	eb49 0303 	adc.w	r3, r9, r3
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800426a:	4629      	mov	r1, r5
 800426c:	024b      	lsls	r3, r1, #9
 800426e:	4621      	mov	r1, r4
 8004270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004274:	4621      	mov	r1, r4
 8004276:	024a      	lsls	r2, r1, #9
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427e:	2200      	movs	r2, #0
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
 8004282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004288:	f7fc f802 	bl	8000290 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004294:	e058      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b38      	ldr	r3, [pc, #224]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	2200      	movs	r2, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	4611      	mov	r1, r2
 80042a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042b0:	4642      	mov	r2, r8
 80042b2:	464b      	mov	r3, r9
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	0159      	lsls	r1, r3, #5
 80042be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c2:	0150      	lsls	r0, r2, #5
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4641      	mov	r1, r8
 80042ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e8:	ebb2 040a 	subs.w	r4, r2, sl
 80042ec:	eb63 050b 	sbc.w	r5, r3, fp
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	00eb      	lsls	r3, r5, #3
 80042fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042fe:	00e2      	lsls	r2, r4, #3
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	4643      	mov	r3, r8
 8004306:	18e3      	adds	r3, r4, r3
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	464b      	mov	r3, r9
 800430c:	eb45 0303 	adc.w	r3, r5, r3
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800431e:	4629      	mov	r1, r5
 8004320:	028b      	lsls	r3, r1, #10
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004328:	4621      	mov	r1, r4
 800432a:	028a      	lsls	r2, r1, #10
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004332:	2200      	movs	r2, #0
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	61fa      	str	r2, [r7, #28]
 8004338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433c:	f7fb ffa8 	bl	8000290 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	3301      	adds	r3, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004362:	e002      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetSysClockFreq+0x204>)
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800436c:	4618      	mov	r0, r3
 800436e:	3750      	adds	r7, #80	; 0x50
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000000 	.word	0x20000000

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08008560 	.word	0x08008560

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08008560 	.word	0x08008560

080043ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	220f      	movs	r2, #15
 80043fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0203 	and.w	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <HAL_RCC_GetClockConfig+0x60>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	40023c00 	.word	0x40023c00

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004480:	2b00      	cmp	r3, #0
 8004482:	d075      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004484:	4b91      	ldr	r3, [pc, #580]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800448a:	f7fd f86d 	bl	8001568 <HAL_GetTick>
 800448e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004492:	f7fd f869 	bl	8001568 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e189      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044a4:	4b8a      	ldr	r3, [pc, #552]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	019a      	lsls	r2, r3, #6
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	071b      	lsls	r3, r3, #28
 80044c8:	4981      	ldr	r1, [pc, #516]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01f      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044dc:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e2:	0f1b      	lsrs	r3, r3, #28
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	019a      	lsls	r2, r3, #6
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	431a      	orrs	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	071b      	lsls	r3, r3, #28
 80044fc:	4974      	ldr	r1, [pc, #464]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004504:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450a:	f023 021f 	bic.w	r2, r3, #31
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	3b01      	subs	r3, #1
 8004514:	496e      	ldr	r1, [pc, #440]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	019a      	lsls	r2, r3, #6
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	061b      	lsls	r3, r3, #24
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	071b      	lsls	r3, r3, #28
 800453c:	4964      	ldr	r1, [pc, #400]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004544:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800454a:	f7fd f80d 	bl	8001568 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004552:	f7fd f809 	bl	8001568 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e129      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004564:	4b5a      	ldr	r3, [pc, #360]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004584:	2b00      	cmp	r3, #0
 8004586:	d079      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004588:	4b52      	ldr	r3, [pc, #328]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800458e:	f7fc ffeb 	bl	8001568 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004596:	f7fc ffe7 	bl	8001568 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e107      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045a8:	4b49      	ldr	r3, [pc, #292]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b4:	d0ef      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d020      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045c2:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	0f1b      	lsrs	r3, r3, #28
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	019a      	lsls	r2, r3, #6
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	431a      	orrs	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	071b      	lsls	r3, r3, #28
 80045e2:	493b      	ldr	r1, [pc, #236]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ea:	4b39      	ldr	r3, [pc, #228]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	4934      	ldr	r1, [pc, #208]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01e      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004610:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	0e1b      	lsrs	r3, r3, #24
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	019a      	lsls	r2, r3, #6
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	071b      	lsls	r3, r3, #28
 8004630:	4927      	ldr	r1, [pc, #156]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800463a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	4922      	ldr	r1, [pc, #136]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004654:	f7fc ff88 	bl	8001568 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800465c:	f7fc ff84 	bl	8001568 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0a4      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467a:	d1ef      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 808b 	beq.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6413      	str	r3, [r2, #64]	; 0x40
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046b2:	f7fc ff59 	bl	8001568 <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046b8:	e010      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fc ff55 	bl	8001568 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d909      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e075      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80046cc:	42470068 	.word	0x42470068
 80046d0:	40023800 	.word	0x40023800
 80046d4:	42470070 	.word	0x42470070
 80046d8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046dc:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0e8      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d02f      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	429a      	cmp	r2, r3
 8004704:	d028      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004716:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004722:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d114      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800472e:	f7fc ff1b 	bl	8001568 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fc ff17 	bl	8001568 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e035      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004764:	d10d      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477a:	4912      	ldr	r1, [pc, #72]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
 8004780:	e005      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	4a0f      	ldr	r2, [pc, #60]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004788:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800479c:	4313      	orrs	r3, r2
 800479e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80047b4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40007000 	.word	0x40007000
 80047c4:	40023800 	.word	0x40023800
 80047c8:	42470e40 	.word	0x42470e40
 80047cc:	424711e0 	.word	0x424711e0

080047d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d13e      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d12f      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004806:	617b      	str	r3, [r7, #20]
          break;
 8004808:	e02f      	b.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800480a:	4b1c      	ldr	r3, [pc, #112]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004816:	d108      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004818:	4b18      	ldr	r3, [pc, #96]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e007      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	0f1b      	lsrs	r3, r3, #28
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]
          break;
 8004862:	e002      	b.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
          break;
 8004868:	bf00      	nop
        }
      }
      break;
 800486a:	bf00      	nop
    }
  }
  return frequency;
 800486c:	697b      	ldr	r3, [r7, #20]
}
 800486e:	4618      	mov	r0, r3
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	00bb8000 	.word	0x00bb8000
 8004884:	007a1200 	.word	0x007a1200
 8004888:	00f42400 	.word	0x00f42400

0800488c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e025      	b.n	80048ec <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fc fc87 	bl	80011c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f001 f8dd 	bl	8005a8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	f001 f932 	bl	8005b46 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07b      	b.n	80049fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004916:	d009      	beq.n	800492c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	61da      	str	r2, [r3, #28]
 800491e:	e005      	b.n	800492c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc fafa 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	ea42 0103 	orr.w	r1, r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0104 	and.w	r1, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f003 0210 	and.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e041      	b.n	8004a9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc facf 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f000 fa95 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e04e      	b.n	8004b5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae6:	d01d      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <HAL_TIM_Base_Start_IT+0xc8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1e      	ldr	r2, [pc, #120]	; (8004b70 <HAL_TIM_Base_Start_IT+0xcc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d010      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b46:	e007      	b.n	8004b58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40010400 	.word	0x40010400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40001800 	.word	0x40001800

08004b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0202 	mvn.w	r2, #2
 8004bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f9b5 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9a7 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f9b8 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d122      	bne.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0204 	mvn.w	r2, #4
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f98b 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f97d 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f98e 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d122      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0208 	mvn.w	r2, #8
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f961 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f953 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f964 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d122      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0210 	mvn.w	r2, #16
 8004cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f937 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f929 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f93a 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0201 	mvn.w	r2, #1
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc f80e 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fae0 	bl	80052f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d10e      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d107      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8ff 	bl	8004f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d10e      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d107      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0220 	mvn.w	r2, #32
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 faaa 	bl	80052e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0b4      	b.n	8004f1a <HAL_TIM_ConfigClockSource+0x186>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d03e      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0xd4>
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	f200 8087 	bhi.w	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	f000 8086 	beq.w	8004f06 <HAL_TIM_ConfigClockSource+0x172>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d87f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b70      	cmp	r3, #112	; 0x70
 8004e02:	d01a      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0xa6>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d87b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b60      	cmp	r3, #96	; 0x60
 8004e0a:	d050      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x11a>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d877      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b50      	cmp	r3, #80	; 0x50
 8004e12:	d03c      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0xfa>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d873      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d058      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x13a>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d86f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b30      	cmp	r3, #48	; 0x30
 8004e22:	d064      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d86b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d060      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d867      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05c      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d05a      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e38:	e062      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6899      	ldr	r1, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f000 f9ad 	bl	80051a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	609a      	str	r2, [r3, #8]
      break;
 8004e66:	e04f      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6899      	ldr	r1, [r3, #8]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f000 f996 	bl	80051a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8a:	609a      	str	r2, [r3, #8]
      break;
 8004e8c:	e03c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 f90a 	bl	80050b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2150      	movs	r1, #80	; 0x50
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f963 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004eac:	e02c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 f929 	bl	8005112 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2160      	movs	r1, #96	; 0x60
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f953 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e01c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 f8ea 	bl	80050b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2140      	movs	r1, #64	; 0x40
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f943 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004eec:	e00c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 f93a 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004efe:	e003      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	e000      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a40      	ldr	r2, [pc, #256]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3d      	ldr	r2, [pc, #244]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d02b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d027      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d023      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d017      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <TIM_Base_SetConfig+0x128>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <TIM_Base_SetConfig+0x134>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a24      	ldr	r2, [pc, #144]	; (80050ac <TIM_Base_SetConfig+0x138>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <TIM_Base_SetConfig+0x13c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	615a      	str	r2, [r3, #20]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40010400 	.word	0x40010400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800
 80050a8:	40001800 	.word	0x40001800
 80050ac:	40001c00 	.word	0x40001c00
 80050b0:	40002000 	.word	0x40002000

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0210 	bic.w	r2, r3, #16
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800514e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	f043 0307 	orr.w	r3, r3, #7
 8005194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e05a      	b.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d01d      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d10c      	bne.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4313      	orrs	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40001800 	.word	0x40001800

080052e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e03f      	b.n	800539a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fb fe70 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f929 	bl	80055a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b08a      	sub	sp, #40	; 0x28
 80053a6:	af02      	add	r7, sp, #8
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d17c      	bne.n	80054bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_UART_Transmit+0x2c>
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e075      	b.n	80054be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_UART_Transmit+0x3e>
 80053dc:	2302      	movs	r3, #2
 80053de:	e06e      	b.n	80054be <HAL_UART_Transmit+0x11c>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2221      	movs	r2, #33	; 0x21
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053f6:	f7fc f8b7 	bl	8001568 <HAL_GetTick>
 80053fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005410:	d108      	bne.n	8005424 <HAL_UART_Transmit+0x82>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	e003      	b.n	800542c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005434:	e02a      	b.n	800548c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	2180      	movs	r1, #128	; 0x80
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f840 	bl	80054c6 <UART_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e036      	b.n	80054be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005464:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	3302      	adds	r3, #2
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e007      	b.n	800547e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	3301      	adds	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1cf      	bne.n	8005436 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2200      	movs	r2, #0
 800549e:	2140      	movs	r1, #64	; 0x40
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f810 	bl	80054c6 <UART_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e006      	b.n	80054be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e000      	b.n	80054be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b090      	sub	sp, #64	; 0x40
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d6:	e050      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d04c      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80054e6:	f7fc f83f 	bl	8001568 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d241      	bcs.n	800557a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005516:	637a      	str	r2, [r7, #52]	; 0x34
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800551c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	613b      	str	r3, [r7, #16]
   return(result);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554a:	623a      	str	r2, [r7, #32]
 800554c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	69f9      	ldr	r1, [r7, #28]
 8005550:	6a3a      	ldr	r2, [r7, #32]
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	61bb      	str	r3, [r7, #24]
   return(result);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e5      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e00f      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	429a      	cmp	r2, r3
 8005596:	d09f      	beq.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3740      	adds	r7, #64	; 0x40
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a8:	b0c0      	sub	sp, #256	; 0x100
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	68d9      	ldr	r1, [r3, #12]
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	ea40 0301 	orr.w	r3, r0, r1
 80055cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	431a      	orrs	r2, r3
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055fc:	f021 010c 	bic.w	r1, r1, #12
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800560a:	430b      	orrs	r3, r1
 800560c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	6999      	ldr	r1, [r3, #24]
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	ea40 0301 	orr.w	r3, r0, r1
 800562a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b8f      	ldr	r3, [pc, #572]	; (8005870 <UART_SetConfig+0x2cc>)
 8005634:	429a      	cmp	r2, r3
 8005636:	d005      	beq.n	8005644 <UART_SetConfig+0xa0>
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b8d      	ldr	r3, [pc, #564]	; (8005874 <UART_SetConfig+0x2d0>)
 8005640:	429a      	cmp	r2, r3
 8005642:	d104      	bne.n	800564e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005644:	f7fe febe 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8005648:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800564c:	e003      	b.n	8005656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800564e:	f7fe fea5 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8005652:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005660:	f040 810c 	bne.w	800587c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005668:	2200      	movs	r2, #0
 800566a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800566e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005676:	4622      	mov	r2, r4
 8005678:	462b      	mov	r3, r5
 800567a:	1891      	adds	r1, r2, r2
 800567c:	65b9      	str	r1, [r7, #88]	; 0x58
 800567e:	415b      	adcs	r3, r3
 8005680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005686:	4621      	mov	r1, r4
 8005688:	eb12 0801 	adds.w	r8, r2, r1
 800568c:	4629      	mov	r1, r5
 800568e:	eb43 0901 	adc.w	r9, r3, r1
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800569e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056a6:	4690      	mov	r8, r2
 80056a8:	4699      	mov	r9, r3
 80056aa:	4623      	mov	r3, r4
 80056ac:	eb18 0303 	adds.w	r3, r8, r3
 80056b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056b4:	462b      	mov	r3, r5
 80056b6:	eb49 0303 	adc.w	r3, r9, r3
 80056ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056d2:	460b      	mov	r3, r1
 80056d4:	18db      	adds	r3, r3, r3
 80056d6:	653b      	str	r3, [r7, #80]	; 0x50
 80056d8:	4613      	mov	r3, r2
 80056da:	eb42 0303 	adc.w	r3, r2, r3
 80056de:	657b      	str	r3, [r7, #84]	; 0x54
 80056e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056e8:	f7fa fdd2 	bl	8000290 <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4b61      	ldr	r3, [pc, #388]	; (8005878 <UART_SetConfig+0x2d4>)
 80056f2:	fba3 2302 	umull	r2, r3, r3, r2
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	011c      	lsls	r4, r3, #4
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005704:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	1891      	adds	r1, r2, r2
 8005712:	64b9      	str	r1, [r7, #72]	; 0x48
 8005714:	415b      	adcs	r3, r3
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800571c:	4641      	mov	r1, r8
 800571e:	eb12 0a01 	adds.w	sl, r2, r1
 8005722:	4649      	mov	r1, r9
 8005724:	eb43 0b01 	adc.w	fp, r3, r1
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800573c:	4692      	mov	sl, r2
 800573e:	469b      	mov	fp, r3
 8005740:	4643      	mov	r3, r8
 8005742:	eb1a 0303 	adds.w	r3, sl, r3
 8005746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800574a:	464b      	mov	r3, r9
 800574c:	eb4b 0303 	adc.w	r3, fp, r3
 8005750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005760:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005768:	460b      	mov	r3, r1
 800576a:	18db      	adds	r3, r3, r3
 800576c:	643b      	str	r3, [r7, #64]	; 0x40
 800576e:	4613      	mov	r3, r2
 8005770:	eb42 0303 	adc.w	r3, r2, r3
 8005774:	647b      	str	r3, [r7, #68]	; 0x44
 8005776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800577a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800577e:	f7fa fd87 	bl	8000290 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4611      	mov	r1, r2
 8005788:	4b3b      	ldr	r3, [pc, #236]	; (8005878 <UART_SetConfig+0x2d4>)
 800578a:	fba3 2301 	umull	r2, r3, r3, r1
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	2264      	movs	r2, #100	; 0x64
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	1acb      	subs	r3, r1, r3
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800579e:	4b36      	ldr	r3, [pc, #216]	; (8005878 <UART_SetConfig+0x2d4>)
 80057a0:	fba3 2302 	umull	r2, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057ac:	441c      	add	r4, r3
 80057ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057c8:	415b      	adcs	r3, r3
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057d0:	4641      	mov	r1, r8
 80057d2:	1851      	adds	r1, r2, r1
 80057d4:	6339      	str	r1, [r7, #48]	; 0x30
 80057d6:	4649      	mov	r1, r9
 80057d8:	414b      	adcs	r3, r1
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057e8:	4659      	mov	r1, fp
 80057ea:	00cb      	lsls	r3, r1, #3
 80057ec:	4651      	mov	r1, sl
 80057ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f2:	4651      	mov	r1, sl
 80057f4:	00ca      	lsls	r2, r1, #3
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	4642      	mov	r2, r8
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005804:	464b      	mov	r3, r9
 8005806:	460a      	mov	r2, r1
 8005808:	eb42 0303 	adc.w	r3, r2, r3
 800580c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800581c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005824:	460b      	mov	r3, r1
 8005826:	18db      	adds	r3, r3, r3
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
 800582a:	4613      	mov	r3, r2
 800582c:	eb42 0303 	adc.w	r3, r2, r3
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800583a:	f7fa fd29 	bl	8000290 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <UART_SetConfig+0x2d4>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	2164      	movs	r1, #100	; 0x64
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	3332      	adds	r3, #50	; 0x32
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <UART_SetConfig+0x2d4>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f003 0207 	and.w	r2, r3, #7
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4422      	add	r2, r4
 800586a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800586c:	e105      	b.n	8005a7a <UART_SetConfig+0x4d6>
 800586e:	bf00      	nop
 8005870:	40011000 	.word	0x40011000
 8005874:	40011400 	.word	0x40011400
 8005878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005886:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800588a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800588e:	4642      	mov	r2, r8
 8005890:	464b      	mov	r3, r9
 8005892:	1891      	adds	r1, r2, r2
 8005894:	6239      	str	r1, [r7, #32]
 8005896:	415b      	adcs	r3, r3
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800589e:	4641      	mov	r1, r8
 80058a0:	1854      	adds	r4, r2, r1
 80058a2:	4649      	mov	r1, r9
 80058a4:	eb43 0501 	adc.w	r5, r3, r1
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	00eb      	lsls	r3, r5, #3
 80058b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b6:	00e2      	lsls	r2, r4, #3
 80058b8:	4614      	mov	r4, r2
 80058ba:	461d      	mov	r5, r3
 80058bc:	4643      	mov	r3, r8
 80058be:	18e3      	adds	r3, r4, r3
 80058c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058c4:	464b      	mov	r3, r9
 80058c6:	eb45 0303 	adc.w	r3, r5, r3
 80058ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058ea:	4629      	mov	r1, r5
 80058ec:	008b      	lsls	r3, r1, #2
 80058ee:	4621      	mov	r1, r4
 80058f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058f4:	4621      	mov	r1, r4
 80058f6:	008a      	lsls	r2, r1, #2
 80058f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058fc:	f7fa fcc8 	bl	8000290 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <UART_SetConfig+0x4e4>)
 8005906:	fba3 2302 	umull	r2, r3, r3, r2
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	011c      	lsls	r4, r3, #4
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800591c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	61b9      	str	r1, [r7, #24]
 8005928:	415b      	adcs	r3, r3
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6139      	str	r1, [r7, #16]
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005964:	464b      	mov	r3, r9
 8005966:	460a      	mov	r2, r1
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	67bb      	str	r3, [r7, #120]	; 0x78
 800597a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005988:	4649      	mov	r1, r9
 800598a:	008b      	lsls	r3, r1, #2
 800598c:	4641      	mov	r1, r8
 800598e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005992:	4641      	mov	r1, r8
 8005994:	008a      	lsls	r2, r1, #2
 8005996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800599a:	f7fa fc79 	bl	8000290 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4b39      	ldr	r3, [pc, #228]	; (8005a88 <UART_SetConfig+0x4e4>)
 80059a4:	fba3 1302 	umull	r1, r3, r3, r2
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	2164      	movs	r1, #100	; 0x64
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	3332      	adds	r3, #50	; 0x32
 80059b6:	4a34      	ldr	r2, [pc, #208]	; (8005a88 <UART_SetConfig+0x4e4>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c2:	441c      	add	r4, r3
 80059c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c8:	2200      	movs	r2, #0
 80059ca:	673b      	str	r3, [r7, #112]	; 0x70
 80059cc:	677a      	str	r2, [r7, #116]	; 0x74
 80059ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059d2:	4642      	mov	r2, r8
 80059d4:	464b      	mov	r3, r9
 80059d6:	1891      	adds	r1, r2, r2
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	415b      	adcs	r3, r3
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059e2:	4641      	mov	r1, r8
 80059e4:	1851      	adds	r1, r2, r1
 80059e6:	6039      	str	r1, [r7, #0]
 80059e8:	4649      	mov	r1, r9
 80059ea:	414b      	adcs	r3, r1
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059fa:	4659      	mov	r1, fp
 80059fc:	00cb      	lsls	r3, r1, #3
 80059fe:	4651      	mov	r1, sl
 8005a00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a04:	4651      	mov	r1, sl
 8005a06:	00ca      	lsls	r2, r1, #3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	4642      	mov	r2, r8
 8005a10:	189b      	adds	r3, r3, r2
 8005a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a14:	464b      	mov	r3, r9
 8005a16:	460a      	mov	r2, r1
 8005a18:	eb42 0303 	adc.w	r3, r2, r3
 8005a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	663b      	str	r3, [r7, #96]	; 0x60
 8005a28:	667a      	str	r2, [r7, #100]	; 0x64
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a36:	4649      	mov	r1, r9
 8005a38:	008b      	lsls	r3, r1, #2
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a40:	4641      	mov	r1, r8
 8005a42:	008a      	lsls	r2, r1, #2
 8005a44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a48:	f7fa fc22 	bl	8000290 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <UART_SetConfig+0x4e4>)
 8005a52:	fba3 1302 	umull	r1, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2164      	movs	r1, #100	; 0x64
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	3332      	adds	r3, #50	; 0x32
 8005a64:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <UART_SetConfig+0x4e4>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4422      	add	r2, r4
 8005a78:	609a      	str	r2, [r3, #8]
}
 8005a7a:	bf00      	nop
 8005a7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a80:	46bd      	mov	sp, r7
 8005a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a86:	bf00      	nop
 8005a88:	51eb851f 	.word	0x51eb851f

08005a8c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d123      	bne.n	8005ae6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005aa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	6851      	ldr	r1, [r2, #4]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	6892      	ldr	r2, [r2, #8]
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	68d2      	ldr	r2, [r2, #12]
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	6912      	ldr	r2, [r2, #16]
 8005abe:	4311      	orrs	r1, r2
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	6952      	ldr	r2, [r2, #20]
 8005ac4:	4311      	orrs	r1, r2
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	6992      	ldr	r2, [r2, #24]
 8005aca:	4311      	orrs	r1, r2
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	69d2      	ldr	r2, [r2, #28]
 8005ad0:	4311      	orrs	r1, r2
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	6a12      	ldr	r2, [r2, #32]
 8005ad6:	4311      	orrs	r1, r2
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005adc:	430a      	orrs	r2, r1
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e028      	b.n	8005b38 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	69d9      	ldr	r1, [r3, #28]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4319      	orrs	r1, r3
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	430b      	orrs	r3, r1
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	6851      	ldr	r1, [r2, #4]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	6892      	ldr	r2, [r2, #8]
 8005b18:	4311      	orrs	r1, r2
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	68d2      	ldr	r2, [r2, #12]
 8005b1e:	4311      	orrs	r1, r2
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	6912      	ldr	r2, [r2, #16]
 8005b24:	4311      	orrs	r1, r2
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	6952      	ldr	r2, [r2, #20]
 8005b2a:	4311      	orrs	r1, r2
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	6992      	ldr	r2, [r2, #24]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d128      	bne.n	8005baa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	1e59      	subs	r1, r3, #1
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4319      	orrs	r1, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	4319      	orrs	r1, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	4319      	orrs	r1, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	4319      	orrs	r1, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	051b      	lsls	r3, r3, #20
 8005b96:	4319      	orrs	r1, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	e02f      	b.n	8005c0a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	68d2      	ldr	r2, [r2, #12]
 8005bba:	3a01      	subs	r2, #1
 8005bbc:	0311      	lsls	r1, r2, #12
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	6952      	ldr	r2, [r2, #20]
 8005bc2:	3a01      	subs	r2, #1
 8005bc4:	0512      	lsls	r2, r2, #20
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	1e59      	subs	r1, r3, #1
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	4319      	orrs	r1, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	4319      	orrs	r1, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	4319      	orrs	r1, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	430b      	orrs	r3, r1
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f043 0201 	orr.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <USB_FlushTxFifo+0x64>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d901      	bls.n	8005c7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e01b      	b.n	8005cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	daf2      	bge.n	8005c6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	019b      	lsls	r3, r3, #6
 8005c8c:	f043 0220 	orr.w	r2, r3, #32
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a08      	ldr	r2, [pc, #32]	; (8005cc0 <USB_FlushTxFifo+0x64>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e006      	b.n	8005cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d0f0      	beq.n	8005c94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	00030d40 	.word	0x00030d40

08005cc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a11      	ldr	r2, [pc, #68]	; (8005d20 <USB_FlushRxFifo+0x5c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e018      	b.n	8005d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	daf2      	bge.n	8005cd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <USB_FlushRxFifo+0x5c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e006      	b.n	8005d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d0f0      	beq.n	8005cf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	00030d40 	.word	0x00030d40

08005d24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b08b      	sub	sp, #44	; 0x2c
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	089b      	lsrs	r3, r3, #2
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	e014      	b.n	8005d7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	3301      	adds	r3, #1
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	3301      	adds	r3, #1
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	3301      	adds	r3, #1
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	3301      	adds	r3, #1
 8005d78:	623b      	str	r3, [r7, #32]
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d3e6      	bcc.n	8005d50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d82:	8bfb      	ldrh	r3, [r7, #30]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01e      	beq.n	8005dc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d92:	461a      	mov	r2, r3
 8005d94:	f107 0310 	add.w	r3, r7, #16
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	701a      	strb	r2, [r3, #0]
      i++;
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	3301      	adds	r3, #1
 8005db2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	3301      	adds	r3, #1
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005dba:	8bfb      	ldrh	r3, [r7, #30]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005dc0:	8bfb      	ldrh	r3, [r7, #30]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ea      	bne.n	8005d9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	372c      	adds	r7, #44	; 0x2c
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0301 	and.w	r3, r3, #1
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e34:	f023 0303 	bic.w	r3, r3, #3
 8005e38:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	68f9      	ldr	r1, [r7, #12]
 8005e4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e64:	6053      	str	r3, [r2, #4]
 8005e66:	e009      	b.n	8005e7c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d106      	bne.n	8005e7c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e74:	461a      	mov	r2, r3
 8005e76:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e7a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	b29b      	uxth	r3, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b089      	sub	sp, #36	; 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	0c9b      	lsrs	r3, r3, #18
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	0fdb      	lsrs	r3, r3, #31
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d104      	bne.n	8005f06 <USB_HC_Halt+0x5a>
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e0c8      	b.n	8006098 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <USB_HC_Halt+0x66>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d163      	bne.n	8005fda <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f30:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f040 80ab 	bne.w	8006096 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d133      	bne.n	8005fb4 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f8a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f98:	d81d      	bhi.n	8005fd6 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb0:	d0ec      	beq.n	8005f8c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fb2:	e070      	b.n	8006096 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fd2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fd4:	e05f      	b.n	8006096 <USB_HC_Halt+0x1ea>
            break;
 8005fd6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fd8:	e05d      	b.n	8006096 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d133      	bne.n	8006072 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	440a      	add	r2, r1
 8006020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006028:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	440a      	add	r2, r1
 8006040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006048:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006056:	d81d      	bhi.n	8006094 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800606a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800606e:	d0ec      	beq.n	800604a <USB_HC_Halt+0x19e>
 8006070:	e011      	b.n	8006096 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e000      	b.n	8006096 <USB_HC_Halt+0x1ea>
          break;
 8006094:	bf00      	nop
    }
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3724      	adds	r7, #36	; 0x24
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff fdbe 	bl	8005c3a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060be:	2110      	movs	r1, #16
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fdcb 	bl	8005c5c <USB_FlushTxFifo>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff fdf7 	bl	8005cc4 <USB_FlushRxFifo>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	e01f      	b.n	8006126 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006104:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800610c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	461a      	mov	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	3301      	adds	r3, #1
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b0f      	cmp	r3, #15
 800612a:	d9dc      	bls.n	80060e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e034      	b.n	800619c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006148:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006150:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006158:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	461a      	mov	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006178:	d80c      	bhi.n	8006194 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800618c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006190:	d0ec      	beq.n	800616c <USB_StopHost+0xc8>
 8006192:	e000      	b.n	8006196 <USB_StopHost+0xf2>
        break;
 8006194:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	3301      	adds	r3, #1
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b0f      	cmp	r3, #15
 80061a0:	d9c7      	bls.n	8006132 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a8:	461a      	mov	r2, r3
 80061aa:	f04f 33ff 	mov.w	r3, #4294967295
 80061ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f04f 32ff 	mov.w	r2, #4294967295
 80061b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fd2d 	bl	8005c18 <USB_EnableGlobalInt>

  return ret;
 80061be:	7ffb      	ldrb	r3, [r7, #31]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f804 	bl	80061ec <USBH_HandleSof>
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b0b      	cmp	r3, #11
 80061fc:	d10a      	bne.n	8006214 <USBH_HandleSof+0x28>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
  }
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006240:	2200      	movs	r2, #0
 8006242:	4619      	mov	r1, r3
 8006244:	f000 f8ae 	bl	80063a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006248:	bf00      	nop
}
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006260:	bf00      	nop
}
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80062a0:	2200      	movs	r2, #0
 80062a2:	4619      	mov	r1, r3
 80062a4:	f000 f87e 	bl	80063a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 f912 	bl	80074fc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	791b      	ldrb	r3, [r3, #4]
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f830 	bl	8006344 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	795b      	ldrb	r3, [r3, #5]
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f82a 	bl	8006344 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006304:	2200      	movs	r2, #0
 8006306:	4619      	mov	r1, r3
 8006308:	f000 f84c 	bl	80063a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006332:	2200      	movs	r2, #0
 8006334:	4619      	mov	r1, r3
 8006336:	f000 f835 	bl	80063a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	d80d      	bhi.n	8006372 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	33e0      	adds	r3, #224	; 0xe0
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	33e0      	adds	r3, #224	; 0xe0
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006386:	f3ef 8305 	mrs	r3, IPSR
 800638a:	607b      	str	r3, [r7, #4]
  return(result);
 800638c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <osMessagePut+0x1e>
    ticks = 1;
 80063be:	2301      	movs	r3, #1
 80063c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80063c2:	f7ff ffdd 	bl	8006380 <inHandlerMode>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d018      	beq.n	80063fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80063cc:	f107 0210 	add.w	r2, r7, #16
 80063d0:	f107 0108 	add.w	r1, r7, #8
 80063d4:	2300      	movs	r3, #0
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f9aa 	bl	8006730 <xQueueGenericSendFromISR>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d001      	beq.n	80063e6 <osMessagePut+0x42>
      return osErrorOS;
 80063e2:	23ff      	movs	r3, #255	; 0xff
 80063e4:	e018      	b.n	8006418 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d014      	beq.n	8006416 <osMessagePut+0x72>
 80063ec:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <osMessagePut+0x7c>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	e00b      	b.n	8006416 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80063fe:	f107 0108 	add.w	r1, r7, #8
 8006402:	2300      	movs	r3, #0
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f894 	bl	8006534 <xQueueGenericSend>
 800640c:	4603      	mov	r3, r0
 800640e:	2b01      	cmp	r3, #1
 8006410:	d001      	beq.n	8006416 <osMessagePut+0x72>
      return osErrorOS;
 8006412:	23ff      	movs	r3, #255	; 0xff
 8006414:	e000      	b.n	8006418 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006482:	d103      	bne.n	800648c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	e00c      	b.n	80064a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3308      	adds	r3, #8
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e002      	b.n	800649a <vListInsert+0x2e>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d2f6      	bcs.n	8006494 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6892      	ldr	r2, [r2, #8]
 80064f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6852      	ldr	r2, [r2, #4]
 80064fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d103      	bne.n	8006512 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	1e5a      	subs	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08e      	sub	sp, #56	; 0x38
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <xQueueGenericSend+0x40>
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <xQueueGenericSend+0x44>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <xQueueGenericSend+0x46>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <xQueueGenericSend+0x60>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSend+0x6e>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSend+0x72>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSend+0x74>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	623b      	str	r3, [r7, #32]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c2:	f000 fd31 	bl	8007028 <xTaskGetSchedulerState>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <xQueueGenericSend+0x9e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <xQueueGenericSend+0xa2>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueGenericSend+0xa4>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61fb      	str	r3, [r7, #28]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f2:	f000 fe39 	bl	8007268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <xQueueGenericSend+0xd4>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d129      	bne.n	800665c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660e:	f000 f92a 	bl	8006866 <prvCopyDataToQueue>
 8006612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	3324      	adds	r3, #36	; 0x24
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fbfb 	bl	8006e1c <xTaskRemoveFromEventList>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d013      	beq.n	8006654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800662c:	4b3f      	ldr	r3, [pc, #252]	; (800672c <xQueueGenericSend+0x1f8>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	e00a      	b.n	8006654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006644:	4b39      	ldr	r3, [pc, #228]	; (800672c <xQueueGenericSend+0x1f8>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006654:	f000 fe38 	bl	80072c8 <vPortExitCritical>
				return pdPASS;
 8006658:	2301      	movs	r3, #1
 800665a:	e063      	b.n	8006724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006662:	f000 fe31 	bl	80072c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006666:	2300      	movs	r3, #0
 8006668:	e05c      	b.n	8006724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fc33 	bl	8006ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800667e:	f000 fe23 	bl	80072c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006682:	f000 f9c5 	bl	8006a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006686:	f000 fdef 	bl	8007268 <vPortEnterCritical>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006690:	b25b      	sxtb	r3, r3
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d103      	bne.n	80066a0 <xQueueGenericSend+0x16c>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d103      	bne.n	80066b6 <xQueueGenericSend+0x182>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b6:	f000 fe07 	bl	80072c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ba:	1d3a      	adds	r2, r7, #4
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fc22 	bl	8006f0c <xTaskCheckForTimeOut>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d124      	bne.n	8006718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066d0:	f000 f985 	bl	80069de <prvIsQueueFull>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d018      	beq.n	800670c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	3310      	adds	r3, #16
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb76 	bl	8006dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ea:	f000 f926 	bl	800693a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ee:	f000 f99d 	bl	8006a2c <xTaskResumeAll>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f47f af7c 	bne.w	80065f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066fa:	4b0c      	ldr	r3, [pc, #48]	; (800672c <xQueueGenericSend+0x1f8>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	e772      	b.n	80065f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800670c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800670e:	f000 f914 	bl	800693a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006712:	f000 f98b 	bl	8006a2c <xTaskResumeAll>
 8006716:	e76c      	b.n	80065f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800671a:	f000 f90e 	bl	800693a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800671e:	f000 f985 	bl	8006a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006724:	4618      	mov	r0, r3
 8006726:	3738      	adds	r7, #56	; 0x38
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b090      	sub	sp, #64	; 0x40
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <xQueueGenericSendFromISR+0x3c>
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <xQueueGenericSendFromISR+0x40>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <xQueueGenericSendFromISR+0x42>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d103      	bne.n	800679a <xQueueGenericSendFromISR+0x6a>
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <xQueueGenericSendFromISR+0x6e>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <xQueueGenericSendFromISR+0x70>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	623b      	str	r3, [r7, #32]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067ba:	f000 fe07 	bl	80073cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067be:	f3ef 8211 	mrs	r2, BASEPRI
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	61fa      	str	r2, [r7, #28]
 80067d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d302      	bcc.n	80067ec <xQueueGenericSendFromISR+0xbc>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d12f      	bne.n	800684c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006802:	f000 f830 	bl	8006866 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006806:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d112      	bne.n	8006836 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d016      	beq.n	8006846 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	3324      	adds	r3, #36	; 0x24
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fafd 	bl	8006e1c <xTaskRemoveFromEventList>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00e      	beq.n	8006846 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e007      	b.n	8006846 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800683a:	3301      	adds	r3, #1
 800683c:	b2db      	uxtb	r3, r3
 800683e:	b25a      	sxtb	r2, r3
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006846:	2301      	movs	r3, #1
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800684a:	e001      	b.n	8006850 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800684c:	2300      	movs	r3, #0
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800685a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800685e:	4618      	mov	r0, r3
 8006860:	3740      	adds	r7, #64	; 0x40
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10d      	bne.n	80068a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d14d      	bne.n	8006928 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fbe7 	bl	8007064 <xTaskPriorityDisinherit>
 8006896:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	609a      	str	r2, [r3, #8]
 800689e:	e043      	b.n	8006928 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d119      	bne.n	80068da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6858      	ldr	r0, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	461a      	mov	r2, r3
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	f000 fe95 	bl	80075e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	441a      	add	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d32b      	bcc.n	8006928 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	e026      	b.n	8006928 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68d8      	ldr	r0, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	461a      	mov	r2, r3
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	f000 fe7b 	bl	80075e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	425b      	negs	r3, r3
 80068f4:	441a      	add	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d207      	bcs.n	8006916 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	425b      	negs	r3, r3
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d105      	bne.n	8006928 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3b01      	subs	r3, #1
 8006926:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006930:	697b      	ldr	r3, [r7, #20]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006942:	f000 fc91 	bl	8007268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800694e:	e011      	b.n	8006974 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d012      	beq.n	800697e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3324      	adds	r3, #36	; 0x24
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fa5d 	bl	8006e1c <xTaskRemoveFromEventList>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006968:	f000 fb32 	bl	8006fd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	3b01      	subs	r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006978:	2b00      	cmp	r3, #0
 800697a:	dce9      	bgt.n	8006950 <prvUnlockQueue+0x16>
 800697c:	e000      	b.n	8006980 <prvUnlockQueue+0x46>
					break;
 800697e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	22ff      	movs	r2, #255	; 0xff
 8006984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006988:	f000 fc9e 	bl	80072c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800698c:	f000 fc6c 	bl	8007268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006996:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006998:	e011      	b.n	80069be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3310      	adds	r3, #16
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fa38 	bl	8006e1c <xTaskRemoveFromEventList>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069b2:	f000 fb0d 	bl	8006fd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dce9      	bgt.n	800699a <prvUnlockQueue+0x60>
 80069c6:	e000      	b.n	80069ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069d2:	f000 fc79 	bl	80072c8 <vPortExitCritical>
}
 80069d6:	bf00      	nop
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069e6:	f000 fc3f 	bl	8007268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d102      	bne.n	80069fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069f6:	2301      	movs	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e001      	b.n	8006a00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a00:	f000 fc62 	bl	80072c8 <vPortExitCritical>

	return xReturn;
 8006a04:	68fb      	ldr	r3, [r7, #12]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a14:	4b04      	ldr	r3, [pc, #16]	; (8006a28 <vTaskSuspendAll+0x18>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	4a03      	ldr	r2, [pc, #12]	; (8006a28 <vTaskSuspendAll+0x18>)
 8006a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a1e:	bf00      	nop
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	2000036c 	.word	0x2000036c

08006a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a3a:	4b41      	ldr	r3, [pc, #260]	; (8006b40 <xTaskResumeAll+0x114>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	603b      	str	r3, [r7, #0]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a58:	f000 fc06 	bl	8007268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a5c:	4b38      	ldr	r3, [pc, #224]	; (8006b40 <xTaskResumeAll+0x114>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4a37      	ldr	r2, [pc, #220]	; (8006b40 <xTaskResumeAll+0x114>)
 8006a64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a66:	4b36      	ldr	r3, [pc, #216]	; (8006b40 <xTaskResumeAll+0x114>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d161      	bne.n	8006b32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a6e:	4b35      	ldr	r3, [pc, #212]	; (8006b44 <xTaskResumeAll+0x118>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d05d      	beq.n	8006b32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a76:	e02e      	b.n	8006ad6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a78:	4b33      	ldr	r3, [pc, #204]	; (8006b48 <xTaskResumeAll+0x11c>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3318      	adds	r3, #24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fd2a 	bl	80064de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fd25 	bl	80064de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	2201      	movs	r2, #1
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <xTaskResumeAll+0x120>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <xTaskResumeAll+0x120>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a27      	ldr	r2, [pc, #156]	; (8006b50 <xTaskResumeAll+0x124>)
 8006ab4:	441a      	add	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f7ff fcb1 	bl	8006424 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <xTaskResumeAll+0x128>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d302      	bcc.n	8006ad6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ad0:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <xTaskResumeAll+0x12c>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ad6:	4b1c      	ldr	r3, [pc, #112]	; (8006b48 <xTaskResumeAll+0x11c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1cc      	bne.n	8006a78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ae4:	f000 fa80 	bl	8006fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ae8:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <xTaskResumeAll+0x130>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d010      	beq.n	8006b16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006af4:	f000 f836 	bl	8006b64 <xTaskIncrementTick>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006afe:	4b16      	ldr	r3, [pc, #88]	; (8006b58 <xTaskResumeAll+0x12c>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f1      	bne.n	8006af4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006b10:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <xTaskResumeAll+0x130>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <xTaskResumeAll+0x12c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b22:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <xTaskResumeAll+0x134>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b32:	f000 fbc9 	bl	80072c8 <vPortExitCritical>

	return xAlreadyYielded;
 8006b36:	68bb      	ldr	r3, [r7, #8]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	2000036c 	.word	0x2000036c
 8006b44:	2000034c 	.word	0x2000034c
 8006b48:	20000324 	.word	0x20000324
 8006b4c:	20000354 	.word	0x20000354
 8006b50:	20000290 	.word	0x20000290
 8006b54:	2000028c 	.word	0x2000028c
 8006b58:	20000360 	.word	0x20000360
 8006b5c:	2000035c 	.word	0x2000035c
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ca8 <xTaskIncrementTick+0x144>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f040 808e 	bne.w	8006c94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b78:	4b4c      	ldr	r3, [pc, #304]	; (8006cac <xTaskIncrementTick+0x148>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b80:	4a4a      	ldr	r2, [pc, #296]	; (8006cac <xTaskIncrementTick+0x148>)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d120      	bne.n	8006bce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b8c:	4b48      	ldr	r3, [pc, #288]	; (8006cb0 <xTaskIncrementTick+0x14c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <xTaskIncrementTick+0x48>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	603b      	str	r3, [r7, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <xTaskIncrementTick+0x46>
 8006bac:	4b40      	ldr	r3, [pc, #256]	; (8006cb0 <xTaskIncrementTick+0x14c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	4b40      	ldr	r3, [pc, #256]	; (8006cb4 <xTaskIncrementTick+0x150>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a3e      	ldr	r2, [pc, #248]	; (8006cb0 <xTaskIncrementTick+0x14c>)
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4a3e      	ldr	r2, [pc, #248]	; (8006cb4 <xTaskIncrementTick+0x150>)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	4b3d      	ldr	r3, [pc, #244]	; (8006cb8 <xTaskIncrementTick+0x154>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a3c      	ldr	r2, [pc, #240]	; (8006cb8 <xTaskIncrementTick+0x154>)
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	f000 fa0d 	bl	8006fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bce:	4b3b      	ldr	r3, [pc, #236]	; (8006cbc <xTaskIncrementTick+0x158>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d348      	bcc.n	8006c6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd8:	4b35      	ldr	r3, [pc, #212]	; (8006cb0 <xTaskIncrementTick+0x14c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be2:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <xTaskIncrementTick+0x158>)
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295
 8006be8:	601a      	str	r2, [r3, #0]
					break;
 8006bea:	e03e      	b.n	8006c6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bec:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <xTaskIncrementTick+0x14c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d203      	bcs.n	8006c0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c04:	4a2d      	ldr	r2, [pc, #180]	; (8006cbc <xTaskIncrementTick+0x158>)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c0a:	e02e      	b.n	8006c6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fc64 	bl	80064de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	3318      	adds	r3, #24
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fc5b 	bl	80064de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <xTaskIncrementTick+0x15c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	4a22      	ldr	r2, [pc, #136]	; (8006cc0 <xTaskIncrementTick+0x15c>)
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <xTaskIncrementTick+0x160>)
 8006c48:	441a      	add	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4610      	mov	r0, r2
 8006c52:	f7ff fbe7 	bl	8006424 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	4b1b      	ldr	r3, [pc, #108]	; (8006cc8 <xTaskIncrementTick+0x164>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d3b9      	bcc.n	8006bd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c68:	e7b6      	b.n	8006bd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c6a:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <xTaskIncrementTick+0x164>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4914      	ldr	r1, [pc, #80]	; (8006cc4 <xTaskIncrementTick+0x160>)
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d901      	bls.n	8006c86 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <xTaskIncrementTick+0x168>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	e004      	b.n	8006c9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c94:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <xTaskIncrementTick+0x16c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	4a0d      	ldr	r2, [pc, #52]	; (8006cd0 <xTaskIncrementTick+0x16c>)
 8006c9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c9e:	697b      	ldr	r3, [r7, #20]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	2000036c 	.word	0x2000036c
 8006cac:	20000350 	.word	0x20000350
 8006cb0:	2000031c 	.word	0x2000031c
 8006cb4:	20000320 	.word	0x20000320
 8006cb8:	20000364 	.word	0x20000364
 8006cbc:	20000368 	.word	0x20000368
 8006cc0:	20000354 	.word	0x20000354
 8006cc4:	20000290 	.word	0x20000290
 8006cc8:	2000028c 	.word	0x2000028c
 8006ccc:	20000360 	.word	0x20000360
 8006cd0:	2000035c 	.word	0x2000035c

08006cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cda:	4b39      	ldr	r3, [pc, #228]	; (8006dc0 <vTaskSwitchContext+0xec>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ce2:	4b38      	ldr	r3, [pc, #224]	; (8006dc4 <vTaskSwitchContext+0xf0>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ce8:	e066      	b.n	8006db8 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8006cea:	4b36      	ldr	r3, [pc, #216]	; (8006dc4 <vTaskSwitchContext+0xf0>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006cf0:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <vTaskSwitchContext+0xf4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d111      	bne.n	8006d2c <vTaskSwitchContext+0x58>
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d10b      	bne.n	8006d2c <vTaskSwitchContext+0x58>
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	3308      	adds	r3, #8
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d105      	bne.n	8006d2c <vTaskSwitchContext+0x58>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	330c      	adds	r3, #12
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d008      	beq.n	8006d3e <vTaskSwitchContext+0x6a>
 8006d2c:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <vTaskSwitchContext+0xf4>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <vTaskSwitchContext+0xf4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3334      	adds	r3, #52	; 0x34
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f7f9 fc2b 	bl	8000594 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3e:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <vTaskSwitchContext+0xf8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	fab3 f383 	clz	r3, r3
 8006d4a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	f1c3 031f 	rsb	r3, r3, #31
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	491e      	ldr	r1, [pc, #120]	; (8006dd0 <vTaskSwitchContext+0xfc>)
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <vTaskSwitchContext+0xaa>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	607b      	str	r3, [r7, #4]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <vTaskSwitchContext+0xa8>
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4a11      	ldr	r2, [pc, #68]	; (8006dd0 <vTaskSwitchContext+0xfc>)
 8006d8a:	4413      	add	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	605a      	str	r2, [r3, #4]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d104      	bne.n	8006dae <vTaskSwitchContext+0xda>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <vTaskSwitchContext+0xf4>)
 8006db6:	6013      	str	r3, [r2, #0]
}
 8006db8:	bf00      	nop
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	2000036c 	.word	0x2000036c
 8006dc4:	20000360 	.word	0x20000360
 8006dc8:	2000028c 	.word	0x2000028c
 8006dcc:	20000354 	.word	0x20000354
 8006dd0:	20000290 	.word	0x20000290

08006dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60fb      	str	r3, [r7, #12]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <vTaskPlaceOnEventList+0x44>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3318      	adds	r3, #24
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fb32 	bl	800646c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e08:	2101      	movs	r1, #1
 8006e0a:	6838      	ldr	r0, [r7, #0]
 8006e0c:	f000 f9b0 	bl	8007170 <prvAddCurrentTaskToDelayedList>
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	2000028c 	.word	0x2000028c

08006e1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60fb      	str	r3, [r7, #12]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fb46 	bl	80064de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e52:	4b1d      	ldr	r3, [pc, #116]	; (8006ec8 <xTaskRemoveFromEventList+0xac>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d11c      	bne.n	8006e94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fb3d 	bl	80064de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	2201      	movs	r2, #1
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	4b17      	ldr	r3, [pc, #92]	; (8006ecc <xTaskRemoveFromEventList+0xb0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <xTaskRemoveFromEventList+0xb0>)
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <xTaskRemoveFromEventList+0xb4>)
 8006e84:	441a      	add	r2, r3
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f7ff fac9 	bl	8006424 <vListInsertEnd>
 8006e92:	e005      	b.n	8006ea0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3318      	adds	r3, #24
 8006e98:	4619      	mov	r1, r3
 8006e9a:	480e      	ldr	r0, [pc, #56]	; (8006ed4 <xTaskRemoveFromEventList+0xb8>)
 8006e9c:	f7ff fac2 	bl	8006424 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <xTaskRemoveFromEventList+0xbc>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d905      	bls.n	8006eba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <xTaskRemoveFromEventList+0xc0>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	e001      	b.n	8006ebe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ebe:	697b      	ldr	r3, [r7, #20]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	2000036c 	.word	0x2000036c
 8006ecc:	20000354 	.word	0x20000354
 8006ed0:	20000290 	.word	0x20000290
 8006ed4:	20000324 	.word	0x20000324
 8006ed8:	2000028c 	.word	0x2000028c
 8006edc:	20000360 	.word	0x20000360

08006ee0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ee8:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <vTaskInternalSetTimeOutState+0x24>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <vTaskInternalSetTimeOutState+0x28>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	605a      	str	r2, [r3, #4]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000364 	.word	0x20000364
 8006f08:	20000350 	.word	0x20000350

08006f0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	613b      	str	r3, [r7, #16]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f4e:	f000 f98b 	bl	8007268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f52:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <xTaskCheckForTimeOut+0xbc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d102      	bne.n	8006f72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e023      	b.n	8006fba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <xTaskCheckForTimeOut+0xc0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d007      	beq.n	8006f8e <xTaskCheckForTimeOut+0x82>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d302      	bcc.n	8006f8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	e015      	b.n	8006fba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d20b      	bcs.n	8006fb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff ff9b 	bl	8006ee0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	e004      	b.n	8006fba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fba:	f000 f985 	bl	80072c8 <vPortExitCritical>

	return xReturn;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000350 	.word	0x20000350
 8006fcc:	20000364 	.word	0x20000364

08006fd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <vTaskMissedYield+0x14>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20000360 	.word	0x20000360

08006fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <prvResetNextTaskUnblockTime+0x38>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <prvResetNextTaskUnblockTime+0x3c>)
 8006ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007000:	e008      	b.n	8007014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007002:	4b07      	ldr	r3, [pc, #28]	; (8007020 <prvResetNextTaskUnblockTime+0x38>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	4a04      	ldr	r2, [pc, #16]	; (8007024 <prvResetNextTaskUnblockTime+0x3c>)
 8007012:	6013      	str	r3, [r2, #0]
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	2000031c 	.word	0x2000031c
 8007024:	20000368 	.word	0x20000368

08007028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <xTaskGetSchedulerState+0x34>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007036:	2301      	movs	r3, #1
 8007038:	607b      	str	r3, [r7, #4]
 800703a:	e008      	b.n	800704e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703c:	4b08      	ldr	r3, [pc, #32]	; (8007060 <xTaskGetSchedulerState+0x38>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007044:	2302      	movs	r3, #2
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	e001      	b.n	800704e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800704e:	687b      	ldr	r3, [r7, #4]
	}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000358 	.word	0x20000358
 8007060:	2000036c 	.word	0x2000036c

08007064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d06e      	beq.n	8007158 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800707a:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <xTaskPriorityDisinherit+0x100>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	429a      	cmp	r2, r3
 8007082:	d00a      	beq.n	800709a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60fb      	str	r3, [r7, #12]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60bb      	str	r3, [r7, #8]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d044      	beq.n	8007158 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d140      	bne.n	8007158 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	3304      	adds	r3, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff f9ff 	bl	80064de <uxListRemove>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d115      	bne.n	8007112 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	491f      	ldr	r1, [pc, #124]	; (8007168 <xTaskPriorityDisinherit+0x104>)
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xTaskPriorityDisinherit+0xae>
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	2201      	movs	r2, #1
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	43da      	mvns	r2, r3
 8007108:	4b18      	ldr	r3, [pc, #96]	; (800716c <xTaskPriorityDisinherit+0x108>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4013      	ands	r3, r2
 800710e:	4a17      	ldr	r2, [pc, #92]	; (800716c <xTaskPriorityDisinherit+0x108>)
 8007110:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	f1c3 0207 	rsb	r2, r3, #7
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	2201      	movs	r2, #1
 800712c:	409a      	lsls	r2, r3
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <xTaskPriorityDisinherit+0x108>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4313      	orrs	r3, r2
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <xTaskPriorityDisinherit+0x108>)
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4a08      	ldr	r2, [pc, #32]	; (8007168 <xTaskPriorityDisinherit+0x104>)
 8007146:	441a      	add	r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	3304      	adds	r3, #4
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7ff f968 	bl	8006424 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007158:	697b      	ldr	r3, [r7, #20]
	}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	2000028c 	.word	0x2000028c
 8007168:	20000290 	.word	0x20000290
 800716c:	20000354 	.word	0x20000354

08007170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800717a:	4b29      	ldr	r3, [pc, #164]	; (8007220 <prvAddCurrentTaskToDelayedList+0xb0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007180:	4b28      	ldr	r3, [pc, #160]	; (8007224 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3304      	adds	r3, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f7ff f9a9 	bl	80064de <uxListRemove>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	2201      	movs	r2, #1
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	43da      	mvns	r2, r3
 80071a0:	4b21      	ldr	r3, [pc, #132]	; (8007228 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4013      	ands	r3, r2
 80071a6:	4a20      	ldr	r2, [pc, #128]	; (8007228 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d10a      	bne.n	80071c8 <prvAddCurrentTaskToDelayedList+0x58>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d007      	beq.n	80071c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3304      	adds	r3, #4
 80071be:	4619      	mov	r1, r3
 80071c0:	481a      	ldr	r0, [pc, #104]	; (800722c <prvAddCurrentTaskToDelayedList+0xbc>)
 80071c2:	f7ff f92f 	bl	8006424 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071c6:	e026      	b.n	8007216 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071d0:	4b14      	ldr	r3, [pc, #80]	; (8007224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d209      	bcs.n	80071f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <prvAddCurrentTaskToDelayedList+0xc0>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f7ff f93d 	bl	800646c <vListInsert>
}
 80071f2:	e010      	b.n	8007216 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f4:	4b0f      	ldr	r3, [pc, #60]	; (8007234 <prvAddCurrentTaskToDelayedList+0xc4>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7ff f933 	bl	800646c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	d202      	bcs.n	8007216 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007210:	4a09      	ldr	r2, [pc, #36]	; (8007238 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6013      	str	r3, [r2, #0]
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000350 	.word	0x20000350
 8007224:	2000028c 	.word	0x2000028c
 8007228:	20000354 	.word	0x20000354
 800722c:	20000338 	.word	0x20000338
 8007230:	20000320 	.word	0x20000320
 8007234:	2000031c 	.word	0x2000031c
 8007238:	20000368 	.word	0x20000368
 800723c:	00000000 	.word	0x00000000

08007240 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <pxCurrentTCBConst2>)
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	6808      	ldr	r0, [r1, #0]
 8007246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724a:	f380 8809 	msr	PSP, r0
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f380 8811 	msr	BASEPRI, r0
 800725a:	4770      	bx	lr
 800725c:	f3af 8000 	nop.w

08007260 <pxCurrentTCBConst2>:
 8007260:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
}
 8007280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <vPortEnterCritical+0x58>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	4a0d      	ldr	r2, [pc, #52]	; (80072c0 <vPortEnterCritical+0x58>)
 800728a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800728c:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <vPortEnterCritical+0x58>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d10f      	bne.n	80072b4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <vPortEnterCritical+0x5c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <vPortEnterCritical+0x4c>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	603b      	str	r3, [r7, #0]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <vPortEnterCritical+0x4a>
	}
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	2000000c 	.word	0x2000000c
 80072c4:	e000ed04 	.word	0xe000ed04

080072c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <vPortExitCritical+0x50>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <vPortExitCritical+0x24>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	607b      	str	r3, [r7, #4]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072ec:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <vPortExitCritical+0x50>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4a09      	ldr	r2, [pc, #36]	; (8007318 <vPortExitCritical+0x50>)
 80072f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072f6:	4b08      	ldr	r3, [pc, #32]	; (8007318 <vPortExitCritical+0x50>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <vPortExitCritical+0x42>
 80072fe:	2300      	movs	r3, #0
 8007300:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f383 8811 	msr	BASEPRI, r3
}
 8007308:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	2000000c 	.word	0x2000000c
 800731c:	00000000 	.word	0x00000000

08007320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007320:	f3ef 8009 	mrs	r0, PSP
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <pxCurrentTCBConst>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	f01e 0f10 	tst.w	lr, #16
 8007330:	bf08      	it	eq
 8007332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733a:	6010      	str	r0, [r2, #0]
 800733c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007344:	f380 8811 	msr	BASEPRI, r0
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f7ff fcc0 	bl	8006cd4 <vTaskSwitchContext>
 8007354:	f04f 0000 	mov.w	r0, #0
 8007358:	f380 8811 	msr	BASEPRI, r0
 800735c:	bc09      	pop	{r0, r3}
 800735e:	6819      	ldr	r1, [r3, #0]
 8007360:	6808      	ldr	r0, [r1, #0]
 8007362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007366:	f01e 0f10 	tst.w	lr, #16
 800736a:	bf08      	it	eq
 800736c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007370:	f380 8809 	msr	PSP, r0
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst>:
 8007380:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	607b      	str	r3, [r7, #4]
}
 80073a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073a2:	f7ff fbdf 	bl	8006b64 <xTaskIncrementTick>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <SysTick_Handler+0x40>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f383 8811 	msr	BASEPRI, r3
}
 80073be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073d2:	f3ef 8305 	mrs	r3, IPSR
 80073d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d914      	bls.n	8007408 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073de:	4a17      	ldr	r2, [pc, #92]	; (800743c <vPortValidateInterruptPriority+0x70>)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073e8:	4b15      	ldr	r3, [pc, #84]	; (8007440 <vPortValidateInterruptPriority+0x74>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	7afa      	ldrb	r2, [r7, #11]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d20a      	bcs.n	8007408 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	607b      	str	r3, [r7, #4]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007408:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <vPortValidateInterruptPriority+0x78>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007410:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <vPortValidateInterruptPriority+0x7c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d90a      	bls.n	800742e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	603b      	str	r3, [r7, #0]
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <vPortValidateInterruptPriority+0x60>
	}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	e000e3f0 	.word	0xe000e3f0
 8007440:	20000370 	.word	0x20000370
 8007444:	e000ed0c 	.word	0xe000ed0c
 8007448:	20000374 	.word	0x20000374

0800744c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe feb4 	bl	80061c8 <USBH_LL_IncTimer>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fef8 	bl	800626c <USBH_LL_Connect>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe ff0d 	bl	80062b2 <USBH_LL_Disconnect>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
 80074ac:	4613      	mov	r3, r2
 80074ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe ff2d 	bl	8006316 <USBH_LL_NotifyURBChange>
#endif
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fea2 	bl	800621c <USBH_LL_PortEnabled>
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe feae 	bl	8006250 <USBH_LL_PortDisabled>
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007512:	4618      	mov	r0, r3
 8007514:	f7fa fe12 	bl	800213c <HAL_HCD_Stop>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	4618      	mov	r0, r3
 8007520:	f000 f808 	bl	8007534 <USBH_Get_USB_Status>
 8007524:	4603      	mov	r3, r0
 8007526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007528:	7bbb      	ldrb	r3, [r7, #14]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	2b03      	cmp	r3, #3
 8007546:	d817      	bhi.n	8007578 <USBH_Get_USB_Status+0x44>
 8007548:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <USBH_Get_USB_Status+0x1c>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007561 	.word	0x08007561
 8007554:	08007567 	.word	0x08007567
 8007558:	0800756d 	.word	0x0800756d
 800755c:	08007573 	.word	0x08007573
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
    break;
 8007564:	e00b      	b.n	800757e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007566:	2302      	movs	r3, #2
 8007568:	73fb      	strb	r3, [r7, #15]
    break;
 800756a:	e008      	b.n	800757e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
    break;
 8007570:	e005      	b.n	800757e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007572:	2302      	movs	r3, #2
 8007574:	73fb      	strb	r3, [r7, #15]
    break;
 8007576:	e002      	b.n	800757e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007578:	2302      	movs	r3, #2
 800757a:	73fb      	strb	r3, [r7, #15]
    break;
 800757c:	bf00      	nop
  }
  return usb_status;
 800757e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <__errno>:
 800758c:	4b01      	ldr	r3, [pc, #4]	; (8007594 <__errno+0x8>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000010 	.word	0x20000010

08007598 <__libc_init_array>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	4d0d      	ldr	r5, [pc, #52]	; (80075d0 <__libc_init_array+0x38>)
 800759c:	4c0d      	ldr	r4, [pc, #52]	; (80075d4 <__libc_init_array+0x3c>)
 800759e:	1b64      	subs	r4, r4, r5
 80075a0:	10a4      	asrs	r4, r4, #2
 80075a2:	2600      	movs	r6, #0
 80075a4:	42a6      	cmp	r6, r4
 80075a6:	d109      	bne.n	80075bc <__libc_init_array+0x24>
 80075a8:	4d0b      	ldr	r5, [pc, #44]	; (80075d8 <__libc_init_array+0x40>)
 80075aa:	4c0c      	ldr	r4, [pc, #48]	; (80075dc <__libc_init_array+0x44>)
 80075ac:	f000 ffbc 	bl	8008528 <_init>
 80075b0:	1b64      	subs	r4, r4, r5
 80075b2:	10a4      	asrs	r4, r4, #2
 80075b4:	2600      	movs	r6, #0
 80075b6:	42a6      	cmp	r6, r4
 80075b8:	d105      	bne.n	80075c6 <__libc_init_array+0x2e>
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c0:	4798      	blx	r3
 80075c2:	3601      	adds	r6, #1
 80075c4:	e7ee      	b.n	80075a4 <__libc_init_array+0xc>
 80075c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ca:	4798      	blx	r3
 80075cc:	3601      	adds	r6, #1
 80075ce:	e7f2      	b.n	80075b6 <__libc_init_array+0x1e>
 80075d0:	08008608 	.word	0x08008608
 80075d4:	08008608 	.word	0x08008608
 80075d8:	08008608 	.word	0x08008608
 80075dc:	0800860c 	.word	0x0800860c

080075e0 <memcpy>:
 80075e0:	440a      	add	r2, r1
 80075e2:	4291      	cmp	r1, r2
 80075e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e8:	d100      	bne.n	80075ec <memcpy+0xc>
 80075ea:	4770      	bx	lr
 80075ec:	b510      	push	{r4, lr}
 80075ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f6:	4291      	cmp	r1, r2
 80075f8:	d1f9      	bne.n	80075ee <memcpy+0xe>
 80075fa:	bd10      	pop	{r4, pc}

080075fc <memset>:
 80075fc:	4402      	add	r2, r0
 80075fe:	4603      	mov	r3, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>

0800760c <_free_r>:
 800760c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800760e:	2900      	cmp	r1, #0
 8007610:	d044      	beq.n	800769c <_free_r+0x90>
 8007612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007616:	9001      	str	r0, [sp, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f1a1 0404 	sub.w	r4, r1, #4
 800761e:	bfb8      	it	lt
 8007620:	18e4      	addlt	r4, r4, r3
 8007622:	f000 f9f3 	bl	8007a0c <__malloc_lock>
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <_free_r+0x94>)
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	b933      	cbnz	r3, 800763c <_free_r+0x30>
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	6014      	str	r4, [r2, #0]
 8007632:	b003      	add	sp, #12
 8007634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007638:	f000 b9ee 	b.w	8007a18 <__malloc_unlock>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d908      	bls.n	8007652 <_free_r+0x46>
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	1961      	adds	r1, r4, r5
 8007644:	428b      	cmp	r3, r1
 8007646:	bf01      	itttt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	e7ed      	b.n	800762e <_free_r+0x22>
 8007652:	461a      	mov	r2, r3
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b10b      	cbz	r3, 800765c <_free_r+0x50>
 8007658:	42a3      	cmp	r3, r4
 800765a:	d9fa      	bls.n	8007652 <_free_r+0x46>
 800765c:	6811      	ldr	r1, [r2, #0]
 800765e:	1855      	adds	r5, r2, r1
 8007660:	42a5      	cmp	r5, r4
 8007662:	d10b      	bne.n	800767c <_free_r+0x70>
 8007664:	6824      	ldr	r4, [r4, #0]
 8007666:	4421      	add	r1, r4
 8007668:	1854      	adds	r4, r2, r1
 800766a:	42a3      	cmp	r3, r4
 800766c:	6011      	str	r1, [r2, #0]
 800766e:	d1e0      	bne.n	8007632 <_free_r+0x26>
 8007670:	681c      	ldr	r4, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	4421      	add	r1, r4
 8007678:	6011      	str	r1, [r2, #0]
 800767a:	e7da      	b.n	8007632 <_free_r+0x26>
 800767c:	d902      	bls.n	8007684 <_free_r+0x78>
 800767e:	230c      	movs	r3, #12
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	e7d6      	b.n	8007632 <_free_r+0x26>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf04      	itt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	bf04      	itt	eq
 8007694:	1949      	addeq	r1, r1, r5
 8007696:	6021      	streq	r1, [r4, #0]
 8007698:	6054      	str	r4, [r2, #4]
 800769a:	e7ca      	b.n	8007632 <_free_r+0x26>
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	2000067c 	.word	0x2000067c

080076a4 <sbrk_aligned>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4e0e      	ldr	r6, [pc, #56]	; (80076e0 <sbrk_aligned+0x3c>)
 80076a8:	460c      	mov	r4, r1
 80076aa:	6831      	ldr	r1, [r6, #0]
 80076ac:	4605      	mov	r5, r0
 80076ae:	b911      	cbnz	r1, 80076b6 <sbrk_aligned+0x12>
 80076b0:	f000 f8a4 	bl	80077fc <_sbrk_r>
 80076b4:	6030      	str	r0, [r6, #0]
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 f89f 	bl	80077fc <_sbrk_r>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d00a      	beq.n	80076d8 <sbrk_aligned+0x34>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d007      	beq.n	80076dc <sbrk_aligned+0x38>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 f894 	bl	80077fc <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d101      	bne.n	80076dc <sbrk_aligned+0x38>
 80076d8:	f04f 34ff 	mov.w	r4, #4294967295
 80076dc:	4620      	mov	r0, r4
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	20000680 	.word	0x20000680

080076e4 <_malloc_r>:
 80076e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e8:	1ccd      	adds	r5, r1, #3
 80076ea:	f025 0503 	bic.w	r5, r5, #3
 80076ee:	3508      	adds	r5, #8
 80076f0:	2d0c      	cmp	r5, #12
 80076f2:	bf38      	it	cc
 80076f4:	250c      	movcc	r5, #12
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	4607      	mov	r7, r0
 80076fa:	db01      	blt.n	8007700 <_malloc_r+0x1c>
 80076fc:	42a9      	cmp	r1, r5
 80076fe:	d905      	bls.n	800770c <_malloc_r+0x28>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	2600      	movs	r6, #0
 8007706:	4630      	mov	r0, r6
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	4e2e      	ldr	r6, [pc, #184]	; (80077c8 <_malloc_r+0xe4>)
 800770e:	f000 f97d 	bl	8007a0c <__malloc_lock>
 8007712:	6833      	ldr	r3, [r6, #0]
 8007714:	461c      	mov	r4, r3
 8007716:	bb34      	cbnz	r4, 8007766 <_malloc_r+0x82>
 8007718:	4629      	mov	r1, r5
 800771a:	4638      	mov	r0, r7
 800771c:	f7ff ffc2 	bl	80076a4 <sbrk_aligned>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	4604      	mov	r4, r0
 8007724:	d14d      	bne.n	80077c2 <_malloc_r+0xde>
 8007726:	6834      	ldr	r4, [r6, #0]
 8007728:	4626      	mov	r6, r4
 800772a:	2e00      	cmp	r6, #0
 800772c:	d140      	bne.n	80077b0 <_malloc_r+0xcc>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	4631      	mov	r1, r6
 8007732:	4638      	mov	r0, r7
 8007734:	eb04 0803 	add.w	r8, r4, r3
 8007738:	f000 f860 	bl	80077fc <_sbrk_r>
 800773c:	4580      	cmp	r8, r0
 800773e:	d13a      	bne.n	80077b6 <_malloc_r+0xd2>
 8007740:	6821      	ldr	r1, [r4, #0]
 8007742:	3503      	adds	r5, #3
 8007744:	1a6d      	subs	r5, r5, r1
 8007746:	f025 0503 	bic.w	r5, r5, #3
 800774a:	3508      	adds	r5, #8
 800774c:	2d0c      	cmp	r5, #12
 800774e:	bf38      	it	cc
 8007750:	250c      	movcc	r5, #12
 8007752:	4629      	mov	r1, r5
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff ffa5 	bl	80076a4 <sbrk_aligned>
 800775a:	3001      	adds	r0, #1
 800775c:	d02b      	beq.n	80077b6 <_malloc_r+0xd2>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	442b      	add	r3, r5
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	e00e      	b.n	8007784 <_malloc_r+0xa0>
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	1b52      	subs	r2, r2, r5
 800776a:	d41e      	bmi.n	80077aa <_malloc_r+0xc6>
 800776c:	2a0b      	cmp	r2, #11
 800776e:	d916      	bls.n	800779e <_malloc_r+0xba>
 8007770:	1961      	adds	r1, r4, r5
 8007772:	42a3      	cmp	r3, r4
 8007774:	6025      	str	r5, [r4, #0]
 8007776:	bf18      	it	ne
 8007778:	6059      	strne	r1, [r3, #4]
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	bf08      	it	eq
 800777e:	6031      	streq	r1, [r6, #0]
 8007780:	5162      	str	r2, [r4, r5]
 8007782:	604b      	str	r3, [r1, #4]
 8007784:	4638      	mov	r0, r7
 8007786:	f104 060b 	add.w	r6, r4, #11
 800778a:	f000 f945 	bl	8007a18 <__malloc_unlock>
 800778e:	f026 0607 	bic.w	r6, r6, #7
 8007792:	1d23      	adds	r3, r4, #4
 8007794:	1af2      	subs	r2, r6, r3
 8007796:	d0b6      	beq.n	8007706 <_malloc_r+0x22>
 8007798:	1b9b      	subs	r3, r3, r6
 800779a:	50a3      	str	r3, [r4, r2]
 800779c:	e7b3      	b.n	8007706 <_malloc_r+0x22>
 800779e:	6862      	ldr	r2, [r4, #4]
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	bf0c      	ite	eq
 80077a4:	6032      	streq	r2, [r6, #0]
 80077a6:	605a      	strne	r2, [r3, #4]
 80077a8:	e7ec      	b.n	8007784 <_malloc_r+0xa0>
 80077aa:	4623      	mov	r3, r4
 80077ac:	6864      	ldr	r4, [r4, #4]
 80077ae:	e7b2      	b.n	8007716 <_malloc_r+0x32>
 80077b0:	4634      	mov	r4, r6
 80077b2:	6876      	ldr	r6, [r6, #4]
 80077b4:	e7b9      	b.n	800772a <_malloc_r+0x46>
 80077b6:	230c      	movs	r3, #12
 80077b8:	603b      	str	r3, [r7, #0]
 80077ba:	4638      	mov	r0, r7
 80077bc:	f000 f92c 	bl	8007a18 <__malloc_unlock>
 80077c0:	e7a1      	b.n	8007706 <_malloc_r+0x22>
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	e7de      	b.n	8007784 <_malloc_r+0xa0>
 80077c6:	bf00      	nop
 80077c8:	2000067c 	.word	0x2000067c

080077cc <iprintf>:
 80077cc:	b40f      	push	{r0, r1, r2, r3}
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <iprintf+0x2c>)
 80077d0:	b513      	push	{r0, r1, r4, lr}
 80077d2:	681c      	ldr	r4, [r3, #0]
 80077d4:	b124      	cbz	r4, 80077e0 <iprintf+0x14>
 80077d6:	69a3      	ldr	r3, [r4, #24]
 80077d8:	b913      	cbnz	r3, 80077e0 <iprintf+0x14>
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 f876 	bl	80078cc <__sinit>
 80077e0:	ab05      	add	r3, sp, #20
 80077e2:	9a04      	ldr	r2, [sp, #16]
 80077e4:	68a1      	ldr	r1, [r4, #8]
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 f945 	bl	8007a78 <_vfiprintf_r>
 80077ee:	b002      	add	sp, #8
 80077f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f4:	b004      	add	sp, #16
 80077f6:	4770      	bx	lr
 80077f8:	20000010 	.word	0x20000010

080077fc <_sbrk_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d06      	ldr	r5, [pc, #24]	; (8007818 <_sbrk_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7f9 fe06 	bl	8001418 <_sbrk>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_sbrk_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_sbrk_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20000688 	.word	0x20000688

0800781c <std>:
 800781c:	2300      	movs	r3, #0
 800781e:	b510      	push	{r4, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	e9c0 3300 	strd	r3, r3, [r0]
 8007826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800782a:	6083      	str	r3, [r0, #8]
 800782c:	8181      	strh	r1, [r0, #12]
 800782e:	6643      	str	r3, [r0, #100]	; 0x64
 8007830:	81c2      	strh	r2, [r0, #14]
 8007832:	6183      	str	r3, [r0, #24]
 8007834:	4619      	mov	r1, r3
 8007836:	2208      	movs	r2, #8
 8007838:	305c      	adds	r0, #92	; 0x5c
 800783a:	f7ff fedf 	bl	80075fc <memset>
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <std+0x38>)
 8007840:	6263      	str	r3, [r4, #36]	; 0x24
 8007842:	4b05      	ldr	r3, [pc, #20]	; (8007858 <std+0x3c>)
 8007844:	62a3      	str	r3, [r4, #40]	; 0x28
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <std+0x40>)
 8007848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <std+0x44>)
 800784c:	6224      	str	r4, [r4, #32]
 800784e:	6323      	str	r3, [r4, #48]	; 0x30
 8007850:	bd10      	pop	{r4, pc}
 8007852:	bf00      	nop
 8007854:	08008001 	.word	0x08008001
 8007858:	08008023 	.word	0x08008023
 800785c:	0800805b 	.word	0x0800805b
 8007860:	0800807f 	.word	0x0800807f

08007864 <_cleanup_r>:
 8007864:	4901      	ldr	r1, [pc, #4]	; (800786c <_cleanup_r+0x8>)
 8007866:	f000 b8af 	b.w	80079c8 <_fwalk_reent>
 800786a:	bf00      	nop
 800786c:	08008359 	.word	0x08008359

08007870 <__sfmoreglue>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	2268      	movs	r2, #104	; 0x68
 8007874:	1e4d      	subs	r5, r1, #1
 8007876:	4355      	muls	r5, r2
 8007878:	460e      	mov	r6, r1
 800787a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800787e:	f7ff ff31 	bl	80076e4 <_malloc_r>
 8007882:	4604      	mov	r4, r0
 8007884:	b140      	cbz	r0, 8007898 <__sfmoreglue+0x28>
 8007886:	2100      	movs	r1, #0
 8007888:	e9c0 1600 	strd	r1, r6, [r0]
 800788c:	300c      	adds	r0, #12
 800788e:	60a0      	str	r0, [r4, #8]
 8007890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007894:	f7ff feb2 	bl	80075fc <memset>
 8007898:	4620      	mov	r0, r4
 800789a:	bd70      	pop	{r4, r5, r6, pc}

0800789c <__sfp_lock_acquire>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__sfp_lock_acquire+0x8>)
 800789e:	f000 b8b3 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80078a2:	bf00      	nop
 80078a4:	20000685 	.word	0x20000685

080078a8 <__sfp_lock_release>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_release+0x8>)
 80078aa:	f000 b8ae 	b.w	8007a0a <__retarget_lock_release_recursive>
 80078ae:	bf00      	nop
 80078b0:	20000685 	.word	0x20000685

080078b4 <__sinit_lock_acquire>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sinit_lock_acquire+0x8>)
 80078b6:	f000 b8a7 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80078ba:	bf00      	nop
 80078bc:	20000686 	.word	0x20000686

080078c0 <__sinit_lock_release>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sinit_lock_release+0x8>)
 80078c2:	f000 b8a2 	b.w	8007a0a <__retarget_lock_release_recursive>
 80078c6:	bf00      	nop
 80078c8:	20000686 	.word	0x20000686

080078cc <__sinit>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4604      	mov	r4, r0
 80078d0:	f7ff fff0 	bl	80078b4 <__sinit_lock_acquire>
 80078d4:	69a3      	ldr	r3, [r4, #24]
 80078d6:	b11b      	cbz	r3, 80078e0 <__sinit+0x14>
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f7ff bff0 	b.w	80078c0 <__sinit_lock_release>
 80078e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078e4:	6523      	str	r3, [r4, #80]	; 0x50
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <__sinit+0x68>)
 80078e8:	4a13      	ldr	r2, [pc, #76]	; (8007938 <__sinit+0x6c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80078ee:	42a3      	cmp	r3, r4
 80078f0:	bf04      	itt	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	61a3      	streq	r3, [r4, #24]
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 f820 	bl	800793c <__sfp>
 80078fc:	6060      	str	r0, [r4, #4]
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 f81c 	bl	800793c <__sfp>
 8007904:	60a0      	str	r0, [r4, #8]
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f818 	bl	800793c <__sfp>
 800790c:	2200      	movs	r2, #0
 800790e:	60e0      	str	r0, [r4, #12]
 8007910:	2104      	movs	r1, #4
 8007912:	6860      	ldr	r0, [r4, #4]
 8007914:	f7ff ff82 	bl	800781c <std>
 8007918:	68a0      	ldr	r0, [r4, #8]
 800791a:	2201      	movs	r2, #1
 800791c:	2109      	movs	r1, #9
 800791e:	f7ff ff7d 	bl	800781c <std>
 8007922:	68e0      	ldr	r0, [r4, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	2112      	movs	r1, #18
 8007928:	f7ff ff78 	bl	800781c <std>
 800792c:	2301      	movs	r3, #1
 800792e:	61a3      	str	r3, [r4, #24]
 8007930:	e7d2      	b.n	80078d8 <__sinit+0xc>
 8007932:	bf00      	nop
 8007934:	08008568 	.word	0x08008568
 8007938:	08007865 	.word	0x08007865

0800793c <__sfp>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	4607      	mov	r7, r0
 8007940:	f7ff ffac 	bl	800789c <__sfp_lock_acquire>
 8007944:	4b1e      	ldr	r3, [pc, #120]	; (80079c0 <__sfp+0x84>)
 8007946:	681e      	ldr	r6, [r3, #0]
 8007948:	69b3      	ldr	r3, [r6, #24]
 800794a:	b913      	cbnz	r3, 8007952 <__sfp+0x16>
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff ffbd 	bl	80078cc <__sinit>
 8007952:	3648      	adds	r6, #72	; 0x48
 8007954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007958:	3b01      	subs	r3, #1
 800795a:	d503      	bpl.n	8007964 <__sfp+0x28>
 800795c:	6833      	ldr	r3, [r6, #0]
 800795e:	b30b      	cbz	r3, 80079a4 <__sfp+0x68>
 8007960:	6836      	ldr	r6, [r6, #0]
 8007962:	e7f7      	b.n	8007954 <__sfp+0x18>
 8007964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007968:	b9d5      	cbnz	r5, 80079a0 <__sfp+0x64>
 800796a:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <__sfp+0x88>)
 800796c:	60e3      	str	r3, [r4, #12]
 800796e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007972:	6665      	str	r5, [r4, #100]	; 0x64
 8007974:	f000 f847 	bl	8007a06 <__retarget_lock_init_recursive>
 8007978:	f7ff ff96 	bl	80078a8 <__sfp_lock_release>
 800797c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007984:	6025      	str	r5, [r4, #0]
 8007986:	61a5      	str	r5, [r4, #24]
 8007988:	2208      	movs	r2, #8
 800798a:	4629      	mov	r1, r5
 800798c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007990:	f7ff fe34 	bl	80075fc <memset>
 8007994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800799c:	4620      	mov	r0, r4
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	3468      	adds	r4, #104	; 0x68
 80079a2:	e7d9      	b.n	8007958 <__sfp+0x1c>
 80079a4:	2104      	movs	r1, #4
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7ff ff62 	bl	8007870 <__sfmoreglue>
 80079ac:	4604      	mov	r4, r0
 80079ae:	6030      	str	r0, [r6, #0]
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1d5      	bne.n	8007960 <__sfp+0x24>
 80079b4:	f7ff ff78 	bl	80078a8 <__sfp_lock_release>
 80079b8:	230c      	movs	r3, #12
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	e7ee      	b.n	800799c <__sfp+0x60>
 80079be:	bf00      	nop
 80079c0:	08008568 	.word	0x08008568
 80079c4:	ffff0001 	.word	0xffff0001

080079c8 <_fwalk_reent>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4606      	mov	r6, r0
 80079ce:	4688      	mov	r8, r1
 80079d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079d4:	2700      	movs	r7, #0
 80079d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079da:	f1b9 0901 	subs.w	r9, r9, #1
 80079de:	d505      	bpl.n	80079ec <_fwalk_reent+0x24>
 80079e0:	6824      	ldr	r4, [r4, #0]
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	d1f7      	bne.n	80079d6 <_fwalk_reent+0xe>
 80079e6:	4638      	mov	r0, r7
 80079e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ec:	89ab      	ldrh	r3, [r5, #12]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d907      	bls.n	8007a02 <_fwalk_reent+0x3a>
 80079f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f6:	3301      	adds	r3, #1
 80079f8:	d003      	beq.n	8007a02 <_fwalk_reent+0x3a>
 80079fa:	4629      	mov	r1, r5
 80079fc:	4630      	mov	r0, r6
 80079fe:	47c0      	blx	r8
 8007a00:	4307      	orrs	r7, r0
 8007a02:	3568      	adds	r5, #104	; 0x68
 8007a04:	e7e9      	b.n	80079da <_fwalk_reent+0x12>

08007a06 <__retarget_lock_init_recursive>:
 8007a06:	4770      	bx	lr

08007a08 <__retarget_lock_acquire_recursive>:
 8007a08:	4770      	bx	lr

08007a0a <__retarget_lock_release_recursive>:
 8007a0a:	4770      	bx	lr

08007a0c <__malloc_lock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__malloc_lock+0x8>)
 8007a0e:	f7ff bffb 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 8007a12:	bf00      	nop
 8007a14:	20000684 	.word	0x20000684

08007a18 <__malloc_unlock>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__malloc_unlock+0x8>)
 8007a1a:	f7ff bff6 	b.w	8007a0a <__retarget_lock_release_recursive>
 8007a1e:	bf00      	nop
 8007a20:	20000684 	.word	0x20000684

08007a24 <__sfputc_r>:
 8007a24:	6893      	ldr	r3, [r2, #8]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	b410      	push	{r4}
 8007a2c:	6093      	str	r3, [r2, #8]
 8007a2e:	da08      	bge.n	8007a42 <__sfputc_r+0x1e>
 8007a30:	6994      	ldr	r4, [r2, #24]
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	db01      	blt.n	8007a3a <__sfputc_r+0x16>
 8007a36:	290a      	cmp	r1, #10
 8007a38:	d103      	bne.n	8007a42 <__sfputc_r+0x1e>
 8007a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3e:	f000 bb23 	b.w	8008088 <__swbuf_r>
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	1c58      	adds	r0, r3, #1
 8007a46:	6010      	str	r0, [r2, #0]
 8007a48:	7019      	strb	r1, [r3, #0]
 8007a4a:	4608      	mov	r0, r1
 8007a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <__sfputs_r>:
 8007a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	4614      	mov	r4, r2
 8007a5a:	18d5      	adds	r5, r2, r3
 8007a5c:	42ac      	cmp	r4, r5
 8007a5e:	d101      	bne.n	8007a64 <__sfputs_r+0x12>
 8007a60:	2000      	movs	r0, #0
 8007a62:	e007      	b.n	8007a74 <__sfputs_r+0x22>
 8007a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a68:	463a      	mov	r2, r7
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7ff ffda 	bl	8007a24 <__sfputc_r>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d1f3      	bne.n	8007a5c <__sfputs_r+0xa>
 8007a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a78 <_vfiprintf_r>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	460d      	mov	r5, r1
 8007a7e:	b09d      	sub	sp, #116	; 0x74
 8007a80:	4614      	mov	r4, r2
 8007a82:	4698      	mov	r8, r3
 8007a84:	4606      	mov	r6, r0
 8007a86:	b118      	cbz	r0, 8007a90 <_vfiprintf_r+0x18>
 8007a88:	6983      	ldr	r3, [r0, #24]
 8007a8a:	b90b      	cbnz	r3, 8007a90 <_vfiprintf_r+0x18>
 8007a8c:	f7ff ff1e 	bl	80078cc <__sinit>
 8007a90:	4b89      	ldr	r3, [pc, #548]	; (8007cb8 <_vfiprintf_r+0x240>)
 8007a92:	429d      	cmp	r5, r3
 8007a94:	d11b      	bne.n	8007ace <_vfiprintf_r+0x56>
 8007a96:	6875      	ldr	r5, [r6, #4]
 8007a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a9a:	07d9      	lsls	r1, r3, #31
 8007a9c:	d405      	bmi.n	8007aaa <_vfiprintf_r+0x32>
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	059a      	lsls	r2, r3, #22
 8007aa2:	d402      	bmi.n	8007aaa <_vfiprintf_r+0x32>
 8007aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa6:	f7ff ffaf 	bl	8007a08 <__retarget_lock_acquire_recursive>
 8007aaa:	89ab      	ldrh	r3, [r5, #12]
 8007aac:	071b      	lsls	r3, r3, #28
 8007aae:	d501      	bpl.n	8007ab4 <_vfiprintf_r+0x3c>
 8007ab0:	692b      	ldr	r3, [r5, #16]
 8007ab2:	b9eb      	cbnz	r3, 8007af0 <_vfiprintf_r+0x78>
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f000 fb4a 	bl	8008150 <__swsetup_r>
 8007abc:	b1c0      	cbz	r0, 8007af0 <_vfiprintf_r+0x78>
 8007abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac0:	07dc      	lsls	r4, r3, #31
 8007ac2:	d50e      	bpl.n	8007ae2 <_vfiprintf_r+0x6a>
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	b01d      	add	sp, #116	; 0x74
 8007aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ace:	4b7b      	ldr	r3, [pc, #492]	; (8007cbc <_vfiprintf_r+0x244>)
 8007ad0:	429d      	cmp	r5, r3
 8007ad2:	d101      	bne.n	8007ad8 <_vfiprintf_r+0x60>
 8007ad4:	68b5      	ldr	r5, [r6, #8]
 8007ad6:	e7df      	b.n	8007a98 <_vfiprintf_r+0x20>
 8007ad8:	4b79      	ldr	r3, [pc, #484]	; (8007cc0 <_vfiprintf_r+0x248>)
 8007ada:	429d      	cmp	r5, r3
 8007adc:	bf08      	it	eq
 8007ade:	68f5      	ldreq	r5, [r6, #12]
 8007ae0:	e7da      	b.n	8007a98 <_vfiprintf_r+0x20>
 8007ae2:	89ab      	ldrh	r3, [r5, #12]
 8007ae4:	0598      	lsls	r0, r3, #22
 8007ae6:	d4ed      	bmi.n	8007ac4 <_vfiprintf_r+0x4c>
 8007ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aea:	f7ff ff8e 	bl	8007a0a <__retarget_lock_release_recursive>
 8007aee:	e7e9      	b.n	8007ac4 <_vfiprintf_r+0x4c>
 8007af0:	2300      	movs	r3, #0
 8007af2:	9309      	str	r3, [sp, #36]	; 0x24
 8007af4:	2320      	movs	r3, #32
 8007af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afe:	2330      	movs	r3, #48	; 0x30
 8007b00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cc4 <_vfiprintf_r+0x24c>
 8007b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b08:	f04f 0901 	mov.w	r9, #1
 8007b0c:	4623      	mov	r3, r4
 8007b0e:	469a      	mov	sl, r3
 8007b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b14:	b10a      	cbz	r2, 8007b1a <_vfiprintf_r+0xa2>
 8007b16:	2a25      	cmp	r2, #37	; 0x25
 8007b18:	d1f9      	bne.n	8007b0e <_vfiprintf_r+0x96>
 8007b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b1e:	d00b      	beq.n	8007b38 <_vfiprintf_r+0xc0>
 8007b20:	465b      	mov	r3, fp
 8007b22:	4622      	mov	r2, r4
 8007b24:	4629      	mov	r1, r5
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff93 	bl	8007a52 <__sfputs_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	f000 80aa 	beq.w	8007c86 <_vfiprintf_r+0x20e>
 8007b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b34:	445a      	add	r2, fp
 8007b36:	9209      	str	r2, [sp, #36]	; 0x24
 8007b38:	f89a 3000 	ldrb.w	r3, [sl]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80a2 	beq.w	8007c86 <_vfiprintf_r+0x20e>
 8007b42:	2300      	movs	r3, #0
 8007b44:	f04f 32ff 	mov.w	r2, #4294967295
 8007b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b4c:	f10a 0a01 	add.w	sl, sl, #1
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	9307      	str	r3, [sp, #28]
 8007b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b58:	931a      	str	r3, [sp, #104]	; 0x68
 8007b5a:	4654      	mov	r4, sl
 8007b5c:	2205      	movs	r2, #5
 8007b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b62:	4858      	ldr	r0, [pc, #352]	; (8007cc4 <_vfiprintf_r+0x24c>)
 8007b64:	f7f8 fb44 	bl	80001f0 <memchr>
 8007b68:	9a04      	ldr	r2, [sp, #16]
 8007b6a:	b9d8      	cbnz	r0, 8007ba4 <_vfiprintf_r+0x12c>
 8007b6c:	06d1      	lsls	r1, r2, #27
 8007b6e:	bf44      	itt	mi
 8007b70:	2320      	movmi	r3, #32
 8007b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b76:	0713      	lsls	r3, r2, #28
 8007b78:	bf44      	itt	mi
 8007b7a:	232b      	movmi	r3, #43	; 0x2b
 8007b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b80:	f89a 3000 	ldrb.w	r3, [sl]
 8007b84:	2b2a      	cmp	r3, #42	; 0x2a
 8007b86:	d015      	beq.n	8007bb4 <_vfiprintf_r+0x13c>
 8007b88:	9a07      	ldr	r2, [sp, #28]
 8007b8a:	4654      	mov	r4, sl
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	f04f 0c0a 	mov.w	ip, #10
 8007b92:	4621      	mov	r1, r4
 8007b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b98:	3b30      	subs	r3, #48	; 0x30
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	d94e      	bls.n	8007c3c <_vfiprintf_r+0x1c4>
 8007b9e:	b1b0      	cbz	r0, 8007bce <_vfiprintf_r+0x156>
 8007ba0:	9207      	str	r2, [sp, #28]
 8007ba2:	e014      	b.n	8007bce <_vfiprintf_r+0x156>
 8007ba4:	eba0 0308 	sub.w	r3, r0, r8
 8007ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8007bac:	4313      	orrs	r3, r2
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	46a2      	mov	sl, r4
 8007bb2:	e7d2      	b.n	8007b5a <_vfiprintf_r+0xe2>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	1d19      	adds	r1, r3, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	9103      	str	r1, [sp, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bfbb      	ittet	lt
 8007bc0:	425b      	neglt	r3, r3
 8007bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc6:	9307      	strge	r3, [sp, #28]
 8007bc8:	9307      	strlt	r3, [sp, #28]
 8007bca:	bfb8      	it	lt
 8007bcc:	9204      	strlt	r2, [sp, #16]
 8007bce:	7823      	ldrb	r3, [r4, #0]
 8007bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8007bd2:	d10c      	bne.n	8007bee <_vfiprintf_r+0x176>
 8007bd4:	7863      	ldrb	r3, [r4, #1]
 8007bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd8:	d135      	bne.n	8007c46 <_vfiprintf_r+0x1ce>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	1d1a      	adds	r2, r3, #4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	9203      	str	r2, [sp, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfb8      	it	lt
 8007be6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bea:	3402      	adds	r4, #2
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cd4 <_vfiprintf_r+0x25c>
 8007bf2:	7821      	ldrb	r1, [r4, #0]
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	4650      	mov	r0, sl
 8007bf8:	f7f8 fafa 	bl	80001f0 <memchr>
 8007bfc:	b140      	cbz	r0, 8007c10 <_vfiprintf_r+0x198>
 8007bfe:	2340      	movs	r3, #64	; 0x40
 8007c00:	eba0 000a 	sub.w	r0, r0, sl
 8007c04:	fa03 f000 	lsl.w	r0, r3, r0
 8007c08:	9b04      	ldr	r3, [sp, #16]
 8007c0a:	4303      	orrs	r3, r0
 8007c0c:	3401      	adds	r4, #1
 8007c0e:	9304      	str	r3, [sp, #16]
 8007c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c14:	482c      	ldr	r0, [pc, #176]	; (8007cc8 <_vfiprintf_r+0x250>)
 8007c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c1a:	2206      	movs	r2, #6
 8007c1c:	f7f8 fae8 	bl	80001f0 <memchr>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d03f      	beq.n	8007ca4 <_vfiprintf_r+0x22c>
 8007c24:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <_vfiprintf_r+0x254>)
 8007c26:	bb1b      	cbnz	r3, 8007c70 <_vfiprintf_r+0x1f8>
 8007c28:	9b03      	ldr	r3, [sp, #12]
 8007c2a:	3307      	adds	r3, #7
 8007c2c:	f023 0307 	bic.w	r3, r3, #7
 8007c30:	3308      	adds	r3, #8
 8007c32:	9303      	str	r3, [sp, #12]
 8007c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c36:	443b      	add	r3, r7
 8007c38:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3a:	e767      	b.n	8007b0c <_vfiprintf_r+0x94>
 8007c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c40:	460c      	mov	r4, r1
 8007c42:	2001      	movs	r0, #1
 8007c44:	e7a5      	b.n	8007b92 <_vfiprintf_r+0x11a>
 8007c46:	2300      	movs	r3, #0
 8007c48:	3401      	adds	r4, #1
 8007c4a:	9305      	str	r3, [sp, #20]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	f04f 0c0a 	mov.w	ip, #10
 8007c52:	4620      	mov	r0, r4
 8007c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c58:	3a30      	subs	r2, #48	; 0x30
 8007c5a:	2a09      	cmp	r2, #9
 8007c5c:	d903      	bls.n	8007c66 <_vfiprintf_r+0x1ee>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0c5      	beq.n	8007bee <_vfiprintf_r+0x176>
 8007c62:	9105      	str	r1, [sp, #20]
 8007c64:	e7c3      	b.n	8007bee <_vfiprintf_r+0x176>
 8007c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e7f0      	b.n	8007c52 <_vfiprintf_r+0x1da>
 8007c70:	ab03      	add	r3, sp, #12
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	462a      	mov	r2, r5
 8007c76:	4b16      	ldr	r3, [pc, #88]	; (8007cd0 <_vfiprintf_r+0x258>)
 8007c78:	a904      	add	r1, sp, #16
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f3af 8000 	nop.w
 8007c80:	4607      	mov	r7, r0
 8007c82:	1c78      	adds	r0, r7, #1
 8007c84:	d1d6      	bne.n	8007c34 <_vfiprintf_r+0x1bc>
 8007c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c88:	07d9      	lsls	r1, r3, #31
 8007c8a:	d405      	bmi.n	8007c98 <_vfiprintf_r+0x220>
 8007c8c:	89ab      	ldrh	r3, [r5, #12]
 8007c8e:	059a      	lsls	r2, r3, #22
 8007c90:	d402      	bmi.n	8007c98 <_vfiprintf_r+0x220>
 8007c92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c94:	f7ff feb9 	bl	8007a0a <__retarget_lock_release_recursive>
 8007c98:	89ab      	ldrh	r3, [r5, #12]
 8007c9a:	065b      	lsls	r3, r3, #25
 8007c9c:	f53f af12 	bmi.w	8007ac4 <_vfiprintf_r+0x4c>
 8007ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca2:	e711      	b.n	8007ac8 <_vfiprintf_r+0x50>
 8007ca4:	ab03      	add	r3, sp, #12
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	462a      	mov	r2, r5
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <_vfiprintf_r+0x258>)
 8007cac:	a904      	add	r1, sp, #16
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f000 f880 	bl	8007db4 <_printf_i>
 8007cb4:	e7e4      	b.n	8007c80 <_vfiprintf_r+0x208>
 8007cb6:	bf00      	nop
 8007cb8:	0800858c 	.word	0x0800858c
 8007cbc:	080085ac 	.word	0x080085ac
 8007cc0:	0800856c 	.word	0x0800856c
 8007cc4:	080085cc 	.word	0x080085cc
 8007cc8:	080085d6 	.word	0x080085d6
 8007ccc:	00000000 	.word	0x00000000
 8007cd0:	08007a53 	.word	0x08007a53
 8007cd4:	080085d2 	.word	0x080085d2

08007cd8 <_printf_common>:
 8007cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	4616      	mov	r6, r2
 8007cde:	4699      	mov	r9, r3
 8007ce0:	688a      	ldr	r2, [r1, #8]
 8007ce2:	690b      	ldr	r3, [r1, #16]
 8007ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bfb8      	it	lt
 8007cec:	4613      	movlt	r3, r2
 8007cee:	6033      	str	r3, [r6, #0]
 8007cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	b10a      	cbz	r2, 8007cfe <_printf_common+0x26>
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	0699      	lsls	r1, r3, #26
 8007d02:	bf42      	ittt	mi
 8007d04:	6833      	ldrmi	r3, [r6, #0]
 8007d06:	3302      	addmi	r3, #2
 8007d08:	6033      	strmi	r3, [r6, #0]
 8007d0a:	6825      	ldr	r5, [r4, #0]
 8007d0c:	f015 0506 	ands.w	r5, r5, #6
 8007d10:	d106      	bne.n	8007d20 <_printf_common+0x48>
 8007d12:	f104 0a19 	add.w	sl, r4, #25
 8007d16:	68e3      	ldr	r3, [r4, #12]
 8007d18:	6832      	ldr	r2, [r6, #0]
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	42ab      	cmp	r3, r5
 8007d1e:	dc26      	bgt.n	8007d6e <_printf_common+0x96>
 8007d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d24:	1e13      	subs	r3, r2, #0
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	bf18      	it	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	0692      	lsls	r2, r2, #26
 8007d2e:	d42b      	bmi.n	8007d88 <_printf_common+0xb0>
 8007d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d34:	4649      	mov	r1, r9
 8007d36:	4638      	mov	r0, r7
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d01e      	beq.n	8007d7c <_printf_common+0xa4>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	68e5      	ldr	r5, [r4, #12]
 8007d42:	6832      	ldr	r2, [r6, #0]
 8007d44:	f003 0306 	and.w	r3, r3, #6
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	bf08      	it	eq
 8007d4c:	1aad      	subeq	r5, r5, r2
 8007d4e:	68a3      	ldr	r3, [r4, #8]
 8007d50:	6922      	ldr	r2, [r4, #16]
 8007d52:	bf0c      	ite	eq
 8007d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d58:	2500      	movne	r5, #0
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bfc4      	itt	gt
 8007d5e:	1a9b      	subgt	r3, r3, r2
 8007d60:	18ed      	addgt	r5, r5, r3
 8007d62:	2600      	movs	r6, #0
 8007d64:	341a      	adds	r4, #26
 8007d66:	42b5      	cmp	r5, r6
 8007d68:	d11a      	bne.n	8007da0 <_printf_common+0xc8>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e008      	b.n	8007d80 <_printf_common+0xa8>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4652      	mov	r2, sl
 8007d72:	4649      	mov	r1, r9
 8007d74:	4638      	mov	r0, r7
 8007d76:	47c0      	blx	r8
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d103      	bne.n	8007d84 <_printf_common+0xac>
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d84:	3501      	adds	r5, #1
 8007d86:	e7c6      	b.n	8007d16 <_printf_common+0x3e>
 8007d88:	18e1      	adds	r1, r4, r3
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	2030      	movs	r0, #48	; 0x30
 8007d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d92:	4422      	add	r2, r4
 8007d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	e7c7      	b.n	8007d30 <_printf_common+0x58>
 8007da0:	2301      	movs	r3, #1
 8007da2:	4622      	mov	r2, r4
 8007da4:	4649      	mov	r1, r9
 8007da6:	4638      	mov	r0, r7
 8007da8:	47c0      	blx	r8
 8007daa:	3001      	adds	r0, #1
 8007dac:	d0e6      	beq.n	8007d7c <_printf_common+0xa4>
 8007dae:	3601      	adds	r6, #1
 8007db0:	e7d9      	b.n	8007d66 <_printf_common+0x8e>
	...

08007db4 <_printf_i>:
 8007db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db8:	7e0f      	ldrb	r7, [r1, #24]
 8007dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dbc:	2f78      	cmp	r7, #120	; 0x78
 8007dbe:	4691      	mov	r9, r2
 8007dc0:	4680      	mov	r8, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	469a      	mov	sl, r3
 8007dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dca:	d807      	bhi.n	8007ddc <_printf_i+0x28>
 8007dcc:	2f62      	cmp	r7, #98	; 0x62
 8007dce:	d80a      	bhi.n	8007de6 <_printf_i+0x32>
 8007dd0:	2f00      	cmp	r7, #0
 8007dd2:	f000 80d8 	beq.w	8007f86 <_printf_i+0x1d2>
 8007dd6:	2f58      	cmp	r7, #88	; 0x58
 8007dd8:	f000 80a3 	beq.w	8007f22 <_printf_i+0x16e>
 8007ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de4:	e03a      	b.n	8007e5c <_printf_i+0xa8>
 8007de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dea:	2b15      	cmp	r3, #21
 8007dec:	d8f6      	bhi.n	8007ddc <_printf_i+0x28>
 8007dee:	a101      	add	r1, pc, #4	; (adr r1, 8007df4 <_printf_i+0x40>)
 8007df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df4:	08007e4d 	.word	0x08007e4d
 8007df8:	08007e61 	.word	0x08007e61
 8007dfc:	08007ddd 	.word	0x08007ddd
 8007e00:	08007ddd 	.word	0x08007ddd
 8007e04:	08007ddd 	.word	0x08007ddd
 8007e08:	08007ddd 	.word	0x08007ddd
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007ddd 	.word	0x08007ddd
 8007e14:	08007ddd 	.word	0x08007ddd
 8007e18:	08007ddd 	.word	0x08007ddd
 8007e1c:	08007ddd 	.word	0x08007ddd
 8007e20:	08007f6d 	.word	0x08007f6d
 8007e24:	08007e91 	.word	0x08007e91
 8007e28:	08007f4f 	.word	0x08007f4f
 8007e2c:	08007ddd 	.word	0x08007ddd
 8007e30:	08007ddd 	.word	0x08007ddd
 8007e34:	08007f8f 	.word	0x08007f8f
 8007e38:	08007ddd 	.word	0x08007ddd
 8007e3c:	08007e91 	.word	0x08007e91
 8007e40:	08007ddd 	.word	0x08007ddd
 8007e44:	08007ddd 	.word	0x08007ddd
 8007e48:	08007f57 	.word	0x08007f57
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	1d1a      	adds	r2, r3, #4
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	602a      	str	r2, [r5, #0]
 8007e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0a3      	b.n	8007fa8 <_printf_i+0x1f4>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	6829      	ldr	r1, [r5, #0]
 8007e64:	0606      	lsls	r6, r0, #24
 8007e66:	f101 0304 	add.w	r3, r1, #4
 8007e6a:	d50a      	bpl.n	8007e82 <_printf_i+0xce>
 8007e6c:	680e      	ldr	r6, [r1, #0]
 8007e6e:	602b      	str	r3, [r5, #0]
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	da03      	bge.n	8007e7c <_printf_i+0xc8>
 8007e74:	232d      	movs	r3, #45	; 0x2d
 8007e76:	4276      	negs	r6, r6
 8007e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e7c:	485e      	ldr	r0, [pc, #376]	; (8007ff8 <_printf_i+0x244>)
 8007e7e:	230a      	movs	r3, #10
 8007e80:	e019      	b.n	8007eb6 <_printf_i+0x102>
 8007e82:	680e      	ldr	r6, [r1, #0]
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e8a:	bf18      	it	ne
 8007e8c:	b236      	sxthne	r6, r6
 8007e8e:	e7ef      	b.n	8007e70 <_printf_i+0xbc>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	6820      	ldr	r0, [r4, #0]
 8007e94:	1d19      	adds	r1, r3, #4
 8007e96:	6029      	str	r1, [r5, #0]
 8007e98:	0601      	lsls	r1, r0, #24
 8007e9a:	d501      	bpl.n	8007ea0 <_printf_i+0xec>
 8007e9c:	681e      	ldr	r6, [r3, #0]
 8007e9e:	e002      	b.n	8007ea6 <_printf_i+0xf2>
 8007ea0:	0646      	lsls	r6, r0, #25
 8007ea2:	d5fb      	bpl.n	8007e9c <_printf_i+0xe8>
 8007ea4:	881e      	ldrh	r6, [r3, #0]
 8007ea6:	4854      	ldr	r0, [pc, #336]	; (8007ff8 <_printf_i+0x244>)
 8007ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eaa:	bf0c      	ite	eq
 8007eac:	2308      	moveq	r3, #8
 8007eae:	230a      	movne	r3, #10
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb6:	6865      	ldr	r5, [r4, #4]
 8007eb8:	60a5      	str	r5, [r4, #8]
 8007eba:	2d00      	cmp	r5, #0
 8007ebc:	bfa2      	ittt	ge
 8007ebe:	6821      	ldrge	r1, [r4, #0]
 8007ec0:	f021 0104 	bicge.w	r1, r1, #4
 8007ec4:	6021      	strge	r1, [r4, #0]
 8007ec6:	b90e      	cbnz	r6, 8007ecc <_printf_i+0x118>
 8007ec8:	2d00      	cmp	r5, #0
 8007eca:	d04d      	beq.n	8007f68 <_printf_i+0x1b4>
 8007ecc:	4615      	mov	r5, r2
 8007ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed6:	5dc7      	ldrb	r7, [r0, r7]
 8007ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007edc:	4637      	mov	r7, r6
 8007ede:	42bb      	cmp	r3, r7
 8007ee0:	460e      	mov	r6, r1
 8007ee2:	d9f4      	bls.n	8007ece <_printf_i+0x11a>
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d10b      	bne.n	8007f00 <_printf_i+0x14c>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	07de      	lsls	r6, r3, #31
 8007eec:	d508      	bpl.n	8007f00 <_printf_i+0x14c>
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	6861      	ldr	r1, [r4, #4]
 8007ef2:	4299      	cmp	r1, r3
 8007ef4:	bfde      	ittt	le
 8007ef6:	2330      	movle	r3, #48	; 0x30
 8007ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f00:	1b52      	subs	r2, r2, r5
 8007f02:	6122      	str	r2, [r4, #16]
 8007f04:	f8cd a000 	str.w	sl, [sp]
 8007f08:	464b      	mov	r3, r9
 8007f0a:	aa03      	add	r2, sp, #12
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4640      	mov	r0, r8
 8007f10:	f7ff fee2 	bl	8007cd8 <_printf_common>
 8007f14:	3001      	adds	r0, #1
 8007f16:	d14c      	bne.n	8007fb2 <_printf_i+0x1fe>
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	b004      	add	sp, #16
 8007f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f22:	4835      	ldr	r0, [pc, #212]	; (8007ff8 <_printf_i+0x244>)
 8007f24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f28:	6829      	ldr	r1, [r5, #0]
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f30:	6029      	str	r1, [r5, #0]
 8007f32:	061d      	lsls	r5, r3, #24
 8007f34:	d514      	bpl.n	8007f60 <_printf_i+0x1ac>
 8007f36:	07df      	lsls	r7, r3, #31
 8007f38:	bf44      	itt	mi
 8007f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3e:	6023      	strmi	r3, [r4, #0]
 8007f40:	b91e      	cbnz	r6, 8007f4a <_printf_i+0x196>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f023 0320 	bic.w	r3, r3, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	2310      	movs	r3, #16
 8007f4c:	e7b0      	b.n	8007eb0 <_printf_i+0xfc>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	f043 0320 	orr.w	r3, r3, #32
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	2378      	movs	r3, #120	; 0x78
 8007f58:	4828      	ldr	r0, [pc, #160]	; (8007ffc <_printf_i+0x248>)
 8007f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5e:	e7e3      	b.n	8007f28 <_printf_i+0x174>
 8007f60:	0659      	lsls	r1, r3, #25
 8007f62:	bf48      	it	mi
 8007f64:	b2b6      	uxthmi	r6, r6
 8007f66:	e7e6      	b.n	8007f36 <_printf_i+0x182>
 8007f68:	4615      	mov	r5, r2
 8007f6a:	e7bb      	b.n	8007ee4 <_printf_i+0x130>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	6826      	ldr	r6, [r4, #0]
 8007f70:	6961      	ldr	r1, [r4, #20]
 8007f72:	1d18      	adds	r0, r3, #4
 8007f74:	6028      	str	r0, [r5, #0]
 8007f76:	0635      	lsls	r5, r6, #24
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	d501      	bpl.n	8007f80 <_printf_i+0x1cc>
 8007f7c:	6019      	str	r1, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <_printf_i+0x1d2>
 8007f80:	0670      	lsls	r0, r6, #25
 8007f82:	d5fb      	bpl.n	8007f7c <_printf_i+0x1c8>
 8007f84:	8019      	strh	r1, [r3, #0]
 8007f86:	2300      	movs	r3, #0
 8007f88:	6123      	str	r3, [r4, #16]
 8007f8a:	4615      	mov	r5, r2
 8007f8c:	e7ba      	b.n	8007f04 <_printf_i+0x150>
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	1d1a      	adds	r2, r3, #4
 8007f92:	602a      	str	r2, [r5, #0]
 8007f94:	681d      	ldr	r5, [r3, #0]
 8007f96:	6862      	ldr	r2, [r4, #4]
 8007f98:	2100      	movs	r1, #0
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7f8 f928 	bl	80001f0 <memchr>
 8007fa0:	b108      	cbz	r0, 8007fa6 <_printf_i+0x1f2>
 8007fa2:	1b40      	subs	r0, r0, r5
 8007fa4:	6060      	str	r0, [r4, #4]
 8007fa6:	6863      	ldr	r3, [r4, #4]
 8007fa8:	6123      	str	r3, [r4, #16]
 8007faa:	2300      	movs	r3, #0
 8007fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb0:	e7a8      	b.n	8007f04 <_printf_i+0x150>
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	462a      	mov	r2, r5
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	4640      	mov	r0, r8
 8007fba:	47d0      	blx	sl
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d0ab      	beq.n	8007f18 <_printf_i+0x164>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	079b      	lsls	r3, r3, #30
 8007fc4:	d413      	bmi.n	8007fee <_printf_i+0x23a>
 8007fc6:	68e0      	ldr	r0, [r4, #12]
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	4298      	cmp	r0, r3
 8007fcc:	bfb8      	it	lt
 8007fce:	4618      	movlt	r0, r3
 8007fd0:	e7a4      	b.n	8007f1c <_printf_i+0x168>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	47d0      	blx	sl
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d09b      	beq.n	8007f18 <_printf_i+0x164>
 8007fe0:	3501      	adds	r5, #1
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	9903      	ldr	r1, [sp, #12]
 8007fe6:	1a5b      	subs	r3, r3, r1
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	dcf2      	bgt.n	8007fd2 <_printf_i+0x21e>
 8007fec:	e7eb      	b.n	8007fc6 <_printf_i+0x212>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	f104 0619 	add.w	r6, r4, #25
 8007ff4:	e7f5      	b.n	8007fe2 <_printf_i+0x22e>
 8007ff6:	bf00      	nop
 8007ff8:	080085dd 	.word	0x080085dd
 8007ffc:	080085ee 	.word	0x080085ee

08008000 <__sread>:
 8008000:	b510      	push	{r4, lr}
 8008002:	460c      	mov	r4, r1
 8008004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008008:	f000 fa5a 	bl	80084c0 <_read_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	bfab      	itete	ge
 8008010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008012:	89a3      	ldrhlt	r3, [r4, #12]
 8008014:	181b      	addge	r3, r3, r0
 8008016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800801a:	bfac      	ite	ge
 800801c:	6563      	strge	r3, [r4, #84]	; 0x54
 800801e:	81a3      	strhlt	r3, [r4, #12]
 8008020:	bd10      	pop	{r4, pc}

08008022 <__swrite>:
 8008022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008026:	461f      	mov	r7, r3
 8008028:	898b      	ldrh	r3, [r1, #12]
 800802a:	05db      	lsls	r3, r3, #23
 800802c:	4605      	mov	r5, r0
 800802e:	460c      	mov	r4, r1
 8008030:	4616      	mov	r6, r2
 8008032:	d505      	bpl.n	8008040 <__swrite+0x1e>
 8008034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008038:	2302      	movs	r3, #2
 800803a:	2200      	movs	r2, #0
 800803c:	f000 f9c8 	bl	80083d0 <_lseek_r>
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	4632      	mov	r2, r6
 800804e:	463b      	mov	r3, r7
 8008050:	4628      	mov	r0, r5
 8008052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008056:	f000 b869 	b.w	800812c <_write_r>

0800805a <__sseek>:
 800805a:	b510      	push	{r4, lr}
 800805c:	460c      	mov	r4, r1
 800805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008062:	f000 f9b5 	bl	80083d0 <_lseek_r>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	bf15      	itete	ne
 800806c:	6560      	strne	r0, [r4, #84]	; 0x54
 800806e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008076:	81a3      	strheq	r3, [r4, #12]
 8008078:	bf18      	it	ne
 800807a:	81a3      	strhne	r3, [r4, #12]
 800807c:	bd10      	pop	{r4, pc}

0800807e <__sclose>:
 800807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008082:	f000 b8d3 	b.w	800822c <_close_r>
	...

08008088 <__swbuf_r>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	460e      	mov	r6, r1
 800808c:	4614      	mov	r4, r2
 800808e:	4605      	mov	r5, r0
 8008090:	b118      	cbz	r0, 800809a <__swbuf_r+0x12>
 8008092:	6983      	ldr	r3, [r0, #24]
 8008094:	b90b      	cbnz	r3, 800809a <__swbuf_r+0x12>
 8008096:	f7ff fc19 	bl	80078cc <__sinit>
 800809a:	4b21      	ldr	r3, [pc, #132]	; (8008120 <__swbuf_r+0x98>)
 800809c:	429c      	cmp	r4, r3
 800809e:	d12b      	bne.n	80080f8 <__swbuf_r+0x70>
 80080a0:	686c      	ldr	r4, [r5, #4]
 80080a2:	69a3      	ldr	r3, [r4, #24]
 80080a4:	60a3      	str	r3, [r4, #8]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	071a      	lsls	r2, r3, #28
 80080aa:	d52f      	bpl.n	800810c <__swbuf_r+0x84>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	b36b      	cbz	r3, 800810c <__swbuf_r+0x84>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	6820      	ldr	r0, [r4, #0]
 80080b4:	1ac0      	subs	r0, r0, r3
 80080b6:	6963      	ldr	r3, [r4, #20]
 80080b8:	b2f6      	uxtb	r6, r6
 80080ba:	4283      	cmp	r3, r0
 80080bc:	4637      	mov	r7, r6
 80080be:	dc04      	bgt.n	80080ca <__swbuf_r+0x42>
 80080c0:	4621      	mov	r1, r4
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 f948 	bl	8008358 <_fflush_r>
 80080c8:	bb30      	cbnz	r0, 8008118 <__swbuf_r+0x90>
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	60a3      	str	r3, [r4, #8]
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	6022      	str	r2, [r4, #0]
 80080d6:	701e      	strb	r6, [r3, #0]
 80080d8:	6963      	ldr	r3, [r4, #20]
 80080da:	3001      	adds	r0, #1
 80080dc:	4283      	cmp	r3, r0
 80080de:	d004      	beq.n	80080ea <__swbuf_r+0x62>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	07db      	lsls	r3, r3, #31
 80080e4:	d506      	bpl.n	80080f4 <__swbuf_r+0x6c>
 80080e6:	2e0a      	cmp	r6, #10
 80080e8:	d104      	bne.n	80080f4 <__swbuf_r+0x6c>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 f933 	bl	8008358 <_fflush_r>
 80080f2:	b988      	cbnz	r0, 8008118 <__swbuf_r+0x90>
 80080f4:	4638      	mov	r0, r7
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <__swbuf_r+0x9c>)
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d101      	bne.n	8008102 <__swbuf_r+0x7a>
 80080fe:	68ac      	ldr	r4, [r5, #8]
 8008100:	e7cf      	b.n	80080a2 <__swbuf_r+0x1a>
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <__swbuf_r+0xa0>)
 8008104:	429c      	cmp	r4, r3
 8008106:	bf08      	it	eq
 8008108:	68ec      	ldreq	r4, [r5, #12]
 800810a:	e7ca      	b.n	80080a2 <__swbuf_r+0x1a>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f81e 	bl	8008150 <__swsetup_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d0cb      	beq.n	80080b0 <__swbuf_r+0x28>
 8008118:	f04f 37ff 	mov.w	r7, #4294967295
 800811c:	e7ea      	b.n	80080f4 <__swbuf_r+0x6c>
 800811e:	bf00      	nop
 8008120:	0800858c 	.word	0x0800858c
 8008124:	080085ac 	.word	0x080085ac
 8008128:	0800856c 	.word	0x0800856c

0800812c <_write_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_write_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7f9 f91b 	bl	8001376 <_write>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_write_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_write_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20000688 	.word	0x20000688

08008150 <__swsetup_r>:
 8008150:	4b32      	ldr	r3, [pc, #200]	; (800821c <__swsetup_r+0xcc>)
 8008152:	b570      	push	{r4, r5, r6, lr}
 8008154:	681d      	ldr	r5, [r3, #0]
 8008156:	4606      	mov	r6, r0
 8008158:	460c      	mov	r4, r1
 800815a:	b125      	cbz	r5, 8008166 <__swsetup_r+0x16>
 800815c:	69ab      	ldr	r3, [r5, #24]
 800815e:	b913      	cbnz	r3, 8008166 <__swsetup_r+0x16>
 8008160:	4628      	mov	r0, r5
 8008162:	f7ff fbb3 	bl	80078cc <__sinit>
 8008166:	4b2e      	ldr	r3, [pc, #184]	; (8008220 <__swsetup_r+0xd0>)
 8008168:	429c      	cmp	r4, r3
 800816a:	d10f      	bne.n	800818c <__swsetup_r+0x3c>
 800816c:	686c      	ldr	r4, [r5, #4]
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008174:	0719      	lsls	r1, r3, #28
 8008176:	d42c      	bmi.n	80081d2 <__swsetup_r+0x82>
 8008178:	06dd      	lsls	r5, r3, #27
 800817a:	d411      	bmi.n	80081a0 <__swsetup_r+0x50>
 800817c:	2309      	movs	r3, #9
 800817e:	6033      	str	r3, [r6, #0]
 8008180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	f04f 30ff 	mov.w	r0, #4294967295
 800818a:	e03e      	b.n	800820a <__swsetup_r+0xba>
 800818c:	4b25      	ldr	r3, [pc, #148]	; (8008224 <__swsetup_r+0xd4>)
 800818e:	429c      	cmp	r4, r3
 8008190:	d101      	bne.n	8008196 <__swsetup_r+0x46>
 8008192:	68ac      	ldr	r4, [r5, #8]
 8008194:	e7eb      	b.n	800816e <__swsetup_r+0x1e>
 8008196:	4b24      	ldr	r3, [pc, #144]	; (8008228 <__swsetup_r+0xd8>)
 8008198:	429c      	cmp	r4, r3
 800819a:	bf08      	it	eq
 800819c:	68ec      	ldreq	r4, [r5, #12]
 800819e:	e7e6      	b.n	800816e <__swsetup_r+0x1e>
 80081a0:	0758      	lsls	r0, r3, #29
 80081a2:	d512      	bpl.n	80081ca <__swsetup_r+0x7a>
 80081a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a6:	b141      	cbz	r1, 80081ba <__swsetup_r+0x6a>
 80081a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ac:	4299      	cmp	r1, r3
 80081ae:	d002      	beq.n	80081b6 <__swsetup_r+0x66>
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff fa2b 	bl	800760c <_free_r>
 80081b6:	2300      	movs	r3, #0
 80081b8:	6363      	str	r3, [r4, #52]	; 0x34
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	2300      	movs	r3, #0
 80081c4:	6063      	str	r3, [r4, #4]
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f043 0308 	orr.w	r3, r3, #8
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	b94b      	cbnz	r3, 80081ea <__swsetup_r+0x9a>
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e0:	d003      	beq.n	80081ea <__swsetup_r+0x9a>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 f92b 	bl	8008440 <__smakebuf_r>
 80081ea:	89a0      	ldrh	r0, [r4, #12]
 80081ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f0:	f010 0301 	ands.w	r3, r0, #1
 80081f4:	d00a      	beq.n	800820c <__swsetup_r+0xbc>
 80081f6:	2300      	movs	r3, #0
 80081f8:	60a3      	str	r3, [r4, #8]
 80081fa:	6963      	ldr	r3, [r4, #20]
 80081fc:	425b      	negs	r3, r3
 80081fe:	61a3      	str	r3, [r4, #24]
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	b943      	cbnz	r3, 8008216 <__swsetup_r+0xc6>
 8008204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008208:	d1ba      	bne.n	8008180 <__swsetup_r+0x30>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	0781      	lsls	r1, r0, #30
 800820e:	bf58      	it	pl
 8008210:	6963      	ldrpl	r3, [r4, #20]
 8008212:	60a3      	str	r3, [r4, #8]
 8008214:	e7f4      	b.n	8008200 <__swsetup_r+0xb0>
 8008216:	2000      	movs	r0, #0
 8008218:	e7f7      	b.n	800820a <__swsetup_r+0xba>
 800821a:	bf00      	nop
 800821c:	20000010 	.word	0x20000010
 8008220:	0800858c 	.word	0x0800858c
 8008224:	080085ac 	.word	0x080085ac
 8008228:	0800856c 	.word	0x0800856c

0800822c <_close_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d06      	ldr	r5, [pc, #24]	; (8008248 <_close_r+0x1c>)
 8008230:	2300      	movs	r3, #0
 8008232:	4604      	mov	r4, r0
 8008234:	4608      	mov	r0, r1
 8008236:	602b      	str	r3, [r5, #0]
 8008238:	f7f9 f8b9 	bl	80013ae <_close>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_close_r+0x1a>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_close_r+0x1a>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	20000688 	.word	0x20000688

0800824c <__sflush_r>:
 800824c:	898a      	ldrh	r2, [r1, #12]
 800824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	4605      	mov	r5, r0
 8008254:	0710      	lsls	r0, r2, #28
 8008256:	460c      	mov	r4, r1
 8008258:	d458      	bmi.n	800830c <__sflush_r+0xc0>
 800825a:	684b      	ldr	r3, [r1, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dc05      	bgt.n	800826c <__sflush_r+0x20>
 8008260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	dc02      	bgt.n	800826c <__sflush_r+0x20>
 8008266:	2000      	movs	r0, #0
 8008268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800826e:	2e00      	cmp	r6, #0
 8008270:	d0f9      	beq.n	8008266 <__sflush_r+0x1a>
 8008272:	2300      	movs	r3, #0
 8008274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008278:	682f      	ldr	r7, [r5, #0]
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	d032      	beq.n	80082e4 <__sflush_r+0x98>
 800827e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	075a      	lsls	r2, r3, #29
 8008284:	d505      	bpl.n	8008292 <__sflush_r+0x46>
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	1ac0      	subs	r0, r0, r3
 800828a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800828c:	b10b      	cbz	r3, 8008292 <__sflush_r+0x46>
 800828e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008290:	1ac0      	subs	r0, r0, r3
 8008292:	2300      	movs	r3, #0
 8008294:	4602      	mov	r2, r0
 8008296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008298:	6a21      	ldr	r1, [r4, #32]
 800829a:	4628      	mov	r0, r5
 800829c:	47b0      	blx	r6
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	d106      	bne.n	80082b2 <__sflush_r+0x66>
 80082a4:	6829      	ldr	r1, [r5, #0]
 80082a6:	291d      	cmp	r1, #29
 80082a8:	d82c      	bhi.n	8008304 <__sflush_r+0xb8>
 80082aa:	4a2a      	ldr	r2, [pc, #168]	; (8008354 <__sflush_r+0x108>)
 80082ac:	40ca      	lsrs	r2, r1
 80082ae:	07d6      	lsls	r6, r2, #31
 80082b0:	d528      	bpl.n	8008304 <__sflush_r+0xb8>
 80082b2:	2200      	movs	r2, #0
 80082b4:	6062      	str	r2, [r4, #4]
 80082b6:	04d9      	lsls	r1, r3, #19
 80082b8:	6922      	ldr	r2, [r4, #16]
 80082ba:	6022      	str	r2, [r4, #0]
 80082bc:	d504      	bpl.n	80082c8 <__sflush_r+0x7c>
 80082be:	1c42      	adds	r2, r0, #1
 80082c0:	d101      	bne.n	80082c6 <__sflush_r+0x7a>
 80082c2:	682b      	ldr	r3, [r5, #0]
 80082c4:	b903      	cbnz	r3, 80082c8 <__sflush_r+0x7c>
 80082c6:	6560      	str	r0, [r4, #84]	; 0x54
 80082c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ca:	602f      	str	r7, [r5, #0]
 80082cc:	2900      	cmp	r1, #0
 80082ce:	d0ca      	beq.n	8008266 <__sflush_r+0x1a>
 80082d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d4:	4299      	cmp	r1, r3
 80082d6:	d002      	beq.n	80082de <__sflush_r+0x92>
 80082d8:	4628      	mov	r0, r5
 80082da:	f7ff f997 	bl	800760c <_free_r>
 80082de:	2000      	movs	r0, #0
 80082e0:	6360      	str	r0, [r4, #52]	; 0x34
 80082e2:	e7c1      	b.n	8008268 <__sflush_r+0x1c>
 80082e4:	6a21      	ldr	r1, [r4, #32]
 80082e6:	2301      	movs	r3, #1
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b0      	blx	r6
 80082ec:	1c41      	adds	r1, r0, #1
 80082ee:	d1c7      	bne.n	8008280 <__sflush_r+0x34>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0c4      	beq.n	8008280 <__sflush_r+0x34>
 80082f6:	2b1d      	cmp	r3, #29
 80082f8:	d001      	beq.n	80082fe <__sflush_r+0xb2>
 80082fa:	2b16      	cmp	r3, #22
 80082fc:	d101      	bne.n	8008302 <__sflush_r+0xb6>
 80082fe:	602f      	str	r7, [r5, #0]
 8008300:	e7b1      	b.n	8008266 <__sflush_r+0x1a>
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008308:	81a3      	strh	r3, [r4, #12]
 800830a:	e7ad      	b.n	8008268 <__sflush_r+0x1c>
 800830c:	690f      	ldr	r7, [r1, #16]
 800830e:	2f00      	cmp	r7, #0
 8008310:	d0a9      	beq.n	8008266 <__sflush_r+0x1a>
 8008312:	0793      	lsls	r3, r2, #30
 8008314:	680e      	ldr	r6, [r1, #0]
 8008316:	bf08      	it	eq
 8008318:	694b      	ldreq	r3, [r1, #20]
 800831a:	600f      	str	r7, [r1, #0]
 800831c:	bf18      	it	ne
 800831e:	2300      	movne	r3, #0
 8008320:	eba6 0807 	sub.w	r8, r6, r7
 8008324:	608b      	str	r3, [r1, #8]
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	dd9c      	ble.n	8008266 <__sflush_r+0x1a>
 800832c:	6a21      	ldr	r1, [r4, #32]
 800832e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008330:	4643      	mov	r3, r8
 8008332:	463a      	mov	r2, r7
 8008334:	4628      	mov	r0, r5
 8008336:	47b0      	blx	r6
 8008338:	2800      	cmp	r0, #0
 800833a:	dc06      	bgt.n	800834a <__sflush_r+0xfe>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	e78e      	b.n	8008268 <__sflush_r+0x1c>
 800834a:	4407      	add	r7, r0
 800834c:	eba8 0800 	sub.w	r8, r8, r0
 8008350:	e7e9      	b.n	8008326 <__sflush_r+0xda>
 8008352:	bf00      	nop
 8008354:	20400001 	.word	0x20400001

08008358 <_fflush_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	690b      	ldr	r3, [r1, #16]
 800835c:	4605      	mov	r5, r0
 800835e:	460c      	mov	r4, r1
 8008360:	b913      	cbnz	r3, 8008368 <_fflush_r+0x10>
 8008362:	2500      	movs	r5, #0
 8008364:	4628      	mov	r0, r5
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	b118      	cbz	r0, 8008372 <_fflush_r+0x1a>
 800836a:	6983      	ldr	r3, [r0, #24]
 800836c:	b90b      	cbnz	r3, 8008372 <_fflush_r+0x1a>
 800836e:	f7ff faad 	bl	80078cc <__sinit>
 8008372:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <_fflush_r+0x6c>)
 8008374:	429c      	cmp	r4, r3
 8008376:	d11b      	bne.n	80083b0 <_fflush_r+0x58>
 8008378:	686c      	ldr	r4, [r5, #4]
 800837a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0ef      	beq.n	8008362 <_fflush_r+0xa>
 8008382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008384:	07d0      	lsls	r0, r2, #31
 8008386:	d404      	bmi.n	8008392 <_fflush_r+0x3a>
 8008388:	0599      	lsls	r1, r3, #22
 800838a:	d402      	bmi.n	8008392 <_fflush_r+0x3a>
 800838c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838e:	f7ff fb3b 	bl	8007a08 <__retarget_lock_acquire_recursive>
 8008392:	4628      	mov	r0, r5
 8008394:	4621      	mov	r1, r4
 8008396:	f7ff ff59 	bl	800824c <__sflush_r>
 800839a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800839c:	07da      	lsls	r2, r3, #31
 800839e:	4605      	mov	r5, r0
 80083a0:	d4e0      	bmi.n	8008364 <_fflush_r+0xc>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	059b      	lsls	r3, r3, #22
 80083a6:	d4dd      	bmi.n	8008364 <_fflush_r+0xc>
 80083a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083aa:	f7ff fb2e 	bl	8007a0a <__retarget_lock_release_recursive>
 80083ae:	e7d9      	b.n	8008364 <_fflush_r+0xc>
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <_fflush_r+0x70>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d101      	bne.n	80083ba <_fflush_r+0x62>
 80083b6:	68ac      	ldr	r4, [r5, #8]
 80083b8:	e7df      	b.n	800837a <_fflush_r+0x22>
 80083ba:	4b04      	ldr	r3, [pc, #16]	; (80083cc <_fflush_r+0x74>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	bf08      	it	eq
 80083c0:	68ec      	ldreq	r4, [r5, #12]
 80083c2:	e7da      	b.n	800837a <_fflush_r+0x22>
 80083c4:	0800858c 	.word	0x0800858c
 80083c8:	080085ac 	.word	0x080085ac
 80083cc:	0800856c 	.word	0x0800856c

080083d0 <_lseek_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d07      	ldr	r5, [pc, #28]	; (80083f0 <_lseek_r+0x20>)
 80083d4:	4604      	mov	r4, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	602a      	str	r2, [r5, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f7f9 f80c 	bl	80013fc <_lseek>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_lseek_r+0x1e>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_lseek_r+0x1e>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20000688 	.word	0x20000688

080083f4 <__swhatbuf_r>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	460e      	mov	r6, r1
 80083f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fc:	2900      	cmp	r1, #0
 80083fe:	b096      	sub	sp, #88	; 0x58
 8008400:	4614      	mov	r4, r2
 8008402:	461d      	mov	r5, r3
 8008404:	da08      	bge.n	8008418 <__swhatbuf_r+0x24>
 8008406:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	602a      	str	r2, [r5, #0]
 800840e:	061a      	lsls	r2, r3, #24
 8008410:	d410      	bmi.n	8008434 <__swhatbuf_r+0x40>
 8008412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008416:	e00e      	b.n	8008436 <__swhatbuf_r+0x42>
 8008418:	466a      	mov	r2, sp
 800841a:	f000 f863 	bl	80084e4 <_fstat_r>
 800841e:	2800      	cmp	r0, #0
 8008420:	dbf1      	blt.n	8008406 <__swhatbuf_r+0x12>
 8008422:	9a01      	ldr	r2, [sp, #4]
 8008424:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008428:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800842c:	425a      	negs	r2, r3
 800842e:	415a      	adcs	r2, r3
 8008430:	602a      	str	r2, [r5, #0]
 8008432:	e7ee      	b.n	8008412 <__swhatbuf_r+0x1e>
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	2000      	movs	r0, #0
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	b016      	add	sp, #88	; 0x58
 800843c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008440 <__smakebuf_r>:
 8008440:	898b      	ldrh	r3, [r1, #12]
 8008442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008444:	079d      	lsls	r5, r3, #30
 8008446:	4606      	mov	r6, r0
 8008448:	460c      	mov	r4, r1
 800844a:	d507      	bpl.n	800845c <__smakebuf_r+0x1c>
 800844c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	2301      	movs	r3, #1
 8008456:	6163      	str	r3, [r4, #20]
 8008458:	b002      	add	sp, #8
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	ab01      	add	r3, sp, #4
 800845e:	466a      	mov	r2, sp
 8008460:	f7ff ffc8 	bl	80083f4 <__swhatbuf_r>
 8008464:	9900      	ldr	r1, [sp, #0]
 8008466:	4605      	mov	r5, r0
 8008468:	4630      	mov	r0, r6
 800846a:	f7ff f93b 	bl	80076e4 <_malloc_r>
 800846e:	b948      	cbnz	r0, 8008484 <__smakebuf_r+0x44>
 8008470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008474:	059a      	lsls	r2, r3, #22
 8008476:	d4ef      	bmi.n	8008458 <__smakebuf_r+0x18>
 8008478:	f023 0303 	bic.w	r3, r3, #3
 800847c:	f043 0302 	orr.w	r3, r3, #2
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	e7e3      	b.n	800844c <__smakebuf_r+0xc>
 8008484:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <__smakebuf_r+0x7c>)
 8008486:	62b3      	str	r3, [r6, #40]	; 0x28
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	6020      	str	r0, [r4, #0]
 800848c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008490:	81a3      	strh	r3, [r4, #12]
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	6163      	str	r3, [r4, #20]
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	6120      	str	r0, [r4, #16]
 800849a:	b15b      	cbz	r3, 80084b4 <__smakebuf_r+0x74>
 800849c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f831 	bl	8008508 <_isatty_r>
 80084a6:	b128      	cbz	r0, 80084b4 <__smakebuf_r+0x74>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	f043 0301 	orr.w	r3, r3, #1
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	89a0      	ldrh	r0, [r4, #12]
 80084b6:	4305      	orrs	r5, r0
 80084b8:	81a5      	strh	r5, [r4, #12]
 80084ba:	e7cd      	b.n	8008458 <__smakebuf_r+0x18>
 80084bc:	08007865 	.word	0x08007865

080084c0 <_read_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d07      	ldr	r5, [pc, #28]	; (80084e0 <_read_r+0x20>)
 80084c4:	4604      	mov	r4, r0
 80084c6:	4608      	mov	r0, r1
 80084c8:	4611      	mov	r1, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7f8 ff34 	bl	800133c <_read>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_read_r+0x1e>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_read_r+0x1e>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	20000688 	.word	0x20000688

080084e4 <_fstat_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d07      	ldr	r5, [pc, #28]	; (8008504 <_fstat_r+0x20>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f7f8 ff68 	bl	80013c6 <_fstat>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d102      	bne.n	8008500 <_fstat_r+0x1c>
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	b103      	cbz	r3, 8008500 <_fstat_r+0x1c>
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	20000688 	.word	0x20000688

08008508 <_isatty_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d06      	ldr	r5, [pc, #24]	; (8008524 <_isatty_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7f8 ff67 	bl	80013e6 <_isatty>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_isatty_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_isatty_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20000688 	.word	0x20000688

08008528 <_init>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	bf00      	nop
 800852c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852e:	bc08      	pop	{r3}
 8008530:	469e      	mov	lr, r3
 8008532:	4770      	bx	lr

08008534 <_fini>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr
